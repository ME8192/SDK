enum AkAcousticPortalState {
  Closed                    = 0,
  Open                      = 1,
  AkAcousticPortalState_MAX = 2
};

enum AkChannelConfiguration {
  Ak_Parent               = 0,
  Ak_1                    = 1,
  Ak_2                    = 2,
  Ak_3                    = 3,
  Ak_4                    = 4,
  Ak_5                    = 5,
  Ak_7                    = 6,
  Ak_5_1                  = 7,
  Ak_7_1                  = 8,
  Ak_7_1                  = 9,
  Ak_Auro_9               = 10,
  Ak_Auro_10              = 11,
  Ak_Auro_11              = 12,
  Ak_Auro_13              = 13,
  Ak_Ambisonics_1st_order = 14,
  Ak_Ambisonics_2nd_order = 15,
  Ak_Ambisonics_3rd_order = 16,
  Ak_MAX                  = 17
};

enum AnimPhysAngularConstraintType {
  Angular                           = 0,
  Cone                              = 1,
  AnimPhysAngularConstraintType_MAX = 2
};

enum AnimPhysCollisionType {
  CoM                       = 0,
  CustomSphere              = 1,
  InnerSphere               = 2,
  OuterSphere               = 3,
  AnimPhysCollisionType_MAX = 4
};

enum AnimPhysLinearConstraintType {
  Free                              = 0,
  Limited                           = 1,
  AnimPhysLinearConstraintType_MAX  = 2
};

enum AnimPhysSimSpaceType {
  Component                 = 0,
  Actor                     = 1,
  World                     = 2,
  RootRelative              = 3,
  BoneRelative              = 4,
  AnimPhysSimSpaceType_MAX  = 5
};

enum AnimPhysTwistAxis {
  AxisX                 = 0,
  AxisY                 = 1,
  AxisZ                 = 2,
  AnimPhysTwistAxis_MAX = 3
};

enum EAIEquipSpawnItemType {
  Shoot_Weap                = 0,
  Backpack                  = 1,
  other                     = 2,
  EAIEquipSpawnItemType_MAX = 3
};

enum EAIParamType {
  Float = 0,
  Int   = 1,
  Bool  = 2,
  MAX   = 3
};

enum EAISenseNotifyType {
  OnEveryPerception       = 0,
  OnPerceptionChange      = 1,
  EAISenseNotifyType_MAX  = 2
};

enum EActorSequenceObjectReferenceType {
  ContextActor                          = 0,
  ExternalActor                         = 1,
  Component                             = 2,
  EActorSequenceObjectReferenceType_MAX = 3
};

enum EAirAbsorptionMethod {
  Linear                    = 0,
  CustomCurve               = 1,
  EAirAbsorptionMethod_MAX  = 2
};

enum EAlphaBlendOption {
  Linear                = 0,
  Cubic                 = 1,
  HermiteCubic          = 2,
  Sinusoidal            = 3,
  QuadraticInOut        = 4,
  CubicInOut            = 5,
  QuarticInOut          = 6,
  QuinticInOut          = 7,
  CircularIn            = 8,
  CircularOut           = 9,
  CircularInOut         = 10,
  ExpIn                 = 11,
  ExpOut                = 12,
  ExpInOut              = 13,
  Custom                = 14,
  EAlphaBlendOption_MAX = 15
};

enum EAnimInterpolationType {
  Linear                      = 0,
  Step                        = 1,
  EAnimInterpolationType_MAX  = 2
};

enum EAttachmentRule {
  KeepRelative        = 0,
  KeepWorld           = 1,
  SnapToTarget        = 2,
  EAttachmentRule_MAX = 3
};

enum EAttenuationDistanceModel {
  Linear                        = 0,
  Logarithmic                   = 1,
  Inverse                       = 2,
  LogReverse                    = 3,
  NaturalSound                  = 4,
  Custom                        = 5,
  EAttenuationDistanceModel_MAX = 6
};

enum EAttrOperator {
  Plus              = 0,
  Multiply          = 1,
  Set               = 2,
  EAttrOperator_MAX = 3
};

enum EAttrVariableType {
  Int                   = 0,
  Float                 = 1,
  EAttrVariableType_MAX = 2
};

enum EAutoPossessAI {
  Disabled                = 0,
  PlacedInWorld           = 1,
  Spawned                 = 2,
  PlacedInWorldOrSpawned  = 3,
  EAutoPossessAI_MAX      = 4
};

enum EAvatarDamagePosition {
  Non                       = 0,
  BigHead                   = 1,
  BigLimbs                  = 2,
  BigBody                   = 3,
  Wheel0                    = 4,
  Wheel1                    = 5,
  Wheel2                    = 6,
  Wheel3                    = 7,
  EAvatarDamagePosition_MAX = 8
};

enum EAvatarSlotType {
  EAvatarSlotType_HeadEquipemtSlot      = 0,
  EAvatarSlotType_HairEquipemtSlot      = 1,
  EAvatarSlotType_HatEquipemtSlot       = 2,
  EAvatarSlotType_FaceEquipemtSlot      = 3,
  EAvatarSlotType_ClothesEquipemtSlot   = 4,
  EAvatarSlotType_PantsEquipemtSlot     = 5,
  EAvatarSlotType_ShoesEquipemtSlot     = 6,
  EAvatarSlotType_BackpackEquipemtSlot  = 7,
  EAvatarSlotType_HelmetEquipemtSlot    = 8,
  EAvatarSlotType_ArmorEquipemtSlot     = 9,
  EAvatarSlotType_ParachuteEquipemtSlot = 10,
  EAvatarSlotType_MAX                   = 11
};

enum EBattleItemDisuseReason {
  Manually                    = 0,
  Associated                  = 1,
  Excluded                    = 2,
  Swapped                     = 3,
  Dropped                     = 4,
  Force                       = 5,
  EBattleItemDisuseReason_MAX = 6
};

enum EBattleItemDropReason {
  Manually                  = 0,
  Associated                = 1,
  AutoEquipAndDrop          = 2,
  AutoEquipFailed           = 3,
  CapacityExceeded          = 4,
  UsedUp                    = 5,
  Force                     = 6,
  EBattleItemDropReason_MAX = 7
};

enum EBattleItemOperationFailedReason {
  PickupFailed_Default                  = 0,
  PickupFailed_CapacityExceeded         = 1,
  DropFailed_Default                    = 16,
  UseFailed_Default                     = 32,
  UseFailed_CapacityExceeded            = 33,
  DisuseFailed_Default                  = 48,
  DisuseFailed_CapacityExceeded         = 49,
  EBattleItemOperationFailedReason_MAX  = 50
};

enum EBattleItemOperationType {
  Pickup                        = 0,
  Drop                          = 1,
  Use                           = 2,
  Disuse                        = 3,
  EBattleItemOperationType_MAX  = 4
};

enum EBattleItemPickupReason {
  Manually                    = 0,
  Associated                  = 1,
  AutoPickup                  = 2,
  Initial                     = 3,
  EBattleItemPickupReason_MAX = 4
};

enum EBattleItemUseReason {
  Manually                  = 0,
  Associated                = 1,
  AutoEquipAndDrop          = 2,
  Swapped                   = 3,
  Initial                   = 4,
  EBattleItemUseReason_MAX  = 5
};

enum EBattleTextType {
  EBattleTextType_Fist              = 0,
  EBattleTextType_BurningBomb       = 1,
  EBattleTextType_Use               = 2,
  EBattleTextType_ShotAndExplode    = 3,
  EBattleTextType_Vehicle           = 4,
  EBattleTextType_You               = 5,
  EBattleTextType_YourTeammate      = 6,
  EBattleTextType_By                = 7,
  EBattleTextType_HeadShot          = 8,
  EBattleTextType_PutDown           = 9,
  EBattleTextType_Kill              = 10,
  EBattleTextType_Killed            = 11,
  EBattleTextType_Le                = 12,
  EBattleTextType_Because           = 13,
  EBattleTextType_CriticalWounded   = 14,
  EBattleTextType_HighFallingDown   = 15,
  EBattleTextType_FallToGround      = 16,
  EBattleTextType_InPosionArea      = 17,
  EBattleTextType_TooMuchTime       = 18,
  EBattleTextType_UnderWeater       = 19,
  EBattleTextType_Finally           = 20,
  EBattleTextType_AirAttackHit      = 21,
  EBattleTextType_AccidentalDamage  = 22,
  EBattleTextType_Myself            = 23,
  EBattleTextType_Explosion         = 24,
  EBattleTextType_MAX               = 25
};

enum EBeaconConnectionState {
  Invalid                     = 0,
  Closed                      = 1,
  Pending                     = 2,
  Open                        = 3,
  EBeaconConnectionState_MAX  = 4
};

enum EBindingKind {
  Function          = 0,
  Property          = 1,
  EBindingKind_MAX  = 2
};

enum ECameraFocusMethod {
  None                    = 0,
  Manual                  = 1,
  Tracking                = 2,
  ECameraFocusMethod_MAX  = 3
};

enum ECharacterGender {
  Male                  = 0,
  Female                = 1,
  ECharacterGender_MAX  = 2
};

enum EChartAggregationMode {
  TextureSize               = 0,
  SurfaceArea               = 1,
  PixelDensity              = 2,
  UVSize                    = 3,
  EChartAggregationMode_MAX = 4
};

enum ECheckBoxState {
  Unchecked           = 0,
  Checked             = 1,
  Undetermined        = 2,
  ECheckBoxState_MAX  = 3
};

enum EClientRequestType {
  NonePending                 = 0,
  ExistingSessionReservation  = 1,
  ReservationUpdate           = 2,
  EmptyServerReservation      = 3,
  Reconnect                   = 4,
  Abandon                     = 5,
  EClientRequestType_MAX      = 6
};

enum EClothingWindMethod {
  Legacy                  = 0,
  Accurate                = 1,
  EClothingWindMethod_MAX = 2
};

enum EComponentCreationMethod {
  Native                        = 0,
  SimpleConstructionScript      = 1,
  UserConstructionScript        = 2,
  Instance                      = 3,
  EComponentCreationMethod_MAX  = 4
};

enum EConsumeMouseWheel {
  WhenScrollingPossible   = 0,
  Always                  = 1,
  Never                   = 2,
  EConsumeMouseWheel_MAX  = 3
};

enum EContentType {
  kContentTypeText  = 0,
  kContentTypeImage = 1,
  kContentTypeWeb   = 2,
  EContentType_MAX  = 3
};

enum EControllerHand {
  Left                = 0,
  Right               = 1,
  AnyHand             = 2,
  Pad                 = 3,
  ExternalCamera      = 4,
  Gun                 = 5,
  Special             = 6,
  Special             = 7,
  Special             = 8,
  Special             = 9,
  Special             = 10,
  Special             = 11,
  Special             = 12,
  Special             = 13,
  Special             = 14,
  Special             = 15,
  Special             = 16,
  EControllerHand_MAX = 17
};

enum ECopyType {
  MemCopy         = 0,
  BoolProperty    = 1,
  StructProperty  = 2,
  ObjectProperty  = 3,
  ECopyType_MAX   = 4
};

enum EDescendantScrollDestination {
  IntoView                          = 0,
  TopOrLeft                         = 1,
  Center                            = 2,
  EDescendantScrollDestination_MAX  = 3
};

enum EDetachmentRule {
  KeepRelative        = 0,
  KeepWorld           = 1,
  EDetachmentRule_MAX = 2
};

enum EDragPivot {
  MouseDown       = 0,
  TopLeft         = 1,
  TopCenter       = 2,
  TopRight        = 3,
  CenterLeft      = 4,
  CenterCenter    = 5,
  CenterRight     = 6,
  BottomLeft      = 7,
  BottomCenter    = 8,
  BottomRight     = 9,
  EDragPivot_MAX  = 10
};

enum EDynamicActorScene {
  Default                 = 0,
  UseSyncScene            = 1,
  UseAsyncScene           = 2,
  EDynamicActorScene_MAX  = 3
};

enum EEQSNormalizationType {
  Absolute                  = 0,
  RelativeToScores          = 1,
  EEQSNormalizationType_MAX = 2
};

enum EEnvQueryHightlightMode {
  All                         = 0,
  Best5Pct                    = 1,
  Best25Pct                   = 2,
  EEnvQueryHightlightMode_MAX = 3
};

enum EEnvTestDot {
  Dot3D           = 0,
  Dot2D           = 1,
  EEnvTestDot_MAX = 2
};

enum EEvaluationMethod {
  Static                = 0,
  Swept                 = 1,
  EEvaluationMethod_MAX = 2
};

enum EFireEventsAtPosition {
  AtStartOfEvaluation       = 0,
  AtEndOfEvaluation         = 1,
  AfterSpawn                = 2,
  EFireEventsAtPosition_MAX = 3
};

enum EFoliageScaling {
  Uniform             = 0,
  Free                = 1,
  LockXY              = 2,
  LockXZ              = 3,
  LockYZ              = 4,
  EFoliageScaling_MAX = 5
};

enum EFontCacheType {
  Offline             = 0,
  Runtime             = 1,
  EFontCacheType_MAX  = 2
};

enum EFontHinting {
  Default           = 0,
  Auto              = 1,
  AutoLight         = 2,
  Monochrome        = 3,
  None              = 4,
  EFontHinting_MAX  = 5
};

enum EFontLayoutMethod {
  Metrics               = 0,
  BoundingBox           = 1,
  EFontLayoutMethod_MAX = 2
};

enum EFontLoadingPolicy {
  LazyLoad                = 0,
  Stream                  = 1,
  Inline                  = 2,
  EFontLoadingPolicy_MAX  = 3
};

enum EGameModeType {
  EGameModeSingle   = 0,
  EGameModeDouble   = 1,
  EGameModeFour     = 2,
  EGameModeType_MAX = 3
};

enum EGameplayContainerMatchType {
  Any                             = 0,
  All                             = 1,
  EGameplayContainerMatchType_MAX = 2
};

enum EGameplayTagSourceType {
  Native                      = 0,
  DefaultTagList              = 1,
  TagList                     = 2,
  DataTable                   = 3,
  Invalid                     = 4,
  EGameplayTagSourceType_MAX  = 5
};

enum EGameplayTaskRunResult {
  Error                       = 0,
  Failed                      = 1,
  Success_Paused              = 2,
  Success_Active              = 3,
  Success_Finished            = 4,
  EGameplayTaskRunResult_MAX  = 5
};

enum EGrassScaling {
  Uniform           = 0,
  Free              = 1,
  LockXY            = 2,
  EGrassScaling_MAX = 3
};

enum EIMSDKContentType {
  kContentTypeText      = 1,
  kContentTypeImage     = 2,
  kContentTypeWeb       = 3,
  EIMSDKContentType_MAX = 4
};

enum EIMSDKNoticeType {
  kNoticeTypeAlert      = 0,
  kNoticeTypeScroll     = 1,
  kNoticeTypeAll        = 2,
  EIMSDKNoticeType_MAX  = 3
};

enum EIMSDKPlatformType {
  kIMSDKPlatformTypeUnknow  = 0,
  kIMSDKPlatformTypeIOS     = 1,
  kIMSDKPlatformTypeAndroid = 2,
  EIMSDKPlatformType_MAX    = 3
};

enum EIMSDKScreenDir {
  kScreenDirSensor    = 1,
  kScreenDirPortrait  = 2,
  kScreenDirLandscape = 3,
  EIMSDKScreenDir_MAX = 4
};

enum EInterpToBehaviourType {
  OneShot                     = 0,
  OneShot_Reverse             = 1,
  Loop_Reset                  = 2,
  PingPong                    = 3,
  EInterpToBehaviourType_MAX  = 4
};

enum ELevelVisibility {
  Visible               = 0,
  Hidden                = 1,
  ELevelVisibility_MAX  = 2
};

enum EMaterialProxySmaplingQuality {
  Poor                              = 0,
  Low                               = 1,
  Medium                            = 2,
  High                              = 3,
  EMaterialProxySmaplingQuality_MAX = 4
};

enum EMediaPlayerTrack {
  Audio                 = 0,
  Caption               = 1,
  Metadata              = 2,
  Script                = 3,
  Subtitle              = 4,
  Text                  = 5,
  Video                 = 6,
  EMediaPlayerTrack_MAX = 7
};

enum EMediaSoundChannels {
  Mono                    = 0,
  Stereo                  = 1,
  Surround                = 2,
  EMediaSoundChannels_MAX = 3
};

enum EMeshType {
  Skeletal            = 0,
  Static              = 1,
  SkeletalWithSocket  = 2,
  EMeshType_MAX       = 3
};

enum EMobileCSMQuality {
  NoFiltering           = 0,
  PCF_1x1               = 1,
  PCF_2x2               = 2,
  EMobileCSMQuality_MAX = 3
};

enum EModifyBlackboardDataValueType {
  Int                                 = 0,
  Float                               = 1,
  Bool                                = 2,
  String                              = 3,
  Object                              = 4,
  Vector3                             = 5,
  EModifyBlackboardDataValueType_MAX  = 6
};

enum EMontagePlayReturnType {
  MontageLength               = 0,
  Duration                    = 1,
  EMontagePlayReturnType_MAX  = 2
};

enum EMouseCaptureMode {
  NoCapture                                     = 0,
  CapturePermanently                            = 1,
  CapturePermanently_IncludingInitialMouseDown  = 2,
  CaptureDuringMouseDown                        = 3,
  CaptureDuringRightMouseDown                   = 4,
  EMouseCaptureMode_MAX                         = 5
};

enum EMouseLockMode {
  DoNotLock           = 0,
  LockOnCapture       = 1,
  LockAlways          = 2,
  EMouseLockMode_MAX  = 3
};

enum EMovieSceneBlendType {
  Absolute                  = 1,
  Additive                  = 2,
  Relative                  = 4,
  EMovieSceneBlendType_MAX  = 5
};

enum EMovieSceneBuiltInEasing {
  Linear                        = 0,
  SinIn                         = 1,
  SinOut                        = 2,
  SinInOut                      = 3,
  QuadIn                        = 4,
  QuadOut                       = 5,
  QuadInOut                     = 6,
  CubicIn                       = 7,
  CubicOut                      = 8,
  CubicInOut                    = 9,
  QuartIn                       = 10,
  QuartOut                      = 11,
  QuartInOut                    = 12,
  QuintIn                       = 13,
  QuintOut                      = 14,
  QuintInOut                    = 15,
  ExpoIn                        = 16,
  ExpoOut                       = 17,
  ExpoInOut                     = 18,
  CircIn                        = 19,
  CircOut                       = 20,
  CircInOut                     = 21,
  EMovieSceneBuiltInEasing_MAX  = 22
};

enum EMovieSceneCompletionMode {
  KeepState                     = 0,
  RestoreState                  = 1,
  EMovieSceneCompletionMode_MAX = 2
};

enum EMovieSceneObjectBindingSpace {
  Local                             = 0,
  Root                              = 1,
  EMovieSceneObjectBindingSpace_MAX = 2
};

enum ENavDataGatheringMode {
  Default                   = 0,
  Instant                   = 1,
  Lazy                      = 2,
  ENavDataGatheringMode_MAX = 3
};

enum ENavDataGatheringModeConfig {
  Invalid                         = 0,
  Instant                         = 1,
  Lazy                            = 2,
  ENavDataGatheringModeConfig_MAX = 3
};

enum ENetworkSmoothingMode {
  Disabled                  = 0,
  Linear                    = 1,
  Exponential               = 2,
  Replay                    = 3,
  ENetworkSmoothingMode_MAX = 4
};

enum ENodeEnabledState {
  Enabled               = 0,
  Disabled              = 1,
  DevelopmentOnly       = 2,
  ENodeEnabledState_MAX = 3
};

enum ENoticeType {
  kNoticeTypeAlert  = 0,
  kNoticeTypeScroll = 1,
  kNoticeTypeAll    = 2,
  ENoticeType_MAX   = 3
};

enum EOpticalSightType {
  NoneSight             = 0,
  UpperLarge            = 1,
  UpperSmall            = 2,
  EOpticalSightType_MAX = 3
};

enum EParticleSignificanceLevel {
  Low                             = 0,
  Medium                          = 1,
  High                            = 2,
  Critical                        = 3,
  Num                             = 4,
  EParticleSignificanceLevel_MAX  = 5
};

enum EParticleSystemInsignificanceReaction {
  Auto                                      = 0,
  Complete                                  = 1,
  DisableTick                               = 2,
  DisableTickAndKill                        = 3,
  Num                                       = 4,
  EParticleSystemInsignificanceReaction_MAX = 5
};

enum EParticleUVFlipMode {
  None                    = 0,
  FlipUV                  = 1,
  FlipUOnly               = 2,
  FlipVOnly               = 3,
  RandomFlipUV            = 4,
  RandomFlipUOnly         = 5,
  RandomFlipVOnly         = 6,
  RandomFlipUVIndependent = 7,
  EParticleUVFlipMode_MAX = 8
};

enum EPawnState {
  Move            = 0,
  Sprint          = 1,
  ProneMove       = 2,
  Stand           = 3,
  Crouch          = 4,
  Prone           = 5,
  Jump            = 6,
  GunFire         = 7,
  GunReload       = 8,
  GunADS          = 9,
  Picth           = 10,
  SwitchWeapon    = 11,
  Pick            = 12,
  MeleeAttack     = 13,
  HoldGrenade     = 14,
  Save            = 15,
  UseConsumables  = 16,
  Dying           = 17,
  Dead            = 18,
  DriveVehicle    = 19,
  InVehicle       = 20,
  LeanOutVehicle  = 21,
  Swim            = 22,
  InParachute     = 23,
  Vault           = 24,
  InPlane         = 25,
  __MAX           = 26,
  EPawnState_MAX  = 27
};

enum EPinContainerType {
  None                  = 0,
  Array                 = 1,
  Set                   = 2,
  Map                   = 3,
  EPinContainerType_MAX = 4
};

enum EPlaneConstraintAxisSetting {
  Custom                          = 0,
  X                               = 1,
  Y                               = 2,
  Z                               = 3,
  UseGlobalPhysicsSetting         = 4,
  EPlaneConstraintAxisSetting_MAX = 5
};

enum EPointOnCircleSpacingMethod {
  BySpaceBetween                  = 0,
  ByNumberOfPoints                = 1,
  EPointOnCircleSpacingMethod_MAX = 2
};

enum EPostCopyOperation {
  None                    = 0,
  LogicalNegateBool       = 1,
  EPostCopyOperation_MAX  = 2
};

enum EPrimaryAssetCookRule {
  Unknown                   = 0,
  NeverCook                 = 1,
  DevelopmentCook           = 2,
  AlwaysCook                = 3,
  EPrimaryAssetCookRule_MAX = 4
};

enum EReflectionSourceType {
  CapturedScene             = 0,
  SpecifiedCubemap          = 1,
  EReflectionSourceType_MAX = 2
};

enum ERenderFocusRule {
  Always                = 0,
  NonPointer            = 1,
  NavigationOnly        = 2,
  Never                 = 3,
  ERenderFocusRule_MAX  = 4
};

enum ERendererStencilMask {
  ERSM_Default  = 0,
  ERSM          = 1,
  ERSM          = 2,
  ERSM          = 3,
  ERSM          = 4,
  ERSM          = 5,
  ERSM          = 6,
  ERSM          = 7,
  ERSM          = 8,
  ERSM          = 9,
  ERSM_MAX      = 10
};

enum EReverbSendMethod {
  Linear                = 0,
  CustomCurve           = 1,
  Manual                = 2,
  EReverbSendMethod_MAX = 3
};

enum ERotatorQuantization {
  ByteComponents            = 0,
  ShortComponents           = 1,
  ERotatorQuantization_MAX  = 2
};

enum ERuntimeGenerationType {
  Static                      = 0,
  DynamicModifiersOnly        = 1,
  Dynamic                     = 2,
  LegacyGeneration            = 3,
  ERuntimeGenerationType_MAX  = 4
};

enum ERuntimeMeshCollisionCookingMode {
  CollisionPerformance                  = 0,
  CookingPerformance                    = 1,
  ERuntimeMeshCollisionCookingMode_MAX  = 2
};

enum ESTExtraVehicleHealthState {
  VHS_Good      = 0,
  VHS_Smoking   = 1,
  VHS_Burning   = 2,
  VHS_Destroyed = 3,
  VHS_MAX       = 4
};

enum ESTExtraVehicleSeatType {
  ESeatType_DriversSeat     = 0,
  ESeatType_PassengersSeat  = 1,
  ESeatType_MAX             = 2
};

enum ESTExtraVehicleType {
  VT_Unknown            = 0,
  VT_Motorbike          = 1,
  VT_Motorbike          = 2,
  VT_Motorbike_SideCart = 3,
  VT_Motorbike_SideCart = 4,
  VT_Dacia              = 5,
  VT_Dacia              = 6,
  VT_Dacia              = 7,
  VT_Dacia              = 8,
  VT_UAZ                = 9,
  VT_UAZ                = 10,
  VT_UAZ                = 11,
  VT_Buggy              = 12,
  VT_Buggy              = 13,
  VT_Buggy              = 14,
  VT_PG117              = 15,
  VT_MAX                = 16
};

enum ESTExtraVehicleUserState {
  EVUS_OutOfVehicle = 0,
  EVUS_AsDriver     = 1,
  EVUS_ASPassenger  = 2,
  EVUS_MAX          = 3
};

enum ESceneCapturePrimitiveRenderMode {
  PRM_LegacySceneCapture    = 0,
  PRM_RenderScenePrimitives = 1,
  PRM_UseShowOnlyList       = 2,
  PRM_MAX                   = 3
};

enum EScreenDir {
  kScreenDirSensor    = 0,
  kScreenDirPortrait  = 1,
  kScreenDirLandscape = 2,
  EScreenDir_MAX      = 3
};

enum ESkeletalMeshLODType {
  Reduction                 = 0,
  Proxy                     = 1,
  ESkeletalMeshLODType_MAX  = 2
};

enum ESlateGesture {
  None              = 0,
  Scroll            = 1,
  Magnify           = 2,
  Swipe             = 3,
  Rotate            = 4,
  LongPress         = 5,
  ESlateGesture_MAX = 6
};

enum ESlateVisibility {
  Visible               = 0,
  Collapsed             = 1,
  Hidden                = 2,
  HitTestInvisible      = 3,
  SelfHitTestInvisible  = 4,
  ESlateVisibility_MAX  = 5
};

enum ESleepFamily {
  Normal            = 0,
  Sensitive         = 1,
  Custom            = 2,
  ESleepFamily_MAX  = 3
};

enum ESourceBusChannels {
  Mono                    = 0,
  Stereo                  = 1,
  ESourceBusChannels_MAX  = 2
};

enum ESpawnActorCollisionHandlingMethod {
  Undefined                               = 0,
  AlwaysSpawn                             = 1,
  AdjustIfPossibleButAlwaysSpawn          = 2,
  AdjustIfPossibleButDontSpawnIfColliding = 3,
  DontSpawnIfColliding                    = 4,
  ESpawnActorCollisionHandlingMethod_MAX  = 5
};

enum ESpawnOwnership {
  InnerSequence       = 0,
  MasterSequence      = 1,
  External            = 2,
  ESpawnOwnership_MAX = 3
};

enum ESpectatorScreenMode {
  Disabled                  = 0,
  SingleEyeLetterboxed      = 1,
  Undistorted               = 2,
  Distorted                 = 3,
  SingleEye                 = 4,
  SingleEyeCroppedToFill    = 5,
  Texture                   = 6,
  TexturePlusEye            = 7,
  ESpectatorScreenMode_MAX  = 8
};

enum ESphericalLimitType {
  Inner                   = 0,
  Outer                   = 1,
  ESphericalLimitType_MAX = 2
};

enum ESpriteShapeType {
  Box                   = 0,
  Circle                = 1,
  Polygon               = 2,
  ESpriteShapeType_MAX  = 3
};

enum ESubmixEffectDynamicsPeakMode {
  MeanSquared                       = 0,
  RootMeanSquared                   = 1,
  Peak                              = 2,
  Count                             = 3,
  ESubmixEffectDynamicsPeakMode_MAX = 4
};

enum ESubmixEffectDynamicsProcessorType {
  Compressor                              = 0,
  Limiter                                 = 1,
  Expander                                = 2,
  Gate                                    = 3,
  Count                                   = 4,
  ESubmixEffectDynamicsProcessorType_MAX  = 5
};

enum ESyncOperation {
  PutOn               = 0,
  PutOff              = 1,
  ApplyHead           = 2,
  ESyncOperation_MAX  = 3
};

enum ETLog_BackpackEquipmentSlotType {
  EBackpackEquipmentSlotType_WeaponSlot1          = 0000,
  EBackpackEquipmentSlotType_WeaponSlot2          = 0001,
  EBackpackEquipmentSlotType_HelmetSlot           = 0002,
  EBackpackEquipmentSlotType_ArmorSlot            = 0003,
  EBackpackEquipmentSlotType_BagSlot              = 0004,
  EBackpackEquipmentSlotType_Weapon1GunPoint      = 0005,
  EBackpackEquipmentSlotType_Weapon1Grip          = 0006,
  EBackpackEquipmentSlotType_Weapon1Magazine      = 0007,
  EBackpackEquipmentSlotType_Weapon1Gunstock      = 0008,
  EBackpackEquipmentSlotType_Weapon1OpticalSight  = 0009,
  EBackpackEquipmentSlotType_Weapon2GunPoint      = 000a,
  EBackpackEquipmentSlotType_Weapon2Grip          = 000b,
  EBackpackEquipmentSlotType_Weapon2Magazine      = 000c,
  EBackpackEquipmentSlotType_Weapon2Gunstock      = 000d,
  EBackpackEquipmentSlotType_Weapon2OpticalSight  = 000e,
  EBackpackEquipmentSlotType_None                 = 00ff,
  EBackpackEquipmentSlotType_MAX                  = 0100
};

enum ETaskResourceOverlapPolicy {
  StartOnTop                      = 0,
  StartAtEnd                      = 1,
  ETaskResourceOverlapPolicy_MAX  = 2
};

enum ETextFlowDirection {
  Auto                    = 0,
  LeftToRight             = 1,
  RightToLeft             = 2,
  ETextFlowDirection_MAX  = 3
};

enum ETextGender {
  Masculine       = 0,
  Feminine        = 1,
  Neuter          = 2,
  ETextGender_MAX = 3
};

enum ETextShapingMethod {
  Auto                    = 0,
  KerningOnly             = 1,
  FullShaping             = 2,
  ETextShapingMethod_MAX  = 3
};

enum ETextWrappingPolicy {
  DefaultWrapping           = 0,
  AllowPerCharacterWrapping = 1,
  ETextWrappingPolicy_MAX   = 2
};

enum ETrackingStatus {
  NotTracked          = 0,
  InertialOnly        = 1,
  Tracked             = 2,
  ETrackingStatus_MAX = 3
};

enum EUINavigation {
  Left              = 0,
  Right             = 1,
  Up                = 2,
  Down              = 3,
  Next              = 4,
  Previous          = 5,
  Num               = 6,
  Invalid           = 7,
  EUINavigation_MAX = 8
};

enum EUINavigationRule {
  Escape                = 0,
  Explicit              = 1,
  Wrap                  = 2,
  Stop                  = 3,
  Custom                = 4,
  Invalid               = 5,
  EUINavigationRule_MAX = 6
};

enum EUIScalingRule {
  ShortestSide        = 0,
  LongestSide         = 1,
  Horizontal          = 2,
  Vertical            = 3,
  Custom              = 4,
  EUIScalingRule_MAX  = 5
};

enum EUTSkillEntry {
  SkillEntry_None                   = 0,
  SkillEntry_Grenade_Down           = 1,
  SkillEntry_Grenade_Up             = 2,
  SkillEntry_Flash_Down             = 3,
  SkillEntry_Flash_Up               = 4,
  SkillEntry_Smoke_Down             = 5,
  SkillEntry_Smoke_Up               = 6,
  SkillEntry_Molotov_Down           = 7,
  SkillEntry_Molotov_Up             = 8,
  SkillEntry_Melee_Fist_Down        = 9,
  SkillEntry_Melee_Fist_Up          = 10,
  SkillEntry_Melee_Weapon_1_Down    = 11,
  SkillEntry_Melee_Weapon_1_Up      = 12,
  SkillEntry_Melee_Weapon_2_Down    = 13,
  SkillEntry_Melee_Weapon_2_Up      = 14,
  SkillEntry_Melee_Weapon_3_Down    = 15,
  SkillEntry_Melee_Weapon_3_Up      = 16,
  SkillEntry_Melee_Weapon_4_Down    = 17,
  SkillEntry_Melee_Weapon_4_Up      = 18,
  SkillEntry_Bandage_Down           = 19,
  SkillEntry_EnergyDrink_Down       = 20,
  SkillEntry_Painkiller_Down        = 21,
  SkillEntry_AdrenalineSyringe_Down = 22,
  SkillEntry_FirstAidKit_Down       = 23,
  SkillEntry_MedKit_Down            = 24,
  SkillEntry_GasCan_Down            = 25,
  SkillEntry_Max                    = 26
};

enum EUVStrech {
  Small         = 0,
  Medium        = 1,
  Large         = 2,
  VeryLarge     = 3,
  EUVStrech_MAX = 4
};

enum EUpdateFrequency {
  Average               = 0,
  Frequent              = 1,
  Infrequent            = 2,
  EUpdateFrequency_MAX  = 3
};

enum EUserWidgetFadingStatus {
  UserWidgetFadingStatus_None       = 0,
  UserWidgetFadingStatus_FadingIn   = 1,
  UserWidgetFadingStatus_FadingOut  = 2,
  UserWidgetFadingStatus_MAX        = 3
};

enum EVectorQuantization {
  RoundWholeNumber        = 0,
  RoundOneDecimal         = 1,
  RoundTwoDecimals        = 2,
  EVectorQuantization_MAX = 3
};

enum EVertexPaintAxis {
  X                     = 0,
  Y                     = 1,
  Z                     = 2,
  EVertexPaintAxis_MAX  = 3
};

enum EWeaponAttachmentSocketType {
  GunPoint                        = 0,
  Grip                            = 1,
  Magazine                        = 2,
  Gunstock                        = 3,
  OpticalSight                    = 4,
  EWeaponAttachmentSocketType_MAX = 5
};

enum EWidgetBlendMode {
  Opaque                = 0,
  Masked                = 1,
  Transparent           = 2,
  EWidgetBlendMode_MAX  = 3
};

enum EWidgetClipping {
  Inherit                         = 0,
  ClipToBounds                    = 1,
  ClipToBoundsWithoutIntersecting = 2,
  ClipToBoundsAlways              = 3,
  OnDemand                        = 4,
  EWidgetClipping_MAX             = 5
};

enum EWidgetGeometryMode {
  Plane                   = 0,
  Cylinder                = 1,
  EWidgetGeometryMode_MAX = 2
};

enum EWidgetInteractionSource {
  World                         = 0,
  Mouse                         = 1,
  CenterScreen                  = 2,
  Custom                        = 3,
  EWidgetInteractionSource_MAX  = 4
};

enum EWidgetSpace {
  World             = 0,
  Screen            = 1,
  EWidgetSpace_MAX  = 2
};

enum EWidgetTimingPolicy {
  RealTime                = 0,
  GameTime                = 1,
  EWidgetTimingPolicy_MAX = 2
};

enum EWindSourceType {
  Directional         = 0,
  Point               = 1,
  EWindSourceType_MAX = 2
};

enum ExtraPlayerLiveState {
  InDefault                 = 0,
  InPlane                   = 1,
  InParachute               = 2,
  InVehicle                 = 3,
  InDying                   = 4,
  InDied                    = 5,
  Offline                   = 6,
  ExtraPlayerLiveState_MAX  = 7
};

enum FAIDistanceType {
  Distance3D  = 0,
  Distance2D  = 1,
  DistanceZ   = 2,
  MAX         = 3
};

enum FNavigationSystemRunMode {
  InvalidMode                   = 0,
  GameMode                      = 1,
  EditorMode                    = 2,
  SimulationMode                = 3,
  PIEMode                       = 4,
  FNavigationSystemRunMode_MAX  = 5
};

enum MovieScene3DPathSection_Axis {
  X                           = 0,
  Y                           = 1,
  Z                           = 2,
  NEG_X                       = 3,
  NEG_Y                       = 4,
  NEG_Z                       = 5,
  MovieScene3DPathSection_MAX = 6
};

enum PanningRule {
  PanningRule_Speakers    = 0,
  PanningRule_Headphones  = 1,
  PanningRule_MAX         = 2
};

enum StatEventType {
  APP_LAUNCH          = 0,
  LOADING_COMPLETED   = 1,
  REGISTER_COMPLETED  = 2,
  TUTORIAL_START      = 3,
  TUTORIAL_COMPLETED  = 4,
  SOLO                = 5,
  DUO                 = 6,
  SQUAD               = 7,
  ONE_MAN_SQUAD       = 8,
  LOGIN_REWARDS       = 9,
  LEVEL               = 10,
  FRIEND_INVITE       = 11,
  FRIEND_ACCEPT       = 12,
  FB_SHARE            = 13,
  PURCHASE_CONSIDER   = 14,
  PURCHASE            = 15,
  StatEventType_MAX   = 16
};

enum UTPickerTargetType {
  PTT_FRIEND  = 0,
  PTT_ENEMY   = 1,
  PTT_ALL     = 2,
  PTT_Self    = 3,
  PTT_MAX     = 4
};

enum UTSkillPhaseType {
  SPT_SEQUENCE          = 0,
  SPT_WAIT              = 1,
  SPT_CHARGE            = 2,
  SPT_Repeat            = 3,
  SPT_FINAL_SKILL_PHASE = 4,
  SPT_Keep              = 5,
  SPT_MAX               = 6
};

enum UTSkillPickerType {
  SPT_SELF              = 0,
  SPT_TARGET            = 1,
  SPT_VIEWPOINT         = 2,
  SPT_VIEWPOINT_STATIC  = 3,
  SPT_RECT              = 4,
  SPT_CIRCLE            = 5,
  SPT_FAN               = 6,
  SPT_CROSSHAIR         = 7,
  SPT_CUSTOM            = 8,
  SPT_DESTINATION       = 9,
  SPT_VIEWPOINT_NORMAL  = 10,
  SPT_DEFAULT           = 11,
  SPT_MAX               = 12
};

enum UTSkillStopReason {
  SkillStopReason_UnKown      = 0,
  SkillStopReason_Finished    = 1,
  SkillStopReason_Failed      = 2,
  SkillStopReason_Interrupted = 3,
  SkillStopReason_MAX         = 4
};

enum UTSkill_SoundCue_ListenType {
  Listen_SelfOnly   = 0,
  Listen_Teammate   = 1,
  Listen_Target     = 2,
  Listen_AllTarget  = 3,
  Listen_All        = 4,
  Listen_MAX        = 5
};

struct FAIActingCandidateData {
  /* offset=0x0014 flags=0x0018001040000200 */ AFakePlayerAIController* FakePlayerAIController;
};

struct FAIActingItem {
  /* offset=0x0000 flags=0x0018001040000201 */ float StartSeconds;
  /* offset=0x0004 flags=0x0018001040000201 */ float EndSeconds;
  /* offset=0x0008 flags=0x0018001040000201 */ float DeadPercent;
  /* offset=0x000c flags=0x0018001040000201 */ int32 PlayerNumScale;
  /* offset=0x0014 flags=0x0010000000000201 */ TArray<int32> WeaponIdList;
};

struct FAIDamageEvent {
  /* offset=0x0000 flags=0x0018001040000205 */ float Amount;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector Location;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector HitLocation;
  /* offset=0x001c flags=0x0018001040000205 */ AActor* DamagedActor;
  /* offset=0x0020 flags=0x0018001040000205 */ AActor* Instigator;
};

struct FAIDataProviderBoolValue: FAIDataProviderTypedValue {
  /* offset=0x001c flags=0x0018001040000201 */ bool DefaultValue;
};

struct FAIDataProviderFloatValue: FAIDataProviderTypedValue {
  /* offset=0x001c flags=0x0018001040000201 */ float DefaultValue;
};

struct FAIDataProviderIntValue: FAIDataProviderTypedValue {
  /* offset=0x001c flags=0x0018001040000201 */ int32 DefaultValue;
};

struct FAIDataProviderTypedValue: FAIDataProviderValue {
  /* offset=0x0018 flags=0x001c001040000200 */ UClass<UProperty>* PropertyType;
};

struct FAIDataProviderValue {
  /* offset=0x0004 flags=0x0048001040002200 */ UProperty* CachedProperty;
  /* offset=0x0008 flags=0x001a001040080209 */ UAIDataProvider* DataBinding;
  /* offset=0x0010 flags=0x0018001040000201 */ FName DataField;
};

struct FAIDeliveryAreaLimit {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector TopLeftVec;
  /* offset=0x000c flags=0x0018001040000001 */ struct FVector BottomRightVec;
};

struct FAIDynamicParam {
  /* offset=0x0000 flags=0x0018001040020215 */ FName ParamName;
  /* offset=0x0008 flags=0x0018001040020215 */ enum EAIParamType ParamType;
  /* offset=0x000c flags=0x0018001040000205 */ float Value;
  /* offset=0x0010 flags=0x0010000000000005 */ struct FBlackboardKeySelector BBKey;
};

struct FAIEquipSpawnGroup {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<struct FAIEquipSpawnItem> Item;
};

struct FAIEquipSpawnItem {
  /* offset=0x0000 flags=0x0018001040000201 */ enum EAIEquipSpawnItemType ItemType;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 ItemSpecificID;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 Count;
};

struct FAIMoveRequest {
  /* offset=0x0000 flags=0x0028081040000200 */ AActor* GoalActor;
};

struct FAINoiseEvent {
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector NoiseLocation;
  /* offset=0x0010 flags=0x0018001040000205 */ float Loudness;
  /* offset=0x0014 flags=0x0018001040000205 */ float MaxRange;
  /* offset=0x0018 flags=0x0018001040000205 */ AActor* Instigator;
  /* offset=0x0020 flags=0x0018001040000205 */ FName Tag;
};

struct FAIPredictionEvent {
  /* offset=0x0000 flags=0x0018001040000200 */ AActor* Requestor;
  /* offset=0x0004 flags=0x0018001040000200 */ AActor* PredictedActor;
};

struct FAIRequestID {
  /* offset=0x0000 flags=0x0048001040000200 */ uint32 RequestID;
};

struct FAISenseAffiliationFilter {
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bDetectEnemies:1;
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bDetectNeutrals:1;
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bDetectFriendlies:1;
};

struct FAIStimulus {
  /* offset=0x0000 flags=0x0028081040000204 */ float Age;
  /* offset=0x0004 flags=0x0028081040000204 */ float ExpirationAge;
  /* offset=0x0008 flags=0x0018001040000204 */ float Strength;
  /* offset=0x000c flags=0x0018001040000004 */ struct FVector StimulusLocation;
  /* offset=0x0018 flags=0x0018001040000004 */ struct FVector ReceiverLocation;
  /* offset=0x0028 flags=0x0018001040000204 */ FName Tag;
  /* offset=0x0040 flags=0x0028081000000004 */ uint8 bSuccessfullySensed:1;
};

struct FAITeamStimulusEvent {
  /* offset=0x0028 flags=0x0048001040000200 */ AActor* Broadcaster;
  /* offset=0x002c flags=0x0018001040000200 */ AActor* Enemy;
};

struct FAITouchEvent {
  /* offset=0x000c flags=0x0018001040000200 */ AActor* TouchReceiver;
  /* offset=0x0010 flags=0x0018001040000200 */ AActor* OtherActor;
};

struct FARFilter {
  /* offset=0x0000 flags=0x0010000000002204 */ TArray<FName> PackageNames;
  /* offset=0x000c flags=0x0010000000002204 */ TArray<FName> PackagePaths;
  /* offset=0x0018 flags=0x0010000000002204 */ TArray<FName> ObjectPaths;
  /* offset=0x0024 flags=0x0010000000002204 */ TArray<FName> ClassNames;
  /* offset=0x006c flags=0x0010000000002204 */ TSet<FName> RecursiveClassesExclusionSet;
  /* offset=0x00a8 flags=0x0018001040002204 */ bool bRecursivePaths;
  /* offset=0x00a9 flags=0x0018001040002204 */ bool bRecursiveClasses;
  /* offset=0x00aa flags=0x0018001040002204 */ bool bIncludeOnlyOnDiskAssets;
};

struct FActiveForceFeedbackEffect {
  /* offset=0x0000 flags=0x0018001040000200 */ UForceFeedbackEffect* ForceFeedbackEffect;
};

struct FActorComponentTickFunction: FTickFunction {
};

struct FActorPerceptionBlueprintInfo {
  /* offset=0x0000 flags=0x0018001040000204 */ AActor* Target;
  /* offset=0x0004 flags=0x0010000000000204 */ TArray<struct FAIStimulus> LastSensedStimuli;
  /* offset=0x0010 flags=0x0018001000000004 */ uint8 bIsHostile:1;
};

struct FActorSequenceObjectReference {
  /* offset=0x0000 flags=0x0048001040000200 */ enum EActorSequenceObjectReferenceType Type;
  /* offset=0x0004 flags=0x0048001040000000 */ struct FGuid ActorId;
  /* offset=0x0014 flags=0x0048000000000200 */ FString PathToComponent;
};

struct FActorSequenceObjectReferenceMap {
  /* offset=0x0000 flags=0x0040000000000200 */ TArray<struct FGuid> BindingIds;
  /* offset=0x000c flags=0x0040000000000200 */ TArray<struct FActorSequenceObjectReferences> References;
};

struct FActorSequenceObjectReferences {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FActorSequenceObjectReference> Array;
};

struct FActorTickFunction: FTickFunction {
};

struct FAimCameraModeData {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FSwitchCameraData SwitchCameraData;
};

struct FAimFlow {
  /* offset=0x0000 flags=0x0018000000000200 */ FString GameSvrId;
  /* offset=0x0010 flags=0x0018001040000200 */ int64 dtEventTime;
  /* offset=0x0018 flags=0x0018000000000200 */ FString GameAppID;
  /* offset=0x0024 flags=0x0018000000000200 */ FString OpenID;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 AreaID;
  /* offset=0x0031 flags=0x0018001040000200 */ int8 PlatID;
  /* offset=0x0034 flags=0x0018000000000200 */ FString ZoneID;
  /* offset=0x0040 flags=0x0018001040000200 */ uint64 BattleID;
  /* offset=0x0048 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 MrpcsFlowcount_;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0060 flags=0x0018000000000200 */ FString UserName;
  /* offset=0x0070 flags=0x0018001040000200 */ uint64 RoleID;
  /* offset=0x0078 flags=0x0018001040000200 */ int8 RoleType;
  /* offset=0x007c flags=0x0018001040000200 */ int32 AimTime;
  /* offset=0x0080 flags=0x0018000000000200 */ FString ShotCDTime;
  /* offset=0x008c flags=0x0018001040000200 */ int32 ShotCount;
  /* offset=0x0090 flags=0x0018001040000200 */ int32 ShotHitCount;
  /* offset=0x0094 flags=0x0018001040000200 */ int32 ShotHeadHitCount;
  /* offset=0x0098 flags=0x0018001040000200 */ int32 ShotPersonHitCount;
  /* offset=0x009c flags=0x0018001040000200 */ int32 ShotPersonKillCount;
  /* offset=0x00a0 flags=0x0018000000000200 */ FString HitDistance;
  /* offset=0x00ac flags=0x0018000000000200 */ FString HitEachDistance;
  /* offset=0x00b8 flags=0x0018000000000200 */ FString HitAngle;
  /* offset=0x00c4 flags=0x0018000000000200 */ FString HitEachCdTime;
  /* offset=0x00d0 flags=0x0018000000000200 */ FString HitPartInfo;
  /* offset=0x00dc flags=0x0018000000000200 */ FString PlayerState;
  /* offset=0x00e8 flags=0x0018001000000000 */ uint8 bHoldBreath:1;
  /* offset=0x00e9 flags=0x0018001040000200 */ int8 SightType;
  /* offset=0x00ec flags=0x0018001040000200 */ uint32 AimFlowID;
};

struct FAirAttackCfg {
  /* offset=0x0000 flags=0x0018001040000201 */ float EscapeTime;
  /* offset=0x0004 flags=0x0018001040000201 */ float AttackLastingTime;
  /* offset=0x0008 flags=0x0018001040000201 */ float AttackAreaRadius;
  /* offset=0x000c flags=0x0018001040000201 */ int32 TotalBombs;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 BombsRadius;
};

struct FAirAttackOrder {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 waveindex;
  /* offset=0x0004 flags=0x0010000000000200 */ TArray<struct FVector> bombsPosition;
  /* offset=0x0010 flags=0x0010000000000200 */ TArray<float> bombsInterval;
};

struct FAirDropBoxGenerateWrapperItemData {
  /* offset=0x0000 flags=0x001c001040000204 */ UClass<AActor>* WrapperClass;
  /* offset=0x0004 flags=0x0018001040000204 */ int32 Count;
};

struct FAirDropConfig {
  /* offset=0x0000 flags=0x0018001040000205 */ float AirDropTime;
  /* offset=0x0004 flags=0x0018001040000205 */ float RandomDroppingRange;
  /* offset=0x0008 flags=0x0018001040000205 */ float DropStuffChance;
};

struct FAirDropOrder {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector AirDropPlaneSpawnPosition;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector AirDropPlaneFlyingDirection;
  /* offset=0x0018 flags=0x0018001040000205 */ float AirDropPlaneFlyingSpeed;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector AirDropStuffFallingPosition;
  /* offset=0x0028 flags=0x0018001040000205 */ float AirDropStuffFallingSpeed;
};

struct FAirDropPlaneParams {
  /* offset=0x0000 flags=0x0018001040000205 */ float FlyingHeight;
  /* offset=0x0004 flags=0x0018001040000205 */ float FlyingSpeed;
  /* offset=0x0008 flags=0x0018001040000205 */ float AirDropFallingSpeed;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsUseDebugLocation;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector DebugDroppingLocation;
};

struct FAirborneSpeed {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector minSpeed;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector MaxSpeed;
  /* offset=0x0018 flags=0x0018001040000005 */ struct FVector NormalSpeed;
  /* offset=0x0024 flags=0x0018001040000005 */ struct FVector VerticalSpeed;
  /* offset=0x0030 flags=0x0018001040000205 */ float TurnSpeed;
  /* offset=0x0034 flags=0x0018001040000005 */ struct FVector TurnSpeedV;
};

struct FAkAudioEventTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040020205 */ UAkAudioEvent* AkAudioEvent;
  /* offset=0x0008 flags=0x0018000000020205 */ FString EventName;
};

struct FAkPoly {
  /* offset=0x0000 flags=0x0018001040000205 */ UAkAcousticTexture* Texture;
  /* offset=0x0004 flags=0x0018001040000205 */ bool EnableSurface;
};

struct FAlphaBlend {
  /* offset=0x0000 flags=0x0048001040000201 */ enum EAlphaBlendOption BlendOption;
  /* offset=0x0004 flags=0x0048001040000201 */ UCurveFloat* CustomCurve;
  /* offset=0x0008 flags=0x0048001040000201 */ float BlendTime;
};

struct FAnalogInputEvent: FKeyEvent {
};

struct FAnchorData {
  /* offset=0x0000 flags=0x0010001000000005 */ struct FMargin Offsets;
  /* offset=0x0010 flags=0x0010001000000005 */ struct FAnchors Anchors;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FVector2D Alignment;
};

struct FAnchors {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector2D Minimum;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FVector2D Maximum;
};

struct FAngularDriveConstraint {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FConstraintDrive TwistDrive;
  /* offset=0x0010 flags=0x0010001000000001 */ struct FConstraintDrive SwingDrive;
  /* offset=0x0020 flags=0x0010001000000001 */ struct FConstraintDrive SlerpDrive;
  /* offset=0x0030 flags=0x0010001040000001 */ struct FRotator OrientationTarget;
  /* offset=0x003c flags=0x0018001040000001 */ struct FVector AngularVelocityTarget;
  /* offset=0x0048 flags=0x0018001040000201 */ uint8 AngularDriveMode;
};

struct FAnimControlTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float StartTime;
  /* offset=0x0004 flags=0x0018001040000200 */ UAnimSequence* AnimSeq;
  /* offset=0x0008 flags=0x0018001040000200 */ float AnimStartOffset;
  /* offset=0x000c flags=0x0018001040000200 */ float AnimEndOffset;
  /* offset=0x0010 flags=0x0018001040000200 */ float AnimPlayRate;
  /* offset=0x0014 flags=0x0018001000000000 */ uint8 bLooping:1;
  /* offset=0x0014 flags=0x0018001000000000 */ uint8 bReverse:1;
};

struct FAnimCurveBase {
  /* offset=0x0000 flags=0x0018001060000200 */ FName LastObservedName;
  /* offset=0x0008 flags=0x0010001000000000 */ struct FSmartName Name;
  /* offset=0x0018 flags=0x0048001040000200 */ int32 CurveTypeFlags;
};

struct FAnimGroupInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000000 */ struct FLinearColor Color;
};

struct FAnimLinkableElement {
  /* offset=0x0004 flags=0x0028081040000200 */ UAnimMontage* LinkedMontage;
  /* offset=0x0008 flags=0x0028081040000201 */ int32 SlotIndex;
  /* offset=0x000c flags=0x0028081040000200 */ int32 SegmentIndex;
  /* offset=0x0010 flags=0x0028081040000201 */ uint8 LinkMethod;
  /* offset=0x0011 flags=0x0028081040000200 */ uint8 CachedLinkMethod;
  /* offset=0x0014 flags=0x0028081040000200 */ float SegmentBeginTime;
  /* offset=0x0018 flags=0x0028081040000200 */ float SegmentLength;
  /* offset=0x001c flags=0x0028081040000200 */ float LinkValue;
  /* offset=0x0020 flags=0x00280c1040020201 */ UAnimSequenceBase* LinkedSequence;
};

struct FAnimListData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 LayerID;
  /* offset=0x0004 flags=0x0018001040000200 */ UAnimationAsset* Animation;
};

struct FAnimListMapValueData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FAnimListData> AnimListMapValue;
};

struct FAnimNode_AnimDynamics: FAnimNode_SkeletalControlBase {
  /* offset=0x0054 flags=0x0018001040000205 */ enum AnimPhysSimSpaceType SimulationSpace;
  /* offset=0x0058 flags=0x0010001000000001 */ struct FBoneReference RelativeSpaceBone;
  /* offset=0x0070 flags=0x0018001040000201 */ bool bChain;
  /* offset=0x0078 flags=0x0010001000000001 */ struct FBoneReference BoundBone;
  /* offset=0x0090 flags=0x0010001000000001 */ struct FBoneReference ChainEnd;
  /* offset=0x00a8 flags=0x0018001040000001 */ struct FVector BoxExtents;
  /* offset=0x00b4 flags=0x0018001040000001 */ struct FVector LocalJointOffset;
  /* offset=0x00c0 flags=0x0018001040000205 */ float GravityScale;
  /* offset=0x00c4 flags=0x0018001040000201 */ bool bLinearSpring;
  /* offset=0x00c5 flags=0x0018001040000201 */ bool bAngularSpring;
  /* offset=0x00c8 flags=0x0018001040000205 */ float LinearSpringConstant;
  /* offset=0x00cc flags=0x0018001040000205 */ float AngularSpringConstant;
  /* offset=0x00d0 flags=0x0018001040000201 */ bool bEnableWind;
  /* offset=0x00d1 flags=0x0018001040002200 */ bool bWindWasEnabled;
  /* offset=0x00d4 flags=0x0018001040000201 */ float WindScale;
  /* offset=0x00d8 flags=0x0018041040000201 */ bool bOverrideLinearDamping;
  /* offset=0x00dc flags=0x0018041040000205 */ float LinearDampingOverride;
  /* offset=0x00e0 flags=0x0018041040000201 */ bool bOverrideAngularDamping;
  /* offset=0x00e4 flags=0x0018041040000205 */ float AngularDampingOverride;
  /* offset=0x00e8 flags=0x0018041040000201 */ bool bOverrideAngularBias;
  /* offset=0x00ec flags=0x0018041040000205 */ float AngularBiasOverride;
  /* offset=0x00f0 flags=0x0018041040000201 */ bool bDoUpdate;
  /* offset=0x00f1 flags=0x0018041040000201 */ bool bDoEval;
  /* offset=0x00f4 flags=0x0018041040000201 */ int32 NumSolverIterationsPreUpdate;
  /* offset=0x00f8 flags=0x0018041040000201 */ int32 NumSolverIterationsPostUpdate;
  /* offset=0x00fc flags=0x0010001000000001 */ struct FAnimPhysConstraintSetup ConstraintSetup;
  /* offset=0x0158 flags=0x0018001040000201 */ bool bUsePlanarLimit;
  /* offset=0x015c flags=0x0010000000000201 */ TArray<struct FAnimPhysPlanarLimit> PlanarLimits;
  /* offset=0x0168 flags=0x0018001040000201 */ bool bUseSphericalLimits;
  /* offset=0x016c flags=0x0010000000000201 */ TArray<struct FAnimPhysSphericalLimit> SphericalLimits;
  /* offset=0x0178 flags=0x0018001040000201 */ enum AnimPhysCollisionType CollisionType;
  /* offset=0x017c flags=0x0018001040000201 */ float SphereCollisionRadius;
  /* offset=0x0180 flags=0x0018001040000001 */ struct FVector ExternalForce;
};

struct FAnimNode_ApplyAdditive: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink Base;
  /* offset=0x0034 flags=0x0010001000000005 */ struct FPoseLink Additive;
  /* offset=0x0040 flags=0x0018001040000205 */ float Alpha;
  /* offset=0x0044 flags=0x0010001000000005 */ struct FInputScaleBias AlphaScaleBias;
  /* offset=0x004c flags=0x0018001040000205 */ int32 LODThreshold;
  /* offset=0x0050 flags=0x0018001040002200 */ float ActualAlpha;
};

struct FAnimNode_ApplyMeshSpaceAdditive: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink Base;
  /* offset=0x0034 flags=0x0010001000000005 */ struct FPoseLink Additive;
  /* offset=0x0040 flags=0x0018001040000205 */ float Alpha;
  /* offset=0x0044 flags=0x0010001000000005 */ struct FInputScaleBias AlphaScaleBias;
  /* offset=0x004c flags=0x0018001040000205 */ int32 LODThreshold;
  /* offset=0x0050 flags=0x0018001040002200 */ float ActualAlpha;
};

struct FAnimNode_AssetPlayerBase: FAnimNode_Base {
  /* offset=0x0028 flags=0x0018001040000205 */ bool bIgnoreForRelevancyTest;
  /* offset=0x002c flags=0x0018001040000200 */ int32 GroupIndex;
  /* offset=0x0030 flags=0x0018001040000200 */ uint8 GroupRole;
  /* offset=0x0034 flags=0x0028081040002204 */ float BlendWeight;
  /* offset=0x0038 flags=0x0028081040002204 */ float InternalTimeAccumulator;
};

struct FAnimNode_Base {
  /* offset=0x0008 flags=0x0010000000000000 */ struct FExposedValueHandler EvaluateGraphExposedInputs;
};

struct FAnimNode_BlendListBase: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010000000000245 */ TArray<struct FPoseLink> BlendPose;
  /* offset=0x0034 flags=0x0010000000000245 */ TArray<float> BlendTime;
  /* offset=0x0040 flags=0x0018001040000201 */ enum EAlphaBlendOption BlendType;
  /* offset=0x0044 flags=0x0018001040000201 */ UCurveFloat* CustomBlendCurve;
  /* offset=0x0048 flags=0x0018001040000201 */ UBlendProfile* BlendProfile;
  /* offset=0x004c flags=0x0010000000000200 */ TArray<struct FAlphaBlend> Blends;
  /* offset=0x0058 flags=0x0020080000000200 */ TArray<float> BlendWeights;
  /* offset=0x0064 flags=0x0020080000000200 */ TArray<float> RemainingBlendTimes;
  /* offset=0x0070 flags=0x0028081040000200 */ int32 LastActiveChildIndex;
  /* offset=0x0074 flags=0x0020080000000200 */ TArray<struct FBlendSampleData> PerBoneSampleData;
  /* offset=0x008c flags=0x0028081040000201 */ bool bResetChildOnActivation;
};

struct FAnimNode_BlendListByBool: FAnimNode_BlendListBase {
  /* offset=0x008d flags=0x0018001040000205 */ bool bActiveValue;
};

struct FAnimNode_BlendListByEnum: FAnimNode_BlendListBase {
  /* offset=0x0090 flags=0x0010000000000200 */ TArray<int32> EnumToPoseIndex;
  /* offset=0x009c flags=0x0018001040000205 */ uint8 ActiveEnumValue;
};

struct FAnimNode_BlendSpacePlayer: FAnimNode_AssetPlayerBase {
  /* offset=0x0050 flags=0x0018001040000205 */ float X;
  /* offset=0x0054 flags=0x0018001040000205 */ float Y;
  /* offset=0x0058 flags=0x0018001040000205 */ float Z;
  /* offset=0x005c flags=0x0018001040000205 */ float PlayRate;
  /* offset=0x0060 flags=0x0018001040000205 */ bool bLoop;
  /* offset=0x0064 flags=0x0018001040000205 */ float StartPosition;
  /* offset=0x0068 flags=0x0018001040000205 */ UBlendSpaceBase* BlendSpace;
  /* offset=0x006c flags=0x0018001040000205 */ bool bResetPlayTimeWhenBlendSpaceChanges;
  /* offset=0x0070 flags=0x0020080000000000 */ struct FBlendFilter BlendFilter;
  /* offset=0x00dc flags=0x0020080000000200 */ TArray<struct FBlendSampleData> BlendSampleDataCache;
  /* offset=0x00e8 flags=0x0028081040002200 */ UBlendSpaceBase* PreviousBlendSpace;
};

struct FAnimNode_ConvertComponentToLocalSpace: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FComponentSpacePoseLink ComponentPose;
};

struct FAnimNode_ConvertLocalToComponentSpace: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink LocalPose;
};

struct FAnimNode_CopyBone: FAnimNode_SkeletalControlBase {
  /* offset=0x0058 flags=0x0010001000000001 */ struct FBoneReference SourceBone;
  /* offset=0x0070 flags=0x0010001000000001 */ struct FBoneReference TargetBone;
  /* offset=0x0088 flags=0x0018001040000205 */ bool bCopyTranslation;
  /* offset=0x0089 flags=0x0018001040000205 */ bool bCopyRotation;
  /* offset=0x008a flags=0x0018001040000205 */ bool bCopyScale;
  /* offset=0x008b flags=0x0018001040000201 */ uint8 ControlSpace;
};

struct FAnimNode_Fabrik: FAnimNode_SkeletalControlBase {
  /* offset=0x0060 flags=0x0010001040000005 */ struct FTransform EffectorTransform;
  /* offset=0x0090 flags=0x0018001040000201 */ uint8 EffectorTransformSpace;
  /* offset=0x0098 flags=0x0010001020000000 */ struct FBoneReference EffectorTransformBone;
  /* offset=0x00b0 flags=0x0010001000000001 */ struct FBoneSocketTarget EffectorTarget;
  /* offset=0x0110 flags=0x0018001040000201 */ uint8 EffectorRotationSource;
  /* offset=0x0118 flags=0x0010001000000001 */ struct FBoneReference TipBone;
  /* offset=0x0130 flags=0x0010001000000001 */ struct FBoneReference RootBone;
  /* offset=0x0148 flags=0x0018001040000201 */ float Precision;
  /* offset=0x014c flags=0x0018001040000201 */ int32 MaxIterations;
  /* offset=0x0150 flags=0x0018001040000201 */ bool bEnableDebugDraw;
};

struct FAnimNode_LayeredBoneBlend: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink BasePose;
  /* offset=0x0034 flags=0x0010000000000245 */ TArray<struct FPoseLink> BlendPoses;
  /* offset=0x0040 flags=0x0010000000000241 */ TArray<struct FInputBlendPose> LayerSetup;
  /* offset=0x004c flags=0x0010000000000245 */ TArray<float> BlendWeights;
  /* offset=0x0058 flags=0x0018001040000205 */ bool bMeshSpaceRotationBlend;
  /* offset=0x0059 flags=0x0018001040000205 */ uint8 CurveBlendOption;
  /* offset=0x005a flags=0x0018001040000201 */ bool bBlendRootMotionBasedOnRootBone;
  /* offset=0x005b flags=0x0018001040002200 */ bool bHasRelevantPoses;
  /* offset=0x005c flags=0x0020080000000200 */ TArray<struct FPerBoneBlendWeight> PerBoneBlendWeights;
  /* offset=0x0068 flags=0x0028081040000000 */ struct FGuid SkeletonGuid;
  /* offset=0x0078 flags=0x0028081040000000 */ struct FGuid VirtualBoneGuid;
};

struct FAnimNode_ModifyBone: FAnimNode_SkeletalControlBase {
  /* offset=0x0058 flags=0x0010001000000001 */ struct FBoneReference BoneToModify;
  /* offset=0x0070 flags=0x0018001040000005 */ struct FVector Translation;
  /* offset=0x007c flags=0x0010001040000005 */ struct FRotator Rotation;
  /* offset=0x0088 flags=0x0018001040000005 */ struct FVector Scale;
  /* offset=0x0094 flags=0x0018001040000201 */ uint8 TranslationMode;
  /* offset=0x0095 flags=0x0018001040000201 */ uint8 RotationMode;
  /* offset=0x0096 flags=0x0018001040000201 */ uint8 ScaleMode;
  /* offset=0x0097 flags=0x0018001040000201 */ uint8 TranslationSpace;
  /* offset=0x0098 flags=0x0018001040000201 */ uint8 RotationSpace;
  /* offset=0x0099 flags=0x0018001040000201 */ uint8 ScaleSpace;
};

struct FAnimNode_Root: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink Result;
};

struct FAnimNode_RotateRootBone: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink BasePose;
  /* offset=0x0034 flags=0x0018001040000205 */ float Pitch;
  /* offset=0x0038 flags=0x0018001040000205 */ float Yaw;
  /* offset=0x003c flags=0x0010001040000005 */ struct FRotator MeshToComponent;
};

struct FAnimNode_RotationOffsetBlendSpace: FAnimNode_BlendSpacePlayer {
  /* offset=0x00ec flags=0x0010001000000005 */ struct FPoseLink BasePose;
  /* offset=0x00f8 flags=0x0018001040000205 */ int32 LODThreshold;
  /* offset=0x00fc flags=0x0018001040002200 */ bool bIsLODEnabled;
  /* offset=0x0100 flags=0x0018001040000205 */ float Alpha;
  /* offset=0x0104 flags=0x0010001000000005 */ struct FInputScaleBias AlphaScaleBias;
  /* offset=0x010c flags=0x0018001040002200 */ float ActualAlpha;
};

struct FAnimNode_SaveCachedPose: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink Pose;
  /* offset=0x0038 flags=0x0018001040000200 */ FName CachePoseName;
  /* offset=0x0040 flags=0x0018001040002200 */ float GlobalWeight;
};

struct FAnimNode_SequencePlayer: FAnimNode_AssetPlayerBase {
  /* offset=0x0050 flags=0x0018001040000205 */ UAnimSequenceBase* Sequence;
  /* offset=0x0054 flags=0x0018001040000205 */ bool bLoopAnimation;
  /* offset=0x0058 flags=0x0018001040000205 */ float PlayRate;
  /* offset=0x005c flags=0x0018001040000205 */ float StartPosition;
};

struct FAnimNode_SkeletalControlBase: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FComponentSpacePoseLink ComponentPose;
  /* offset=0x0034 flags=0x0018001040000205 */ float Alpha;
  /* offset=0x0038 flags=0x0010001000000005 */ struct FInputScaleBias AlphaScaleBias;
  /* offset=0x0040 flags=0x0018001040000205 */ int32 LODThreshold;
  /* offset=0x0044 flags=0x0018001040002200 */ float ActualAlpha;
};

struct FAnimNode_Slot: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink Source;
  /* offset=0x0038 flags=0x0018001040000205 */ FName SlotName;
  /* offset=0x0040 flags=0x0018001040000205 */ bool bAlwaysUpdateSourcePose;
};

struct FAnimNode_StateMachine: FAnimNode_Base {
  /* offset=0x0028 flags=0x0018001040000200 */ int32 StateMachineIndexInClass;
  /* offset=0x002c flags=0x0018001040000201 */ int32 MaxTransitionsPerFrame;
  /* offset=0x0030 flags=0x0018001040000201 */ bool bSkipFirstUpdateTransition;
  /* offset=0x0031 flags=0x0018001040000201 */ bool bReinitializeOnBecomingRelevant;
  /* offset=0x0038 flags=0x0028081040000200 */ int32 CurrentState;
  /* offset=0x003c flags=0x0028081040000200 */ float ElapsedTime;
};

struct FAnimNode_SubInstance: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000000 */ struct FPoseLink InPose;
  /* offset=0x0034 flags=0x001c001040000205 */ UClass<UAnimInstance>* InstanceClass;
  /* offset=0x0038 flags=0x0018001040002200 */ UAnimInstance* InstanceToRun;
  /* offset=0x003c flags=0x0010000000002200 */ TArray<UProperty*> InstanceProperties;
  /* offset=0x0048 flags=0x0010000000002200 */ TArray<UProperty*> SubInstanceProperties;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<FName> SourcePropertyNames;
  /* offset=0x0060 flags=0x0010000000000200 */ TArray<FName> DestPropertyNames;
};

struct FAnimNode_TransitionResult: FAnimNode_Base {
  /* offset=0x0028 flags=0x0018001040000205 */ bool bCanEnterTransition;
};

struct FAnimNode_TwoWayBlend: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPoseLink A;
  /* offset=0x0034 flags=0x0010001000000005 */ struct FPoseLink B;
  /* offset=0x0040 flags=0x0018001040000205 */ float Alpha;
  /* offset=0x0044 flags=0x0010001000000005 */ struct FInputScaleBias AlphaScaleBias;
  /* offset=0x004c flags=0x0028081040002200 */ float InternalBlendAlpha;
  /* offset=0x0050 flags=0x0028081040002200 */ bool bAIsRelevant;
  /* offset=0x0051 flags=0x0028081040002200 */ bool bBIsRelevant;
  /* offset=0x0052 flags=0x0028081040000201 */ bool bResetChildOnActivation;
};

struct FAnimNode_UseCachedPose: FAnimNode_Base {
  /* offset=0x0028 flags=0x0010001000000000 */ struct FPoseLink LinkToCachingNode;
  /* offset=0x0038 flags=0x0018001040000200 */ FName CachePoseName;
};

struct FAnimNotifyEvent: FAnimLinkableElement {
  /* offset=0x0024 flags=0x0018001060000200 */ float DisplayTime;
  /* offset=0x0028 flags=0x0018001040000200 */ float TriggerTimeOffset;
  /* offset=0x002c flags=0x0018001040000200 */ float EndTriggerTimeOffset;
  /* offset=0x0030 flags=0x0018001040000205 */ float TriggerWeightThreshold;
  /* offset=0x0038 flags=0x0018001040000215 */ FName NotifyName;
  /* offset=0x0040 flags=0x001a00104008020d */ UAnimNotify* Notify;
  /* offset=0x0044 flags=0x001a00104008020d */ UAnimNotifyState* NotifyStateClass;
  /* offset=0x0048 flags=0x0018001040000200 */ float Duration;
  /* offset=0x004c flags=0x0010000000000000 */ struct FAnimLinkableElement EndLink;
  /* offset=0x0070 flags=0x0018001040000200 */ bool bConvertedFromBranchingPoint;
  /* offset=0x0071 flags=0x0018001040000205 */ uint8 MontageTickType;
  /* offset=0x0074 flags=0x0018001040000205 */ float NotifyTriggerChance;
  /* offset=0x0078 flags=0x0018001040000205 */ uint8 NotifyFilterType;
  /* offset=0x007c flags=0x0018001040000205 */ int32 NotifyFilterLOD;
  /* offset=0x0080 flags=0x0018001040000205 */ bool bTriggerOnDedicatedServer;
  /* offset=0x0084 flags=0x0018001040000200 */ int32 TrackIndex;
};

struct FAnimParamList {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector Velocity;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector MoveDir;
  /* offset=0x0018 flags=0x0018001040000205 */ uint8 MovementMode;
  /* offset=0x0019 flags=0x0018001040000205 */ uint8 PoseType;
  /* offset=0x001c flags=0x0010001040000005 */ struct FRotator ViewRotation;
  /* offset=0x0028 flags=0x0010001040000005 */ struct FRotator ControlRotation;
  /* offset=0x0034 flags=0x0018001040000205 */ uint8 WeaponType;
  /* offset=0x0035 flags=0x0018001040000205 */ uint8 WeaponState;
  /* offset=0x0036 flags=0x0018001040000215 */ uint8 WeaponReloadMethod;
  /* offset=0x0037 flags=0x0018001040010215 */ uint8 SightType;
  /* offset=0x0038 flags=0x0018001040010015 */ struct FVector OffsetFPPLocation;
  /* offset=0x0044 flags=0x0010001040010015 */ struct FRotator OffsetFPPRotation;
  /* offset=0x0050 flags=0x0018001040010015 */ struct FVector OffsetFPPCrouchLocation;
  /* offset=0x005c flags=0x0010001040010015 */ struct FRotator OffsetFPPCrouchRotation;
  /* offset=0x0068 flags=0x0018001040010015 */ struct FVector OffsetFPPProneLocation;
  /* offset=0x0074 flags=0x0010001040010015 */ struct FRotator OffsetFPPProneRotation;
  /* offset=0x0080 flags=0x0018001040000205 */ bool IsHurting;
  /* offset=0x0081 flags=0x0018001040000205 */ bool IsNearDeathStatus;
  /* offset=0x0082 flags=0x0018001040000205 */ bool IsRescueing;
  /* offset=0x0083 flags=0x0018001040000205 */ bool IsSprinting;
  /* offset=0x0084 flags=0x0018001040000205 */ bool IsCastingGenerate;
  /* offset=0x0088 flags=0x0018001040000005 */ struct FVector HurtDir;
  /* offset=0x0094 flags=0x0018001040000205 */ bool IsDying;
  /* offset=0x0095 flags=0x0018001040000205 */ bool IsJumping;
  /* offset=0x0096 flags=0x0018001040000205 */ uint8 JumpType;
  /* offset=0x0097 flags=0x0018001040000205 */ uint8 ParachuteState;
  /* offset=0x0098 flags=0x0018001040000205 */ bool IsTurning;
  /* offset=0x0099 flags=0x0018001040000205 */ bool IsOnVehicle;
  /* offset=0x009a flags=0x0018001040000205 */ bool IsDisableAim;
  /* offset=0x009c flags=0x0018001040000205 */ float HandleFolderFactor;
  /* offset=0x00a0 flags=0x0018001040000205 */ float CharacterYawRotateRate;
  /* offset=0x00a4 flags=0x0018001040000205 */ bool ShouldPauseAnim;
};

struct FAnimPhysConstraintSetup {
  /* offset=0x0000 flags=0x0018001040000201 */ enum AnimPhysLinearConstraintType LinearXLimitType;
  /* offset=0x0001 flags=0x0018001040000201 */ enum AnimPhysLinearConstraintType LinearYLimitType;
  /* offset=0x0002 flags=0x0018001040000201 */ enum AnimPhysLinearConstraintType LinearZLimitType;
  /* offset=0x0004 flags=0x0018001040000001 */ struct FVector LinearAxesMin;
  /* offset=0x0010 flags=0x0018001040000001 */ struct FVector LinearAxesMax;
  /* offset=0x001c flags=0x0018001040000201 */ enum AnimPhysAngularConstraintType AngularConstraintType;
  /* offset=0x001d flags=0x0018001040000201 */ enum AnimPhysTwistAxis TwistAxis;
  /* offset=0x0020 flags=0x0018001040000201 */ float ConeAngle;
  /* offset=0x0024 flags=0x0018001060000200 */ float AngularXAngle;
  /* offset=0x0028 flags=0x0018001060000200 */ float AngularYAngle;
  /* offset=0x002c flags=0x0018001060000200 */ float AngularZAngle;
  /* offset=0x0030 flags=0x0018001040000001 */ struct FVector AngularLimitsMin;
  /* offset=0x003c flags=0x0018001040000001 */ struct FVector AngularLimitsMax;
  /* offset=0x0048 flags=0x0018001040000201 */ enum AnimPhysTwistAxis AngularTargetAxis;
  /* offset=0x004c flags=0x0018001040000001 */ struct FVector AngularTarget;
  /* offset=0x0058 flags=0x0018001040000200 */ bool bLinearFullyLocked;
};

struct FAnimPhysPlanarLimit {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FBoneReference DrivingBone;
  /* offset=0x0020 flags=0x0010001040000001 */ struct FTransform PlaneTransform;
};

struct FAnimPhysSphericalLimit {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FBoneReference DrivingBone;
  /* offset=0x0018 flags=0x0018001040000001 */ struct FVector SphereLocalOffset;
  /* offset=0x0024 flags=0x0018001040000201 */ float LimitRadius;
  /* offset=0x0028 flags=0x0018001040000201 */ enum ESphericalLimitType LimitType;
};

struct FAnimSegment {
  /* offset=0x0000 flags=0x0018001040000201 */ UAnimSequenceBase* AnimReference;
  /* offset=0x0004 flags=0x0018001040020201 */ float startPos;
  /* offset=0x0008 flags=0x0018001040000201 */ float AnimStartTime;
  /* offset=0x000c flags=0x0018001040000201 */ float AnimEndTime;
  /* offset=0x0010 flags=0x0018001040000201 */ float AnimPlayRate;
  /* offset=0x0014 flags=0x0018001040000201 */ int32 LoopingCount;
};

struct FAnimSetMeshLinkup {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<int32> BoneToTrackTable;
};

struct FAnimSlotGroup {
  /* offset=0x0000 flags=0x0018001040000200 */ FName GroupName;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<FName> SlotNames;
};

struct FAnimSyncMarker {
  /* offset=0x0000 flags=0x0018001040000214 */ FName MarkerName;
  /* offset=0x0008 flags=0x0018001040000214 */ float Time;
};

struct FAnimTrack {
  /* offset=0x0000 flags=0x0010000000000241 */ TArray<struct FAnimSegment> AnimSegments;
};

struct FAnimVehParamList {
  /* offset=0x0000 flags=0x0018001040000205 */ bool IsLeanOut;
  /* offset=0x0001 flags=0x0018001040000205 */ bool IsDriver;
  /* offset=0x0004 flags=0x0010001040000005 */ struct FRotator VehViewRotation;
  /* offset=0x0010 flags=0x0018001040000205 */ uint8 SeatWeaponHoldType;
  /* offset=0x0011 flags=0x0018001040000205 */ uint8 SeatSpecialType;
  /* offset=0x0012 flags=0x0018001040000205 */ enum ESTExtraVehicleType VehicleType;
  /* offset=0x0014 flags=0x0018001040000205 */ float LeanOutPercentage;
};

struct FAnimationStateBase {
  /* offset=0x0000 flags=0x0018001040000200 */ FName StateName;
};

struct FAnimationTransitionBetweenStates: FAnimationStateBase {
  /* offset=0x0008 flags=0x0018001040000200 */ int32 PreviousState;
  /* offset=0x000c flags=0x0018001040000200 */ int32 NextState;
  /* offset=0x0010 flags=0x0018001040000200 */ float CrossfadeDuration;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 StartNotify;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 EndNotify;
  /* offset=0x001c flags=0x0018001040000200 */ int32 InterruptNotify;
  /* offset=0x0020 flags=0x0018001040000200 */ enum EAlphaBlendOption BlendMode;
  /* offset=0x0024 flags=0x0018001040000200 */ UCurveFloat* CustomCurve;
  /* offset=0x0028 flags=0x0018001040000200 */ UBlendProfile* BlendProfile;
  /* offset=0x002c flags=0x0018001040000200 */ uint8 LogicType;
};

struct FAppearanceMatData {
  /* offset=0x0000 flags=0x0018000000010215 */ FString AppearanceKey;
  /* offset=0x000c flags=0x0018001040010215 */ float LifeSpan;
  /* offset=0x0010 flags=0x0018001040010215 */ UMaterialInterface* ParentMaterial;
  /* offset=0x0014 flags=0x0018001040000214 */ UMaterialInstanceDynamic* AppearanceMat;
};

struct FAssetData {
  /* offset=0x0000 flags=0x0018001040002214 */ FName ObjectPath;
  /* offset=0x0008 flags=0x0018001040002214 */ FName PackageName;
  /* offset=0x0010 flags=0x0018001040002214 */ FName PackagePath;
  /* offset=0x0018 flags=0x0018001040002214 */ FName AssetName;
  /* offset=0x0020 flags=0x0018001040002214 */ FName AssetClass;
};

struct FAssetManagerRedirect {
  /* offset=0x0000 flags=0x0018000000000201 */ FString Old;
  /* offset=0x000c flags=0x0018000000000201 */ FString New;
};

struct FAssetMapping {
  /* offset=0x0000 flags=0x0018001040000201 */ UAnimationAsset* SourceAsset;
  /* offset=0x0004 flags=0x0018001040000201 */ UAnimationAsset* TargetAsset;
};

struct FAtmospherePrecomputeParameters {
  /* offset=0x0000 flags=0x0018001040000215 */ float DensityHeight;
  /* offset=0x0004 flags=0x0018001060000200 */ float DecayHeight;
  /* offset=0x0008 flags=0x0018001040000215 */ int32 MaxScatteringOrder;
  /* offset=0x000c flags=0x0018001040000200 */ int32 TransmittanceTexWidth;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 TransmittanceTexHeight;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 IrradianceTexWidth;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 IrradianceTexHeight;
  /* offset=0x001c flags=0x0018001040000215 */ int32 InscatterAltitudeSampleNum;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 InscatterMuNum;
  /* offset=0x0024 flags=0x0018001040000200 */ int32 InscatterMuSNum;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 InscatterNuNum;
};

struct FAttackFlow {
  /* offset=0x0000 flags=0x0018000000000200 */ FString GameSvrId;
  /* offset=0x0010 flags=0x0018001040000200 */ int64 dtEventTime;
  /* offset=0x0018 flags=0x0018000000000200 */ FString GameAppID;
  /* offset=0x0024 flags=0x0018000000000200 */ FString OpenID;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 AreaID;
  /* offset=0x0031 flags=0x0018001040000200 */ int8 PlatID;
  /* offset=0x0034 flags=0x0018000000000200 */ FString ZoneID;
  /* offset=0x0040 flags=0x0018001040000200 */ uint64 BattleID;
  /* offset=0x0048 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 MrpcsFlowcount_;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0060 flags=0x0018000000000200 */ FString UserName;
  /* offset=0x0070 flags=0x0018001040000200 */ uint64 RoleID;
  /* offset=0x0078 flags=0x0018001040000200 */ int8 RoleType;
  /* offset=0x007c flags=0x0018000000000200 */ FString TargetOpenID;
  /* offset=0x0088 flags=0x0018000000000200 */ FString TargetUserName;
  /* offset=0x0098 flags=0x0018001040000200 */ uint64 TargetRoleID;
  /* offset=0x00a0 flags=0x0018001040000200 */ int8 TargetRoleType;
  /* offset=0x00a4 flags=0x0018000000000200 */ FString GunName;
  /* offset=0x00b0 flags=0x0018000000000200 */ FString GunPartsType;
  /* offset=0x00bc flags=0x0018001040000200 */ int8 SightType;
  /* offset=0x00c0 flags=0x0018001040000200 */ int32 BulletSpeed;
  /* offset=0x00c4 flags=0x0018001040000200 */ int8 MagazineMax;
  /* offset=0x00c5 flags=0x0018001040000200 */ int8 MagazineLeft;
  /* offset=0x00c8 flags=0x0018001040000200 */ int32 ShotFrequency;
  /* offset=0x00cc flags=0x0018001040000200 */ int32 BulletDamage;
  /* offset=0x00d0 flags=0x0018001040000200 */ int16 BulletDown;
  /* offset=0x00d2 flags=0x0018001040000200 */ uint8 BulletDamageReduce;
  /* offset=0x00d4 flags=0x0018001040000200 */ int32 Recoil;
  /* offset=0x00d8 flags=0x0018001040000200 */ int32 ReloadTime;
  /* offset=0x00dc flags=0x0018000000000200 */ FString PlayerState;
  /* offset=0x00e8 flags=0x0018001040000200 */ uint8 ShotPose;
  /* offset=0x00e9 flags=0x0018001040000200 */ uint8 FireType;
  /* offset=0x00ea flags=0x0018001000000000 */ uint8 bHoldBreath:1;
  /* offset=0x00eb flags=0x0018001040000200 */ uint8 Sideways;
  /* offset=0x00ec flags=0x0018001040000200 */ int32 ShootingDeviationX;
  /* offset=0x00f0 flags=0x0018001040000200 */ int32 ShootingDeviationY;
  /* offset=0x00f4 flags=0x0018001040000200 */ uint32 ZeroDistance;
  /* offset=0x00f8 flags=0x0018001040000200 */ uint32 ShotTime;
  /* offset=0x00fc flags=0x0018001040000200 */ int32 HitTime;
  /* offset=0x0100 flags=0x0018001040000200 */ int32 PlayerPositionX;
  /* offset=0x0104 flags=0x0018001040000200 */ int32 PlayerPositionY;
  /* offset=0x0108 flags=0x0018001040000200 */ int32 PlayerPositionZ;
  /* offset=0x010c flags=0x0018001040000200 */ int32 GunPositionX;
  /* offset=0x0110 flags=0x0018001040000200 */ int32 GunPositionY;
  /* offset=0x0114 flags=0x0018001040000200 */ int32 GunPositionZ;
  /* offset=0x0118 flags=0x0018001040000200 */ int32 BulletsBornPositionX;
  /* offset=0x011c flags=0x0018001040000200 */ int32 BulletsBornPositionY;
  /* offset=0x0120 flags=0x0018001040000200 */ int32 BulletsBornPositionZ;
  /* offset=0x0124 flags=0x0018001040000200 */ uint32 LastHitTime;
  /* offset=0x0128 flags=0x0018001040000200 */ uint32 BulletFlyDistance;
  /* offset=0x012c flags=0x0018001040000200 */ uint32 BulletFlyTime;
  /* offset=0x0130 flags=0x0018001040000200 */ int32 HitPositionX;
  /* offset=0x0134 flags=0x0018001040000200 */ int32 HitPositionY;
  /* offset=0x0138 flags=0x0018001040000200 */ int32 HitPositionZ;
  /* offset=0x013c flags=0x0018001040000200 */ uint8 HitPart;
  /* offset=0x013d flags=0x0018001000000000 */ uint8 bHitCar:1;
  /* offset=0x013d flags=0x0018001000000000 */ uint8 bTireOut:1;
  /* offset=0x013e flags=0x0018001040000200 */ uint8 BulletCost;
  /* offset=0x0140 flags=0x0018001040000200 */ int32 HPstart;
  /* offset=0x0144 flags=0x0018001040000200 */ int32 HPEnd;
  /* offset=0x0148 flags=0x0018001040000200 */ int32 ArmorHPStart;
  /* offset=0x014c flags=0x0018001040000200 */ int32 ArmorHPEnd;
  /* offset=0x0150 flags=0x0018001040000200 */ int32 CarHPStart;
  /* offset=0x0154 flags=0x0018001040000200 */ int32 CarHPEnd;
  /* offset=0x0158 flags=0x0018001040000200 */ uint8 PlayerKill;
  /* offset=0x0159 flags=0x0018001000000000 */ uint8 bArmorKill:1;
  /* offset=0x0159 flags=0x0018001000000000 */ uint8 bCarKill:1;
  /* offset=0x015c flags=0x0018001040000200 */ int32 RecoilMoveX;
  /* offset=0x0160 flags=0x0018001040000200 */ int32 RecoilMoveY;
  /* offset=0x0164 flags=0x0018001040000200 */ int32 WeaponAimFOV;
  /* offset=0x0168 flags=0x0018001040000200 */ int32 BulletDamageDebuff;
  /* offset=0x016c flags=0x0018001040000200 */ int32 BulletDamageBuff;
  /* offset=0x0170 flags=0x0018001040000200 */ uint32 AtackFlowID;
};

struct FAttrAffected {
  /* offset=0x0000 flags=0x0018000000000214 */ FString AttrName;
  /* offset=0x000c flags=0x0018001040000214 */ AActor* AffectedActor;
};

struct FAttrModifyItem {
  /* offset=0x0000 flags=0x0018000000000201 */ FString AttrModifyItemName;
  /* offset=0x000c flags=0x0018000000000201 */ FString AttrName;
  /* offset=0x0018 flags=0x0018001040000201 */ enum EAttrOperator ModifierOp;
  /* offset=0x001c flags=0x0018001040000201 */ float ModifierValue;
  /* offset=0x0020 flags=0x0018001040000201 */ bool IsEnable;
  /* offset=0x0021 flags=0x0018001040000201 */ bool ClientSimulate;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<struct FCacheAffactTargetInfo> AffectTargetsCachInfo;
};

struct FAttrRegisterItem {
  /* offset=0x0000 flags=0x0018000000000204 */ FString AttrName;
  /* offset=0x000c flags=0x0018001040000204 */ enum EAttrVariableType AttrVariableType;
  /* offset=0x000d flags=0x0018001040000204 */ bool HasReplicatedTag;
};

struct FAudioComponentParam {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParamName;
  /* offset=0x0008 flags=0x0018001040000205 */ float FloatParam;
  /* offset=0x000c flags=0x0018001040000205 */ bool BoolParam;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 IntParam;
  /* offset=0x0014 flags=0x0018001040000205 */ USoundWave* SoundWaveParam;
};

struct FAudioEQEffect {
  /* offset=0x0008 flags=0x0018001040000201 */ float FrequencyCenter0;
  /* offset=0x000c flags=0x0018001040000201 */ float Gain0;
  /* offset=0x0010 flags=0x0018001040000201 */ float Bandwidth0;
  /* offset=0x0014 flags=0x0018001040000201 */ float FrequencyCenter1;
  /* offset=0x0018 flags=0x0018001040000201 */ float Gain1;
  /* offset=0x001c flags=0x0018001040000201 */ float Bandwidth1;
  /* offset=0x0020 flags=0x0018001040000201 */ float FrequencyCenter2;
  /* offset=0x0024 flags=0x0018001040000201 */ float Gain2;
  /* offset=0x0028 flags=0x0018001040000201 */ float Bandwidth2;
  /* offset=0x002c flags=0x0018001040000201 */ float FrequencyCenter3;
  /* offset=0x0030 flags=0x0018001040000201 */ float Gain3;
  /* offset=0x0034 flags=0x0018001040000201 */ float Bandwidth3;
};

struct FAudioQualitySettings {
  /* offset=0x0000 flags=0x0010000000000001 */ FText DisplayName;
  /* offset=0x000c flags=0x0018001040000201 */ int32 MaxChannels;
};

struct FAutoAimingConfig {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FAutoAimingRangeConfig OuterRange;
  /* offset=0x0030 flags=0x0010001000000001 */ struct FAutoAimingRangeConfig InnerRange;
  /* offset=0x0060 flags=0x0018001040000201 */ float followTimeMax;
};

struct FAutoAimingRangeConfig {
  /* offset=0x0000 flags=0x0018001040010201 */ float Speed;
  /* offset=0x0004 flags=0x0018001040010201 */ float RangeRate;
  /* offset=0x0008 flags=0x0018001040010201 */ float SpeedRate;
  /* offset=0x000c flags=0x0018001040010201 */ float RangeRateSight;
  /* offset=0x0010 flags=0x0018001040010201 */ float SpeedRateSight;
  /* offset=0x0014 flags=0x0018001040010201 */ float CrouchRate;
  /* offset=0x0018 flags=0x0018001040010201 */ float ProneRate;
  /* offset=0x001c flags=0x0018001040010201 */ float adsorbMaxRange;
  /* offset=0x0020 flags=0x0018001040010201 */ float adsorbMinRange;
  /* offset=0x0024 flags=0x0018001040010201 */ float adsorbMinAttenuationDis;
  /* offset=0x0028 flags=0x0018001040010201 */ float adsorbMaxAttenuationDis;
  /* offset=0x002c flags=0x0018001040010201 */ float adsorbActiveMinRange;
};

struct FAutoCompleteCommand {
  /* offset=0x0000 flags=0x0018000000004201 */ FString Command;
  /* offset=0x000c flags=0x0018000000004201 */ FString Desc;
};

struct FAvatarItemData: FBattleItemData {
  /* offset=0x0080 flags=0x0018001040000204 */ USkeletalMesh* SkeletalMesh;
  /* offset=0x0084 flags=0x0018001040000204 */ UStaticMesh* StaticMesh;
  /* offset=0x0088 flags=0x0018001040000204 */ UMaterialInstance* matInst;
  /* offset=0x008c flags=0x0018001040000200 */ int32 meshType;
};

struct FBPClassItem {
  /* offset=0x0000 flags=0x0018000000010201 */ FString ClassTagName;
  /* offset=0x0010 flags=0x001c000000010001 */ UClass<UObject>* NativeClass;
  /* offset=0x0038 flags=0x001c000000010001 */ UClass<UObject>* BPClass;
};

struct FBPTableItem {
  /* offset=0x0000 flags=0x0018001040000204 */ int32 ID;
  /* offset=0x0004 flags=0x0018000000000204 */ FString Name;
  /* offset=0x0010 flags=0x0018000000000204 */ FString Path;
};

struct FBPVariableMetaDataEntry {
  /* offset=0x0000 flags=0x0018001040000201 */ FName DataKey;
  /* offset=0x0008 flags=0x0018000000000201 */ FString DataValue;
};

struct FBP_STRUCT_ActButtonInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Btn_Type_0_72A7BDDA4D539877791B30B19CB97C5E;
  /* offset=0x0004 flags=0x0008000000000205 */ FString Btn_TypeName_1_C1631EF849C229989F4201B7B2E4F5B5;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 ActID_2_89F1DAB74AE5AF1F611CE4AC8F9FAE25;
  /* offset=0x0014 flags=0x0008000000000205 */ FString Btn_Name_3_CB1FB8C54883B36537B88AA8946E6E9B;
  /* offset=0x0020 flags=0x0000001040000205 */ bool IsRedPoint_4_4762A09D4D3A7BDD1094AE91409A4294;
};

struct FBP_STRUCT_ActiveAwardInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString status_2_63049F3D4B573DE822E277BB11CF38C5;
  /* offset=0x000c flags=0x0008001040000205 */ int32 id_1_A0702D724E5C3EC2F83B4B9CB00D4F52;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 value_3_CB44583242127623F9B90AA93F2B0AD4;
};

struct FBP_STRUCT_ActiveAwardItem {
  /* offset=0x0000 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_DropItem> BP_ARRAY_FixItemList_0_A6F4D8AE4C30D0464CBFD5A181F348BA;
  /* offset=0x000c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_DropItem> BP_ARRAY_RandomItemList_1_FC87B35E49383A13AA0B4B8A1425BA97;
};

struct FBP_STRUCT_ActivityBtnDisplay {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Priority_0_46159A294AD8CE52B8706D9F5544BD82;
  /* offset=0x0004 flags=0x0008000000000205 */ FString ActivityName_1_BDDD54604B8656536C99C0A3F5074B3F;
  /* offset=0x0010 flags=0x0008000000000205 */ FString IconPath_2_C79C7E02493AE6F3925939B80B14DE6D;
  /* offset=0x001c flags=0x0008000000000205 */ FString JumpUrl_3_883F04534B750337906ECABA456B4935;
};

struct FBP_STRUCT_ActivityGroupInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 type_0_D067354840D2B27A27F8838B84B660C8;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 id_1_6CC5C2A24764550ECD1880B81A718F90;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 button_id_2_DAC92545495BC629323B44BB8CA895E6;
  /* offset=0x000c flags=0x0008001040000205 */ int32 position_3_9E25B58544334B518AEEA0966BD19DD8;
  /* offset=0x0010 flags=0x0008000000000205 */ FString icon_4_D0D214D7417C22863EB58CADE5E15C77;
  /* offset=0x001c flags=0x0008000000000205 */ FString description_5_0C6C081A4282C827C2742ABFF98514A7;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 end_time_6_F124D037419BEE0C0E9895AA27C51133;
  /* offset=0x002c flags=0x0008000000000205 */ FString jump_to_7_EDD6D2364CC15A70A343D0AEBB2F8578;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 open_time_8_BA857826461842809675D4946CE2CECE;
  /* offset=0x003c flags=0x0008000000000205 */ FString title_9_0737801341804875EE22F29154492EC0;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 activity_id_10_CFE7932D48472BA7BD4200B4FB90DBD4;
};

struct FBP_STRUCT_ActivtyInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString LabelDesc_1_0EFC5DED4CED05B79FDCF6B9E65944E9;
  /* offset=0x000c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyInfo> BP_ARRAY_SubActivtyList_4_933599174B1BED11D5D64F8229990182;
  /* offset=0x0018 flags=0x0008000000000205 */ FString ImgUrl_7_118283564B55A3DD0FDF5AAF9712C5DF;
  /* offset=0x0024 flags=0x0008000000000205 */ FString EndTimeStr_9_E9AF9C4148A199EC73BB589422750EBE;
  /* offset=0x0030 flags=0x0008000000000205 */ FString Title_10_B7DE485B48313542459A0CA90F0A2EA7;
  /* offset=0x003c flags=0x0008000000000205 */ FString StartTimeStr_12_38F4087242259C1D210C9C98A68AE294;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 ID_14_103BF6F54D3F09622B6DF48C276390CD;
  /* offset=0x004c flags=0x0008000000000205 */ FString ImgLink_18_A5ECFD5B45F94F471012FAB48547C49E;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 LabelType_19_4B7540464994C079799243BC5D06BB10;
  /* offset=0x005c flags=0x0008000000000205 */ FString Desc_22_AD24C1674410F87CB92F399F38ECD3EA;
  /* offset=0x0068 flags=0x0008000000000205 */ FString Detail_26_D77DDBD54C6614122839C3BE5087AB0E;
};

struct FBP_STRUCT_ActivtyInfo_Click {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 SubActIndex_0_D7D80E5A43F1A94B30F0A38B46B872A0;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 SubActType_1_BDE3B10B40F2A8D8512BD2927A1883C0;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 SubActID_2_4DDE339C45BB47C52C25DEB253222565;
  /* offset=0x000c flags=0x0008001040000205 */ int32 Arg_3_A9B6F30A477F5CE4764586BC17CD0C1E;
};

struct FBP_STRUCT_ActivtyNoticeBtn_Select {
  /* offset=0x0000 flags=0x0000001040000205 */ bool NowIsSelectNotice_0_6A4ED774484E36FDEF1945B0BF65121F;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 NowSelectActID_1_959E24F94B4EE0A2D0175CA4DAB5F3E8;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 NowSelectNoticeID_2_51572923453FC7BC25D7B487C3C5776B;
};

struct FBP_STRUCT_AllianceInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 memberNum_0_14223FAF4E0B0862E577E7B919B9CC6C;
  /* offset=0x0004 flags=0x0008000000000205 */ FString icon_1_5213135C4D600FD1A9B67896D172529E;
  /* offset=0x0010 flags=0x0008000000000205 */ FString notice_2_093DE7884DA8175E805ADEB3366F51E4;
  /* offset=0x001c flags=0x0008001040000205 */ int32 bonusPercent_3_A1F8CCCE42519DA58E14B8A2818B9486;
  /* offset=0x0020 flags=0x0008000000000205 */ FString aid_4_D4CA4B6541460B92F9C627917E5FB149;
  /* offset=0x002c flags=0x0008001040000205 */ int32 trainValue_5_BFC93A9C459F1BCFE22F3DA42D51DF21;
  /* offset=0x0030 flags=0x0008000000000205 */ FString name_6_0707D5E14DAE0C71424A7ABE2469D510;
  /* offset=0x003c flags=0x0008001040000205 */ int32 iconId_7_7227304B4C2FC66B01CBBCA62180B32B;
  /* offset=0x0040 flags=0x0008000000000205 */ FString captainName_8_5CE327344A858F34D04E5CBB7A58EEEA;
  /* offset=0x004c flags=0x0008000000000205 */ FString captainId_9_7EA8BC1F45CBC5EF4EEBE499BC945AFF;
  /* offset=0x0058 flags=0x0008000000000205 */ FString bind_group_12_605BE28B480D196A67AE9E8545EB5BFD;
};

struct FBP_STRUCT_AllianceMemberProfile {
  /* offset=0x0000 flags=0x0008000000000205 */ FString applyMsg_0_F26BBAA94F527968A3A6508854D7547A;
  /* offset=0x000c flags=0x0008000000000205 */ FString createTimeStr_1_02E74E1A4269A8F32F63DAB7AEE2A980;
  /* offset=0x0018 flags=0x0008000000000205 */ FString nickName_2_F311990B47F869CDC46BF18E81832C0A;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 ladder_3_D64A9800498FFE8ED65B2DB92BC714A5;
  /* offset=0x0028 flags=0x0008000000000205 */ FString picUrl_4_95C820634824568EFEC28CBDA38229DC;
  /* offset=0x0034 flags=0x0008000000000205 */ FString platName_5_2EA70FFE4EC004E3CD0B95B4BFB37158;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 online_6_A096EBFA40C7652C429DD49CDD6F389C;
  /* offset=0x0044 flags=0x0008001040000205 */ int32 maxTeamAmount_7_50BDE46D44A68B79E2B60BA9D97EA65F;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 lastOnlineTime_8_795F95D14952D3871FD6B19386173A7F;
  /* offset=0x004c flags=0x0008000000000205 */ FString lastOnlineTimeStr_9_EB9EB147419140640388F193D03DD5CF;
  /* offset=0x0058 flags=0x0008000000000205 */ FString timeSinceGameBeginStr_10_7EE32DDB4FF0DE3564A76BA721DF5EEB;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 timeSinceGameBegin_11_6F7B4A004D33F4462CDD90AC63451924;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 createTime_12_43343A4B41119FAD3739B4B1FF6C49E3;
  /* offset=0x006c flags=0x0008001040000205 */ int32 sex_13_DA360E7040209D4772B13AB788F4E62A;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 currentTeamAmount_14_2191C12B427F2FD624BC358593968975;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 teamId_15_75587A414B1926678EDCCBA79A6492FB;
  /* offset=0x0078 flags=0x0008001040000205 */ int32 teamState_16_6590DB364C3043F73A71EB9A4CD9FB2D;
  /* offset=0x007c flags=0x0008001040000205 */ int32 friendType_17_23B1318745BBCE616204CBBB9B8698C3;
  /* offset=0x0080 flags=0x0008001040000205 */ int32 vipLevel_18_4DA4702E48D7312D6AE1AB943C54827B;
  /* offset=0x0084 flags=0x0008000000000205 */ FString gid_19_1EBAF39B47CE75E9B2033ABE703D3866;
  /* offset=0x0090 flags=0x0008001040000205 */ int32 segment_info_squad_20_20BBFD604952EC79E75894BE709C44D2;
  /* offset=0x0094 flags=0x0008000000000205 */ FString militaryRank_21_0BA851F647FEF359041824BFA6C79870;
  /* offset=0x00a0 flags=0x0008001040000205 */ int32 segment_info_duo_22_559F70F244687D4EF98495AA45DF195D;
  /* offset=0x00a4 flags=0x0008001040000205 */ int32 segment_info_solo_23_0F79269741CCB0F8C60229903352449E;
  /* offset=0x00a8 flags=0x0008001040000205 */ int32 exp_24_BC634BF24FE6ABF7102129BF2210DAF1;
  /* offset=0x00ac flags=0x0008001040000205 */ int32 level_25_A37648A64065A686D7D74C85B10A56B4;
  /* offset=0x00b0 flags=0x0008001040000205 */ int32 lastLoginTime_26_4417FC3449B8EDB90279B887D4DA2564;
  /* offset=0x00b4 flags=0x0000001040000205 */ bool isCaptain_27_75F5A63346964F5F08ED3A930AFFD682;
  /* offset=0x00b8 flags=0x0008000000000205 */ FString allianceId_28_5B66F4A1448CE3E2585181B5273EE865;
  /* offset=0x00c4 flags=0x0000001040000205 */ bool isMyFriend_29_F84818484E3093A9FC7B688A27387E02;
  /* offset=0x00c8 flags=0x0008001040000205 */ int32 cur_avatar_box_id_30_E9E6B583490CC8A310567C91354AEC14;
  /* offset=0x00cc flags=0x0008000000000205 */ FString openId_33_D31B1D154A987F35FAE6608CAFF88BD7;
  /* offset=0x00d8 flags=0x0000001040000205 */ bool isInSnsGroup_34_6762FBA547E837E2FF57E3A069B384CD;
  /* offset=0x00dc flags=0x0008001040000205 */ int32 qq_vip_35_7063A5974FE0504B6B9FCA97F34151BB;
};

struct FBP_STRUCT_AllianceRecruit {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 maxTeamAmount_0_E902600D4F2504485EA85C8D4C8E3358;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 sex_1_A240836C424D30C23F9E7F9F03105F8F;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 vipLevel_2_69A66EFF41C4BBD56625C0A60298C363;
  /* offset=0x000c flags=0x0008001040000205 */ int32 createTime_3_6856CA9D4A97AA65797F8DB0DCA73F9C;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 teamId_4_74F56B8344ABB88EF401E685970D9FB2;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 exp_5_C906C6E84DBE40E7869E00B8EA1DBD1E;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 segment_info_duo_6_54713A264DCF20F37E340C9847C5C029;
  /* offset=0x001c flags=0x0008001040000205 */ int32 level_7_7FEDA2FC455D6E037E90858A006FB04B;
  /* offset=0x0020 flags=0x0008000000000205 */ FString lastOnlineTimeStr_8_3565651F4CB68525C14C44A56C1607F4;
  /* offset=0x002c flags=0x0008001040000205 */ int32 timeSinceGameBegin_9_F0B9C2E144EE09866F5A3AAA9EB05C52;
  /* offset=0x0030 flags=0x0008000000000205 */ FString applyMsg_10_3D87E51E40E552233616A681FED9423A;
  /* offset=0x003c flags=0x0008001040000205 */ int32 teamState_11_95B6E504458A62A98234D997F0304329;
  /* offset=0x0040 flags=0x0008000000000205 */ FString createTimeStr_12_DC8676FC45EB1DE00DB4489A98FAE929;
  /* offset=0x004c flags=0x0008000000000205 */ FString picUrl_13_86E5F4F74357F136EECCC7B95CBEE00A;
  /* offset=0x0058 flags=0x0008000000000205 */ FString platName_14_EB61752D489CD3B3690796B64863A383;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 friendType_15_B9980EC24BEB45080626C1A3ED8F1583;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 online_16_9FA756FE4160635F285463A5B2DAC2AB;
  /* offset=0x006c flags=0x0008000000000205 */ FString militaryRank_17_5DD43F02403D20B318B1C0A9A903EF28;
  /* offset=0x0078 flags=0x0008001040000205 */ int32 currentTeamAmount_18_96493F9D4BE617AB41060C8A434B331D;
  /* offset=0x007c flags=0x0008001040000205 */ int32 segment_info_squad_19_93147F65474EDE615DC6BCAEEB47D9F9;
  /* offset=0x0080 flags=0x0008001040000205 */ int32 lastOnlineTime_20_3FEAEB0A4AA914C3B0A038B891AF2AC2;
  /* offset=0x0084 flags=0x0008001040000205 */ int32 ladder_21_F210BF9D4C43C764BA074F85D429B85A;
  /* offset=0x0088 flags=0x0008000000000205 */ FString gid_22_40F7E73341A6C718653C2F94CB45F10D;
  /* offset=0x0094 flags=0x0008001040000205 */ int32 lastLoginTime_23_C141EEE04E8D371D9BEA0390C2127386;
  /* offset=0x0098 flags=0x0008001040000205 */ int32 segment_info_solo_24_8C90F09C4AC9399D1B38AE9B05E896B6;
  /* offset=0x009c flags=0x0008000000000205 */ FString nickName_25_71B5E2894E58AB8CDDB7FDBB0873951F;
  /* offset=0x00a8 flags=0x0008000000000205 */ FString timeSinceGameBeginStr_26_E8002EAE49AEDA6CEA06C192B26B637E;
  /* offset=0x00b4 flags=0x0000001040000205 */ bool hasSendInvite_27_6F8346414D0ADB95FDE65F975029614D;
  /* offset=0x00b8 flags=0x0008001040000205 */ int32 cur_avatar_box_id_28_888E18AE43A4F9451C29B9BFEF71DF22;
};

struct FBP_STRUCT_AvatarBPTable_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString CName_0_A4052DC94E7BDAA9FAD3B19A7B988D48;
  /* offset=0x000c flags=0x0008000000000205 */ FString AvatarBPPath_1_891FA0534B751701E31560B16F286D8B;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 ItemID_2_5414CFBB435533293B561394BF4A770E;
};

struct FBP_STRUCT_AvatarChange {
  /* offset=0x0000 flags=0x0008000000000205 */ FString gid_0_0068A02D4FB8507FACCE29A6D83352E4;
  /* offset=0x000c flags=0x0008001040000205 */ int32 resId_1_B16CC58E4E3009EDA5FFDF966711B5CB;
};

struct FBP_STRUCT_AvatarFrame_type {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Type_0_1A0A9F0743331BBE49AADB988DC87C90;
  /* offset=0x0004 flags=0x0008000000000205 */ FString Desc_1_AC45D7034D7DDDC90D52E19BF6D66EF9;
  /* offset=0x0010 flags=0x0008000000000205 */ FString Name_2_401DF90F47F3FF259DF5AD890925B071;
  /* offset=0x001c flags=0x0008001040000205 */ int32 ID_3_831225F64111B05931B2D0B74884A6BD;
  /* offset=0x0020 flags=0x0008000000000205 */ FString DescGet_4_E78748484096828FA71D5E85901FD57B;
  /* offset=0x002c flags=0x0008000000000205 */ FString IconBig_5_82F9A60A40DA032B376321A0896F07F2;
  /* offset=0x0038 flags=0x0008000000000205 */ FString Icon_6_7C7ADBE24A1E2C45A54BC7BD91D84759;
  /* offset=0x0044 flags=0x0008000000000205 */ FString DescTime_7_684743074A1D090755252DAA2F6832B5;
};

struct FBP_STRUCT_BTRating {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 change_rank_rating_30_3022F3C649CCAF70ED2262AEFF63941A;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 change_win_rating_31_8E3F5C4C45B48822803F06B5830EAEF0;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 kill_rating_32_887C5E6C43E2754281639FB8224EE63A;
  /* offset=0x000c flags=0x0008001040000205 */ int32 change_kill_rating_33_292F57254C9D5A389F6501A63B1743BF;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 rank_rating_34_FCA5AD94413785C36C9A0EAF24EA56FB;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 win_rating_35_D18CD8AB4F2C342EDA0EE2BC6FB10C24;
};

struct FBP_STRUCT_BattleResultData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString Reason_0_090FA58547C1A0B16D89ED93556131B8;
  /* offset=0x000c flags=0x0008001040000205 */ int32 RemainingPlayerCount_1_B6DCB4414166FCD5925CDDB9D1FE4005;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 TotalPlayerCount_2_3C547194403DC35E7A7441A850D9052A;
  /* offset=0x0014 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_MemBTResultData> BP_ARRAY_TeammateList_4_D1D37C9F463CFE5D12DB56A25C3FC3F5;
  /* offset=0x0020 flags=0x0000001040000205 */ bool IsSolo_5_7761A17048044B6BA00837870DEE79A6;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 RemainingTeamCount_6_09A91CE14B0638569CB67BA3C11DA4C1;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 TotalTeamCount_7_B45CD71043E4B40CE3733EB58A5FA2C8;
  /* offset=0x002c flags=0x0008001040000205 */ int32 HealTimes_8_92E7141942C26836199CD295FA664C38;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 destroyVehicleNum_10_39F2606240FAD9BB96112FB36D7F3476;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 ShootWeaponShotNum_15_00FDC55D46412A4EF2D46788057C4B8E;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 ShootWeaponShotAndHitPlayerNum_16_2F13756C4750D3F3F05932BC37A64410;
  /* offset=0x003c flags=0x0008001040000205 */ int32 add_exp_18_33F80B2F441B32D5C0B97FA429A2643D;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 add_gold_19_88091C09400E4592461BFA9B7875B20F;
  /* offset=0x0044 flags=0x0008001040000205 */ int32 battle_id_20_991B81644AB2AFE897194A8812ED48F2;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 max_game_num_21_89652E3B4A981D752CEE0DB8B057F65E;
  /* offset=0x004c flags=0x0008000000000005 */ struct FBP_STRUCT_BTRating BP_STRUCT_BTRating_23_9103901146E6516BDB1721AD842CA08D;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 person_rank_24_4BE9AF544E5666C0D1276F9D4B7381A1;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 team_rank_25_19B113CD47B5E1F5B1D2C4AE0CACF918;
  /* offset=0x006c flags=0x0000001040000205 */ bool is_last_survive_27_D64038A548BAF4E29E66ECB94800871A;
  /* offset=0x006d flags=0x0000001040000205 */ bool is_team_result_28_77AFCE32426209D6DA3EDDB119CBB9C9;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 HeadShotRatio_29_CF108FB640585FC2F35E53BA84BB23EB;
  /* offset=0x0074 flags=0x0000001040000205 */ bool is_version_match_30_8C55192942DA2E7A91B2189BE6B447B1;
  /* offset=0x0078 flags=0x0008001040000205 */ int32 final_level_31_373D4259445F1E41E1D787A83FEDB9AE;
};

struct FBP_STRUCT_BattleText_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString BattleTextValue_0_C862B6A74DAE6AFFE016F7A75B08BB2E;
  /* offset=0x000c flags=0x0008001040000205 */ int32 BattleTextId_1_B87A149F450B53DA84777BAED491366B;
};

struct FBP_STRUCT_BetterAwardInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString itemName_0_636B5FBB48C5F7230F16AFA5B8BB830A;
  /* offset=0x000c flags=0x0008001040000205 */ int32 status_1_AB78C601463946E65C4BD1927EC05BD8;
  /* offset=0x0010 flags=0x0008000000000205 */ FString name_2_6ACEB602425FFDB0D8F6C88694CE6D05;
  /* offset=0x001c flags=0x0008001040000205 */ int32 itemQuality_3_8033A9BA41D349EF35F2838FE9DE4DEF;
  /* offset=0x0020 flags=0x0008000000000205 */ FString itemImage_4_C9B31B0941D569BC9DC034BDB290AB32;
  /* offset=0x002c flags=0x0008001040000205 */ int32 itemID_5_6D2DFD3D4F2AA91D018BC48060793561;
};

struct FBP_STRUCT_ChatBriefFriendData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 maxTeamAmount_0_E7ACA51649B9BA1082CC6BAF96FA7656;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 lastOnlineTime_1_9069ECD84C10BCC1D33725A622884B9D;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 currentTeamAmount_2_F642812E4F7D4AE6EB5F9FB0687062A9;
  /* offset=0x000c flags=0x0008001040000205 */ int32 segment_info_squad_3_31DDABB64F46646D3655868C277EBA28;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 teamId_4_466B28A7420169ED925E1A97A8E7E2D5;
  /* offset=0x0014 flags=0x0008000000000205 */ FString militaryRank_5_630EC01A4A03D211AA1B11ADCD1038FD;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 level_6_D3E27B0A4AD65089AFAACEA116523E3E;
  /* offset=0x0024 flags=0x0008000000000205 */ FString nickName_7_68867FAE47CD38028C659B80A7D4F9C8;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 segment_info_duo_8_522E8C694A89E515CF6C988BE9AA9F33;
  /* offset=0x0034 flags=0x0008000000000205 */ FString gid_9_BCDAB468440D6CDB1C3B198B38D600A6;
  /* offset=0x0040 flags=0x0008000000000205 */ FString applyMsg_10_D02514704273EE94FBACEF82BCE7CAF8;
  /* offset=0x004c flags=0x0008000000000205 */ FString platName_11_4A0901624B1C6800661CEA98EAAAAF2C;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 teamState_12_ACF002CC478BAD409C8EFDAC5F0C54B8;
  /* offset=0x005c flags=0x0008001040000205 */ int32 sex_13_97B985ED418D97E7A3C462BB2AAE2479;
  /* offset=0x0060 flags=0x0008001040000205 */ int32 vipLevel_14_B72D115440B143A8DAAF0EBCEF886129;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 cur_avatar_box_id_15_FA56B32F4D33D980EBDFEAB398542C51;
  /* offset=0x0068 flags=0x0008000000000205 */ FString picUrl_16_13E61944448F9DB1133BEFA3971FF9E7;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 segment_info_solo_17_2943343541B3FC95FDC1009C01B430EB;
  /* offset=0x0078 flags=0x0008001040000205 */ int32 timeSinceGameBegin_18_2FB6548243B006C8EB113F90802B364C;
  /* offset=0x007c flags=0x0008001040000205 */ int32 op_19_34C91D28457379A0BC54B79D4AD40DA7;
  /* offset=0x0080 flags=0x0008001040000205 */ int32 online_20_114A00FD44301BF1CC15B0B7A771D620;
  /* offset=0x0084 flags=0x0008001040000205 */ int32 ladder_21_38A2C27344746F842735BB91AF21BEFF;
};

struct FBP_STRUCT_ChatMessageSingleData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString msgSendDate_0_3C9DBBCD4A39D0DE8B02719C1F42F9E0;
  /* offset=0x000c flags=0x0008000000000205 */ FString msg_1_69410B7C492F84FAB1A6CD9B12A208F7;
  /* offset=0x0018 flags=0x0000001040000205 */ bool selfMsg_2_67B3182D4873EF114014BEB1EB5FCE7B;
  /* offset=0x001c flags=0x0008001040000205 */ int32 level_3_7E5E516B424C6A0BE2CFE692237E8D7C;
  /* offset=0x0020 flags=0x0008000000000205 */ FString voiceMsgId_4_904A1EF14CEE1CDF5434FDB1E0AA64E4;
  /* offset=0x002c flags=0x0008000000000205 */ FString roomId_5_0384A14E4D7FCC950AE3699301C7DA35;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 voiceMsgTime_6_1F71633F45AE41EDA09E38A3644F4F1D;
  /* offset=0x003c flags=0x0008000000000205 */ FString name_7_3EE7D9BF435F8A71F92DC4B601728CEF;
  /* offset=0x0048 flags=0x0008000000000205 */ FString uid_8_94D7DFC648EA0089E0B4F29C59B5E72D;
  /* offset=0x0054 flags=0x0008000000000205 */ FString roomType_9_FD99880147E35C4DF70270B3C056350B;
  /* offset=0x0060 flags=0x0008000000000205 */ FString icon_10_9A32AB92434BD3D912C7E8849FD64AD5;
  /* offset=0x006c flags=0x0008001040000205 */ int32 msgType_11_1146DF804E89D7C9C42CC5B9A2255207;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 gender_12_1A78AE4F4AAD3D9924354584B26F6715;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 msgChannel_13_5CC8C10A4223255F623EE79B440FB3E0;
  /* offset=0x0078 flags=0x0008000000000205 */ FString msgSendTime_14_C06194A84145E12A7EDC67B15764DBEB;
};

struct FBP_STRUCT_ChatRoomInfo {
  /* offset=0x0000 flags=0x0000001040000205 */ bool isMarked_0_E55F15C9431DBFA62F3CD6B006218F12;
  /* offset=0x0004 flags=0x0008000000000205 */ FString id_1_BC240E014F167D8D4C77B79435BB4852;
  /* offset=0x0010 flags=0x0000001040000205 */ bool isSelfCreate_2_B2701E4A41DFD8F6CF16B6B5AF80D1F3;
  /* offset=0x0014 flags=0x0008000000000205 */ FString name_3_2E9BC1F04D00C597F554F5AE5FB7490F;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 playerCount_4_4B475EBB452DA4B6FA77068FD94DBECB;
  /* offset=0x0024 flags=0x0000001040000205 */ bool needKey_5_E2A8C9774259A2D2BFA648B05D0E46F6;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 updateTime_6_D7A2260C484D11E6DEB443B03F7D2B9A;
};

struct FBP_STRUCT_ChatRoomPlayer {
  /* offset=0x0000 flags=0x0000001040000205 */ bool isHost_0_F2CF40FB4C2BCA9C34EE1D831EA8B33B;
  /* offset=0x0004 flags=0x0008000000000205 */ FString id_2_C6C357DA4A610D710BA27C9DFE903782;
  /* offset=0x0010 flags=0x0008000000000205 */ FString headUrl_4_5141DEF349472CC1BF1D59B58652495E;
  /* offset=0x001c flags=0x0008000000000205 */ FString name_5_30338FEB4696ABDD4B9A008C23D38A14;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 gender_6_0EEFA2FA4E5A13C56359EDAF5FFC35DF;
  /* offset=0x002c flags=0x0008001040000205 */ int32 currentTeamAmount_13_E673F49E4A2B0948C6A132A9B4938648;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 teamId_14_334C842B47838E52A4D4BDB8D4A8AB92;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 teamState_15_3DB5300A4FC96A9B6576859FF98A29EE;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 online_16_AAF7EEFC4D6E732C2F645EB50877C1A5;
  /* offset=0x003c flags=0x0008001040000205 */ int32 timeSinceGameBegin_17_5ED90A07408FA87CA8AA40AB12C44AE7;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 maxTeamAmount_18_91AAFEE84A4851707366E4BE3AC7031F;
  /* offset=0x0044 flags=0x0000001040000205 */ bool isSelf_19_17B0B5924EA03B1652C4089E8E5B6AEB;
  /* offset=0x0045 flags=0x0000001040000205 */ bool isFriend_21_AE2924DA409BD9521FD380A4974E3D10;
  /* offset=0x0046 flags=0x0000001040000205 */ bool isPullBlack_22_CC3B955C4F6D9125E73D92A1DA1B9635;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 segmentInfoDuo_23_1A9621A946BD245E10D2D58570EB5F35;
  /* offset=0x004c flags=0x0008001040000205 */ int32 segmentInfoSquad_24_61ABA9E2428E16A0D5295DA3BD2DF976;
  /* offset=0x0050 flags=0x0008001040000205 */ int32 segmentInfoSolo_25_3E947BEA40C945F917BF54BC6679D1DC;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 cur_avatar_box_id_26_A4B1E05B489BD200093D24AB5DD0407B;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 level_27_B6B2FF50484F3A692DE8CE8F04D8A9BC;
};

struct FBP_STRUCT_ChatUnreadMsgCount {
  /* offset=0x0000 flags=0x0008000000000205 */ FString nickName_0_F08F362140C18333E1A20488EC927C27;
  /* offset=0x000c flags=0x0008000000000205 */ FString gid_1_48819073487AD5B3B623FA98A0C91EDB;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 unreadCount_2_0A56C6E44A6735970F25A78975947C5C;
};

struct FBP_STRUCT_ChatVoiceDownloadData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString fileId_0_276D02824C2D7C7AD65B42B0BAD5AF6F;
  /* offset=0x000c flags=0x0008001040000205 */ int32 msgId_1_424FD4764623F8C7F151F8995A33BDE9;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 msgChannel_2_5340E61A4121F569674C81B39586785F;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 msgGid_3_26BE6C694D40ABEF49E1CE81527B523E;
};

struct FBP_STRUCT_ChooseZoneInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString tpingsvr_ip_0_203E34204BF98390AE709C87453A1D5C;
  /* offset=0x000c flags=0x0008001040000205 */ int32 zone_id_1_B4C381744D3ABCDFC68010AB24310AAD;
  /* offset=0x0010 flags=0x0008000000000205 */ FString tpingsvr_port_2_235630A34E6CC56CAF6785BE5C7D4CBB;
};

struct FBP_STRUCT_CombatBattleInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_maxkill_2_58CE666D4673E6D7265F1A864AD05E3E;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_maxdamage_3_60A3553A4B1764EAF61B3BAE9DB24FE1;
  /* offset=0x0018 flags=0x0008000000000205 */ FString role_avedamage_4_E85C6DBA482F06B1BECE69BF6F5778C8;
  /* offset=0x0024 flags=0x0008000000000205 */ FString role_critcount_7_88CD072C4630F97CA8E23DB857109F80;
  /* offset=0x0030 flags=0x0008000000000205 */ FString role_hitrate_8_03BBCD074A87A51BF24FE9A79728243F;
};

struct FBP_STRUCT_CombatScoreInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_rankscore_0_8F3EDD2F44C25018802F2E8203EA7C51;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_killscore_1_E169516543E46DE166811EABF638C959;
  /* offset=0x0018 flags=0x0008000000000205 */ FString role_score_2_D0A2ED8642E80A70545EE689785DBB56;
};

struct FBP_STRUCT_CombatSurviveInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_avedistance_0_F2DF343D4DE57A7D553735856E642213;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_maxsurvivetime_1_DC58820B4DE8BFB5ED105DAFABB033D3;
  /* offset=0x0018 flags=0x0008000000000205 */ FString role_aidcount_2_26D098364D2E7C198E6F63BF576EE40E;
  /* offset=0x0024 flags=0x0008000000000205 */ FString role_aveheal_3_24C4847F4150A440BAAB379FF0F52189;
  /* offset=0x0030 flags=0x0008000000000205 */ FString role_avesurvivetime_4_77E44D6C4FD346846C590484F4DB501C;
  /* offset=0x003c flags=0x0008000000000205 */ FString role_maxdistance_5_FB0064254732B9326DEE42B11417EC41;
};

struct FBP_STRUCT_CombatTotalInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_killnum_0_A1A2198E44D3CAE87C081DA315797738;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_toptennum_2_9FCD52494212746B5A04A78D218E94A9;
  /* offset=0x0018 flags=0x0008000000000205 */ FString role_allmatchnum_3_ED5E0DF746C452FC5A48128C2E0175B6;
  /* offset=0x0024 flags=0x0008000000000205 */ FString role_winnum_4_D7292DF944699A11874005B69404DFFD;
  /* offset=0x0030 flags=0x0008000000000205 */ FString role_kd_5_7A487E494B801B55EE0FE1A8AEF1910D;
  /* offset=0x003c flags=0x0008000000000205 */ FString role_critrate_6_0BB7652A4793E86F3B8FEEB1D817FE56;
};

struct FBP_STRUCT_CommonItemData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 count_1_AAF73B26409C664053B0D480875DF1FC;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 res_id_2_D7E4E79043F24F18D6FD60806FC0F5B7;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 quality_6_780EECF244A4EA42C9ABE6ADBC97986B;
  /* offset=0x000c flags=0x0000001040000205 */ bool isSelected_7_79B52F524E830F0B45BF21A0AD0C79FB;
  /* offset=0x000d flags=0x0000001040000205 */ bool isNew_8_283C7F274004CE4583E6988CFED70773;
  /* offset=0x000e flags=0x0000001040000205 */ bool isUsing_9_D820856A433734B499F22B92FC9C781D;
  /* offset=0x0010 flags=0x0008000000000205 */ FString ins_id_12_F145E80F49630B6C92026BAB085F7FA7;
  /* offset=0x001c flags=0x0008000000000205 */ FString limitTimeStr_13_DFF8155F4D98123B51BE2D8CC020ADC3;
  /* offset=0x0028 flags=0x0008000000000205 */ FString itemName_14_AD711E5446FDA105FD03EEB108CBFF48;
  /* offset=0x0034 flags=0x0000001040000205 */ bool needShowName_15_C8DBF0F2499E16778D860FB0D6AFD73D;
  /* offset=0x0035 flags=0x0000001040000205 */ bool hasLimitTime_16_22C0511C4CBE4C575212B9B08FA2107C;
  /* offset=0x0036 flags=0x0000001040000205 */ bool hasLock_17_B1F713EE43FE9CFB5E198C9D34A96E86;
  /* offset=0x0037 flags=0x0000001040000205 */ bool isSourceBook_18_89E8BB2543AC5613EA5920A87189310A;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 index_19_E8B16AA944FC8253477886AC86876E71;
};

struct FBP_STRUCT_CommonItemTips_Pos {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 y_0_29AA2DFB46D12D23FFF462B8D0F10190;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 x_1_43242D5B45C003BFE42286AF082CF47F;
};

struct FBP_STRUCT_ComplaintTeammateItem {
  /* offset=0x0000 flags=0x0008000000000205 */ FString Name_0_563205334A5BF38AF8C98FAB59A4B668;
};

struct FBP_STRUCT_ConsumableBPTable_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString CName_0_3A46A7E346B57C4E5F45619DF5906006;
  /* offset=0x000c flags=0x0008000000000205 */ FString Path_1_81463AA644426E53AF3240A311C1D4E0;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 ID_2_AD337FD040A1235FE67F55BBA677262B;
};

struct FBP_STRUCT_CurrentScrollNoticeMsgData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 rollSpeed_0_23FF858D402CCCAF6B94399CC7418C3B;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 msgId_1_8B1CABB54D0FE4693A7082BD4F123A1E;
  /* offset=0x0008 flags=0x0008000000000205 */ FString content_2_3C8F4ED045265498AA5B7EBBAB891807;
};

struct FBP_STRUCT_DropItem {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 DropItemID_0_9016419F48012DCF369D778E3A61327E;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 DropItemNum_1_B42A827147B5FE9D9A3834A38ACDBEAE;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 DropItemSort_2_B048A61B4ADBA5BF5D5DA3868D4AFBBE;
};

struct FBP_STRUCT_EightDayUI_Info {
  /* offset=0x0000 flags=0x0008000000000205 */ FString itemName_0_9D70B96F4821371DF784CA887393F735;
  /* offset=0x000c flags=0x0008001040000205 */ int32 itemQuality_1_A153147949B851A477654DA85EB1A41C;
  /* offset=0x0010 flags=0x0008000000000205 */ FString name_2_9FA2E4D84AF5AE71FB127FA409F6447D;
  /* offset=0x001c flags=0x0008001040000205 */ int32 status_3_3273115741EC4EAF0015CE95B437A240;
  /* offset=0x0020 flags=0x0008000000000205 */ FString itemImage_4_A32C739E42436A8A5422A8B3ED5BA354;
  /* offset=0x002c flags=0x0008001040000205 */ int32 itemID_5_37FD8C0B4FF8374C94BA7BBF6CF69DA1;
};

struct FBP_STRUCT_Exciting_Party_Award_Info {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 expireTime_0_589A685444C0A71AC127D9A5D494801B;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 count_1_6424CE534FEBBC1D8F7CCF945EAAD5E2;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 itemId_2_3DC8D6F342CE8A1B9015F5AD8581FB6B;
};

struct FBP_STRUCT_Exciting_Party_Info {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 mainActID_0_A7F589774B068F4A4F8D74B8B58E2CB5;
  /* offset=0x0004 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Exciting_Party_Award_Info> BP_ARRAY_Exciting_Party_Award_Infos_1_CF05F085455BEC91B821E3A741AD5250;
  /* offset=0x0010 flags=0x0008000000000205 */ FString shareNum_2_69CC498744E4B0FB8FFE7B8B698B6AB6;
  /* offset=0x001c flags=0x0008000000000205 */ FString title_3_885B6403449B299B9DE56FB7F24F8D35;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 itemIdx_4_1913E6744DC0CDA00C15DDA82F7E797C;
  /* offset=0x002c flags=0x0008001040000205 */ int32 status_5_AC2A1B644C589A681341868104DC8B71;
  /* offset=0x0030 flags=0x0008000000000205 */ FString titleHide_6_59B1F9C24CDFA601A6D012849EBEE039;
  /* offset=0x003c flags=0x0008001040000205 */ int32 openTime_7_F96BEB784A23D2F3AFD96D948773A79A;
  /* offset=0x0040 flags=0x0008000000000205 */ FString bigProgress_8_6ADF3FA940792CB1B19C3BB5398ED697;
  /* offset=0x004c flags=0x0008000000000205 */ FString showName_9_325C6C9C4F2CD774DBA6EE9D5C1768D7;
  /* offset=0x0058 flags=0x0008000000000205 */ FString openTimeStr_10_052991954CD18E0B2E4E32AF51D40402;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 actID_11_8D1D839A4E4EA971F762DCAC47F585DE;
  /* offset=0x0068 flags=0x0008000000000205 */ FString targetNum_12_8CBE54CB459BA4047B5CA68162543D92;
};

struct FBP_STRUCT_FriendProfile {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 sex_0_51770F314E97A4E85B85A283DEE1B898;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 vipLevel_1_09F7328D426B1F997B84C98A9B6DBFF3;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 lastOnlineTime_3_A23193DB4F4D8DBF8A3585A84BA3A951;
  /* offset=0x000c flags=0x0008001040000205 */ int32 level_4_68C1CAAF40C31038219DC0A179B37593;
  /* offset=0x0010 flags=0x0008000000000205 */ FString platName_5_BCC4A9D74054617B341A44B7A356AB99;
  /* offset=0x001c flags=0x0008001040000205 */ int32 ladder_6_66B2CDA946B1B5D2D2A8D4AF452E2D01;
  /* offset=0x0020 flags=0x0008000000000205 */ FString picUrl_7_13A061C24E845B250CEABDBB0BC30D59;
  /* offset=0x002c flags=0x0008000000000205 */ FString gid_8_88BCB9CA4E6BC1B534A5E0B88A448EF1;
  /* offset=0x0038 flags=0x0008000000000205 */ FString nickName_10_A0BB006C40A7F58195208E8A8E80CD46;
  /* offset=0x0044 flags=0x0008000000000205 */ FString applyMsg_12_D1916EAA4D2B47395FA30E94B1D42244;
  /* offset=0x0050 flags=0x0008001040000205 */ int32 teamState_19_F8685C3540B419C2089C2FBDBD641631;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 teamId_20_EA61FCB14B2074ABAED0D98F91A4BC88;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 currentTeamAmount_21_4AA42FFB4FBC270C77DA9EAF117F8F33;
  /* offset=0x005c flags=0x0008001040000205 */ int32 maxTeamAmount_22_21D156A945651C42192BF9971E768909;
  /* offset=0x0060 flags=0x0008001040000205 */ int32 timeSinceGameBegin_23_1C74E3FD466673D11616F3A04DDC837B;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 online_24_570786B0478A0089A73F5FB2EBA58EB4;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 createTime_30_8E7A2C6747B691DBEB68DBB2F4D0CDBE;
  /* offset=0x006c flags=0x0008001040000205 */ int32 exp_31_57CB093F40CF21C108F544892CD45F3F;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 lastLoginTime_32_D22C16C7467B94B3286167AFDECB0135;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 friendType_33_FDD913874EBCB7DA4D0B96833F938B97;
  /* offset=0x0078 flags=0x0008000000000205 */ FString createTimeStr_36_B0152FAF4D81C926D38B8797DACEC14A;
  /* offset=0x0084 flags=0x0008000000000205 */ FString lastOnlineTimeStr_37_3971926E4E07461BCACDDA9CD353337C;
  /* offset=0x0090 flags=0x0008000000000205 */ FString militaryRank_38_846230904D03F77AEE9624BFA9E3B5E6;
  /* offset=0x009c flags=0x0008000000000205 */ FString timeSinceGameBeginStr_39_2703957043059A4511890C900BC32086;
  /* offset=0x00a8 flags=0x0008001040000205 */ int32 segment_info_duo_40_2829E5D045D309EDC12C9290A2643CD1;
  /* offset=0x00ac flags=0x0008001040000205 */ int32 segment_info_solo_41_AE449EC14BB42B896029D2B9286CE9F4;
  /* offset=0x00b0 flags=0x0008001040000205 */ int32 segment_info_squad_43_F6C69CCF45F0BB0CDFA396830A2296CA;
  /* offset=0x00b4 flags=0x0008001040000205 */ int32 endtime_44_AC2DD02D45CFE857BC9B018BE005E5C0;
  /* offset=0x00b8 flags=0x0008001040000205 */ int32 rank_45_B5F45CB040C38B4E65FB45BB2CD2130B;
  /* offset=0x00bc flags=0x0008000000000205 */ FString endtimeStr_46_09802CB9477DF0F0699EE092ADAFEF52;
  /* offset=0x00c8 flags=0x0008001040000205 */ int32 mode_47_C0B7C2B741C8376940C44F9CC7D7FBB5;
  /* offset=0x00cc flags=0x0008001040000205 */ int32 kill_48_EFF118CD46899F9F8F7F9787F4B3D893;
  /* offset=0x00d0 flags=0x0008001040000205 */ int32 total_49_061D823946AA07152B4B4AA8CD440EDD;
  /* offset=0x00d4 flags=0x0008000000000205 */ FString score_51_56A729ED472243B95F99D29152556FDF;
  /* offset=0x00e0 flags=0x0008000000000205 */ FString modeStr_52_32FAC5354F59CD9CFFE0B3AE7CFBFE2B;
  /* offset=0x00ec flags=0x0008001040000205 */ int32 lastInviteTime_53_893B9B504BAC0132E9BAB9882F4064E7;
  /* offset=0x00f0 flags=0x0008001040000205 */ int32 intimacy_54_044A5DD14AE5F829231C6D935DD35B40;
  /* offset=0x00f4 flags=0x0008001040000205 */ int32 showInviteIcon_55_AF5C9EA949A9AE721DC1249611AA7801;
  /* offset=0x00f8 flags=0x0008001040000205 */ int32 lastPresentCoinTime_56_81D481014B43D0F9D08427A6745A1523;
  /* offset=0x00fc flags=0x0008001040000205 */ int32 bPresentedCoin_58_173EEA844C986BF64C50CBB1303BF93A;
  /* offset=0x0100 flags=0x0008001040000205 */ int32 cur_avatar_box_id_59_4FA31B904F4BEDE7C86D58ADE0A20BA8;
  /* offset=0x0104 flags=0x0008001040000205 */ int32 startup_type_60_CBF2A75F476270CA61453DA92D2449A4;
  /* offset=0x0108 flags=0x0008001040000205 */ int32 qq_vip_61_3E6123544BA9E53B9D4454B8DF1300FA;
  /* offset=0x010c flags=0x0008000000000205 */ FString remarks_name_62_F2C0036A4B8ECABC5DF2D58B887EDE1D;
  /* offset=0x0118 flags=0x0008001040000205 */ int32 bNewMessage_63_EB2FCD5D4ED24C49C41DA290A42B091C;
  /* offset=0x011c flags=0x0008001040000205 */ int32 bXiaoYue_64_D9EB0FD048953AEBC20056AB0500CA04;
};

struct FBP_STRUCT_GameModeBPTable_type {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 ID_0_5A5311F84AF5AD63F284598DF413D62D;
  /* offset=0x0004 flags=0x0008000000000205 */ FString CName_1_120D6DB74537DE28D87E4BAD2052E558;
  /* offset=0x0010 flags=0x0008000000000205 */ FString Path_2_D808EF6946A66B7E51F6318FC7CCE098;
};

struct FBP_STRUCT_GlobalChatvoiceDownloadData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString fileId_0_27A7E9814AFBC6BF898DD088626C4C44;
  /* offset=0x000c flags=0x0008001040000205 */ int32 msgLength_1_AA0B7A75470EBDA4A1B263A9DF37786C;
  /* offset=0x0010 flags=0x0008000000000205 */ FString msgSenderGID_2_A17583F444CD82A19E60DBB86D8EBDD7;
  /* offset=0x001c flags=0x0008000000000205 */ FString msgContextGID_3_4DC6B36A4ADBF5BA22228B9262D45E49;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 msgId_4_6367BF0A434687426F510F81D8518471;
  /* offset=0x002c flags=0x0008001040000205 */ int32 msgChannel_5_B110640C4860EF195694518E5BD4BA4E;
};

struct FBP_STRUCT_GlobalTips_Pos {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 x_0_BC95162242299DF7575384BF3165B2D9;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 y_1_7244EB0D4A9825ADADE0B99F4A4761CB;
};

struct FBP_STRUCT_GlobalTips_TimeInfo {
  /* offset=0x0000 flags=0x0000001040000205 */ bool is_limit_0_C44FFA274459A428B4E947B664175E8A;
  /* offset=0x0004 flags=0x0008000000000205 */ FString time_s_1_F3B38E0D4CA07B5A44179194CBB4AC32;
};

struct FBP_STRUCT_GoodItemGet_ToShow {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 count_0_B804FEC74F8FFA04EFB2ABBBDB8FF8FE;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 res_id_1_E16DC5BC4A0AD3512B0A31AD1C01DD9B;
  /* offset=0x0008 flags=0x0008000000000205 */ FString valid_hours_str_2_9792409B43FBEFC1632E50901D9027B1;
};

struct FBP_STRUCT_GroupType {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Type_0_CBFD22254E63190A4C378883A34F578A;
  /* offset=0x0004 flags=0x0008000000000205 */ FString GroupName_1_BE8E18014255CDFD210E869660F8D850;
};

struct FBP_STRUCT_InviteFriendProfile {
  /* offset=0x0000 flags=0x0008000000000205 */ FString picUrl_0_C2A0DA014D486A1E164FC6ADDF9615F2;
  /* offset=0x000c flags=0x0008000000000205 */ FString nickName_1_CBA2EEAC47380AB7B43B59A1D918CF45;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 maxTeamAmount_2_7C2BA22341F4811160C5BA9CB4307A36;
  /* offset=0x001c flags=0x0008001040000205 */ int32 reserveState_3_051D52E94263E25D549480961FE9F175;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 teamId_4_A9F5C20A4684AE8D08AFE4BB75166BCB;
  /* offset=0x0024 flags=0x0008000000000205 */ FString gid_5_EBC0A4844251CAA3C6481CB5368F9028;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 ladder_6_213757F44E8953D42AA9C5B6DBD4AEA4;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 showInviteIcon_7_977AF1E047CAEDD283C28AB877F89D8C;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 lastOnlineTime_8_A04CBD694D9C62749F7F599F73120391;
  /* offset=0x003c flags=0x0008001040000205 */ int32 segment_info_duo_9_FA0174E845816A9F942032AB643D433F;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 cur_avatar_box_id_10_703270D1415FBDD5678B04A466503D98;
  /* offset=0x0044 flags=0x0008001040000205 */ int32 segment_info_squad_11_84340EE84D3A9230894D2E926C9C5828;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 segment_info_solo_12_247075FF41F5C37FDAD25E8C310F2385;
  /* offset=0x004c flags=0x0008001040000205 */ int32 op_13_18743CF042B141E7DECE6C92B8CC3333;
  /* offset=0x0050 flags=0x0008001040000205 */ int32 online_14_870602AE4F5501D4F28CDF91319BFC0A;
  /* offset=0x0054 flags=0x0008000000000205 */ FString applyMsg_15_C0485A1C4874CF848EEFE7A5D1563516;
  /* offset=0x0060 flags=0x0008001040000205 */ int32 currentTeamAmount_16_A99659424539AA5B60C1078BD3921909;
  /* offset=0x0064 flags=0x0008000000000205 */ FString timeSinceGameBeginStr_17_F7D74A0F42696036AF1FBFA1C91040E6;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 sex_18_E732EEBD4DF6F264E840F4B6517A75B9;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 timeSinceGameBegin_19_18447B0E49C944BC07097AA065539866;
  /* offset=0x0078 flags=0x0008000000000205 */ FString platName_20_3339B87A4625F424B6B34593169A65C0;
  /* offset=0x0084 flags=0x0008001040000205 */ int32 vipLevel_21_FBA0C34847C3807649FF969344AA81F6;
  /* offset=0x0088 flags=0x0008001040000205 */ int32 teamState_22_0A4E7AA8416EA19A92FD4C93119FDF76;
  /* offset=0x008c flags=0x0008001040000205 */ int32 level_23_E7DFAE6E468B2ED7DD2907A6A82EA184;
  /* offset=0x0090 flags=0x0008001040000205 */ int32 intimacy_24_D91CFD9243D7CD518E844A8401676245;
};

struct FBP_STRUCT_ItemGetPanel_ItemData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 res_id_0_C5A4475E49533A797C52B48AC5702E44;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 count_1_4E21FB2D437EF98410C157989A21AC3C;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 valid_hours_2_07C9A0B848E138E38A78229229EC6911;
  /* offset=0x000c flags=0x0008001040000205 */ int32 expire_ts_3_96A15DAE4698A652336B428E600610BD;
};

struct FBP_STRUCT_ItemGetShare_ShowInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 res_id_1_6940CF294EA278B623F8B088F0FA6325;
  /* offset=0x0004 flags=0x0008000000000205 */ FString play_name_2_FF2D88BA4C334932528F689EC5DEB876;
  /* offset=0x0010 flags=0x0008000000000205 */ FString tip_3_240B92E3496FDAA001EF82925D1958AC;
  /* offset=0x001c flags=0x0008000000000205 */ FString uid_4_73F757454E3C9549FBD82EB70D18D542;
  /* offset=0x0028 flags=0x0008000000000205 */ FString icon_url_5_869049884AD9F1127DC32AA32F2BFA93;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 gender_6_F9451FD04492F819A631A0955B4C77BA;
  /* offset=0x0038 flags=0x0008000000000205 */ FString valid_hours_str_8_8B504E2443C0610E930F8F85E55F5ECE;
};

struct FBP_STRUCT_Item_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;
  /* offset=0x000c flags=0x0008001040000205 */ int32 MaxCount_1_D5BF33434E37E75739D213989C4FA372;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;
  /* offset=0x0018 flags=0x0000001040000205 */ bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;
  /* offset=0x001c flags=0x0008001040000205 */ int32 ItemID_5_29F7B64741688A0A853FD281FAE4E28D;
  /* offset=0x0020 flags=0x0000001040000205 */ bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;
  /* offset=0x0024 flags=0x0008000000000205 */ FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;
  /* offset=0x0030 flags=0x0008000000000205 */ FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;
  /* offset=0x003c flags=0x0008000000000205 */ FString ItemName_10_B257B36A422BB69651454E90EBC1323B;
  /* offset=0x0048 flags=0x0008000000000205 */ FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;
  /* offset=0x0058 flags=0x0000001040000205 */ bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;
  /* offset=0x005c flags=0x0008001040000205 */ float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;
  /* offset=0x0060 flags=0x0008000000000205 */ FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;
  /* offset=0x006c flags=0x0008001040000205 */ int32 ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 SellTokenType_17_B410373F45F6C04F12302FB860FB46DC;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 SellPrice_18_12D0424A4E19AC2E29A301AB474CBFD8;
  /* offset=0x0078 flags=0x0008000000000205 */ FString PickUpSound_19_F461798D4A675E4E4E06DEBE9F1963B5;
  /* offset=0x0084 flags=0x0008000000000205 */ FString UnEquipSound_20_503E4B5E4A5AB2AB8963A6AA19E9825A;
  /* offset=0x0090 flags=0x0008000000000205 */ FString DropSound_21_6E25AFC0488F75E1AAAC208592F12715;
  /* offset=0x009c flags=0x0008000000000205 */ FString EquipSound_22_79C641814F4E53EB042738A286828E88;
  /* offset=0x00a8 flags=0x0008000000000205 */ FString UnEquipBank_23_F80BB1DA4DBEBC139ADD438FE7B3FB5C;
  /* offset=0x00b4 flags=0x0008000000000205 */ FString EquipBank_24_3AE3FFCC489EE53096363DB5965FAA7B;
  /* offset=0x00c0 flags=0x0008000000000205 */ FString DropBank_25_C61E40874E82D5E55947C1AC3066F8A7;
  /* offset=0x00cc flags=0x0008000000000205 */ FString PickUpBank_26_4599D8304AA9F863D5CBB5BA603189F8;
  /* offset=0x00d8 flags=0x0008000000000205 */ FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;
  /* offset=0x00e4 flags=0x0000001040000205 */ bool NeedShare_28_D9C0818D40A3C6AB07231BABA5477060;
  /* offset=0x00e8 flags=0x0008001040000205 */ int32 WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;
  /* offset=0x00ec flags=0x0008000000000205 */ FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;
  /* offset=0x00f8 flags=0x0008000000000205 */ FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;
  /* offset=0x0104 flags=0x0008000000000205 */ FString JumpUrl_34_A5DE7C2C406E2C16620017929DDEEA4F;
  /* offset=0x0110 flags=0x0008001040000205 */ int32 SourceBookEnable_35_80A540DA4CF5C9DEE5E79E9668E6511C;
  /* offset=0x0114 flags=0x0008000000000205 */ FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;
  /* offset=0x0120 flags=0x0008001040000205 */ int32 WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;
};

struct FBP_STRUCT_LocalizeRes_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;
  /* offset=0x000c flags=0x0008001040000205 */ int32 TextId_1_20B947934F165858A322E599888F816E;
};

struct FBP_STRUCT_MailAttach {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 attach_count_0_27454EF94661C10D531AD0B1600D5632;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 attach_id_1_AE2FA609412450ECF47062A53AA9B8CB;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 attach_valid_2_CEF0953B456577AB7E5A3ABAD2B04CD3;
};

struct FBP_STRUCT_MailInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString mail_title_0_216B7FC5446291EA75F46C8DEFBDE96B;
  /* offset=0x000c flags=0x0008001040000205 */ int32 mail_id_3_CC8DE62C49B7A354DAD93B9F072AB68F;
  /* offset=0x0010 flags=0x0008000000000205 */ FString mail_sender_4_97426852480411196A98308104BE4FEF;
  /* offset=0x001c flags=0x0000001040000205 */ bool mail_withattach_5_B91D765C400654ACF633BA9476F63058;
  /* offset=0x001d flags=0x0000001040000205 */ bool mail_attachtag_6_DE072A3A451AFBAC8E1B1EA22B86FD19;
  /* offset=0x001e flags=0x0000001040000205 */ bool mail_readtag_7_F69D0D54487CEEF39542A4B275D25F9B;
  /* offset=0x0020 flags=0x0008000000000205 */ FString mail_content_8_63BACD6E408325F7FF91B2ABF832A284;
  /* offset=0x002c flags=0x0008000000000205 */ FString mail_time_15_95FF7D1345F73CFAC902FBA65404B267;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 mail_sort_10_80B93CF8496B1FC8EA4FCC924E3DD4CC;
  /* offset=0x003c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_MailAttach> BP_ARRAY_MailAttachList_11_77FB3C624D2FC92ED437938E2822CD5E;
  /* offset=0x0048 flags=0x0000001040000205 */ bool mail_top_12_7253FD7F4E2A9B48CB6EA9A82424590D;
  /* offset=0x004c flags=0x0008000000000205 */ FString mail_lefttime_13_785456674240DC583B44519DAEE61087;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 mail_type_14_71A2FCC14C95F5B99D016589C1F72DC5;
  /* offset=0x005c flags=0x0008001040000205 */ int32 mail_subtype_22_FF67A7FF4895E20D7CFEC1A12ED4873E;
  /* offset=0x0060 flags=0x0008001040000205 */ int32 mail_sender_presentedcoin_23_86FA7D104D446EAF93C185BC7C13E3C1;
  /* offset=0x0064 flags=0x0008000000000205 */ FString mail_sender_uid_24_5E104E1C43512918AD9DA6B81849D7B6;
  /* offset=0x0070 flags=0x0008000000000205 */ FString mail_sender_iconUrl_25_B006B0DD41009627452966995624C118;
  /* offset=0x007c flags=0x0008001040000205 */ int32 mail_sender_gender_26_F82B3DFB499564BD08058C8623D70BB2;
  /* offset=0x0080 flags=0x0008000000000205 */ FString mail_sendername_27_DA997FAA45FB9B54926573B900D7C50B;
};

struct FBP_STRUCT_Map_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString MapName_0_99C86D5F4EEAC838D927A895ABB469F4;
  /* offset=0x000c flags=0x0008001040000205 */ int32 ResId_3_6A18D49C4C648A6B96E15C9CD0C9406D;
  /* offset=0x0010 flags=0x0008000000000205 */ FString MapPath_2_556AB4C74A5227AA1355AA8C60EF15BB;
  /* offset=0x001c flags=0x0008000000000205 */ FString MiniMapPath_7_626C20754C65FDF1DF3BE882DFD06DB2;
  /* offset=0x0028 flags=0x0008000000000205 */ FString ShowImg_9_997F417E43ACA5F7ADE34991024B8A47;
  /* offset=0x0034 flags=0x0008000000000205 */ FString MainMode_10_F894E3F44BC17997549883BAE6037772;
  /* offset=0x0040 flags=0x0008000000000205 */ FString MainModeID_11_FE88BE674E96247E9FD9F18C21B9E8B3;
  /* offset=0x004c flags=0x0008001040000205 */ int32 WeatherMode4Weight_12_CE1168D64FC717133BF6C291FAC4EF4E;
  /* offset=0x0050 flags=0x0008000000000205 */ FString WeatherMode4_13_8AA5A77E4F16977F5B3AD88AF15E6E7A;
  /* offset=0x005c flags=0x0008000000000205 */ FString WeatherMode3_14_094A53A14E6AFD01507A4F9B92083328;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 WeatherMode3Weight_15_0F0966B84DB5ABF001134F90B1BEF317;
  /* offset=0x006c flags=0x0008001040000205 */ int32 WeatherMode2Weight_16_9368E2804EEFD71D1DFE69BB7BA3F014;
  /* offset=0x0070 flags=0x0008000000000205 */ FString WeatherMode2_17_F339852A406780C529C538A96CAB7E6E;
  /* offset=0x007c flags=0x0008001040000205 */ int32 WeatherMode1Weight_18_C6F020C84201BF76FD3A5380607D1B24;
  /* offset=0x0080 flags=0x0008000000000205 */ FString WeatherMode1_19_E986CF41450ECA772320C3A6A4F35751;
};

struct FBP_STRUCT_MemBTResultData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString Name_0_DFDA3DC143AAE955AA8105BAF2ADCD38;
  /* offset=0x000c flags=0x0008000000000205 */ FString State_1_48C8DC874029DCADB2E3DBAEF5DD9D82;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 Kill_2_DA4DC35B4BB8501F720144829B85837B;
  /* offset=0x001c flags=0x0008001040000205 */ int32 travelDistance_3_269F558844A85BC6B7EE85B4CDA706F4;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 HealAmount_4_B8C060C243D8A53CC2FB25B014DAA2DD;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 DamageAmount_5_9798AED546B6451447073F88F94ECA1A;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 AssistNum_6_53E92D69472136A2FA572CA42AFF0F2D;
  /* offset=0x002c flags=0x0008001040000205 */ int32 surviveTime_7_4095C08E4C9E9C36F3476BBBBDF7A7C7;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 rescueTimes_8_22FDF96242283590BDDE31A6E4592C0F;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 HeadShotNum_9_CB4C63474DFB365351BFDF826A564311;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 ShouldShowAddFriendBtn_10_F6E1B5B546973A68905B49A608F211F0;
  /* offset=0x003c flags=0x0008000000000205 */ FString UID_11_3CF2C4FB440351FC6E2A819D5C9E3A95;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 TravelScore_12_E14E8FC742D3CA88E429B1BFFCD5D2DF;
  /* offset=0x004c flags=0x0008001040000205 */ int32 BattleScore_13_E763470E496A1859971915AF0ED432FC;
  /* offset=0x0050 flags=0x0000001040000205 */ bool IsMVP_14_9FEBBB9A41D633DAEF4F7AA0AA50379E;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 SupportScore_16_E6685A2F4D4EED4000131FBCED53A176;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 SurviveScore_17_B32B433B4A28BB930A2B69B437791D6D;
  /* offset=0x005c flags=0x0008001040000205 */ int32 driveDistance_18_BE0AE86B448F9DD558B6459D4E5D42FB;
  /* offset=0x0060 flags=0x0008001040000205 */ int32 marchDistance_19_E5AAD6E54F9230A68C4EA993BD9A8940;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 title_id_20_59F8DAF043C5B9082CA9A8A3B9E64C5D;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 SupplyScore_21_C702D2FE49ACF7EFBCFC4DA55B3DBE2B;
  /* offset=0x006c flags=0x0008001040000205 */ float FinalScore_f_22_4840B559455CD01E651617BFC406BC82;
};

struct FBP_STRUCT_MessageBoxButton {
  /* offset=0x0000 flags=0x0008000000000205 */ FString ButtonCallback_0_76F4458E4320493C6F7386B817E49216;
  /* offset=0x000c flags=0x0008000000000205 */ FString ButtonText_1_9E10D50F438E6CD80756CFBB4E0C97BA;
};

struct FBP_STRUCT_MessageBoxData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString Content_0_A3552EAA435B329EEAEAF7913B4F5FD7;
  /* offset=0x000c flags=0x0008000000000205 */ FString Title_1_C26E66014646F367D6D5D0BFD2C43642;
  /* offset=0x0018 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_MessageBoxButton> BP_ARRAY_Buttons_2_750369104543639636DC8FB1B1D63DC5;
};

struct FBP_STRUCT_MilitaryRankLevel_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString MilitaryRankName_0_6803185A4F44EE4389F6A3B24C13845F;
  /* offset=0x000c flags=0x0008001040000205 */ int32 Exp_1_0727D7694F81C282360C298C96801A35;
  /* offset=0x0010 flags=0x0008000000000205 */ FString MilitaryRankType_2_F858884B40EBC459D56457B1741D963D;
  /* offset=0x001c flags=0x0008001040000205 */ int32 Level_3_756F8DA14F48640682AFFFBD2A052F83;
  /* offset=0x0020 flags=0x0008000000000205 */ FString MilitaryRankBigIconPath_4_9A4E25B74B0B8657724BD1AD59F3CB7C;
  /* offset=0x002c flags=0x0008000000000205 */ FString MilitaryRankSmallIconPath_5_F068C6BA4EB3CFAFA8CD159178EB8765;
  /* offset=0x0038 flags=0x0008000000000205 */ FString MilitaryRankTypeIconPath_6_9AE9634945BC5B59F5709EB9C63E9970;
};

struct FBP_STRUCT_NewteachingInfo_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString titleName_0_6691A84B4890E87DAD8E84B81D5638B8;
  /* offset=0x000c flags=0x0008000000000205 */ FString pictureName_1_7A505C8346C993F02C3C079521CC917A;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 ID_2_0AF0DD4F46E06298222994AE3854C276;
  /* offset=0x001c flags=0x0008000000000205 */ FString videoName_3_5226689E418CE94057A2FA80262EB32E;
};

struct FBP_STRUCT_NoticeButtonInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 NoticeID_0_8385D5B449F5DCE9DA1FBAB43B3D675E;
  /* offset=0x0004 flags=0x0008000000000205 */ FString Btn_TypeName_1_79C326E94B5E9E9A88148198D732DFD2;
  /* offset=0x0010 flags=0x0000001040000205 */ bool IsRedPoint_2_36FBE0F548FB2C01BCC12EBD14A73399;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 Btn_Type_3_08F9F07341EF2C586F90A0A409C3DAA8;
  /* offset=0x0018 flags=0x0008000000000205 */ FString Btn_Name_4_FD43B1E54D0A32532019B7A5514D0D07;
};

struct FBP_STRUCT_NoticeInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString jump_mode2_0_0AFCDDDE4E49D68EC1E458B7C6E1756D;
  /* offset=0x000c flags=0x0008001040000205 */ int32 ID_1_65F7370B4527B75928D74181AAB77CBB;
  /* offset=0x0010 flags=0x0008000000000205 */ FString content_2_7324FFD24CC05DCD4260EA8C6D1905D4;
  /* offset=0x001c flags=0x0008000000000205 */ FString button_desc_3_66D8B787439345A3F9AACF868C189546;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 mark_type_4_631B1E224D9CDBF607B59BB6BB662C72;
  /* offset=0x002c flags=0x0008000000000205 */ FString mark_desc_5_30A41C5243CA99A80FC828B1A79A9D96;
  /* offset=0x0038 flags=0x0008000000000205 */ FString jump_button2_6_EFE006FA4E76444AA82F5C9E69C799BE;
  /* offset=0x0044 flags=0x0008000000000205 */ FString jump_button1_7_C487EA014040DEE90177F6BBE53EDD1B;
  /* offset=0x0050 flags=0x0008000000000205 */ FString pic_url_8_730A7D1C4C637BA216734BA435E34DD3;
  /* offset=0x005c flags=0x0008000000000205 */ FString jump_mode1_9_C90DD91148C86A368099CDB014DD5C35;
  /* offset=0x0068 flags=0x0008000000000205 */ FString title_10_479143544DB76C39CF8D18B3AF266A85;
};

struct FBP_STRUCT_OpenBoxPanel_ItemData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 res_id_1_D32ECC9C4F13FFF6AFB8C4896E44B806;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 count_2_3C510FE249C175603249A7BF2DE8DA7A;
  /* offset=0x0008 flags=0x0008000000000205 */ FString valid_hours_str_4_D7F28E654E0508A8CF4685AAA19630D7;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 product_price_6_E5A8CBB04081CBC1D39B9FA09C27CDF8;
};

struct FBP_STRUCT_PersonalBasicInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_nextlevel_0_FBE668954EC01EF93CEEA8BE345582C5;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_image_1_4077D3AB4D30BA5669738FB9D7A6A53E;
  /* offset=0x0018 flags=0x0008000000000205 */ FString role_sign_2_11FB47EA43CA86DE317E6880E40C7FB5;
  /* offset=0x0024 flags=0x0008000000000205 */ FString role_sex_3_671DAD7B425D424F901AEABE96C1F444;
  /* offset=0x0030 flags=0x0008000000000205 */ FString role_curlevel_4_52FE0B22460736156A4C57A35DC068AE;
  /* offset=0x003c flags=0x0008000000000205 */ FString role_curexpnum_5_B751043644F0E7CAA1B8CBB1C42B4AF2;
  /* offset=0x0048 flags=0x0008000000000205 */ FString role_id_6_349344534B3D709D9E18F794879B5369;
  /* offset=0x0054 flags=0x0008000000000205 */ FString role_name_7_87BB4C20401337DF16F099A3FA5E166E;
  /* offset=0x0060 flags=0x0008000000000205 */ FString role_needexpnum_8_6F9979D647E7E96944E7A69E5A6D1E33;
  /* offset=0x006c flags=0x0008001040000205 */ int32 role_curlevelnum_11_EA961B664F8B79ADEB6976942E95CFE4;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 role_nextlevelnum_12_AAB877C6467A23CD271CE5BE6D9F04FC;
  /* offset=0x0074 flags=0x0008001040000205 */ int32 role_segment_team_13_A33E2C4D40E5B63EFE6B1EB918CE9D64;
  /* offset=0x0078 flags=0x0008001040000205 */ int32 role_segment_double_14_40091CBD4447C6A11C56F4B36C1AFEDD;
  /* offset=0x007c flags=0x0008001040000205 */ int32 role_segment_solo_15_D8AE4BAC44F2E13CBC152796603FEB29;
  /* offset=0x0080 flags=0x0008001040000205 */ int32 role_segment_max_16_0A8835BC433B7923C68452A8D9103ED1;
  /* offset=0x0084 flags=0x0008001040000205 */ int32 role_qqvip_17_A5D6675E4F95BDC61B2AE990627FDC40;
  /* offset=0x0088 flags=0x0008001040000205 */ int32 role_avatar_frame_18_9AD9FCFA4148267A1D42F097FF5C4A42;
  /* offset=0x008c flags=0x0008001040000205 */ int32 role_startup_type_19_BFB4BEF54E91AC0FB68948ADF86BBB76;
};

struct FBP_STRUCT_PersonalSegmentInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 role_segment_max_0_2639E6C048F570A7B5E73E8E7ACB7E74;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 role_segment_solo_1_523FA3F740EE8710287621B2A0CD7F04;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 role_segment_team_2_98D045524BE6F48C8C1626A2B4CC03FD;
  /* offset=0x000c flags=0x0008001040000205 */ int32 role_segment_double_3_1E2282C34BDB9A8FF0984392AF13AA86;
};

struct FBP_STRUCT_PersonalTotalRankInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_totalrank_0_7DEBA5AD439D2974983BD7A3A0091CAA;
};

struct FBP_STRUCT_PersonalTotalScoreInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_totalscore_0_3C7D99404C94D9B7D1D9EE849125A756;
};

struct FBP_STRUCT_Promotion_Award_Info {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 currentInviteCount_0_11AFDC824E74A36DFA0E8D9BE9284ED7;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 itemIdx_1_39E464294AE9AB488F24D596B71BFFDE;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 status_2_F3C06E6E4CC00545DCB8C19A95BE89F3;
  /* offset=0x000c flags=0x0008001040000205 */ int32 actID_3_D68715044A1716E8CAD23D8EA340B48E;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 awardID_4_E168DE3B43358B3DF2987BA145A336F0;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 needInviteCount_5_93313FC147EE030C137224B6AA6C9588;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 mainActID_6_5F9B5DC446E07EA11BE38D809934CF48;
  /* offset=0x001c flags=0x0008001040000205 */ int32 expireTime_7_D3D7F0E04F42F4ED95DE608E3740DCC9;
};

struct FBP_STRUCT_Promotion_Friend_Info {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 inviteStatus_0_6C6FAE6F4B6B79001E76C1B9BB408BFE;
  /* offset=0x0004 flags=0x0008000000000205 */ FString nickName_1_858922934482602207899BABECA2C87C;
  /* offset=0x0010 flags=0x0008000000000205 */ FString headUrl_2_C8E5486D41FE974E72CB9588EA05E687;
  /* offset=0x001c flags=0x0008000000000205 */ FString openID_3_E7605A4A43E998949D7D068321039AF5;
};

struct FBP_STRUCT_RankInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString uid_0_951191854B1D7BD586C9E9B45AAFBB4A;
  /* offset=0x000c flags=0x0008001040000205 */ int32 no_1_4182BB0342C89B0CBA9E76BCB162879E;
  /* offset=0x0010 flags=0x0008000000000205 */ FString city_2_DC3408564E16BC35A7D486A3BA901971;
  /* offset=0x001c flags=0x0008000000000205 */ FString name_3_209DAE1B40FE2734E586148DBA1E05CE;
  /* offset=0x0028 flags=0x0008000000000205 */ FString content2_4_66789CC04460A8E81B602D9B88B5B0CA;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 score_5_FE06130944A19326737A559A99B839E9;
  /* offset=0x0038 flags=0x0008000000000205 */ FString content1_6_31E885C04FA17436582AFA8F43A0FF1B;
  /* offset=0x0044 flags=0x0008000000000205 */ FString content3_7_A9E0BD10434A6F597EF6C59F5C8F50E0;
  /* offset=0x0050 flags=0x0008001040000205 */ int32 gender_8_171CD1454F7F502EE78307B2451E6131;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 level_9_D030C1A14ED97F063BFC45ABD7E298E1;
  /* offset=0x0058 flags=0x0008000000000205 */ FString url_10_5EA6E3534B86E9977C811B961923CAB4;
  /* offset=0x0064 flags=0x0008001040000205 */ int32 segment_12_746755464BE574F47F70AABAADC82602;
  /* offset=0x0068 flags=0x0008001040000205 */ int32 qq_vip_13_0AA66F654565D1764BAD9AA9279D2240;
  /* offset=0x006c flags=0x0008001040000205 */ int32 startup_type_14_D2DB30A049EBDECCC4E0049FC408C8EA;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 cur_avatar_box_id_15_84D640C64D178EE1D04261885C48CB1C;
};

struct FBP_STRUCT_RankInfoMe {
  /* offset=0x0000 flags=0x0008000000000005 */ struct FBP_STRUCT_RankInfo BP_STRUCT_RankInfo_0_F963206A4F4BE4A99EA008BF831E4BBC;
};

struct FBP_STRUCT_RankIntegralLevel_type {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 IntegralType_0_5DB652C74A6C2C5E4B1123A62ADC38A8;
  /* offset=0x0004 flags=0x0008000000000205 */ FString IntegralTypeName_1_37066B404ACB346A9C01D683DD3A29FB;
  /* offset=0x0010 flags=0x0008000000000205 */ FString FrameID_2_FA51FC0F47FB8AEB41067AB1A00E044D;
  /* offset=0x001c flags=0x0008001040000205 */ int32 MinIntegral_3_8BCC404B4E31165611A2F3A5DCA7F9EB;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 Level_4_4248BF2F4F85F33AF1FFF8B269550E92;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 IntegralTypeOrder_5_E1D966464BA0136A4682EA8533722D30;
  /* offset=0x0028 flags=0x0008000000000205 */ FString Name_6_B98FA8AA4955E5E532285FA0BC38606D;
};

struct FBP_STRUCT_RankUpdateItemInfo {
  /* offset=0x0000 flags=0x0008000000000005 */ struct FBP_STRUCT_RankInfo BP_STRUCT_RankInfo_0_F93E07134DCE78519CDAF28B00D4B7F4;
};

struct FBP_STRUCT_RecordingUpload {
  /* offset=0x0000 flags=0x0008000000000205 */ FString openUid_0_54D56FF14523BD47320C999A356D4A89;
  /* offset=0x000c flags=0x0008000000000205 */ FString battleUid_1_E085462F49A09FBF73121597985007B0;
  /* offset=0x0018 flags=0x0008000000000205 */ FString roleUid_2_BCE9DEF348A2756A826DBAB7C9C35515;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 HeadShotNum_3_1F6986E44FBDD374A4EFFCB4D9155E13;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 killNum_4_58DEC1EE4B1FE46CCB08479A637854DD;
  /* offset=0x002c flags=0x0008000000000205 */ FString platform_5_11FC63E6443F3259AD396F958EDEB0F1;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 MaxKillDistane_6_FF85298B476C4D8EF2CDAC87DBCDCD81;
};

struct FBP_STRUCT_RoleInfoAvatarFrame {
  /* offset=0x0000 flags=0x0008000000000205 */ FString desc_0_9EA5A7514180A8C5037426941604F705;
  /* offset=0x000c flags=0x0008000000000205 */ FString state_1_08058C3543CE33D3D561879F47077882;
  /* offset=0x0018 flags=0x0008000000000205 */ FString name_2_03F86960403366ACEC72A5A2C522DE3F;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 id_3_94030D564734EFD97A8EB583222EDC21;
  /* offset=0x0028 flags=0x0008000000000205 */ FString desc_get_4_66306E3D4BB4116257FA129F1C7DB2EA;
  /* offset=0x0034 flags=0x0008000000000205 */ FString expire_time_5_3963988D494449036ADB16A2DCA3D002;
};

struct FBP_STRUCT_RoleRankDetailSingleInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString name_0_61BC2A864A3E84DFD235009959A94793;
  /* offset=0x000c flags=0x0008001040000205 */ int32 level_2_CE95E9D1472364D0C7F5DFA2EE067916;
  /* offset=0x0010 flags=0x0008000000000205 */ FString type_name_3_8A71F0964ADC0D83221AC28CCA54E9BE;
};

struct FBP_STRUCT_RoleRankDetailTypeInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 level_0_1FABBE464CCDDF1066FE31BBF84B32FB;
  /* offset=0x0004 flags=0x0008000000000205 */ FString type_name_1_BD8A530541CBE4088737788FE81AEA5C;
};

struct FBP_STRUCT_RoomGroupType {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Type_0_F950B5044E184BF9F97F968442F59EB0;
  /* offset=0x0004 flags=0x0008000000000205 */ FString GroupName_1_69CC769A4D369938527239A22EC9B483;
};

struct FBP_STRUCT_RoomInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 player_count_7_3C511CFC47DBC696B9C74790AFA73D83;
  /* offset=0x0004 flags=0x0008000000000205 */ FString owner_id_1_EC8BB0664920BD7961262791BFC2F3FB;
  /* offset=0x0010 flags=0x0008000000000205 */ FString state_2_98C921C84A16218020746FAAABDB13E4;
  /* offset=0x001c flags=0x0008000000000205 */ FString name_3_4D2491D0400DCB399113168B562B27C9;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 id_9_E0E04E1B4356DD24D82151AC8F3E8CD3;
  /* offset=0x002c flags=0x0008000000000205 */ FString owner_name_5_F933685E47BD8C88B9063EB06ABD7B60;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 map_id_8_C36827ED47ACE4F3692212BA2948A845;
  /* offset=0x003c flags=0x0008001040000205 */ int32 group_type_12_2579951649F014C9A6DE85906F80F49C;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 create_time_13_49E1E18F4D6C152561542D99BDD37F51;
  /* offset=0x0044 flags=0x0008001040000205 */ int32 game_start_14_E7C4BD4B4457B3F0720AFA98BBD026BC;
  /* offset=0x0048 flags=0x0000001040000205 */ bool lock_state_15_397B694144C77EE7DF88B4B628E86BEB;
  /* offset=0x004c flags=0x0008000000000205 */ FString version_16_DF55A7EE4F7F54F7CB22968980FC1EE3;
};

struct FBP_STRUCT_RoomMemberInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString openid_0_B7B1CCC1466A8CCE41C6E3A5100F1634;
  /* offset=0x000c flags=0x0008001040000205 */ int32 level_1_87DF754540F124BEF6071B92A3E0AFED;
  /* offset=0x0010 flags=0x0008000000000205 */ FString name_2_F98F3D0B47A0191B26798FA7A96371FA;
  /* offset=0x001c flags=0x0008001040000205 */ int32 svr_3_C4A42FD0462B8AEEA33153935D743585;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 gender_4_38FF7FF84711A7F5405F9D97FA23D1B4;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 frame_level_5_C155DF8E481E15556962A99AAEE5AF56;
  /* offset=0x0028 flags=0x0000001040000205 */ bool isRoomMaster_6_D3F447214E2501E056A437B35FE76699;
  /* offset=0x002c flags=0x0008001040000205 */ int32 pos_7_48633E4D49B0CBA499EC33A098E8698F;
  /* offset=0x0030 flags=0x0008000000000205 */ FString state_8_C387AE89499568F6EB50F3AFC6D62A8F;
  /* offset=0x003c flags=0x0008000000000205 */ FString head_url_9_8632DDD64E3EB3C3098AECABFD368A5B;
};

struct FBP_STRUCT_RoomSelfInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString openid_0_0A1285C04EE96896A10B3EA4F4DFD669;
  /* offset=0x000c flags=0x0008001040000205 */ int32 level_1_1C45BD134A290840F10DBFB768BB9565;
  /* offset=0x0010 flags=0x0008000000000205 */ FString name_2_DEDDBA474442D739A7E6ABB8774E692B;
  /* offset=0x001c flags=0x0008001040000205 */ int32 svr_3_5FE9036844753186FBFDE2A62D64479E;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 gender_4_F2F5EAF04D5CA44A0D02BDA3C9143AC1;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 frame_level_5_496CB4FE48F43AF05508278EAEB8CF81;
  /* offset=0x0028 flags=0x0000001040000205 */ bool isRoomMaster_6_759A24614B691043C28C9F934BD264DD;
  /* offset=0x002c flags=0x0008001040000205 */ int32 pos_7_54DF2FB64C05B904666FCEBE75A48444;
  /* offset=0x0030 flags=0x0008000000000205 */ FString state_8_6C5A3C9648FCA56DFFD9ACA85AB3BC43;
  /* offset=0x003c flags=0x0008000000000205 */ FString head_url_9_F203D8474DA7BCBD70D59DAB70E67875;
};

struct FBP_STRUCT_RoomWaitingInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 game_start_0_DB98D70E450D5F1C2CBE3AA11538E773;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 map_id_1_776BECA545D38EE4FDD3D1AECF733145;
  /* offset=0x0008 flags=0x0008000000000205 */ FString owner_name_2_DD7007704A9D0E714C2676A29AEFD1C6;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 group_type_3_5D229F3D4158DB32A881AE8F82520499;
  /* offset=0x0018 flags=0x0008000000000205 */ FString name_4_227DD90047E11F7515483C8510697D06;
  /* offset=0x0024 flags=0x0008000000000205 */ FString state_5_26BE14D04F72D98DFA8DA191292EA4D3;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 id_6_2FCD4C5143826807F4BC1CB2539D8EC3;
  /* offset=0x0034 flags=0x0008000000000205 */ FString owner_id_7_08C2A2C54381C8A26B70B886BEF82A5D;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 player_count_8_E60306904F3F6BF80B25108DEB6406FC;
  /* offset=0x0044 flags=0x0008000000000205 */ FString version_9_2B313E3A4D0AC5492D33A9A156C9A865;
  /* offset=0x0050 flags=0x0000001040000205 */ bool lock_state_10_F3674EC7420B12176706A5A900154DBB;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 create_time_11_60CE1E854D18D76D97180F9527517A71;
};

struct FBP_STRUCT_ScrollNoticeMsgData {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 prior_0_ECE8EC0C40712EAC28B1CCAE40BA0694;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 endtime_1_D3003A39494B60BEB1EFF293FB61FAD0;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 rollSpeed_2_BC19B7F84B413E1FB6564F92491950B6;
  /* offset=0x000c flags=0x0008001040000205 */ int32 msgID_3_12A2A4D843DD1B16D37F72AEE7364762;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 msgType_4_31946F6A41E1FC0572A986A808A0D94C;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 rollCnt_5_14852FED4790AA11F54E3B8351CC96F9;
  /* offset=0x0018 flags=0x0008000000000205 */ FString content_6_B6543CDA43C969590212D4A37F2FE9C1;
};

struct FBP_STRUCT_SeasonSegmentType {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Segment_Level_0_B1266897475F4B0A70911C9E74EA48A7;
  /* offset=0x0004 flags=0x0008000000000205 */ FString SegmentType_Name_1_3BFA88D946C517780E4EA484B64EB854;
  /* offset=0x0010 flags=0x0008000000000205 */ FString SegmentType_Text_2_732DD39B4165B74A2454D7AE985E3BBE;
};

struct FBP_STRUCT_Selected_Member_Profile {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 exp_0_CDD52E554AF3B340FA9365AD79149F00;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 sex_1_1A3BC1C940A662E6B8C0E988003C1336;
  /* offset=0x0008 flags=0x0008000000000205 */ FString lastOnlineTimeStr_2_3B3DF6184835282EDEF52BBDD65147B6;
  /* offset=0x0014 flags=0x0008000000000205 */ FString militaryRank_3_38250D9945CDA64965778AB62A3F9275;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 timeSinceGameBegin_4_CCE99D3E406EE9D493AA9BB487D4D935;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 lastLoginTime_5_7FCF4515431C43143430939841776EB5;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 maxTeamAmount_6_4A638CEE420D7091817EA7AF2A25AA6C;
  /* offset=0x002c flags=0x0000001040000205 */ bool isCaptain_7_0E756887477C16624F3409AF8BA86385;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 vipLevel_8_E9728EF74CEBFC74DD55C8897BC76720;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 lastOnlineTime_9_A3D7D17B477CFA7570E8248F852F49AF;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 teamState_10_08F9BF9B4A68A3EA7DB192B7111E322D;
  /* offset=0x003c flags=0x0008001040000205 */ int32 teamId_11_E2BE74ED4F8F679CA63BE89EBA461FA9;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 currentTeamAmount_12_53D1575B43A96841371340B3BE555CA0;
  /* offset=0x0044 flags=0x0008000000000205 */ FString applyMsg_13_532D041F4C322AD6AF1F519051E779B1;
  /* offset=0x0050 flags=0x0008001040000205 */ int32 online_14_0E1EC2B144312B7DDEAF7AA79F4A4AC7;
  /* offset=0x0054 flags=0x0008001040000205 */ int32 level_15_0367F5184BB9A39FE4108C8C36749367;
  /* offset=0x0058 flags=0x0008001040000205 */ int32 ladder_16_5BD56EC44BD76322A36E10AF474DB2A2;
  /* offset=0x005c flags=0x0008001040000205 */ int32 segment_info_duo_17_7104347749C5AF57E6A0DEA57B8D5B72;
  /* offset=0x0060 flags=0x0008000000000205 */ FString timeSinceGameBeginStr_18_59EAA9934CBF4BA9D45238891A5186BD;
  /* offset=0x006c flags=0x0008001040000205 */ int32 friendType_19_8E69B0214AF58BCF46FACE8771042C6B;
  /* offset=0x0070 flags=0x0008001040000205 */ int32 segment_info_solo_20_581EC0394730EF04E8394B8382F4685C;
  /* offset=0x0074 flags=0x0008000000000205 */ FString nickName_21_9E4D507F4B532FCA633781BDDC087B09;
  /* offset=0x0080 flags=0x0008001040000205 */ int32 segment_info_squad_22_92DC8E9F4B8BC5D0664863A4F32A1D89;
  /* offset=0x0084 flags=0x0008000000000205 */ FString createTimeStr_23_7E82E8334BA6B7925F76769B7A8BB09E;
  /* offset=0x0090 flags=0x0008001040000205 */ int32 createTime_24_9049FB7D4CC8AF29F52B7E9B4F9393CE;
  /* offset=0x0094 flags=0x0008000000000205 */ FString platName_25_DE30935043F6C7AA97EF63AB410E3772;
  /* offset=0x00a0 flags=0x0008000000000205 */ FString gid_26_250F3F9343917154D3DA199C7D0565F8;
  /* offset=0x00ac flags=0x0008000000000205 */ FString picUrl_27_C03FBB004FE6C113E5FED1BB4B3C3ABC;
  /* offset=0x00b8 flags=0x0008000000000205 */ FString allianceId_28_C6587EEE46309F044E8BAAB3E6C65B5B;
  /* offset=0x00c4 flags=0x0000001040000205 */ bool isMyFriend_29_44E5A29244D90784F4D2B7830217216D;
  /* offset=0x00c8 flags=0x0008001040000205 */ int32 cur_avatar_box_id_30_5DE9FF7042384EEC2EB52CB25F7BB852;
  /* offset=0x00cc flags=0x0008000000000205 */ FString openId_33_39816482455140FC28E282A2C06FBDBC;
  /* offset=0x00d8 flags=0x0000001040000205 */ bool isInSnsGroup_34_2F8B87984F2975F20F5AC483F7B3C3EA;
  /* offset=0x00dc flags=0x0008001040000205 */ int32 qq_vip_35_228069FF454F2A91160A13B6BB3BB244;
};

struct FBP_STRUCT_ServerInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 serverStatus_5_AEDDF3FA4A37992E108EA0AA5982079C;
  /* offset=0x0004 flags=0x0008000000000205 */ FString showAddrInfo_2_FDBE340F451DB94E00B768A4C096D728;
  /* offset=0x0010 flags=0x0008000000000205 */ FString channelInfo_3_5222FFEB4CC4DAB49C08898168365359;
  /* offset=0x001c flags=0x0008001040000205 */ int32 tab_6_285185794F40DFFC140092BA1EC9B864;
};

struct FBP_STRUCT_ShareAwardInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 award_state_0_7EC3CB8A4A1081AE7881928BDD227269;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 award_type_1_04CE558D47861BC0795D9E8D5092B56A;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 need_share_num_2_8930AC1D434A2B6A4D73029F3AC50A00;
  /* offset=0x000c flags=0x0008001040000205 */ int32 award_item1_3_23953CBC4C754B92704DE69ECAA221E2;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 award_item2_4_7539E0DE47FF2C72A34CFF852F663023;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 award_num1_5_58EB151A4DCA2FC9637671B967329BB3;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 award_num2_6_244611B7466597149B244994CD0C1FD5;
  /* offset=0x001c flags=0x0008000000000205 */ FString award_name1_7_295DF2514393C1E32434498F40AEC5FA;
  /* offset=0x0028 flags=0x0008000000000205 */ FString award_name2_8_2AE290E947C09F6E10F9D091C9D99E93;
};

struct FBP_STRUCT_ShareExcitingPartyInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString shareNum_0_0595EC1D4258667D7709C2B4E345D1D3;
  /* offset=0x000c flags=0x0008001040000205 */ int32 shareIndex_1_2D546CD64618B32CE81516BBF53E81EE;
};

struct FBP_STRUCT_ShareLevelUp_ShareInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString levelUpName_0_746615D94CAFA4D917227FBEA011B9B5;
  /* offset=0x000c flags=0x0008000000000205 */ FString levelUpFgPath_3_4BB9A2664B4E248F263D6BA8C71FA6A8;
  /* offset=0x0018 flags=0x0008000000000205 */ FString levelUpBgPath_4_211C548A40360492F46930814351ACD7;
};

struct FBP_STRUCT_SharePersonInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString role_critrate_0_C202C87F461553C8F5F6B380DBBCB7AF;
  /* offset=0x000c flags=0x0008000000000205 */ FString role_killnum_1_0C5745754096913DF2AFF48E2CE2357F;
  /* offset=0x0018 flags=0x0008000000000205 */ FString headIconUrl_2_EB0E44D5491206AE3A6992BC1ABB4F35;
  /* offset=0x0024 flags=0x0008000000000205 */ FString role_kd_3_223B2FBE49E79A8126865A910B5F747E;
  /* offset=0x0030 flags=0x0008000000000205 */ FString nickName_4_6BE3CCB74CC5C8357A179F97E1791DD8;
  /* offset=0x003c flags=0x0008001040000205 */ int32 gender_11_88095C8947EE93C20778B7A4941A7B1C;
  /* offset=0x0040 flags=0x0008000000000205 */ FString role_allmatchnum_6_C20E084949E5C8DCE41E32893822C8A5;
  /* offset=0x004c flags=0x0008000000000205 */ FString mordelStr_7_8B4C5C7A4E9FBD88FB3849BA7EA57CB2;
  /* offset=0x0058 flags=0x0008000000000205 */ FString role_winnum_8_1F858D824C197C5FAAE1679478201249;
  /* offset=0x0064 flags=0x0008000000000205 */ FString role_toptennum_9_58B8D7474BC5767F0A73A6BB937B2E8F;
  /* offset=0x0070 flags=0x0008000000000205 */ FString roleUid_10_69DBB8CD40F687B2D7EF888FC2C5AD08;
};

struct FBP_STRUCT_ShareRank_ShareInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString rankName_0_BDEA98A44157CA458BECF6AED940E201;
  /* offset=0x000c flags=0x0008000000000205 */ FString rankPointStr_2_F3EEA32A409E7BA63C5157BC1FE3E80E;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 rankLevel_4_C6272AF940A25638B17DA0B842208143;
  /* offset=0x001c flags=0x0008000000000205 */ FString rankTypeName_5_656F8D3248D148EFE6FE329F71D5A85D;
};

struct FBP_STRUCT_ShareRoleData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString roleUid_0_1A548B4C4EB010EC75B2DF90B00BBA70;
  /* offset=0x000c flags=0x0008001040000205 */ int32 gender_1_ACDF9CF941A6007C098337BF3D87A619;
  /* offset=0x0010 flags=0x0008000000000205 */ FString headIconUrl_2_BF20C3D5403B085191EADEBBCC85CB5D;
  /* offset=0x001c flags=0x0008000000000205 */ FString nickName_3_FDC2DBEA4D6FDC408B79B0A28E980AD7;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 cur_avatar_box_id_4_76E5C59D48808FCF4028DC886A53346D;
};

struct FBP_STRUCT_ShopLimit {
  /* offset=0x0000 flags=0x0008000000000205 */ FString Title_0_BFA319E2462060909DF1C4B8CD28019B;
  /* offset=0x000c flags=0x0008000000000205 */ FString EndTime_1_281F06BD42BC4BFDBF28D39ADBED9AA3;
};

struct FBP_STRUCT_ShopLimitInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 price_0_2A56679046B375EA92C902BE5CDADFCA;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 lootid_1_D8A904924B0844F0B2B204AB28521462;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 end_time_3_85D2484242D4D3A851AFC2B72B6BCFE6;
  /* offset=0x000c flags=0x0008000000000205 */ FString icon_4_1FF01CE944DA0BCE57288EBCF0502641;
  /* offset=0x0018 flags=0x0008000000000205 */ FString typename_5_44D883F045AA79A1D12A9A8F923353D3;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 open_time_6_8E26DE884D298F1E15E2CD88B39605FC;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 type_7_280497704F9B2016457695B91FA16D0F;
  /* offset=0x002c flags=0x0008000000000205 */ FString gift_8_CF0EF83D48544513CB76CFBDADA5A12E;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 id_10_1951C9D84A0DB7BE27D2639960C73EE3;
  /* offset=0x003c flags=0x0008000000000205 */ FString desc_11_A641A677459F8D59DDB71E92F86E1483;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 current_sold_num_15_EEFF0F8047872110AB9CE484A76DED4B;
  /* offset=0x004c flags=0x0008001040000205 */ int32 limit_17_AC422E864DDA8806A4EF4C85A713C7D9;
  /* offset=0x0050 flags=0x0008000000000205 */ FString typepic_18_B77B665F4C429E8181827AA8566DADE3;
};

struct FBP_STRUCT_Shop_DropInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 DropItemID_4_805C86174418571C4D853EA69265D54B;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 DropItemNum_5_25CEE5E241F2BE0010165AA804211462;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 DropItemSort_6_41178E574C278CF20425AAA49018DBDA;
  /* offset=0x000c flags=0x0008001040000205 */ int32 DropItemTime_8_3B4682494010EE963B16848D16326E68;
};

struct FBP_STRUCT_Shop_ItemInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString pruduct_name_0_5B29BA93499594D4CBB44A8FAE5DDFB0;
  /* offset=0x000c flags=0x0008001040000205 */ int32 product_sub_type_1_D725D632474D3D69533AB6B9BB1A74AB;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 product_gold_price_2_F81D1F4C47A822905FC194BBCC31D86A;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 product_id_3_900CD0FF4DF6081D731F9A9C4FD6B68F;
  /* offset=0x0018 flags=0x0008000000000205 */ FString product_desc_4_CE6E0C65473991A29496FC8C7199BA12;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 product_type_5_D05ABCC841B153289F6831907AAF5B22;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 item_id_6_C824D15248674294875E6195166C8425;
  /* offset=0x002c flags=0x0008000000000205 */ FString item_icon_7_7B21BA264199835B609EB8959934C835;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 product_sort_8_1057FEEF4CACC02A1DEB36BC4A4D6D7A;
};

struct FBP_STRUCT_SignInUIInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 sign_awardnum1_0_824CF28047E21479CB1BDAAD61154BCD;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 sign_awardnum2_1_B68801B644154A28711DA88ED33F34E1;
  /* offset=0x0008 flags=0x0008000000000205 */ FString sign_awardimage2_2_FACEA9164563AFD924227684FC79DAB8;
  /* offset=0x0014 flags=0x0008000000000205 */ FString sign_awardimage1_3_A3896BA243321F625181478E9563F50C;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 sign_state_4_33EFB76A48184DC84EAA00A6C14C7E14;
  /* offset=0x0024 flags=0x0008000000000205 */ FString sign_awardname1_5_A6EE8A96476127C55E19EF93D452F8E9;
  /* offset=0x0030 flags=0x0008000000000205 */ FString sign_awardname2_6_F52AE4BC4D434E97B8EFA39E4E288664;
  /* offset=0x003c flags=0x0008001040000205 */ int32 sign_awardID2_7_DACC3DD34FAA6201F0B7FCBB5D5E873B;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 sign_awardquality2_8_D45BE8D5489602C50459B8B509E57AD7;
  /* offset=0x0044 flags=0x0008001040000205 */ int32 sign_awardquality1_9_B7EF70E04E7FFFE00C77F2B073EEE2B5;
  /* offset=0x0048 flags=0x0008001040000205 */ int32 sign_awardID1_10_6F16D7EE49FB4F665B9255A20B890BD5;
};

struct FBP_STRUCT_SpawnPlayerData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString gid_0_5016F4854EC3A5A8C89AB9A764FDB20C;
  /* offset=0x000c flags=0x0000000000000205 */ TArray<int32> BP_ARRAY_AvatarList_1_8AE9030B48C5C4C6D1018E9AA7E71DC0;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 sex_2_0DDDE1C14A0CC9529DBFC78A27E51E63;
  /* offset=0x001c flags=0x0008001040000205 */ int32 headId_3_268971594D7E7A10BB2864B16488B3D7;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 index_4_1D0911E640748785A250C28C3602624D;
};

struct FBP_STRUCT_SubActivtyInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Index_0_B81C4C3D4AA3BD3A0439C28613BC1B08;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 ID_1_B9FD0E124EC506384D0042AEF530D01F;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 IsCheckNotice_2_03C9FAE94553F31E283CCA9818454D8C;
  /* offset=0x000c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyItemInfo> BP_ARRAY_SubActivtyCostList_3_2E0A75754F88C667970257BD3E879D10;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 Status_4_71F8FBFE44841130373B5984E5ADE55E;
  /* offset=0x001c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyItemInfo> BP_ARRAY_SubActivtyDropList_5_9784E2B7450A1AB589BA13996C456495;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 Type_6_31D5D141480C00C9D1CE7C9701E2F9E2;
  /* offset=0x002c flags=0x0008001040000205 */ int32 Total_7_C0F4C9C247C42AAD81AFC897D01D992F;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 Progress_8_71FB3C23488F699216766E8407B5DBB3;
  /* offset=0x0034 flags=0x0008000000000205 */ FString Key_9_BEE7791345C151F2E38CC2BA5075774E;
  /* offset=0x0040 flags=0x0008000000000205 */ FString Title_10_F0F2DB8E400F2113AAC7B68624E0F9AB;
};

struct FBP_STRUCT_SubActivtyItemInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 itemId_0_AB6A35224E470A1DF7B2AA9B4F9A14ED;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 have_count_1_E65CFD7D4C8568348C2F1699CF914DC1;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 count_2_BC9F90884CC32B92F7143894D0777C71;
};

struct FBP_STRUCT_TaskCategory {
  /* offset=0x0000 flags=0x0000001040000205 */ bool reddot_0_C9CDFD574D802906049300BEF6991A7A;
  /* offset=0x0004 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_TaskInfo> BP_ARRAY_Task_1_2D81696042CAE74F81A0FD833B658CF7;
  /* offset=0x0010 flags=0x0008000000000205 */ FString name_2_27D155254A02C9DBEDDF0293D24C0EC0;
};

struct FBP_STRUCT_TaskInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 id_0_88834A424D4F392624399BAD12C8C127;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 progress_1_D5C076DA4B60F62188BFBD9F75E08A54;
  /* offset=0x0008 flags=0x0008000000000205 */ FString status_3_39DA97DB471A0C77A2D3A59A86E20795;
  /* offset=0x0014 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_DropItem> BP_ARRAY_CurrentDropList_5_1BF2E1D94EE35CD316F1F487AF130CE6;
};

struct FBP_STRUCT_TeamUpMenuInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString player_name_0_AC4BB02B4BAB0A57C0CC8BB35C138548;
  /* offset=0x000c flags=0x0008000000000205 */ FString player_id_3_5E070A5A451350DFEA7B928AC411EFFF;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 player_status_5_C32C3D8E4A811B12B86C0B8CA89E1BC3;
  /* offset=0x001c flags=0x0000001040000205 */ bool player_online_4_625C8CC9452657A2F278B897DF80ABEC;
  /* offset=0x001d flags=0x0000001040000205 */ bool player_isFriend_6_02EE2E5B495C5B1FEF678691889CE37D;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 player_position_7_B50A33B94FC6B2EAE4B0E28EC3D2AED3;
  /* offset=0x0024 flags=0x0000001040000205 */ bool player_isSpeaking_8_9A8A49094A203D9C6C087384F5EA1564;
  /* offset=0x0025 flags=0x0000001040000205 */ bool player_openVoice_9_7B74A3194F4C86F300FD62A3D76C381D;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 player_gameStart_10_41815B8A47C408F8B226D0AD90A07336;
  /* offset=0x002c flags=0x0008000000000205 */ FString player_carteamName_11_DE30791E4BEF6562FDFFEC931B696D7F;
};

struct FBP_STRUCT_TeamUpRingsChange {
  /* offset=0x0000 flags=0x0000000000000205 */ TArray<FString> BP_ARRAY_CurrentTeamMemberGidList_0_D2CDCC1D471B89B9F0AB7EA00B0FC54F;
  /* offset=0x000c flags=0x0008001040000205 */ int32 teamMemberNum_1_77DA28B0499A92734B37ADB6DAF70618;
};

struct FBP_STRUCT_TransformUseList {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 index_0_8EB710D74F66FC0D18778A85F4279B6B;
  /* offset=0x0004 flags=0x0000001040000205 */ bool inUse_1_3808403449351BB245F037A0F1CA2BB0;
};

struct FBP_STRUCT_UIElemLayoutDetail {
  /* offset=0x0000 flags=0x0008001040000205 */ uint8 Type_2_55DBE0E544DAFBECC9EFB6BB17ABA028;
  /* offset=0x0004 flags=0x0008001040000005 */ struct FVector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;
  /* offset=0x000c flags=0x0008001040000205 */ float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;
  /* offset=0x0010 flags=0x0000001000000005 */ struct FAnchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;
  /* offset=0x0020 flags=0x0008001040000005 */ struct FVector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;
};

struct FBP_STRUCT_VehicleSpawn_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString VehicleType_0_D5F23BDF4A402F908C32838B32EE296A;
  /* offset=0x000c flags=0x0008001040000205 */ int32 KeyID_1_DA313A8B47F5A4995D23CE8FADB22B3A;
  /* offset=0x0010 flags=0x0000001040000205 */ bool SnapFloor_2_4E8583D44F46C002B16DD3BE8DAC9F9D;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 Weight_3_B85B07C74A2D99C9E8655D9BA2496D44;
  /* offset=0x0018 flags=0x0008000000000205 */ FString Vehicle_4_8EAC1DE84321DB8AA153C19AB4E97012;
};

struct FBP_STRUCT_VersionUpdateInfo {
  /* offset=0x0000 flags=0x0008000000000205 */ FString isAppUpdating_0_E6690F6B40E329A7D534F7A9AA1486C2;
  /* offset=0x000c flags=0x0008000000000205 */ FString isNeedUpdating_1_7DEF18944AC725B1A2E612BC4173B477;
  /* offset=0x0018 flags=0x0008000000000205 */ FString versionString_2_E8428CB24748F92CE545E8888CB66610;
  /* offset=0x0024 flags=0x0008000000000205 */ FString versionDescrition_3_DEA8C78E4626A9BDA6B54B93C187781A;
  /* offset=0x0030 flags=0x0008000000000205 */ FString userDefineStr_4_B7B148F746032C2F44D4D2BC027AC670;
  /* offset=0x003c flags=0x0008000000000205 */ FString isForcedUpdating_6_7853489640C050B24A83EBA7B51CF960;
  /* offset=0x0048 flags=0x0008001040000205 */ float needDownloadSize_f_7_B978907241DA7EFAC3D380B44E071BDD;
};

struct FBP_STRUCT_WardrobeChangedItemData {
  /* offset=0x0000 flags=0x0000001040000205 */ bool is_new_0_2D9A188C4472605D9977E5ADB4EAC2C9;
  /* offset=0x0001 flags=0x0000001040000205 */ bool is_selected_1_4304CBCD41F677B4E8FE20B94DC1D15A;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 count_2_E2C54826467B15932BB9DD8B2B648DBF;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 res_id_3_CDADB020479BCC7359A9E5A3CFE08A21;
  /* offset=0x000c flags=0x0000001040000205 */ bool is_using_4_2DBCA32A4D623940343653BF19C16F2A;
  /* offset=0x0010 flags=0x0008000000000205 */ FString ins_id_7_5437CADB4FBE3A56BCAF8E92C3BC3538;
  /* offset=0x001c flags=0x0000001040000205 */ bool is_sourcebook_8_31E036E04BCF30F8B93F838954323F76;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 validHours_9_6061DE364061F81046D4539A8E3A3A97;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 expireTS_10_78B7137941914C4B96FCECBAFA3153D9;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 itemSubType_11_C232C3204A24D1709AF19BBE71BD84DD;
  /* offset=0x002c flags=0x0008001040000205 */ int32 itemQuality_12_7DCFB9914D0D2E60FE769FAE58D4D7AA;
};

struct FBP_STRUCT_WardrobeClickedItemData {
  /* offset=0x0000 flags=0x0000001040000205 */ bool is_new_0_5F7CE5D84606E7A8F71838B4FE9D7076;
  /* offset=0x0001 flags=0x0000001040000205 */ bool is_selected_1_9195524940DFFFCEB7EB5584C65F1290;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 count_2_1770475C4A126AA64AF580A8D69E25FD;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 res_id_3_D36ACB67403D80ED0A15378D494446AA;
  /* offset=0x000c flags=0x0000001040000205 */ bool is_using_4_B6D9E9F848BBEF9EE9ED548C37E7DD07;
  /* offset=0x0010 flags=0x0008000000000205 */ FString ins_id_7_11CEFAC244B1967F18C855A628CF582B;
  /* offset=0x001c flags=0x0000001040000205 */ bool is_sourcebook_8_771EC879410F6A334B245EB469974726;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 validHours_9_F60D150A4BE7F2DCD9C8AEB47FA3F9F9;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 expireTS_10_01135022493F2554E6892FBE47FCFCAD;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 itemSubType_11_CEA9152A43AB7D75B0CA9CA11639EBEF;
  /* offset=0x002c flags=0x0008001040000205 */ int32 itemQuality_12_D2391AA54FB3B7AD7A06A1A78914A778;
};

struct FBP_STRUCT_WardrobeItemInfo {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 count_0_75D41A06495A24946E3D4B911DB00E9D;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 res_id_3_8A41C51347759FB1159113B0667B6253;
  /* offset=0x0008 flags=0x0000001040000205 */ bool is_new_5_966A0BDB4022BEDD4EA3A3A669254F7C;
  /* offset=0x0009 flags=0x0000001040000205 */ bool is_selected_6_B589A2E944A77AA5194DE79F52790784;
  /* offset=0x000a flags=0x0000001040000205 */ bool is_using_7_B5788B0B4F853027E28847978621AEA5;
  /* offset=0x000c flags=0x0008000000000205 */ FString ins_id_10_FB4BC6174B7CBAB4AAEE3D9DE62CBE86;
  /* offset=0x0018 flags=0x0000001040000205 */ bool is_sourcebook_11_099B4E16490E3B2389A0F5B94A0E4B87;
  /* offset=0x001c flags=0x0008001040000205 */ int32 validHours_12_655C0D7043AFE0DD5939289B7F0CD14C;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 expireTS_13_1022E6C844F89790B0E5A68F6A4EE323;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 itemSubType_14_5B2B9CC14318B7D119A57F9C4E26E093;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 itemQuality_15_E9B592464100B4BE66B0AF80EC77B019;
};

struct FBP_STRUCT_WeaponAttachments_type {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 Magazine1ID_0_124FF7FA4E6B890EDD62C18B296C9E15;
  /* offset=0x0004 flags=0x0008001040000205 */ int32 Stock2ID_1_3FCB2F494E1FDFC2D41F59B93064182D;
  /* offset=0x0008 flags=0x0008001040000205 */ int32 Lower1ID_2_8C3FCF444675753570567D8F645FB103;
  /* offset=0x000c flags=0x0008001040000205 */ int32 Lower2ID_3_32758B6241007F0497013AB8E1170794;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 Magazine3ID_4_A07A42D4425929C395081BAF5FDE2B06;
  /* offset=0x0014 flags=0x0008001040000205 */ int32 Stock1ID_5_F2636C554EE9EFF8BA685C92E9F3606C;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 Magazine2ID_6_FBD967F34B076135939A34B346BAAB29;
  /* offset=0x001c flags=0x0008001040000205 */ int32 Muzzle2ID_7_9E03332A4752E38E637556B3FF0D5351;
  /* offset=0x0020 flags=0x0008001040000205 */ int32 Upper1ID_8_949763A341AFE79B4276AC83343C6558;
  /* offset=0x0024 flags=0x0008001040000205 */ int32 Upper2ID_9_3B7B6B314DBF635E73F159900A2B8FB1;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 Muzzle1ID_10_3B713F3C4A35C5FB29A4E0AF5C8A275F;
  /* offset=0x002c flags=0x0008001040000205 */ int32 Upper4ID_11_37C554F5497AB2283775B9827CFB9CF0;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 KeyID_12_DE29BA8D4D52E79C09ECD792B3E5AF59;
  /* offset=0x0034 flags=0x0008001040000205 */ int32 Muzzle3ID_13_31FC5F55414852E7CF50EA9E5BD5B291;
  /* offset=0x0038 flags=0x0008001040000205 */ int32 Upper3ID_14_C7B485EF4D1F55E148B29FB67ABD362A;
  /* offset=0x003c flags=0x0008001040000205 */ int32 Upper5ID_15_ADA78DC74C7C4457E27098A829C60AB0;
  /* offset=0x0040 flags=0x0008001040000205 */ int32 BulletID_16_836CF1DA41D9B5D6B2A048B65ABF9EA7;
};

struct FBP_STRUCT_WeaponBPTable_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString CName_0_CD600C314161E84152102388BAC2C6E5;
  /* offset=0x000c flags=0x0008000000000205 */ FString Path_1_4B3A115440CA4D3ED6BB1CAE5312F1D0;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 ID_2_CE3ED80D47C51A8880AD2CBC79F2E6D0;
};

struct FBP_STRUCT_WeekSignUpUI_Info {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 status_0_EC8A35D74F5AC2CC2B98F591C9409F6E;
  /* offset=0x0004 flags=0x0008000000000205 */ FString name_1_53251327494CC92F32987E8745702062;
  /* offset=0x0010 flags=0x0008001040000205 */ int32 itemQuality_3_56B4A3B3426227C55FA26CA98E36D3AB;
  /* offset=0x0014 flags=0x0008000000000205 */ FString itemName_4_6A7EF4194025F1D0E47130BACFB2F4A9;
  /* offset=0x0020 flags=0x0008000000000205 */ FString itemImage_5_FA483C614A13FD79836B3FB3D77C8481;
  /* offset=0x002c flags=0x0008001040000205 */ int32 itemResID_6_AD9534F24C781486346957AF128CF8EF;
};

struct FBP_STRUCT_ZoneConfig_type {
  /* offset=0x0000 flags=0x0008000000000205 */ FString NameInChinese_0_179F480A43D68450578ED9A60DFEB1E4;
  /* offset=0x000c flags=0x0008000000000205 */ FString NameInEnglish_1_B81817404D37E6DECDF39182C3C84D5D;
  /* offset=0x0018 flags=0x0008001040000205 */ int32 ZoneID_2_25BADFA44D29882BDEA26BA1D8923C64;
  /* offset=0x001c flags=0x0008000000000205 */ FString GVoiceServer_3_D482EC9D4F05594214C23F9157E39271;
};

struct FBP_VoiceCheckData {
  /* offset=0x0000 flags=0x0008001040000205 */ uint8 CheckType_10_2979E20A4318FC5AA71D74A3D0883B0A;
  /* offset=0x0004 flags=0x0008001040000205 */ float checkLength_7_8308F79F440D45E8F56E24B1C2AD54DB;
  /* offset=0x0008 flags=0x0008001040000205 */ float TriggerCD_18_171DDF784C3E66546F9B2CB5D1C76D40;
  /* offset=0x000c flags=0x0008001040000205 */ float ShowCD_25_64DF62A84C699369733ED7B80CBCE887;
  /* offset=0x0010 flags=0x0008001040000205 */ float MaxShowCDSCale_27_8612D6FB4C124C36D97566BCF37BD826;
  /* offset=0x0014 flags=0x0008001040000205 */ float MinShowCDScale_29_A298B9864245E006365E61A11DE50DCE;
  /* offset=0x0018 flags=0x0008001040000205 */ float MaxSizeScale_31_2E1C44054CCA97BE53C5C9A0221E98E2;
  /* offset=0x001c flags=0x0008001040000205 */ float MinSizeScale_33_94F893FB496FDAF0704CD39054BAF717;
  /* offset=0x0020 flags=0x0008001040000205 */ float Minspeed_37_3455B4924DA5CB2D5F9BE8A0716073D5;
};

struct FBP_VoiceCheckWeatherConfig {
  /* offset=0x0000 flags=0x0008001040000205 */ uint8 weatherType_2_73C620B54D77970EE46FD8AD683BEEC0;
  /* offset=0x0004 flags=0x0008001040000205 */ float footrate_6_E84774774604BE0155960FA63EDE8D03;
  /* offset=0x0008 flags=0x0008001040000205 */ float weaponRate_11_4CB82D344926C25C06B42E9124E236BA;
  /* offset=0x000c flags=0x0008001040000205 */ float vehicleRate_12_5617874C4ED988E8C576068C42ECE6AD;
};

struct FBTCompositeChild {
  /* offset=0x0000 flags=0x0018001040000200 */ UBTCompositeNode* ChildComposite;
  /* offset=0x0004 flags=0x0018001040000200 */ UBTTaskNode* ChildTask;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<UBTDecorator*> Decorators;
  /* offset=0x0014 flags=0x0010000000000200 */ TArray<struct FBTDecoratorLogic> DecoratorOps;
};

struct FBTDecoratorLogic {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Operation;
  /* offset=0x0002 flags=0x0018001040000200 */ uint16 Number;
};

struct FBackpackItemData {
  /* offset=0x0000 flags=0x0018001040000214 */ int32 Num;
  /* offset=0x0008 flags=0x0010000000000014 */ struct FPickUpGlobalDataTableRow BaseData;
  /* offset=0x0108 flags=0x0018001040000214 */ bool bIsUsing;
  /* offset=0x010c flags=0x0018001040000214 */ float FinishPercentage;
  /* offset=0x0110 flags=0x0018001040000205 */ uint8 SurvivePickUpGlobalCategory;
};

struct FBakedAnimationState {
  /* offset=0x0000 flags=0x0018001040000200 */ FName StateName;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<struct FBakedStateExitTransition> Transitions;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 StateRootNodeIndex;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 StartNotify;
  /* offset=0x001c flags=0x0018001040000200 */ int32 EndNotify;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 FullyBlendedNotify;
  /* offset=0x0024 flags=0x0018001040000200 */ bool bIsAConduit;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 EntryRuleNodeIndex;
  /* offset=0x002c flags=0x0010000000000200 */ TArray<int32> PlayerNodeIndices;
  /* offset=0x0038 flags=0x0018001040000200 */ bool bAlwaysResetOnEntry;
};

struct FBakedAnimationStateMachine {
  /* offset=0x0000 flags=0x0018001040000200 */ FName MachineName;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 InitialState;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FBakedAnimationState> States;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FAnimationTransitionBetweenStates> Transitions;
};

struct FBakedStateExitTransition {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 CanTakeDelegateIndex;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 CustomResultNodeIndex;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 TransitionIndex;
  /* offset=0x000c flags=0x0018001040000200 */ bool bDesiredTransitionReturnValue;
  /* offset=0x000d flags=0x0018001040000200 */ bool bAutomaticRemainingTimeRule;
  /* offset=0x0010 flags=0x0010000000000200 */ TArray<int32> PoseEvaluatorLinks;
};

struct FBaseAttenuationSettings {
  /* offset=0x0004 flags=0x0018001040000205 */ enum EAttenuationDistanceModel DistanceAlgorithm;
  /* offset=0x0008 flags=0x0010000000000005 */ struct FRuntimeFloatCurve CustomAttenuationCurve;
  /* offset=0x0060 flags=0x0018001040000205 */ uint8 AttenuationShape;
  /* offset=0x0064 flags=0x0018001040000205 */ float dBAttenuationAtMax;
  /* offset=0x0068 flags=0x0018001040000005 */ struct FVector AttenuationShapeExtents;
  /* offset=0x0074 flags=0x0018001040000205 */ float ConeOffset;
  /* offset=0x0078 flags=0x0018001040000205 */ float FalloffDistance;
};

struct FBasedMovementInfo {
  /* offset=0x0000 flags=0x0018001040080208 */ UPrimitiveComponent* MovementBase;
  /* offset=0x0008 flags=0x0018001040000200 */ FName BoneName;
  /* offset=0x0010 flags=0x0010001000000000 */ struct FVector_NetQuantize100 Location;
  /* offset=0x001c flags=0x0010001040000000 */ struct FRotator Rotation;
  /* offset=0x0028 flags=0x0018001040000200 */ bool bServerHasBaseComponent;
  /* offset=0x0029 flags=0x0018001040000200 */ bool bRelativeRotation;
  /* offset=0x002a flags=0x0018001040000200 */ bool bServerHasVelocity;
};

struct FBattleItemAdditionalData {
  /* offset=0x0000 flags=0x0018001040000204 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000204 */ float FloatData;
  /* offset=0x000c flags=0x0018000000000204 */ FString StringData;
};

struct FBattleItemData: FItemData {
  /* offset=0x0048 flags=0x0018001040000204 */ int32 Count;
  /* offset=0x004c flags=0x0018001040000204 */ bool bEquipping;
  /* offset=0x0050 flags=0x0010000000000204 */ TArray<struct FBattleItemAdditionalData> AdditionalData;
  /* offset=0x005c flags=0x0010001000000004 */ struct FBattleItemFeatureData FeatureData;
  /* offset=0x0074 flags=0x0010000000000204 */ TArray<struct FItemAssociation> Associations;
};

struct FBattleItemFeatureData {
  /* offset=0x0000 flags=0x0018001040010205 */ float UnitWeight;
  /* offset=0x0004 flags=0x0018001040010205 */ int32 MaxCount;
  /* offset=0x0008 flags=0x0018001040010205 */ bool bUnique;
  /* offset=0x0009 flags=0x0018001040010205 */ bool bStackable;
  /* offset=0x000a flags=0x0018001040010205 */ bool bEquippable;
  /* offset=0x000b flags=0x0018001040010205 */ bool bConsumable;
  /* offset=0x000c flags=0x0018001040010205 */ bool bAutoEquipAndDrop;
  /* offset=0x0010 flags=0x0018001040010205 */ int32 SortingPriority;
  /* offset=0x0014 flags=0x0018001040010205 */ int32 ItemType;
};

struct FBattleItemPickupInfo {
  /* offset=0x0000 flags=0x0018001040000204 */ UObject* Source;
  /* offset=0x0004 flags=0x0018001040000204 */ int32 Count;
  /* offset=0x0008 flags=0x0010000000000204 */ TArray<struct FBattleItemAdditionalData> AdditionalData;
  /* offset=0x0014 flags=0x0018001040000204 */ bool bAutoEquip;
  /* offset=0x0018 flags=0x0010001000000004 */ struct FBattleItemUseTarget AutoEquipTarget;
};

struct FBattleItemSortingInfo {
  /* offset=0x0000 flags=0x0018001000000004 */ struct FItemDefineID ItemDefineID;
  /* offset=0x0018 flags=0x0018001040000204 */ bool bHighPriority;
};

struct FBattleItemUseTarget {
  /* offset=0x0000 flags=0x0018001000000004 */ struct FItemDefineID TargetDefineID;
  /* offset=0x0018 flags=0x0018001040000204 */ FName TargetAssociationName;
};

struct FBattleResultData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Reason;
  /* offset=0x000c flags=0x0018001040000200 */ uint32 RemainingPlayerCount;
  /* offset=0x0010 flags=0x0018001040000200 */ uint32 TotalPlayerCount;
  /* offset=0x0014 flags=0x0018001040000200 */ uint32 RemainingTeamCount;
  /* offset=0x0018 flags=0x0018001040000200 */ uint32 TotalTeamCount;
  /* offset=0x001c flags=0x0018001040000200 */ bool IsSolo;
  /* offset=0x0020 flags=0x0018001040000200 */ uint32 ShootWeaponShotNum;
  /* offset=0x0024 flags=0x0018001040000200 */ uint32 ShootWeaponShotAndHitPlayerNum;
  /* offset=0x0028 flags=0x0018001040000200 */ uint32 HealTimes;
  /* offset=0x002c flags=0x0018001040000200 */ float marchDistance;
  /* offset=0x0030 flags=0x0018001040000200 */ float driveDistance;
  /* offset=0x0034 flags=0x0018001040000200 */ uint32 destroyVehicleNum;
  /* offset=0x0038 flags=0x0018001040000200 */ uint32 add_exp;
  /* offset=0x003c flags=0x0018001040000200 */ uint32 add_gold;
  /* offset=0x0040 flags=0x0018001040000200 */ uint64 battle_id;
  /* offset=0x0048 flags=0x0018001040000200 */ uint32 max_game_num;
  /* offset=0x004c flags=0x0018001040000200 */ uint32 person_rank;
  /* offset=0x0050 flags=0x0018001040000200 */ uint32 team_rank;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<struct FMemBTResultData> BP_ARRAY_TeammateList;
  /* offset=0x0060 flags=0x0010001000000000 */ struct FResultRatingData BP_STRUCT_BTRating;
};

struct FBattleSearchBoxSortingInfo {
  /* offset=0x0000 flags=0x0010000000000004 */ struct FSearchedPickUpItemResult pickUpItemResult;
  /* offset=0x0038 flags=0x0018001040000204 */ bool bHighPriority;
};

struct FBattleSearchItemSortingInfo {
  /* offset=0x0000 flags=0x0010000000000004 */ struct FSearchedPickUpItemResult SearchItemResult;
  /* offset=0x0038 flags=0x0018001040000204 */ bool bHighPriority;
};

struct FBattleWeaponItemDisplayData {
  /* offset=0x0000 flags=0x0018000000010205 */ FString ItemName;
  /* offset=0x000c flags=0x0018000000010205 */ FString WhiteIconPath;
};

struct FBeamModifierOptions {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bModify:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bScale:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bLock:1;
};

struct FBehaviorTreeTemplateInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ UBehaviorTree* Asset;
  /* offset=0x0004 flags=0x0018001040002200 */ UBTCompositeNode* Template;
};

struct FBlackboardEntry {
  /* offset=0x0000 flags=0x0018001040000201 */ FName EntryName;
  /* offset=0x0008 flags=0x001a001040080209 */ UBlackboardKeyType* KeyType;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bInstanceSynced:1;
};

struct FBlackboardKeySelector {
  /* offset=0x0000 flags=0x0010000000002205 */ TArray<UBlackboardKeyType*> AllowedTypes;
  /* offset=0x0010 flags=0x0018001040000a05 */ FName SelectedKeyName;
  /* offset=0x0018 flags=0x001c001040002a05 */ UClass<UBlackboardKeyType>* SelectedKeyType;
  /* offset=0x001c flags=0x0028081040002a05 */ uint8 SelectedKeyID;
  /* offset=0x001d flags=0x0028081000000005 */ uint8 bNoneIsAllowedValue:1;
};

struct FBlendFilter {
};

struct FBlendParameter {
  /* offset=0x0000 flags=0x0018000000000201 */ FString DisplayName;
  /* offset=0x000c flags=0x0018001040000201 */ float Min;
  /* offset=0x0010 flags=0x0018001040000201 */ float Max;
  /* offset=0x0014 flags=0x0018001040000201 */ int32 GridNum;
};

struct FBlendProfileBoneEntry {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FBoneReference BoneReference;
  /* offset=0x0018 flags=0x0018001040000201 */ float BlendScale;
};

struct FBlendSample {
  /* offset=0x0000 flags=0x0018001040000201 */ UAnimSequence* Animation;
  /* offset=0x0004 flags=0x0018001040000001 */ struct FVector SampleValue;
  /* offset=0x0010 flags=0x0018001040000201 */ float RateScale;
};

struct FBlendSampleData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 SampleDataIndex;
  /* offset=0x0004 flags=0x0018001040000200 */ UAnimSequence* Animation;
  /* offset=0x0008 flags=0x0018001040000200 */ float TotalWeight;
  /* offset=0x000c flags=0x0018001040000200 */ float Time;
  /* offset=0x0010 flags=0x0018001040000200 */ float PreviousTime;
  /* offset=0x0014 flags=0x0018001040000200 */ float SamplePlayRate;
};

struct FBlueprintComponentChangedPropertyInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ FName PropertyName;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 ArrayIndex;
  /* offset=0x000c flags=0x0018001040000200 */ UStruct* PropertyScope;
};

struct FBlueprintComponentDelegateBinding {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ComponentPropertyName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName DelegatePropertyName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintCookedComponentInstancingData {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bIsValid;
  /* offset=0x0004 flags=0x0010000000000200 */ TArray<struct FBlueprintComponentChangedPropertyInfo> ChangedPropertyList;
};

struct FBlueprintEditorPromotionSettings {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FFilePath FirstMeshPath;
  /* offset=0x000c flags=0x0010000000000001 */ struct FFilePath SecondMeshPath;
  /* offset=0x0018 flags=0x0010000000000001 */ struct FFilePath DefaultParticleAsset;
};

struct FBlueprintInputActionDelegateBinding: FBlueprintInputDelegateBinding {
  /* offset=0x0008 flags=0x0018001040000200 */ FName InputActionName;
  /* offset=0x0010 flags=0x0018001040000200 */ uint8 InputKeyEvent;
  /* offset=0x0018 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintInputAxisDelegateBinding: FBlueprintInputDelegateBinding {
  /* offset=0x0008 flags=0x0018001040000200 */ FName InputAxisName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintInputAxisKeyDelegateBinding: FBlueprintInputDelegateBinding {
  /* offset=0x0008 flags=0x0018000000000000 */ struct FKey AxisKey;
  /* offset=0x0018 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintInputDelegateBinding {
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bConsumeInput:1;
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bExecuteWhenPaused:1;
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bOverrideParentBinding:1;
};

struct FBlueprintInputKeyDelegateBinding: FBlueprintInputDelegateBinding {
  /* offset=0x0008 flags=0x0018000000000000 */ struct FInputChord InputChord;
  /* offset=0x0020 flags=0x0018001040000200 */ uint8 InputKeyEvent;
  /* offset=0x0028 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintInputTouchDelegateBinding: FBlueprintInputDelegateBinding {
  /* offset=0x0001 flags=0x0018001040000200 */ uint8 InputKeyEvent;
  /* offset=0x0008 flags=0x0018001040000200 */ FName FunctionNameToBind;
};

struct FBlueprintSessionResult {
};

struct FBodyAttachmentAttrModify {
  /* offset=0x0000 flags=0x0018000000010201 */ FString ModifyAttr;
  /* offset=0x000c flags=0x0018001040010201 */ enum EAttrOperator Op;
  /* offset=0x0010 flags=0x0018001040010201 */ float ModifyValue;
};

struct FBodyAttachmentConfig {
  /* offset=0x0000 flags=0x0010000000010001 */ FText AttachmentID;
  /* offset=0x000c flags=0x0010000000010201 */ TArray<struct FBodyAttachmentAttrModify> BodyAttachmentAttrModifiers;
  /* offset=0x0018 flags=0x0018000000010201 */ FString BodyDurabilityIndexName;
};

struct FBodyInstance {
  /* offset=0x0018 flags=0x0010001020000000 */ struct FCollisionResponseContainer ResponseToChannels;
  /* offset=0x0039 flags=0x0018041040000205 */ enum ESleepFamily SleepFamily;
  /* offset=0x003a flags=0x0018001040000201 */ uint8 DOFMode;
  /* offset=0x003b flags=0x0048001040000201 */ uint8 CollisionEnabled;
  /* offset=0x0040 flags=0x0048001040000201 */ FName CollisionProfileName;
  /* offset=0x0048 flags=0x0040000000000001 */ struct FCollisionResponse CollisionResponses;
  /* offset=0x0075 flags=0x0018041000000015 */ uint8 bUseCCD:1;
  /* offset=0x0075 flags=0x0018001000000015 */ uint8 bNotifyRigidBodyCollision:1;
  /* offset=0x0075 flags=0x0018001000000005 */ uint8 bSimulatePhysics:1;
  /* offset=0x0075 flags=0x0018001000000001 */ uint8 bOverrideMass:1;
  /* offset=0x0075 flags=0x0018001000000015 */ uint8 bEnableGravity:1;
  /* offset=0x0075 flags=0x0018041000000005 */ uint8 bAutoWeld:1;
  /* offset=0x0075 flags=0x0018041000000015 */ uint8 bStartAwake:1;
  /* offset=0x0075 flags=0x0018041000000015 */ uint8 bGenerateWakeEvents:1;
  /* offset=0x0076 flags=0x0018001000000000 */ uint8 bUpdateMassWhenScaleChanges:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockTranslation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockRotation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockXTranslation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockYTranslation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockZTranslation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockXRotation:1;
  /* offset=0x0076 flags=0x0018001000000001 */ uint8 bLockYRotation:1;
  /* offset=0x0077 flags=0x0018001000000001 */ uint8 bLockZRotation:1;
  /* offset=0x0077 flags=0x0018001000000001 */ uint8 bOverrideMaxAngularVelocity:1;
  /* offset=0x0077 flags=0x0018041000000005 */ uint8 bUseAsyncScene:1;
  /* offset=0x0077 flags=0x0028081000000001 */ uint8 bOverrideMaxDepenetrationVelocity:1;
  /* offset=0x0077 flags=0x0028081000000001 */ uint8 bOverrideWalkableSlopeOnInstance:1;
  /* offset=0x0078 flags=0x00280c1040000215 */ float MaxDepenetrationVelocity;
  /* offset=0x0084 flags=0x0028081040000215 */ float MassInKgOverride;
  /* offset=0x0088 flags=0x0018001040000205 */ float LinearDamping;
  /* offset=0x008c flags=0x0018001040000205 */ float AngularDamping;
  /* offset=0x0090 flags=0x0018001040000001 */ struct FVector CustomDOFPlaneNormal;
  /* offset=0x009c flags=0x0018041040000005 */ struct FVector COMNudge;
  /* offset=0x00a8 flags=0x0018041040000205 */ float MassScale;
  /* offset=0x00ac flags=0x0018041040000005 */ struct FVector InertiaTensorScale;
  /* offset=0x00b8 flags=0x0048001040000201 */ uint8 ObjectType;
  /* offset=0x00c4 flags=0x00200c1040000015 */ struct FWalkableSlopeOverride WalkableSlopeOverride;
  /* offset=0x00d4 flags=0x0028081040000215 */ UPhysicalMaterial* PhysMaterialOverride;
  /* offset=0x00d8 flags=0x0018041040000215 */ float MaxAngularVelocity;
  /* offset=0x00dc flags=0x0018041040000215 */ float CustomSleepThresholdMultiplier;
  /* offset=0x00e0 flags=0x0018041040000215 */ float StabilizationThresholdMultiplier;
  /* offset=0x00e4 flags=0x0018001040000200 */ float PhysicsBlendWeight;
  /* offset=0x00e8 flags=0x0018041040000215 */ int32 PositionSolverIterationCount;
  /* offset=0x0100 flags=0x0018001040000200 */ uint64 RigidActorSyncId;
  /* offset=0x0108 flags=0x0018001040000200 */ uint64 RigidActorAsyncId;
  /* offset=0x0110 flags=0x0018041040000215 */ int32 VelocitySolverIterationCount;
};

struct FBodyPartCfg {
  /* offset=0x0000 flags=0x0018001040000201 */ float DamageScale;
  /* offset=0x0004 flags=0x0018001040000200 */ float Durability;
  /* offset=0x0008 flags=0x0018001040000201 */ float DamageReduceScale;
  /* offset=0x000c flags=0x0018000000000201 */ FString BodyDurabilityIndexName;
};

struct FBodyTypeDef {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 UpThreshold;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 DownThreshold;
};

struct FBoneMirrorInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 SourceIndex;
  /* offset=0x0004 flags=0x0018001040000201 */ uint8 BoneFlipAxis;
};

struct FBoneNode {
  /* offset=0x0000 flags=0x0018001060000200 */ FName Name;
  /* offset=0x0008 flags=0x0018001060000200 */ int32 ParentIndex;
  /* offset=0x000c flags=0x0018001040000201 */ uint8 TranslationRetargetingMode;
};

struct FBoneReference {
  /* offset=0x0000 flags=0x0018001040000201 */ FName BoneName;
};

struct FBoneSocketTarget {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bUseSocket;
  /* offset=0x0008 flags=0x0010001000000001 */ struct FBoneReference BoneReference;
  /* offset=0x0020 flags=0x0010001000000001 */ struct FSocketReference SocketReference;
};

struct FBoolTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001000000001 */ uint8 Value:1;
};

struct FBox {
  /* offset=0x0000 flags=0x0018001041000005 */ struct FVector Min;
  /* offset=0x000c flags=0x0018001041000005 */ struct FVector Max;
  /* offset=0x0018 flags=0x0018001040000200 */ uint8 IsValid;
};

struct FBox2D {
  /* offset=0x0000 flags=0x0018001041000005 */ struct FVector2D Min;
  /* offset=0x0008 flags=0x0018001041000005 */ struct FVector2D Max;
  /* offset=0x0010 flags=0x0018001040000200 */ uint8 bIsValid;
};

struct FBoxSphereBounds {
  /* offset=0x0000 flags=0x0018001041000005 */ struct FVector Origin;
  /* offset=0x000c flags=0x0018001041000005 */ struct FVector BoxExtent;
  /* offset=0x0018 flags=0x0018001041000205 */ float SphereRadius;
};

struct FBranchFilter {
  /* offset=0x0000 flags=0x0018001040000201 */ FName BoneName;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 BlendDepth;
};

struct FBranchingPoint: FAnimLinkableElement {
  /* offset=0x0028 flags=0x0018001040000201 */ FName EventName;
  /* offset=0x0030 flags=0x0018001060000200 */ float DisplayTime;
  /* offset=0x0034 flags=0x0018001040000200 */ float TriggerTimeOffset;
};

struct FBranchingPointMarker {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 NotifyIndex;
  /* offset=0x0004 flags=0x0018001040000200 */ float TriggerTime;
  /* offset=0x0008 flags=0x0018001040000200 */ uint8 NotifyEventType;
};

struct FBranchingPointNotifyPayload {
};

struct FBuffActionItem {
  /* offset=0x0000 flags=0x001a00104008020d */ UUTSkillAction* BuffAction;
};

struct FBuffAnimationItem {
  /* offset=0x0000 flags=0x001c000000000001 */ UAnimationAsset* AnimationAssetToPlay;
  /* offset=0x0028 flags=0x001c000000000001 */ UAnimationAsset* AnimationAssetToPlayFPP;
  /* offset=0x0050 flags=0x001c000000000001 */ UAnimMontage* AnimationMontageToPlay;
  /* offset=0x0078 flags=0x001c000000000001 */ UAnimMontage* AnimationMontageToPlayFPP;
  /* offset=0x00a0 flags=0x0018001040000201 */ bool NeedReplayByChangFirstView;
};

struct FBuffAnimationTagItem {
  /* offset=0x0000 flags=0x0018001040000201 */ FName AnimationAssetTag;
  /* offset=0x0008 flags=0x0018001040000201 */ FName AnimationAssetTagFPP;
  /* offset=0x0010 flags=0x0018001040000201 */ FName AnimationMontageTag;
  /* offset=0x0018 flags=0x0018001040000201 */ FName AnimationMontageTagFPP;
  /* offset=0x0020 flags=0x0018001040000201 */ bool NeedReplayByChangFirstView;
};

struct FBuffApplierConditionPair {
  /* offset=0x0000 flags=0x0018001040010201 */ uint8 ConditionVar;
  /* offset=0x0001 flags=0x0018001040010201 */ bool IsShowDebugLine;
  /* offset=0x0004 flags=0x0018001040010201 */ float InSightCheckAngle;
  /* offset=0x0008 flags=0x0010000000010201 */ TArray<FName> BuffNameArray;
};

struct FBuffEventActionItem {
  /* offset=0x0000 flags=0x001a00104008020d */ USTBaseBuffEventType* EventType;
  /* offset=0x0004 flags=0x001a00104008020d */ UUTSkillAction* BuffEventAction;
};

struct FBuffInstancedItem {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 BuffID;
  /* offset=0x0004 flags=0x0018001040080208 */ USTBaseBuff* Buff;
};

struct FBuildPromotionImportWorkflowSettings {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition Diffuse;
  /* offset=0x0018 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition Normal;
  /* offset=0x0030 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition StaticMesh;
  /* offset=0x0048 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition ReimportStaticMesh;
  /* offset=0x0060 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition BlendShapeMesh;
  /* offset=0x0078 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition MorphMesh;
  /* offset=0x0090 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition SkeletalMesh;
  /* offset=0x00a8 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition Animation;
  /* offset=0x00c0 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition Sound;
  /* offset=0x00d8 flags=0x0010000000004001 */ struct FEditorImportWorkflowDefinition SurroundSound;
  /* offset=0x00f0 flags=0x0010000000004201 */ TArray<struct FEditorImportWorkflowDefinition> OtherAssetsToImport;
};

struct FBuildPromotionNewProjectSettings {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FDirectoryPath NewProjectFolderOverride;
  /* offset=0x000c flags=0x0018000000000201 */ FString NewProjectNameOverride;
};

struct FBuildPromotionOpenAssetSettings {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FFilePath BlueprintAsset;
  /* offset=0x000c flags=0x0010000000004001 */ struct FFilePath MaterialAsset;
  /* offset=0x0018 flags=0x0010000000004001 */ struct FFilePath ParticleSystemAsset;
  /* offset=0x0024 flags=0x0010000000004001 */ struct FFilePath SkeletalMeshAsset;
  /* offset=0x0030 flags=0x0010000000004001 */ struct FFilePath StaticMeshAsset;
  /* offset=0x003c flags=0x0010000000004001 */ struct FFilePath TextureAsset;
};

struct FBuildPromotionTestSettings {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FFilePath DefaultStaticMeshAsset;
  /* offset=0x000c flags=0x0010000000000001 */ struct FBuildPromotionImportWorkflowSettings ImportWorkflow;
  /* offset=0x0108 flags=0x0010000000000001 */ struct FBuildPromotionOpenAssetSettings OpenAssets;
  /* offset=0x0150 flags=0x0010000000000001 */ struct FBuildPromotionNewProjectSettings NewProjectSettings;
  /* offset=0x0168 flags=0x0010000000000001 */ struct FFilePath SourceControlMaterial;
};

struct FBuilderPoly {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<int32> VertexIndices;
  /* offset=0x000c flags=0x0018001040000200 */ int32 Direction;
  /* offset=0x0010 flags=0x0018001040000200 */ FName ItemName;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 PolyFlags;
};

struct FBuildingStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018000000000200 */ FString BuildingName;
  /* offset=0x0010 flags=0x0018001040000200 */ float BuildingLocationX;
  /* offset=0x0014 flags=0x0018001040000200 */ float BuildingLocationY;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 AllGroupSpotCount;
  /* offset=0x001c flags=0x0018001040000200 */ int32 AllValidGroupSpotCount;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 AllSpotCount;
  /* offset=0x0024 flags=0x0018001040000200 */ int32 AllValidSpotCount;
  /* offset=0x0028 flags=0x0010000000000200 */ TMap<uint8, struct FItemSpotStatisticsData> SpotStatisticsData;
};

struct FBulletFlySoundReplicatedData {
  /* offset=0x0000 flags=0x0018001040000200 */ ASTExtraShootWeapon* InstigateWeapon;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FVector FlySoundPos;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 TriggerEarSoundIndex;
};

struct FBulletHitInfoUploadData {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector ImpactPoint;
  /* offset=0x000c flags=0x0010001000000000 */ struct FVector_NetQuantizeNormal ImpactNormal;
  /* offset=0x0018 flags=0x0018001040000000 */ struct FVector MuzzlePos;
  /* offset=0x0024 flags=0x0018001040000000 */ struct FVector ShootDir;
  /* offset=0x0030 flags=0x0018001040000200 */ uint8 SurfaceType;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 ShootID;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 PelletID;
  /* offset=0x003c flags=0x001c001040000200 */ AActor* Actor;
  /* offset=0x0044 flags=0x001c001040080208 */ UPrimitiveComponent* Component;
  /* offset=0x004c flags=0x0018001040000200 */ int32 TimeStamp;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 ClientTimeStamp;
  /* offset=0x0054 flags=0x0018001040000200 */ uint8 HitBodyType;
};

struct FBuoyancyVertex {
};

struct FButtonStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush Normal;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush Hovered;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush Pressed;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush Disabled;
  /* offset=0x01a8 flags=0x0010001000000005 */ struct FMargin NormalPadding;
  /* offset=0x01b8 flags=0x0010001000000005 */ struct FMargin PressedPadding;
  /* offset=0x01c8 flags=0x0010001000000005 */ struct FSlateSound PressedSlateSound;
  /* offset=0x01e0 flags=0x0010001000000005 */ struct FSlateSound HoveredSlateSound;
};

struct FCDInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ float CDTime;
  /* offset=0x0004 flags=0x0018001040000200 */ float FireTime;
  /* offset=0x0008 flags=0x0018001040000200 */ float followTime;
};

struct FCacheAffactTargetInfo {
  /* offset=0x0000 flags=0x001c001040000200 */ AActor* AffectTarget;
  /* offset=0x0008 flags=0x0018001040000200 */ float FinalAddValue;
};

struct FCachedMovieSceneEvaluationTemplate: FMovieSceneEvaluationTemplate {
};

struct FCameraCacheEntry {
  /* offset=0x0000 flags=0x0018001040000200 */ float TimeStamp;
  /* offset=0x0010 flags=0x0010000000000000 */ struct FMinimalViewInfo POV;
};

struct FCameraCutInfo {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector Location;
  /* offset=0x000c flags=0x0018001040000200 */ float TimeStamp;
};

struct FCameraData {
  /* offset=0x0000 flags=0x0018001040000201 */ float CameraFOV;
  /* offset=0x0004 flags=0x0018001040000001 */ struct FVector SpringArmSocketOffset;
  /* offset=0x0010 flags=0x0018001040000201 */ float SpringArmLength;
};

struct FCameraFilmbackSettings {
  /* offset=0x0000 flags=0x0018001240000205 */ float SensorWidth;
  /* offset=0x0004 flags=0x0018001240000205 */ float SensorHeight;
  /* offset=0x0008 flags=0x0018001240020215 */ float SensorAspectRatio;
};

struct FCameraFocusSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ enum ECameraFocusMethod FocusMethod;
  /* offset=0x0004 flags=0x0018001240000205 */ float ManualFocusDistance;
  /* offset=0x0008 flags=0x0010001000000005 */ struct FCameraTrackingFocusSettings TrackingFocusSettings;
  /* offset=0x001c flags=0x0018001000002001 */ uint8 bDrawDebugFocusPlane:1;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FColor DebugFocusPlaneColor;
  /* offset=0x0024 flags=0x0018001000000005 */ uint8 bSmoothFocusChanges:1;
  /* offset=0x0028 flags=0x0018001040000205 */ float FocusSmoothingInterpSpeed;
  /* offset=0x002c flags=0x0018001240000205 */ float FocusOffset;
};

struct FCameraLensSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ float MinFocalLength;
  /* offset=0x0004 flags=0x0018001040000205 */ float MaxFocalLength;
  /* offset=0x0008 flags=0x0018001040000205 */ float MinFStop;
  /* offset=0x000c flags=0x0018001040000205 */ float MaxFStop;
  /* offset=0x0010 flags=0x0018001040000205 */ float MinimumFocusDistance;
};

struct FCameraLookatTrackingSettings {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bEnableLookAtTracking:1;
  /* offset=0x0000 flags=0x0018001000002005 */ uint8 bDrawDebugLookAtTrackingPosition:1;
  /* offset=0x0004 flags=0x0018001040000205 */ float LookAtTrackingInterpSpeed;
  /* offset=0x0014 flags=0x0018001240000205 */ AActor* ActorToTrack;
  /* offset=0x0018 flags=0x0018001240000005 */ struct FVector RelativeOffset;
  /* offset=0x0024 flags=0x0018001200000005 */ uint8 bAllowRoll:1;
};

struct FCameraOffsetData {
  /* offset=0x0000 flags=0x0018001040010005 */ struct FVector SocketOffset;
  /* offset=0x000c flags=0x0018001040010005 */ struct FVector TargetOffset;
  /* offset=0x0018 flags=0x0018001040010205 */ float SpringArmLength;
};

struct FCameraSettings {
  /* offset=0x0000 flags=0x0018001040000200 */ float TargetArmLength;
  /* offset=0x0004 flags=0x0018001040000200 */ float LagSpeed;
  /* offset=0x0008 flags=0x0018001040000000 */ struct FVector SocketOffset;
};

struct FCameraTrackingFocusSettings {
  /* offset=0x0000 flags=0x0018001240000205 */ AActor* ActorToTrack;
  /* offset=0x0004 flags=0x0018001240000005 */ struct FVector RelativeOffset;
  /* offset=0x0010 flags=0x0018001000002005 */ uint8 bDrawDebugTrackingFocusPoint:1;
};

struct FCameraViewPitchLimitData {
  /* offset=0x0000 flags=0x0018001040000215 */ float ViewPitchMin;
  /* offset=0x0004 flags=0x0018001040000215 */ float ViewPitchMax;
};

struct FCanvasIcon {
  /* offset=0x0000 flags=0x0018001040000205 */ UTexture* Texture;
  /* offset=0x0004 flags=0x0018001040000205 */ float U;
  /* offset=0x0008 flags=0x0018001040000205 */ float V;
  /* offset=0x000c flags=0x0018001040000205 */ float UL;
  /* offset=0x0010 flags=0x0018001040000205 */ float VL;
};

struct FCanvasUVTri {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector2D V0_Pos;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FVector2D V0_UV;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FLinearColor V0_Color;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FVector2D V1_Pos;
  /* offset=0x0028 flags=0x0018001040000005 */ struct FVector2D V1_UV;
  /* offset=0x0030 flags=0x0018001040000005 */ struct FLinearColor V1_Color;
  /* offset=0x0040 flags=0x0018001040000005 */ struct FVector2D V2_Pos;
  /* offset=0x0048 flags=0x0018001040000005 */ struct FVector2D V2_UV;
  /* offset=0x0050 flags=0x0018001040000005 */ struct FLinearColor V2_Color;
};

struct FCaptureProtocolID {
  /* offset=0x0000 flags=0x0018001040020201 */ FName Identifier;
};

struct FCaptureResolution {
  /* offset=0x0000 flags=0x0018001040004201 */ uint32 ResX;
  /* offset=0x0004 flags=0x0018001040004201 */ uint32 ResY;
};

struct FCharacterEnergyData {
  /* offset=0x0000 flags=0x0010000080010201 */ TArray<struct FCharacterEnergyPhase> EnergyEffactPhase;
  /* offset=0x000c flags=0x0018001040010201 */ float EnergyMax;
  /* offset=0x0010 flags=0x0018001040010201 */ float EnergyCurrent;
  /* offset=0x0014 flags=0x00180010c0010201 */ float AttenuationPeriod;
  /* offset=0x0018 flags=0x00180010c0010201 */ float AttenuationAmount;
};

struct FCharacterEnergyPhase {
  /* offset=0x0000 flags=0x0018001040010201 */ float MakeEffectSection;
  /* offset=0x0004 flags=0x0018000000010201 */ FString BuffName;
};

struct FCharacterEvent: FInputEvent {
};

struct FCharacterHistoryData {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector Location;
  /* offset=0x000c flags=0x0010001040000000 */ struct FRotator Rotation;
  /* offset=0x0018 flags=0x0010001040000000 */ struct FBox BoundBox;
  /* offset=0x0034 flags=0x0010001040000000 */ struct FBox HeadBoundBox;
};

struct FCharacterJumpAnimData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 JumpType;
  /* offset=0x0004 flags=0x0018000000020215 */ FString JumpTypeName;
  /* offset=0x0010 flags=0x0010000000010205 */ TArray<struct FChararacterJumpPhaseData> JumpPhaseList;
};

struct FCharacterLocAndRot {
  /* offset=0x0000 flags=0x0018001040000014 */ struct FVector Loc;
  /* offset=0x000c flags=0x0010001040000014 */ struct FRotator Rot;
};

struct FCharacterMovementAnimData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 AnimType;
  /* offset=0x0004 flags=0x0018000000020215 */ FString AnimTypeName;
  /* offset=0x0010 flags=0x0010000000010205 */ TArray<struct FChararacterPoseAnimData> PoseAnimList;
};

struct FCharacterMovementComponentPostPhysicsTickFunction: FTickFunction {
};

struct FChararacterJumpPhaseData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 JumpPhase;
  /* offset=0x0004 flags=0x0018000000020215 */ FString JumpPhaseName;
  /* offset=0x0010 flags=0x0018001040010205 */ UAnimationAsset* PhaseAnim;
};

struct FChararacterPoseAnimData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 PoseType;
  /* offset=0x0004 flags=0x0018000000020215 */ FString PoseName;
  /* offset=0x0010 flags=0x0018001040010205 */ UAnimationAsset* PoseAnim;
};

struct FCheckBoxStyle: FSlateWidgetStyle {
  /* offset=0x0004 flags=0x0018001040000205 */ uint8 CheckBoxType;
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush UncheckedImage;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush UncheckedHoveredImage;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush UncheckedPressedImage;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush CheckedImage;
  /* offset=0x01a8 flags=0x0010000000000005 */ struct FSlateBrush CheckedHoveredImage;
  /* offset=0x0210 flags=0x0010000000000005 */ struct FSlateBrush CheckedPressedImage;
  /* offset=0x0278 flags=0x0010000000000005 */ struct FSlateBrush UndeterminedImage;
  /* offset=0x02e0 flags=0x0010000000000005 */ struct FSlateBrush UndeterminedHoveredImage;
  /* offset=0x0348 flags=0x0010000000000005 */ struct FSlateBrush UndeterminedPressedImage;
  /* offset=0x03b0 flags=0x0010001000000005 */ struct FMargin Padding;
  /* offset=0x03c0 flags=0x0010000000000005 */ struct FSlateColor ForegroundColor;
  /* offset=0x03dc flags=0x0010000000000005 */ struct FSlateColor BorderBackgroundColor;
  /* offset=0x03f8 flags=0x0010001000000005 */ struct FSlateSound CheckedSlateSound;
  /* offset=0x0410 flags=0x0010001000000005 */ struct FSlateSound UncheckedSlateSound;
  /* offset=0x0428 flags=0x0010001000000005 */ struct FSlateSound HoveredSlateSound;
};

struct FChunkInfoData {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FGuid Guid;
  /* offset=0x0010 flags=0x0018001040000200 */ uint64 Hash;
  /* offset=0x0018 flags=0x0010001000000000 */ struct FSHAHashData ShaHash;
  /* offset=0x0030 flags=0x0018001040000200 */ int64 FileSize;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 GroupNumber;
};

struct FChunkPartData {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FGuid Guid;
  /* offset=0x0010 flags=0x0018001040000200 */ uint32 Offset;
  /* offset=0x0014 flags=0x0018001040000200 */ uint32 Size;
};

struct FCirCleCfg {
  /* offset=0x0000 flags=0x0018001040000201 */ float DelayTime;
  /* offset=0x0004 flags=0x0018001040000201 */ float SafeZoneAppeartime;
  /* offset=0x0008 flags=0x0010000000000201 */ TArray<float> BlueCirclePreWarning;
  /* offset=0x0014 flags=0x0018001040000201 */ float LastTime;
  /* offset=0x0018 flags=0x0018001040000201 */ float pain;
  /* offset=0x001c flags=0x0018001040000201 */ bool bUseCustomBluePoint;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector2D bluepoint;
  /* offset=0x0028 flags=0x0018001040000201 */ float blueradius;
  /* offset=0x002c flags=0x0018001040000201 */ bool bUseCustomWhitePoint;
  /* offset=0x0030 flags=0x0018001040000001 */ struct FVector2D whitepoint;
  /* offset=0x0038 flags=0x0018001040000201 */ float whiteradius;
  /* offset=0x003c flags=0x0018001040000201 */ float Alpha;
  /* offset=0x0040 flags=0x0018001040000201 */ float DestinyChance;
};

struct FClassRedirect {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ObjectName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName OldClassName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName NewClassName;
  /* offset=0x0018 flags=0x0018001040000200 */ FName OldSubobjName;
  /* offset=0x0020 flags=0x0018001040000200 */ FName NewSubobjName;
  /* offset=0x0028 flags=0x0018001040000200 */ FName NewClassClass;
  /* offset=0x0030 flags=0x0018001040000200 */ FName NewClassPackage;
  /* offset=0x0038 flags=0x0018001040000200 */ bool InstanceOnly;
};

struct FClientBaseInfo {
  /* offset=0x0000 flags=0x0018000000000200 */ FString OpenID;
  /* offset=0x0010 flags=0x0018001040000200 */ uint64 RoleID;
  /* offset=0x0018 flags=0x0018000000000200 */ FString GameSvrId;
  /* offset=0x0024 flags=0x0018000000000200 */ FString GameAppID;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 AreaID;
  /* offset=0x0031 flags=0x0018001040000200 */ int8 PlatID;
  /* offset=0x0034 flags=0x0018000000000200 */ FString ZoneID;
  /* offset=0x0040 flags=0x0018001040000200 */ uint64 BattleID;
  /* offset=0x0048 flags=0x0018000000000200 */ FString BattleServerIP;
  /* offset=0x0054 flags=0x0018001040000200 */ uint32 BattleServerPort;
  /* offset=0x0058 flags=0x0018000000000200 */ FString UserName;
  /* offset=0x0064 flags=0x0018000000000200 */ FString PicUrl;
  /* offset=0x0070 flags=0x0018001040000200 */ uint32 PlayerKey;
  /* offset=0x0074 flags=0x0018001040000200 */ int8 WeatherID;
  /* offset=0x0078 flags=0x0010000000000200 */ TArray<int32> MrpcsData;
};

struct FClientCircleFlow {
  /* offset=0x0000 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0014 flags=0x0018000000000200 */ FString PicUrl;
  /* offset=0x0020 flags=0x0018001040000200 */ uint32 GameStartTime;
  /* offset=0x0024 flags=0x0018001040000200 */ uint32 NewCircleBornTime;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 NewCirclePositionX;
  /* offset=0x002c flags=0x0018001040000200 */ int32 NewCirclePositionY;
  /* offset=0x0030 flags=0x0018001040000200 */ int32 NewCirclePositionRadius;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 NewCircleCount;
  /* offset=0x0038 flags=0x0018001040000200 */ int32 PlayerPositionX;
  /* offset=0x003c flags=0x0018001040000200 */ int32 PlayerPositionY;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 PlayerPositionZ;
  /* offset=0x0044 flags=0x0018001040000200 */ int32 PlayerHP;
  /* offset=0x0048 flags=0x0018001040000200 */ uint32 OldCircleMoveTime;
  /* offset=0x004c flags=0x0018001040000200 */ uint32 OldCircleMoveEndTime;
  /* offset=0x0050 flags=0x0018001040000200 */ uint32 PlayerOutTime;
  /* offset=0x0054 flags=0x0018001040000200 */ int32 CirclePoisonCount;
  /* offset=0x0058 flags=0x0018001040000200 */ int32 CirclePoisonMin;
  /* offset=0x005c flags=0x0018001040000200 */ int32 CirclePoisonMax;
  /* offset=0x0060 flags=0x0018001040000200 */ int32 CirclePoisonAvg;
  /* offset=0x0064 flags=0x0018001040000200 */ int32 CirclePoisonTotal;
  /* offset=0x0068 flags=0x0018001040000200 */ int32 CirclePoisonDrop;
  /* offset=0x006c flags=0x0018001040000200 */ int32 CirclePoisonDead;
  /* offset=0x0070 flags=0x0018001040000200 */ int32 RecoveryCount;
  /* offset=0x0074 flags=0x0018001040000200 */ int32 RecoveryMin;
  /* offset=0x0078 flags=0x0018001040000200 */ int32 RecoveryMax;
  /* offset=0x007c flags=0x0018001040000200 */ int32 RecoveryTotal;
  /* offset=0x0080 flags=0x0018001040000200 */ int32 EnergyRecoveryCount;
  /* offset=0x0084 flags=0x0018001040000200 */ int32 EnergyRecoveryMin;
  /* offset=0x0088 flags=0x0018001040000200 */ int32 EnergyRecoveryMax;
  /* offset=0x008c flags=0x0018001040000200 */ int32 EnergyRecoveryTotal;
  /* offset=0x0090 flags=0x0018001040000200 */ int32 EnergyStartLv;
  /* offset=0x0094 flags=0x0018001040000200 */ int32 EnergyStartTime;
  /* offset=0x0098 flags=0x0018000000000200 */ FString EnergyItemUse;
  /* offset=0x00a4 flags=0x0018001040000200 */ int32 EnergyLvTimeInfo;
  /* offset=0x00a8 flags=0x0018000000000200 */ FString EnergyRunFastTime;
  /* offset=0x00b4 flags=0x0018000000000200 */ FString EnergyRecoveryLvTimeInfo;
  /* offset=0x00c0 flags=0x0018001040000200 */ int32 EnergyEndLv;
  /* offset=0x00c4 flags=0x0018001040000200 */ int32 EnergyEndTime;
  /* offset=0x00c8 flags=0x0018001040000200 */ int32 PlayerMoveDis;
  /* offset=0x00cc flags=0x0018001040000200 */ int32 PlayerSpeedMax;
  /* offset=0x00d0 flags=0x0018001040000200 */ int32 PlayerSpeedAvg;
  /* offset=0x00d4 flags=0x0018001040000200 */ int32 PlayerCarSpeedMax;
  /* offset=0x00d8 flags=0x0018001040000200 */ int32 PlayerCarSpeedAvg;
  /* offset=0x00dc flags=0x0018001040000200 */ int32 PlayerSquatMoveDis;
  /* offset=0x00e0 flags=0x0018001040000200 */ int32 PlayerSquatMoveTime;
  /* offset=0x00e4 flags=0x0018001040000200 */ int32 PlayerCreepMoveDis;
  /* offset=0x00e8 flags=0x0018001040000200 */ int32 PlayerCreepMoveTime;
  /* offset=0x00ec flags=0x0018001040000200 */ int32 PlayerRunMoveDis;
  /* offset=0x00f0 flags=0x0018001040000200 */ int32 PlayerRunMoveTime;
  /* offset=0x00f4 flags=0x0018001040000200 */ int32 PlayerDriveMoveDis;
  /* offset=0x00f8 flags=0x0018001040000200 */ int32 PlayerDriveMoveTime;
  /* offset=0x00fc flags=0x0018001040000200 */ int32 PlayerCar;
  /* offset=0x0100 flags=0x0018001040000200 */ int32 PlayerCameraDistanceMax;
  /* offset=0x0104 flags=0x0018001040000200 */ uint32 SecCircleFlowID;
};

struct FClientFatalDamageRecordData {
  /* offset=0x0000 flags=0x0018000000000214 */ FString causer;
  /* offset=0x000c flags=0x0018000000000214 */ FString VictimName;
  /* offset=0x0018 flags=0x0018001040000214 */ int32 DamageType;
  /* offset=0x001c flags=0x0018001040000214 */ int32 AdditionalParam;
  /* offset=0x0020 flags=0x0018001040000214 */ bool IsHeadshot;
  /* offset=0x0024 flags=0x0018001040000214 */ int32 ResultHealthStatus;
  /* offset=0x0028 flags=0x0018001040000214 */ uint8 RecordRelationShip;
  /* offset=0x002c flags=0x0018001040000214 */ int32 PreviousHealthStatus;
};

struct FClientGameEndFlow {
  /* offset=0x0000 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0014 flags=0x0018000000000200 */ FString ClientVersion;
  /* offset=0x0020 flags=0x0018001040000200 */ uint32 OverTime;
  /* offset=0x0024 flags=0x0018001040000200 */ int8 EndType;
  /* offset=0x0025 flags=0x0018001040000200 */ uint8 KillCount;
  /* offset=0x0026 flags=0x0018001040000200 */ uint8 AssistsCount;
  /* offset=0x0027 flags=0x0018001040000200 */ uint8 DropCount;
  /* offset=0x0028 flags=0x0018001040000200 */ uint8 SaveCount;
  /* offset=0x0029 flags=0x0018001040000200 */ uint8 RebornCount;
  /* offset=0x002a flags=0x0018001000000000 */ uint8 AliveType:1;
  /* offset=0x002c flags=0x0018001040000200 */ int32 GoldGet;
  /* offset=0x0030 flags=0x0018001040000200 */ int32 DiamondGet;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 ExpGet;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 WinRank;
  /* offset=0x0039 flags=0x0018001040000200 */ uint8 TotalPlayers;
  /* offset=0x003c flags=0x0018001040000200 */ int32 PlayerRank;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 RankEnd;
  /* offset=0x0044 flags=0x0018001040000200 */ int32 TeamID;
  /* offset=0x0048 flags=0x0018000000000200 */ FString TeamPlayer1;
  /* offset=0x0054 flags=0x0018000000000200 */ FString TeamPlayer2;
  /* offset=0x0060 flags=0x0018000000000200 */ FString TeamPlayer3;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 TeamPlayer1AliveType:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 TeamPlayer2AliveType:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 TeamPlayer3AliveType:1;
  /* offset=0x006d flags=0x0018001040000200 */ uint8 TeamPlayer1Kill;
  /* offset=0x006e flags=0x0018001040000200 */ uint8 TeamPlayer2Kill;
  /* offset=0x006f flags=0x0018001040000200 */ uint8 TeamPlayer3Kill;
  /* offset=0x0070 flags=0x0018001040000200 */ uint32 GameEndFlowID;
};

struct FClientGameStartFlow {
  /* offset=0x0000 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0014 flags=0x0018000000000200 */ FString MapName;
  /* offset=0x0020 flags=0x0018001040000200 */ int8 WeatherID;
  /* offset=0x0024 flags=0x0018000000000200 */ FString ItemList;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 TeamType;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 TeamID;
  /* offset=0x0038 flags=0x0018000000000200 */ FString TeamPlayer1;
  /* offset=0x0044 flags=0x0018000000000200 */ FString TeamPlayer2;
  /* offset=0x0050 flags=0x0018000000000200 */ FString TeamPlayer3;
  /* offset=0x005c flags=0x0018001040000200 */ uint32 SecGameStartFlowFlowID;
};

struct FClothCollisionData {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<struct FClothCollisionPrim_Sphere> Spheres;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<struct FClothCollisionPrim_SphereConnection> SphereConnections;
  /* offset=0x0018 flags=0x0010000000000201 */ TArray<struct FClothCollisionPrim_Convex> Convexes;
};

struct FClothCollisionPrim_Convex {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FPlane> Planes;
  /* offset=0x000c flags=0x0018001040000200 */ int32 BoneIndex;
};

struct FClothCollisionPrim_Sphere {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 BoneIndex;
  /* offset=0x0004 flags=0x0018001040000200 */ float Radius;
  /* offset=0x0008 flags=0x0018001040000000 */ struct FVector LocalPosition;
};

struct FClothCollisionPrim_SphereConnection {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 SphereIndices;
};

struct FClothConfig {
  /* offset=0x0000 flags=0x0018001040000201 */ enum EClothingWindMethod WindMethod;
  /* offset=0x0004 flags=0x0010001000000001 */ struct FClothConstraintSetup VerticalConstraintConfig;
  /* offset=0x0014 flags=0x0010001000000001 */ struct FClothConstraintSetup HorizontalConstraintConfig;
  /* offset=0x0024 flags=0x0010001000000001 */ struct FClothConstraintSetup BendConstraintConfig;
  /* offset=0x0034 flags=0x0010001000000001 */ struct FClothConstraintSetup ShearConstraintConfig;
  /* offset=0x0044 flags=0x0018001040000201 */ float SelfCollisionRadius;
  /* offset=0x0048 flags=0x0018001040000201 */ float SelfCollisionStiffness;
  /* offset=0x004c flags=0x0018001040000201 */ float SelfCollisionCullScale;
  /* offset=0x0050 flags=0x0018001040000001 */ struct FVector Damping;
  /* offset=0x005c flags=0x0018001040000201 */ float Friction;
  /* offset=0x0060 flags=0x0018001040000201 */ float WindDragCoefficient;
  /* offset=0x0064 flags=0x0018001040000201 */ float WindLiftCoefficient;
  /* offset=0x0068 flags=0x0018001040000001 */ struct FVector LinearDrag;
  /* offset=0x0074 flags=0x0018001040000001 */ struct FVector AngularDrag;
  /* offset=0x0080 flags=0x0018001040000001 */ struct FVector LinearInertiaScale;
  /* offset=0x008c flags=0x0018001040000001 */ struct FVector AngularInertiaScale;
  /* offset=0x0098 flags=0x0018001040000001 */ struct FVector CentrifugalInertiaScale;
  /* offset=0x00a4 flags=0x0018001040000201 */ float SolverFrequency;
  /* offset=0x00a8 flags=0x0018001040000201 */ float StiffnessFrequency;
  /* offset=0x00ac flags=0x0018001040000201 */ float GravityScale;
  /* offset=0x00b0 flags=0x0018001040000201 */ float TetherStiffness;
  /* offset=0x00b4 flags=0x0018001040000201 */ float TetherLimit;
  /* offset=0x00b8 flags=0x0018001040000201 */ float CollisionThickness;
};

struct FClothConstraintSetup {
  /* offset=0x0000 flags=0x0018001040000201 */ float Stiffness;
  /* offset=0x0004 flags=0x0018001040000201 */ float StiffnessMultiplier;
  /* offset=0x0008 flags=0x0018001040000201 */ float StretchLimit;
  /* offset=0x000c flags=0x0018001040000201 */ float CompressionLimit;
};

struct FClothLODData {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FClothPhysicalMeshData PhysicalMeshData;
  /* offset=0x0074 flags=0x0010000000000001 */ struct FClothCollisionData CollisionData;
};

struct FClothPhysicalMeshData {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<struct FVector> Vertices;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<struct FVector> Normals;
  /* offset=0x0018 flags=0x0010000000000201 */ TArray<uint32> Indices;
  /* offset=0x0024 flags=0x0010000000000201 */ TArray<float> MaxDistances;
  /* offset=0x0030 flags=0x0010000000000201 */ TArray<float> BackstopDistances;
  /* offset=0x003c flags=0x0010000000000201 */ TArray<float> BackstopRadiuses;
  /* offset=0x0048 flags=0x0010000000000201 */ TArray<float> InverseMasses;
  /* offset=0x0054 flags=0x0010000000000201 */ TArray<struct FClothVertBoneData> BoneData;
  /* offset=0x0060 flags=0x0018001040000201 */ int32 MaxBoneWeights;
  /* offset=0x0064 flags=0x0018001040000201 */ int32 NumFixedVerts;
  /* offset=0x0068 flags=0x0010000000000201 */ TArray<uint32> SelfCollisionIndices;
};

struct FClothPhysicsProperties_Legacy {
  /* offset=0x0000 flags=0x0018001040000200 */ float VerticalResistance;
  /* offset=0x0004 flags=0x0018001040000200 */ float HorizontalResistance;
  /* offset=0x0008 flags=0x0018001040000200 */ float BendResistance;
  /* offset=0x000c flags=0x0018001040000200 */ float ShearResistance;
  /* offset=0x0010 flags=0x0018001040000200 */ float Friction;
  /* offset=0x0014 flags=0x0018001040000200 */ float Damping;
  /* offset=0x0018 flags=0x0018001040000200 */ float TetherStiffness;
  /* offset=0x001c flags=0x0018001040000200 */ float TetherLimit;
  /* offset=0x0020 flags=0x0018001040000200 */ float Drag;
  /* offset=0x0024 flags=0x0018001040000200 */ float StiffnessFrequency;
  /* offset=0x0028 flags=0x0018001040000200 */ float GravityScale;
  /* offset=0x002c flags=0x0018001040000200 */ float MassScale;
  /* offset=0x0030 flags=0x0018001040000200 */ float InertiaBlend;
  /* offset=0x0034 flags=0x0018001040000200 */ float SelfCollisionThickness;
  /* offset=0x0038 flags=0x0018001040000200 */ float SelfCollisionSquashScale;
  /* offset=0x003c flags=0x0018001040000200 */ float SelfCollisionStiffness;
  /* offset=0x0040 flags=0x0018001040000200 */ float SolverFrequency;
  /* offset=0x0044 flags=0x0018001040000200 */ float FiberCompression;
  /* offset=0x0048 flags=0x0018001040000200 */ float FiberExpansion;
  /* offset=0x004c flags=0x0018001040000200 */ float FiberResistance;
};

struct FClothVertBoneData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 NumInfluences;
  /* offset=0x0004 flags=0x0018001040000200 */ uint16 BoneIndices;
  /* offset=0x0014 flags=0x0018001040000200 */ float BoneWeights;
};

struct FClothingAssetData_Legacy {
  /* offset=0x0000 flags=0x0018001040000200 */ FName AssetName;
  /* offset=0x0008 flags=0x0018000000000200 */ FString ApexFileName;
  /* offset=0x0014 flags=0x0018001040000200 */ bool bClothPropertiesChanged;
  /* offset=0x0018 flags=0x0010001040000000 */ struct FClothPhysicsProperties_Legacy PhysicsProperties;
};

struct FCollectionParameterBase {
  /* offset=0x0000 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000000 */ struct FGuid ID;
};

struct FCollectionReference {
  /* offset=0x0000 flags=0x0018001040000205 */ FName CollectionName;
};

struct FCollectionScalarParameter: FCollectionParameterBase {
  /* offset=0x0018 flags=0x0018001040000201 */ float DefaultValue;
};

struct FCollectionVectorParameter: FCollectionParameterBase {
  /* offset=0x0018 flags=0x0018001040000001 */ struct FLinearColor DefaultValue;
};

struct FCollisionProfileName {
  /* offset=0x0000 flags=0x0018001040000201 */ FName Name;
};

struct FCollisionResponse {
  /* offset=0x0000 flags=0x0040001000002000 */ struct FCollisionResponseContainer ResponseToChannels;
  /* offset=0x0020 flags=0x0040000000000201 */ TArray<struct FResponseChannel> ResponseArray;
};

struct FCollisionResponseContainer {
  /* offset=0x0000 flags=0x0018001040000215 */ uint8 WorldStatic;
  /* offset=0x0001 flags=0x0018001040000215 */ uint8 WorldDynamic;
  /* offset=0x0002 flags=0x0018001040000215 */ uint8 Pawn;
  /* offset=0x0003 flags=0x0018001040000215 */ uint8 Visibility;
  /* offset=0x0004 flags=0x0018001040000215 */ uint8 Camera;
  /* offset=0x0005 flags=0x0018001040000215 */ uint8 PhysicsBody;
  /* offset=0x0006 flags=0x0018001040000215 */ uint8 Vehicle;
  /* offset=0x0007 flags=0x0018001040000215 */ uint8 Destructible;
  /* offset=0x0008 flags=0x0018001040000215 */ uint8 EngineTraceChannel1;
  /* offset=0x0009 flags=0x0018001040000215 */ uint8 EngineTraceChannel2;
  /* offset=0x000a flags=0x0018001040000215 */ uint8 EngineTraceChannel3;
  /* offset=0x000b flags=0x0018001040000215 */ uint8 EngineTraceChannel4;
  /* offset=0x000c flags=0x0018001040000215 */ uint8 EngineTraceChannel5;
  /* offset=0x000d flags=0x0018001040000215 */ uint8 EngineTraceChannel6;
  /* offset=0x000e flags=0x0018001040000215 */ uint8 GameTraceChannel1;
  /* offset=0x000f flags=0x0018001040000215 */ uint8 GameTraceChannel2;
  /* offset=0x0010 flags=0x0018001040000215 */ uint8 GameTraceChannel3;
  /* offset=0x0011 flags=0x0018001040000215 */ uint8 GameTraceChannel4;
  /* offset=0x0012 flags=0x0018001040000215 */ uint8 GameTraceChannel5;
  /* offset=0x0013 flags=0x0018001040000215 */ uint8 GameTraceChannel6;
  /* offset=0x0014 flags=0x0018001040000215 */ uint8 GameTraceChannel7;
  /* offset=0x0015 flags=0x0018001040000215 */ uint8 GameTraceChannel8;
  /* offset=0x0016 flags=0x0018001040000215 */ uint8 GameTraceChannel9;
  /* offset=0x0017 flags=0x0018001040000215 */ uint8 GameTraceChannel10;
  /* offset=0x0018 flags=0x0018001040000215 */ uint8 GameTraceChannel11;
  /* offset=0x0019 flags=0x0018001040000215 */ uint8 GameTraceChannel12;
  /* offset=0x001a flags=0x0018001040000215 */ uint8 GameTraceChannel13;
  /* offset=0x001b flags=0x0018001040000215 */ uint8 GameTraceChannel14;
  /* offset=0x001c flags=0x0018001040000215 */ uint8 GameTraceChannel15;
  /* offset=0x001d flags=0x0018001040000215 */ uint8 GameTraceChannel16;
  /* offset=0x001e flags=0x0018001040000215 */ uint8 GameTraceChannel17;
  /* offset=0x001f flags=0x0018001040000215 */ uint8 GameTraceChannel18;
};

struct FCollisionResponseTemplate {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000200 */ uint8 CollisionEnabled;
  /* offset=0x0010 flags=0x0018001040000200 */ FName ObjectTypeName;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FResponseChannel> CustomResponses;
  /* offset=0x0024 flags=0x0018000000000200 */ FString HelpMessage;
  /* offset=0x0030 flags=0x0018001040000200 */ bool bCanModify;
};

struct FColor {
  /* offset=0x0000 flags=0x0018001041000205 */ uint8 B;
  /* offset=0x0001 flags=0x0018001041000205 */ uint8 G;
  /* offset=0x0002 flags=0x0018001041000205 */ uint8 R;
  /* offset=0x0003 flags=0x0018001041000205 */ uint8 A;
};

struct FColorMaterialInput: FMaterialInput {
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 UseConstant:1;
  /* offset=0x0034 flags=0x0018001040000000 */ struct FColor Constant;
};

struct FColorParameterNameAndCurves {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 Index;
  /* offset=0x000c flags=0x0010000000000000 */ struct FRichCurve RedCurve;
  /* offset=0x0060 flags=0x0010000000000000 */ struct FRichCurve GreenCurve;
  /* offset=0x00b4 flags=0x0010000000000000 */ struct FRichCurve BlueCurve;
  /* offset=0x0108 flags=0x0010000000000000 */ struct FRichCurve AlphaCurve;
};

struct FComboBoxStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FComboButtonStyle ComboButtonStyle;
  /* offset=0x02e8 flags=0x0010001000000005 */ struct FSlateSound PressedSlateSound;
  /* offset=0x0300 flags=0x0010001000000005 */ struct FSlateSound SelectionChangeSlateSound;
};

struct FComboButtonStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FButtonStyle ButtonStyle;
  /* offset=0x0200 flags=0x0010000000000005 */ struct FSlateBrush DownArrowImage;
  /* offset=0x0268 flags=0x0010000000000005 */ struct FSlateBrush MenuBorderBrush;
  /* offset=0x02d0 flags=0x0010001000000005 */ struct FMargin MenuBorderPadding;
};

struct FCommonCameraModeData {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FSwitchCameraData SwitchCameraData;
};

struct FComparableGrenadeItemType {
  /* offset=0x0000 flags=0x0010000000000005 */ struct FBattleItemData BattleItemData;
  /* offset=0x0080 flags=0x0018001040000205 */ uint8 GrenadeItemType;
  /* offset=0x0084 flags=0x0018001040000205 */ int32 ItemPriority;
};

struct FCompatableComsumableItemType {
  /* offset=0x0000 flags=0x0010000000000005 */ struct FBattleItemData BattleItemData;
  /* offset=0x0080 flags=0x0018001040000205 */ uint8 ConsumableItemType;
  /* offset=0x0084 flags=0x0018001040000205 */ int32 ItemPriority;
};

struct FComponentKey {
  /* offset=0x0000 flags=0x0048001040000200 */ UClass<UObject>* OwnerClass;
  /* offset=0x0008 flags=0x0048001040000200 */ FName SCSVariableName;
  /* offset=0x0010 flags=0x0048001040000000 */ struct FGuid AssociatedGuid;
};

struct FComponentOverrideRecord {
  /* offset=0x0000 flags=0x0018001040000200 */ UClass<UObject>* ComponentClass;
  /* offset=0x0004 flags=0x0018001040080208 */ UActorComponent* ComponentTemplate;
  /* offset=0x0008 flags=0x0010001000000000 */ struct FComponentKey ComponentKey;
  /* offset=0x0028 flags=0x0010000000000000 */ struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;
};

struct FComponentReference {
  /* offset=0x0000 flags=0x0018001040000a01 */ AActor* OtherActor;
  /* offset=0x0008 flags=0x0018001040000201 */ FName ComponentProperty;
};

struct FComponentSpacePoseLink: FPoseLinkBase {
};

struct FCompositeFont {
  /* offset=0x0000 flags=0x0010000000000000 */ struct FTypeface DefaultTypeface;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FCompositeSubFont> SubTypefaces;
};

struct FCompositeSection: FAnimLinkableElement {
  /* offset=0x0028 flags=0x0018001040000201 */ FName SectionName;
  /* offset=0x0030 flags=0x0018001060000200 */ float StartTime;
  /* offset=0x0038 flags=0x0018001040000200 */ FName NextSectionName;
  /* offset=0x0040 flags=0x0010008000000209 */ TArray<UAnimMetaData*> MetaData;
};

struct FCompositeSubFont {
  /* offset=0x0000 flags=0x0010000000000000 */ struct FTypeface Typeface;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FInt32Range> CharacterRanges;
  /* offset=0x0018 flags=0x0018001040000200 */ float ScalingFactor;
};

struct FCompositionGraphCapturePasses {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<FString> Value;
};

struct FConeConstraint: FConstraintBaseParams {
  /* offset=0x0014 flags=0x0018001040000201 */ float Swing1LimitDegrees;
  /* offset=0x0018 flags=0x0018001040000201 */ float Swing2LimitDegrees;
  /* offset=0x001c flags=0x0018001040000201 */ uint8 Swing1Motion;
  /* offset=0x001d flags=0x0018001040000201 */ uint8 Swing2Motion;
};

struct FConstrainComponentPropName {
  /* offset=0x0000 flags=0x0018001040000201 */ FName ComponentName;
};

struct FConstraintBaseParams {
  /* offset=0x0000 flags=0x0018041040000201 */ float Stiffness;
  /* offset=0x0004 flags=0x0018041040000201 */ float Damping;
  /* offset=0x0008 flags=0x0018041040000201 */ float Restitution;
  /* offset=0x000c flags=0x0018041040000201 */ float ContactDistance;
  /* offset=0x0010 flags=0x0018041000000001 */ uint8 bSoftConstraint:1;
};

struct FConstraintDrive {
  /* offset=0x0000 flags=0x0018041040000201 */ float Stiffness;
  /* offset=0x0004 flags=0x0018041040000201 */ float Damping;
  /* offset=0x0008 flags=0x0018041040000201 */ float MaxForce;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bEnablePositionDrive:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bEnableVelocityDrive:1;
};

struct FConstraintInstance {
  /* offset=0x0010 flags=0x0018001040020201 */ FName JointName;
  /* offset=0x0018 flags=0x0018001040000201 */ FName ConstraintBone1;
  /* offset=0x0020 flags=0x0018001040000201 */ FName ConstraintBone2;
  /* offset=0x0028 flags=0x0018001040000000 */ struct FVector Pos1;
  /* offset=0x0034 flags=0x0018001040000000 */ struct FVector PriAxis1;
  /* offset=0x0040 flags=0x0018001040000000 */ struct FVector SecAxis1;
  /* offset=0x004c flags=0x0018001040000000 */ struct FVector Pos2;
  /* offset=0x0058 flags=0x0018001040000000 */ struct FVector PriAxis2;
  /* offset=0x0064 flags=0x0018001040000000 */ struct FVector SecAxis2;
  /* offset=0x0070 flags=0x0010001040000001 */ struct FRotator AngularRotationOffset;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bScaleLinearLimits:1;
  /* offset=0x0084 flags=0x0010001000000001 */ struct FConstraintProfileProperties ProfileInstance;
};

struct FConstraintProfileProperties {
  /* offset=0x0000 flags=0x0018001040000201 */ float ProjectionLinearTolerance;
  /* offset=0x0004 flags=0x0018001040000201 */ float ProjectionAngularTolerance;
  /* offset=0x0008 flags=0x0018041040000201 */ float LinearBreakThreshold;
  /* offset=0x000c flags=0x0018041040000201 */ float AngularBreakThreshold;
  /* offset=0x0010 flags=0x0010001000000001 */ struct FLinearConstraint LinearLimit;
  /* offset=0x002c flags=0x0010001000000001 */ struct FConeConstraint ConeLimit;
  /* offset=0x004c flags=0x0010001000000001 */ struct FTwistConstraint TwistLimit;
  /* offset=0x0068 flags=0x0010001000000001 */ struct FLinearDriveConstraint LinearDrive;
  /* offset=0x00b4 flags=0x0010001000000001 */ struct FAngularDriveConstraint AngularDrive;
  /* offset=0x0100 flags=0x0018001000000001 */ uint8 bDisableCollision:1;
  /* offset=0x0100 flags=0x0018001000000001 */ uint8 bParentDominates:1;
  /* offset=0x0100 flags=0x0018001000000001 */ uint8 bEnableProjection:1;
  /* offset=0x0100 flags=0x0018041000000001 */ uint8 bAngularBreakable:1;
  /* offset=0x0100 flags=0x0018041000000001 */ uint8 bLinearBreakable:1;
};

struct FCreateBattleItemHandleAsyncRequest {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FItemDefineID DefineID;
  /* offset=0x0018 flags=0x0018001040000200 */ UObject* Outer;
  /* offset=0x001c flags=0x0018000000000200 */ FString Path;
  /* offset=0x0028 flags=0x0010001000080200 */ FCreateBattleItemHandleAsyncDelegate Callback;
};

struct FCrowdAvoidanceConfig {
  /* offset=0x0000 flags=0x0018001040000201 */ float VelocityBias;
  /* offset=0x0004 flags=0x0018001040000201 */ float DesiredVelocityWeight;
  /* offset=0x0008 flags=0x0018001040000201 */ float CurrentVelocityWeight;
  /* offset=0x000c flags=0x0018001040000201 */ float SideBiasWeight;
  /* offset=0x0010 flags=0x0018001040000201 */ float ImpactTimeWeight;
  /* offset=0x0014 flags=0x0018001040000201 */ float ImpactTimeRange;
  /* offset=0x0018 flags=0x0018001040000201 */ uint8 CustomPatternIdx;
  /* offset=0x0019 flags=0x0018001040000201 */ uint8 AdaptiveDivisions;
  /* offset=0x001a flags=0x0018001040000201 */ uint8 AdaptiveRings;
  /* offset=0x001b flags=0x0018001040000201 */ uint8 AdaptiveDepth;
};

struct FCrowdAvoidanceSamplingPattern {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<float> Angles;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<float> Radii;
};

struct FCullDistanceSizePair {
  /* offset=0x0000 flags=0x0018001040000215 */ float Size;
  /* offset=0x0004 flags=0x0018001040000215 */ float CullDistance;
};

struct FCurveEdEntry {
  /* offset=0x0000 flags=0x0018001040000200 */ UObject* CurveObject;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FColor CurveColor;
  /* offset=0x0008 flags=0x0018000000000200 */ FString CurveName;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 bHideCurve;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 bColorCurve;
  /* offset=0x001c flags=0x0018001040000200 */ int32 bFloatingPointColorCurve;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 bClamp;
  /* offset=0x0024 flags=0x0018001040000200 */ float ClampLow;
  /* offset=0x0028 flags=0x0018001040000200 */ float ClampHigh;
};

struct FCurveEdTab {
  /* offset=0x0000 flags=0x0018000000000200 */ FString TabName;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FCurveEdEntry> Curves;
  /* offset=0x0018 flags=0x0018001040000200 */ float ViewStartInput;
  /* offset=0x001c flags=0x0018001040000200 */ float ViewEndInput;
  /* offset=0x0020 flags=0x0018001040000200 */ float ViewStartOutput;
  /* offset=0x0024 flags=0x0018001040000200 */ float ViewEndOutput;
};

struct FCustomChannelSetup {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Channel;
  /* offset=0x0008 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0010 flags=0x0018001040000200 */ uint8 DefaultResponse;
  /* offset=0x0011 flags=0x0018001040000200 */ bool bTraceType;
  /* offset=0x0012 flags=0x0018001040000200 */ bool bStaticObject;
};

struct FCustomFieldData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Key;
  /* offset=0x000c flags=0x0018000000000200 */ FString Value;
};

struct FCustomHeightFog {
  /* offset=0x0000 flags=0x0018001040000215 */ float Height;
  /* offset=0x0004 flags=0x0018001040000215 */ float DensityCoefficient;
};

struct FCustomInput {
  /* offset=0x0000 flags=0x0018000000000201 */ FString InputName;
  /* offset=0x0010 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

struct FCustomProfile {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<struct FResponseChannel> CustomResponses;
};

struct FDamageCauserRecordData {
  /* offset=0x0000 flags=0x0018001040010201 */ AController* causer;
  /* offset=0x0004 flags=0x0018001040010201 */ float Time;
  /* offset=0x0008 flags=0x0018001040010201 */ int32 StatusChangeMargin;
  /* offset=0x000c flags=0x0018001040010201 */ int32 DamageType;
  /* offset=0x0010 flags=0x0018001040010201 */ int32 AdditionalParam;
};

struct FDamageEvent {
  /* offset=0x0004 flags=0x001c001040000200 */ UClass<UDamageType>* DamageTypeClass;
};

struct FDateTime {
};

struct FDebugDisplayProperty {
  /* offset=0x0000 flags=0x0018001040000200 */ UObject* Obj;
  /* offset=0x0004 flags=0x001c001040000200 */ UClass<UObject>* WithinClass;
};

struct FDebugFloatHistory {
  /* offset=0x0000 flags=0x0040000000002200 */ TArray<float> Samples;
  /* offset=0x000c flags=0x0018001040000205 */ float MaxSamples;
  /* offset=0x0010 flags=0x0018001040000205 */ float MinValue;
  /* offset=0x0014 flags=0x0018001040000205 */ float MaxValue;
  /* offset=0x0018 flags=0x0018001040000205 */ bool bAutoAdjustMinMax;
};

struct FDebugTextInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ AActor* SrcActor;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FVector SrcActorOffset;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FVector SrcActorDesiredOffset;
  /* offset=0x001c flags=0x0018000000000200 */ FString DebugText;
  /* offset=0x0028 flags=0x0018001040002200 */ float TimeRemaining;
  /* offset=0x002c flags=0x0018001040000200 */ float Duration;
  /* offset=0x0030 flags=0x0018001040000000 */ struct FColor TextColor;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bAbsoluteLocation:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bKeepAttachedToActor:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bDrawShadow:1;
  /* offset=0x0038 flags=0x0018001040000000 */ struct FVector OrigActorLocation;
  /* offset=0x0044 flags=0x0018001040000200 */ UFont* Font;
  /* offset=0x0048 flags=0x0018001040000200 */ float FontScale;
};

struct FDecalData {
  /* offset=0x0000 flags=0x0018001040010201 */ float DecalSize;
  /* offset=0x0004 flags=0x0018001040010201 */ float LifeSpan;
  /* offset=0x0008 flags=0x0018001040010201 */ UMaterial* DecalMaterial;
  /* offset=0x000c flags=0x0018001040010201 */ float ImpactEffectStartScaleDistance;
  /* offset=0x0010 flags=0x0018001040010201 */ float ImpactEffectEndScaleDistance;
  /* offset=0x0014 flags=0x0018001040010201 */ float ImpactEffectStartScaleValue;
  /* offset=0x0018 flags=0x0018001040010201 */ float ImpactEffectEndScaleValue;
};

struct FDelegateArray {
  /* offset=0x0000 flags=0x0010008000000200 */ TArray<FPlatformInterfaceDelegate> Delegates;
};

struct FDelegateRuntimeBinding {
  /* offset=0x0000 flags=0x0018000000000200 */ FString ObjectName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName PropertyName;
  /* offset=0x0018 flags=0x0018001040000200 */ FName FunctionName;
  /* offset=0x0020 flags=0x0010000000000000 */ struct FDynamicPropertyPath SourcePath;
  /* offset=0x002c flags=0x0018001040000200 */ enum EBindingKind Kind;
};

struct FDestroyWeaponReplicatedToOwnerData {
  /* offset=0x0000 flags=0x0018001040000200 */ FName LogicSocket;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 OperationIndex;
};

struct FDestructibleAdvancedParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ float DamageCap;
  /* offset=0x0004 flags=0x0018001040000201 */ float ImpactVelocityThreshold;
  /* offset=0x0008 flags=0x0018001040000201 */ float MaxChunkSpeed;
  /* offset=0x000c flags=0x0018001040000201 */ float FractureImpulseScale;
};

struct FDestructibleChunkParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bIsSupportChunk;
  /* offset=0x0001 flags=0x0018001040000201 */ bool bDoNotFracture;
  /* offset=0x0002 flags=0x0018001040000201 */ bool bDoNotDamage;
  /* offset=0x0003 flags=0x0018001040000201 */ bool bDoNotCrumble;
};

struct FDestructibleDamageParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ float DamageThreshold;
  /* offset=0x0004 flags=0x0018001040000201 */ float DamageSpread;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bEnableImpactDamage;
  /* offset=0x000c flags=0x0018001040000201 */ float ImpactDamage;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 DefaultImpactDamageDepth;
  /* offset=0x0014 flags=0x0018001040000201 */ bool bCustomImpactResistance;
  /* offset=0x0018 flags=0x0018001040000201 */ float ImpactResistance;
};

struct FDestructibleDebrisParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ float DebrisLifetimeMin;
  /* offset=0x0004 flags=0x0018001040000201 */ float DebrisLifetimeMax;
  /* offset=0x0008 flags=0x0018001040000201 */ float DebrisMaxSeparationMin;
  /* offset=0x000c flags=0x0018001040000201 */ float DebrisMaxSeparationMax;
  /* offset=0x0010 flags=0x0010001040000001 */ struct FBox ValidBounds;
};

struct FDestructibleDepthParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 ImpactDamageOverride;
};

struct FDestructibleParameters {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FDestructibleDamageParameters DamageParameters;
  /* offset=0x001c flags=0x0010001000000001 */ struct FDestructibleDebrisParameters DebrisParameters;
  /* offset=0x0048 flags=0x0010001000000001 */ struct FDestructibleAdvancedParameters AdvancedParameters;
  /* offset=0x0058 flags=0x0010001000000001 */ struct FDestructibleSpecialHierarchyDepths SpecialHierarchyDepths;
  /* offset=0x006c flags=0x0010000000000241 */ TArray<struct FDestructibleDepthParameters> DepthParameters;
  /* offset=0x0078 flags=0x0010001000000001 */ struct FDestructibleParametersFlag Flags;
};

struct FDestructibleParametersFlag {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAccumulateDamage:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAssetDefinedSupport:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bWorldSupport:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bDebrisTimeout:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bDebrisMaxSeparation:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bCrumbleSmallestChunks:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAccurateRaycasts:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bUseValidBounds:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bFormExtendedStructures:1;
};

struct FDestructibleSpecialHierarchyDepths {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 SupportDepth;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 MinimumFractureDepth;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bEnableDebris;
  /* offset=0x000c flags=0x0018001040000201 */ int32 DebrisDepth;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 EssentialDepth;
};

struct FDialogueContext {
  /* offset=0x0000 flags=0x0018001040000205 */ UDialogueVoice* Speaker;
  /* offset=0x0004 flags=0x0010000000000205 */ TArray<UDialogueVoice*> Targets;
};

struct FDialogueContextMapping {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FDialogueContext Context;
  /* offset=0x0010 flags=0x0018001040000201 */ USoundWave* SoundWave;
  /* offset=0x0014 flags=0x0018000000000201 */ FString LocalizationKeyFormat;
  /* offset=0x0020 flags=0x0018001040002200 */ UDialogueSoundWaveProxy* Proxy;
};

struct FDialogueWaveParameter {
  /* offset=0x0000 flags=0x0018001040000201 */ UDialogueWave* DialogueWave;
  /* offset=0x0004 flags=0x0010000000000001 */ struct FDialogueContext Context;
};

struct FDirectorTrackCut {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040000200 */ float TransitionTime;
  /* offset=0x0008 flags=0x0018001040000201 */ FName TargetCamGroup;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 ShotNumber;
};

struct FDirectoryPath {
  /* offset=0x0000 flags=0x0018000000000205 */ FString Path;
};

struct FDistanceDatum {
  /* offset=0x0000 flags=0x0018001040000201 */ float FadeInDistanceStart;
  /* offset=0x0004 flags=0x0018001040000201 */ float FadeInDistanceEnd;
  /* offset=0x0008 flags=0x0018001040000201 */ float FadeOutDistanceStart;
  /* offset=0x000c flags=0x0018001040000201 */ float FadeOutDistanceEnd;
  /* offset=0x0010 flags=0x0018001040000201 */ float Volume;
};

struct FDistributionLookupTable {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Op;
  /* offset=0x0001 flags=0x0018001040000200 */ uint8 EntryCount;
  /* offset=0x0002 flags=0x0018001040000200 */ uint8 EntryStride;
  /* offset=0x0003 flags=0x0018001040000200 */ uint8 SubEntryStride;
  /* offset=0x0004 flags=0x0018001040000200 */ float TimeScale;
  /* offset=0x0008 flags=0x0018001040000200 */ float TimeBias;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<float> Values;
  /* offset=0x0018 flags=0x0018001040000200 */ uint8 LockFlag;
};

struct FDragableBtnPositionDataStruct {
  /* offset=0x0000 flags=0x0008001040000205 */ uint8 BtnType_2_3CF15A1A4EF316763AD3D69A1131AC62;
  /* offset=0x0004 flags=0x0008001040000005 */ struct FVector2D ViewportPosition_15_017FFB6647B7B37B41BFF3AA624F87F5;
};

struct FDrawToRenderTargetContext {
  /* offset=0x0000 flags=0x0018001040000200 */ UTextureRenderTarget2D* RenderTarget;
};

struct FDriveCarNotify {
  /* offset=0x0000 flags=0x0018001040000204 */ uint8 DriveCar;
  /* offset=0x0004 flags=0x0018001040000200 */ ASTExtraBaseCharacter* Character;
  /* offset=0x0008 flags=0x0018001040000200 */ ASTExtraWheeledVehicle* Vehicle;
};

struct FDropNoteInfo {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector Location;
  /* offset=0x000c flags=0x0010001040000000 */ struct FRotator Rotation;
  /* offset=0x0018 flags=0x0018000000000200 */ FString Comment;
};

struct FDrowningDamageEvent: FSTPointDamageEvent {
};

struct FDynamicGenerateTargetNavigation {
  /* offset=0x0000 flags=0x0018001040000004 */ struct FVector TargetLocation;
  /* offset=0x000c flags=0x0018001040000204 */ float GenerateRadiusMin;
  /* offset=0x0010 flags=0x0018001040000204 */ float GenerateRadiusMax;
};

struct FDynamicPropertyPath {
  /* offset=0x0000 flags=0x0040000000000200 */ TArray<struct FPropertyPathSegment> Segments;
};

struct FEQSParametrizedQueryExecutionRequest {
  /* offset=0x0000 flags=0x0018001040000201 */ UEnvQuery* QueryTemplate;
  /* offset=0x0004 flags=0x0010000000000201 */ TArray<struct FAIDynamicParam> QueryConfig;
  /* offset=0x0010 flags=0x0010000000000001 */ struct FBlackboardKeySelector EQSQueryBlackboardKey;
  /* offset=0x0030 flags=0x0018001040000201 */ uint8 RunMode;
  /* offset=0x0031 flags=0x0018001000000001 */ uint8 bUseBBKeyForQueryTemplate:1;
};

struct FEdGraphPinType {
  /* offset=0x0000 flags=0x0018000000000200 */ FString PinCategory;
  /* offset=0x000c flags=0x0018000000000200 */ FString PinSubCategory;
  /* offset=0x0018 flags=0x001c001040000200 */ UObject* PinSubCategoryObject;
  /* offset=0x0020 flags=0x0010001000000000 */ struct FSimpleMemberReference PinSubCategoryMemberReference;
  /* offset=0x0040 flags=0x0010000000000000 */ struct FEdGraphTerminalType PinValueType;
  /* offset=0x0064 flags=0x0018001040000200 */ enum EPinContainerType ContainerType;
  /* offset=0x0065 flags=0x0048001020000000 */ uint8 bIsArray:1;
  /* offset=0x0065 flags=0x0018001000000000 */ uint8 bIsReference:1;
  /* offset=0x0065 flags=0x0018001000000000 */ uint8 bIsConst:1;
  /* offset=0x0065 flags=0x0018001000000000 */ uint8 bIsWeakPointer:1;
};

struct FEdGraphTerminalType {
  /* offset=0x0000 flags=0x0018000000000200 */ FString TerminalCategory;
  /* offset=0x000c flags=0x0018000000000200 */ FString TerminalSubCategory;
  /* offset=0x0018 flags=0x001c001040000200 */ UObject* TerminalSubCategoryObject;
  /* offset=0x0020 flags=0x0018001040000200 */ bool bTerminalIsConst;
  /* offset=0x0021 flags=0x0018001040000200 */ bool bTerminalIsWeakPointer;
};

struct FEditableTextBoxStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageNormal;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageHovered;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageFocused;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageReadOnly;
  /* offset=0x01a8 flags=0x0010001000000005 */ struct FMargin Padding;
  /* offset=0x01b8 flags=0x0018000000000005 */ struct FSlateFontInfo Font;
  /* offset=0x01f8 flags=0x0010000000000005 */ struct FSlateColor ForegroundColor;
  /* offset=0x0214 flags=0x0010000000000005 */ struct FSlateColor BackgroundColor;
  /* offset=0x0230 flags=0x0010000000000005 */ struct FSlateColor ReadOnlyForegroundColor;
  /* offset=0x024c flags=0x0010001000000005 */ struct FMargin HScrollBarPadding;
  /* offset=0x025c flags=0x0010001000000005 */ struct FMargin VScrollBarPadding;
  /* offset=0x0270 flags=0x0010000000000005 */ struct FScrollBarStyle ScrollBarStyle;
};

struct FEditableTextStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0018000000000005 */ struct FSlateFontInfo Font;
  /* offset=0x0048 flags=0x0010000000000005 */ struct FSlateColor ColorAndOpacity;
  /* offset=0x0068 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageSelected;
  /* offset=0x00d0 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImageComposing;
  /* offset=0x0138 flags=0x0010000000000005 */ struct FSlateBrush CaretImage;
};

struct FEditorElement {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 Indices;
  /* offset=0x000c flags=0x0018001040000201 */ float Weights;
};

struct FEditorImportExportTestDefinition {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FFilePath ImportFilePath;
  /* offset=0x000c flags=0x0018000000004201 */ FString ExportFileExtension;
  /* offset=0x0018 flags=0x0018001040004201 */ bool bSkipExport;
  /* offset=0x001c flags=0x0010000000004201 */ TArray<struct FImportFactorySettingValues> FactorySettings;
};

struct FEditorImportWorkflowDefinition {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FFilePath ImportFilePath;
  /* offset=0x000c flags=0x0010000000004201 */ TArray<struct FImportFactorySettingValues> FactorySettings;
};

struct FEditorMapPerformanceTestDefinition {
  /* offset=0x0000 flags=0x0018000000004001 */ struct FSoftObjectPath PerformanceTestmap;
  /* offset=0x0018 flags=0x0018001040004201 */ int32 TestTimer;
};

struct FEmitterDynamicParameter {
  /* offset=0x0000 flags=0x0018001040020201 */ FName ParamName;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bUseEmitterTime:1;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bSpawnTimeOnly:1;
  /* offset=0x0009 flags=0x0018001040000201 */ uint8 ValueMethod;
  /* offset=0x000a flags=0x0018001000000001 */ uint8 bScaleVelocityByParamValue:1;
  /* offset=0x000c flags=0x0010008000000001 */ struct FRawDistributionFloat ParamValue;
};

struct FEnemyInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ ASTExtraPlayerCharacter* Pawn;
  /* offset=0x0008 flags=0x0018001040000200 */ FName aimPos;
  /* offset=0x0010 flags=0x0018001040000200 */ float disToScreenCenter;
  /* offset=0x0014 flags=0x0018001040000200 */ float originMinAdsorbDis;
  /* offset=0x0018 flags=0x0018001040000000 */ struct FVector Point;
};

struct FEngineShowFlagsSetting {
  /* offset=0x0000 flags=0x0018000000000205 */ FString ShowFlagName;
  /* offset=0x000c flags=0x0018001040000205 */ bool Enabled;
};

struct FEnvDirection {
  /* offset=0x0000 flags=0x001c001040010201 */ UClass<UEnvQueryContext>* LineFrom;
  /* offset=0x0004 flags=0x001c001040010201 */ UClass<UEnvQueryContext>* LineTo;
  /* offset=0x0008 flags=0x001c001040010201 */ UClass<UEnvQueryContext>* Rotation;
  /* offset=0x000c flags=0x0018001040010201 */ uint8 DirMode;
};

struct FEnvNamedValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParamName;
  /* offset=0x0008 flags=0x0018001040000205 */ enum EAIParamType ParamType;
  /* offset=0x000c flags=0x0018001040000205 */ float Value;
};

struct FEnvOverlapData {
  /* offset=0x0000 flags=0x0018001040010201 */ float ExtentX;
  /* offset=0x0004 flags=0x0018001040010201 */ float ExtentY;
  /* offset=0x0008 flags=0x0018001040010201 */ float ExtentZ;
  /* offset=0x000c flags=0x0018041040010001 */ struct FVector ShapeOffset;
  /* offset=0x0018 flags=0x0018001040010201 */ uint8 OverlapChannel;
  /* offset=0x0019 flags=0x0018001040010201 */ uint8 OverlapShape;
  /* offset=0x001a flags=0x0018041000010001 */ uint8 bOnlyBlockingHits:1;
  /* offset=0x001a flags=0x0018041000010001 */ uint8 bOverlapComplex:1;
};

struct FEnvQueryInstanceCache {
  /* offset=0x0000 flags=0x0018001040000200 */ UEnvQuery* Template;
};

struct FEnvTraceData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 VersionNum;
  /* offset=0x0004 flags=0x001c001040010201 */ UClass<UNavigationQueryFilter>* NavigationFilter;
  /* offset=0x0008 flags=0x0018001040010201 */ float ProjectDown;
  /* offset=0x000c flags=0x0018001040010201 */ float ProjectUp;
  /* offset=0x0010 flags=0x0018001040010201 */ float ExtentX;
  /* offset=0x0014 flags=0x0018001040010201 */ float ExtentY;
  /* offset=0x0018 flags=0x0018001040010201 */ float ExtentZ;
  /* offset=0x001c flags=0x0018001040010201 */ float PostProjectionVerticalOffset;
  /* offset=0x0020 flags=0x0018001040010201 */ uint8 TraceChannel;
  /* offset=0x0021 flags=0x0018001040010201 */ uint8 SerializedChannel;
  /* offset=0x0022 flags=0x0018001040010201 */ uint8 TraceShape;
  /* offset=0x0023 flags=0x0018001040010201 */ uint8 TraceMode;
  /* offset=0x0024 flags=0x0018041000010001 */ uint8 bTraceComplex:1;
  /* offset=0x0024 flags=0x0018041000010001 */ uint8 bOnlyBlockingHits:1;
  /* offset=0x0024 flags=0x0018001000010001 */ uint8 bCanTraceOnNavMesh:1;
  /* offset=0x0024 flags=0x0018001000010001 */ uint8 bCanTraceOnGeometry:1;
  /* offset=0x0024 flags=0x0018001000010001 */ uint8 bCanDisableTrace:1;
  /* offset=0x0024 flags=0x0018001000010001 */ uint8 bCanProjectDown:1;
};

struct FEventPayload {
  /* offset=0x0000 flags=0x0018001040000201 */ FName EventName;
  /* offset=0x0008 flags=0x0010000000000001 */ struct FMovieSceneEventParameters Parameters;
};

struct FEventReply {
};

struct FEventTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0008 flags=0x0018001040000201 */ FName EventName;
};

struct FExpandableAreaStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000001 */ struct FSlateBrush CollapsedImage;
  /* offset=0x0070 flags=0x0010000000000001 */ struct FSlateBrush ExpandedImage;
  /* offset=0x00d8 flags=0x0018001040000201 */ float RolloutAnimationSeconds;
};

struct FExposedValueCopyRecord {
  /* offset=0x0000 flags=0x0018001060000200 */ UProperty* SourceProperty;
  /* offset=0x0008 flags=0x0018001040000200 */ FName SourcePropertyName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName SourceSubPropertyName;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 SourceArrayIndex;
  /* offset=0x001c flags=0x0018001040000200 */ UProperty* DestProperty;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 DestArrayIndex;
  /* offset=0x0024 flags=0x0018001040000200 */ int32 Size;
  /* offset=0x0028 flags=0x0018001040000200 */ bool bInstanceIsTarget;
  /* offset=0x0029 flags=0x0018001040000200 */ enum EPostCopyOperation PostCopyOperation;
  /* offset=0x002a flags=0x0018001040002200 */ enum ECopyType CopyType;
  /* offset=0x002c flags=0x0018001040002200 */ UProperty* CachedSourceProperty;
};

struct FExposedValueHandler {
  /* offset=0x0000 flags=0x0018001040000200 */ FName BoundFunction;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<struct FExposedValueCopyRecord> CopyRecords;
};

struct FExpressionInput {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 OutputIndex;
  /* offset=0x0004 flags=0x0018000000000200 */ FString InputName;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 Mask;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 MaskR;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 MaskG;
  /* offset=0x001c flags=0x0018001040000200 */ int32 MaskB;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 MaskA;
  /* offset=0x0028 flags=0x0018001040000200 */ FName ExpressionName;
};

struct FExpressionOutput {
  /* offset=0x0000 flags=0x0018000000000200 */ FString OutputName;
  /* offset=0x000c flags=0x0018001040000200 */ int32 Mask;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 MaskR;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 MaskG;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 MaskB;
  /* offset=0x001c flags=0x0018001040000200 */ int32 MaskA;
};

struct FExternalToolDefinition {
  /* offset=0x0000 flags=0x0018000000004201 */ FString ToolName;
  /* offset=0x000c flags=0x0010000000004001 */ struct FFilePath ExecutablePath;
  /* offset=0x0018 flags=0x0018000000004201 */ FString CommandLineOptions;
  /* offset=0x0024 flags=0x0010000000004001 */ struct FDirectoryPath WorkingDirectory;
  /* offset=0x0030 flags=0x0018000000004201 */ FString ScriptExtension;
  /* offset=0x003c flags=0x0010000000004001 */ struct FDirectoryPath ScriptDirectory;
};

struct FFOscillator {
  /* offset=0x0000 flags=0x0018001040000201 */ float Amplitude;
  /* offset=0x0004 flags=0x0018001040000201 */ float Frequency;
  /* offset=0x0008 flags=0x0018001040000201 */ uint8 InitialOffset;
};

struct FFXDistancaScaleStruct {
  /* offset=0x0000 flags=0x0018001040010201 */ float FXStartScaleDistance;
  /* offset=0x0004 flags=0x0018001040010201 */ float FXEndScaleDistance;
  /* offset=0x0008 flags=0x0018001040010201 */ float FXStartScaleValue;
  /* offset=0x000c flags=0x0018001040010201 */ float FXEndScaleValue;
};

struct FFallingDamageEvent: FSTPointDamageEvent {
};

struct FFightFriendChat {
  /* offset=0x0000 flags=0x0018000000000200 */ FString UID;
  /* offset=0x000c flags=0x0018000000000200 */ FString Name;
  /* offset=0x0018 flags=0x0018000000000200 */ FString msg;
  /* offset=0x0024 flags=0x0018001040000200 */ bool selfMsg;
};

struct FFileManifestData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Filename;
  /* offset=0x000c flags=0x0010001000000000 */ struct FSHAHashData FileHash;
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<struct FChunkPartData> FileChunkParts;
  /* offset=0x002c flags=0x0010000000000200 */ TArray<FString> InstallTags;
  /* offset=0x0038 flags=0x0018001040000200 */ bool bIsUnixExecutable;
  /* offset=0x003c flags=0x0018000000000200 */ FString SymlinkTarget;
  /* offset=0x0048 flags=0x0018001040000200 */ bool bIsReadOnly;
  /* offset=0x0049 flags=0x0018001040000200 */ bool bIsCompressed;
};

struct FFilePath {
  /* offset=0x0000 flags=0x0018000000000205 */ FString FilePath;
};

struct FFindFloorResult {
  /* offset=0x0000 flags=0x0018001000020815 */ uint8 bBlockingHit:1;
  /* offset=0x0000 flags=0x0018001000020815 */ uint8 bWalkableFloor:1;
  /* offset=0x0000 flags=0x0018001000020815 */ uint8 bLineTrace:1;
  /* offset=0x0004 flags=0x0018001040020a15 */ float FloorDist;
  /* offset=0x0008 flags=0x0018001040020a15 */ float LineDist;
  /* offset=0x0010 flags=0x0010009040020815 */ struct FHitResult HitResult;
};

struct FFloatCurve: FAnimCurveBase {
  /* offset=0x001c flags=0x0010000000000000 */ struct FRichCurve FloatCurve;
};

struct FFloatDistribution {
  /* offset=0x0000 flags=0x0018000000000000 */ struct FDistributionLookupTable Table;
};

struct FFloatInterval {
  /* offset=0x0000 flags=0x0018001040000201 */ float Min;
  /* offset=0x0004 flags=0x0018001040000201 */ float Max;
};

struct FFloatRange {
  /* offset=0x0000 flags=0x0018000000000005 */ struct FFloatRangeBound LowerBound;
  /* offset=0x0008 flags=0x0018000000000005 */ struct FFloatRangeBound UpperBound;
};

struct FFloatRangeBound {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 Type;
  /* offset=0x0004 flags=0x0018001040000205 */ float Value;
};

struct FFloatSpringState {
};

struct FFlyingParam {
  /* offset=0x0000 flags=0x0018001040000205 */ float FlyingSpeed;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector FlyingDirection;
};

struct FFocusEvent {
};

struct FFoliageTypeObject {
  /* offset=0x0000 flags=0x0048001040000201 */ UObject* FoliageTypeObject;
  /* offset=0x0004 flags=0x0048001040002200 */ UFoliageType_InstancedStaticMesh* TypeInstance;
  /* offset=0x0008 flags=0x0048001040000200 */ bool bIsAsset;
  /* offset=0x000c flags=0x004c001060000200 */ UClass<UFoliageType_InstancedStaticMesh>* Type;
};

struct FFoliageVertexColorChannelMask {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 UseMask:1;
  /* offset=0x0004 flags=0x0018001040000201 */ float MaskThreshold;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 InvertMask:1;
};

struct FFontCharacter {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 StartU;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 StartV;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 USize;
  /* offset=0x000c flags=0x0018001040000201 */ int32 VSize;
  /* offset=0x0010 flags=0x0018001040000201 */ uint8 TextureIndex;
  /* offset=0x0014 flags=0x0018001040000201 */ int32 VerticalOffset;
};

struct FFontData {
  /* offset=0x0000 flags=0x0048000000000200 */ FString FontFilename;
  /* offset=0x000c flags=0x0048001040000200 */ enum EFontHinting Hinting;
  /* offset=0x000d flags=0x0048001040000200 */ enum EFontLoadingPolicy LoadingPolicy;
  /* offset=0x0010 flags=0x0048001040000200 */ UObject* FontFaceAsset;
};

struct FFontImportOptionsData {
  /* offset=0x0000 flags=0x0018000000000201 */ FString FontName;
  /* offset=0x000c flags=0x0018001040000201 */ float Height;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bEnableAntialiasing:1;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bEnableBold:1;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bEnableItalic:1;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bEnableUnderline:1;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bAlphaOnly:1;
  /* offset=0x0011 flags=0x0018001040000201 */ uint8 CharacterSet;
  /* offset=0x0014 flags=0x0018000000000201 */ FString Chars;
  /* offset=0x0020 flags=0x0018000000000201 */ FString UnicodeRange;
  /* offset=0x002c flags=0x0018000000000201 */ FString CharsFilePath;
  /* offset=0x0038 flags=0x0018000000000201 */ FString CharsFileWildcard;
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bCreatePrintableOnly:1;
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bIncludeASCIIRange:1;
  /* offset=0x0048 flags=0x0018001040000001 */ struct FLinearColor ForegroundColor;
  /* offset=0x0058 flags=0x0018001000000001 */ uint8 bEnableDropShadow:1;
  /* offset=0x005c flags=0x0018001040000201 */ int32 TexturePageWidth;
  /* offset=0x0060 flags=0x0018001040000201 */ int32 TexturePageMaxHeight;
  /* offset=0x0064 flags=0x0018001040000201 */ int32 XPadding;
  /* offset=0x0068 flags=0x0018001040000201 */ int32 YPadding;
  /* offset=0x006c flags=0x0018001040000201 */ int32 ExtendBoxTop;
  /* offset=0x0070 flags=0x0018001040000201 */ int32 ExtendBoxBottom;
  /* offset=0x0074 flags=0x0018001040000201 */ int32 ExtendBoxRight;
  /* offset=0x0078 flags=0x0018001040000201 */ int32 ExtendBoxLeft;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bEnableLegacyMode:1;
  /* offset=0x0080 flags=0x0018001040000201 */ int32 Kerning;
  /* offset=0x0084 flags=0x0018001000000001 */ uint8 bUseDistanceFieldAlpha:1;
  /* offset=0x0088 flags=0x0018001040000201 */ int32 DistanceFieldScaleFactor;
  /* offset=0x008c flags=0x0018001040000201 */ float DistanceFieldScanRadiusScale;
};

struct FFontOutlineSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 OutlineSize;
  /* offset=0x0004 flags=0x0018001040000205 */ UObject* OutlineMaterial;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FLinearColor OutlineColor;
  /* offset=0x0018 flags=0x0018001040000205 */ bool bSeparateFillAlpha;
};

struct FFontParameterValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000205 */ UFont* FontValue;
  /* offset=0x000c flags=0x0018001040000205 */ int32 FontPage;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

struct FForceFeedbackAttenuationSettings: FBaseAttenuationSettings {
};

struct FForceFeedbackChannelDetails {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAffectsLeftLarge:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAffectsLeftSmall:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAffectsRightLarge:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bAffectsRightSmall:1;
  /* offset=0x0004 flags=0x0010000000000001 */ struct FRuntimeFloatCurve Curve;
};

struct FForceTriangle {
};

struct FFormatArgumentData {
  /* offset=0x0000 flags=0x0018000000000a05 */ FString ArgumentName;
  /* offset=0x000c flags=0x0018001040000a05 */ uint8 ArgumentValueType;
  /* offset=0x0010 flags=0x0010000000000805 */ FText ArgumentValue;
  /* offset=0x001c flags=0x0018001040000a05 */ int32 ArgumentValueInt;
  /* offset=0x0020 flags=0x0018001040000a05 */ float ArgumentValueFloat;
  /* offset=0x0024 flags=0x0018001040000a05 */ enum ETextGender ArgumentValueGender;
};

struct FFractureEffect {
  /* offset=0x0000 flags=0x0018001040000205 */ UParticleSystem* ParticleSystem;
  /* offset=0x0004 flags=0x0018001040000205 */ USoundBase* Sound;
};

struct FFractureMaterial {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector2D UVScale;
  /* offset=0x0008 flags=0x0018001040000001 */ struct FVector2D UVOffset;
  /* offset=0x0010 flags=0x0018001040000001 */ struct FVector Tangent;
  /* offset=0x001c flags=0x0018001040000201 */ float UAngle;
  /* offset=0x0020 flags=0x0018001040000201 */ int32 InteriorElementIndex;
};

struct FFunctionExpressionInput {
  /* offset=0x0000 flags=0x0018001040002200 */ UMaterialExpressionFunctionInput* ExpressionInput;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FGuid ExpressionInputId;
  /* offset=0x0018 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

struct FFunctionExpressionOutput {
  /* offset=0x0000 flags=0x0018001040002200 */ UMaterialExpressionFunctionOutput* ExpressionOutput;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FGuid ExpressionOutputId;
  /* offset=0x0014 flags=0x0018000000000000 */ struct FExpressionOutput Output;
};

struct FGM {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 GrassEnable:1;
};

struct FGPUSpriteEmitterInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ UParticleModuleRequired* RequiredModule;
  /* offset=0x0004 flags=0x0018001040000200 */ UParticleModuleSpawn* SpawnModule;
  /* offset=0x0008 flags=0x0018001040000200 */ UParticleModuleSpawnPerUnit* SpawnPerUnitModule;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<UParticleModule*> SpawnModules;
  /* offset=0x0020 flags=0x0010001000000000 */ struct FGPUSpriteLocalVectorFieldInfo LocalVectorField;
  /* offset=0x0090 flags=0x0018000000000000 */ struct FFloatDistribution VectorFieldScale;
  /* offset=0x00ac flags=0x0018000000000000 */ struct FFloatDistribution DragCoefficient;
  /* offset=0x00c8 flags=0x0018000000000000 */ struct FFloatDistribution PointAttractorStrength;
  /* offset=0x00e4 flags=0x0018000000000000 */ struct FFloatDistribution Resilience;
  /* offset=0x0100 flags=0x0018001040000000 */ struct FVector ConstantAcceleration;
  /* offset=0x010c flags=0x0018001040000000 */ struct FVector PointAttractorPosition;
  /* offset=0x0118 flags=0x0018001040000200 */ float PointAttractorRadiusSq;
  /* offset=0x011c flags=0x0018001040000000 */ struct FVector OrbitOffsetBase;
  /* offset=0x0128 flags=0x0018001040000000 */ struct FVector OrbitOffsetRange;
  /* offset=0x0134 flags=0x0018001040000000 */ struct FVector2D InvMaxSize;
  /* offset=0x013c flags=0x0018001040000200 */ float InvRotationRateScale;
  /* offset=0x0140 flags=0x0018001040000200 */ float MaxLifetime;
  /* offset=0x0144 flags=0x0018001040000200 */ int32 MaxParticleCount;
  /* offset=0x0148 flags=0x0018001040000200 */ uint8 ScreenAlignment;
  /* offset=0x0149 flags=0x0018001040000200 */ uint8 LockAxisFlag;
  /* offset=0x014a flags=0x0018001000000000 */ uint8 bEnableCollision:1;
  /* offset=0x014b flags=0x0018001040000200 */ uint8 CollisionMode;
  /* offset=0x014c flags=0x0018001000000000 */ uint8 bRemoveHMDRoll:1;
  /* offset=0x0150 flags=0x0018001040000200 */ float MinFacingCameraBlendDistance;
  /* offset=0x0154 flags=0x0018001040000200 */ float MaxFacingCameraBlendDistance;
  /* offset=0x0158 flags=0x0010008000000000 */ struct FRawDistributionVector DynamicColor;
  /* offset=0x0198 flags=0x0010008000000000 */ struct FRawDistributionFloat DynamicAlpha;
  /* offset=0x01c0 flags=0x0010008000000000 */ struct FRawDistributionVector DynamicColorScale;
  /* offset=0x0200 flags=0x0010008000000000 */ struct FRawDistributionFloat DynamicAlphaScale;
};

struct FGPUSpriteLocalVectorFieldInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ UVectorField* Field;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FTransform Transform;
  /* offset=0x0040 flags=0x0010001040000000 */ struct FRotator MinInitialRotation;
  /* offset=0x004c flags=0x0010001040000000 */ struct FRotator MaxInitialRotation;
  /* offset=0x0058 flags=0x0010001040000000 */ struct FRotator RotationRate;
  /* offset=0x0064 flags=0x0018001040000200 */ float Intensity;
  /* offset=0x0068 flags=0x0018001040000200 */ float Tightness;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 bIgnoreComponentTransform:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 bTileX:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 bTileY:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 bTileZ:1;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 bUseFixDT:1;
};

struct FGPUSpriteResourceData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FColor> QuantizedColorSamples;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FColor> QuantizedMiscSamples;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FColor> QuantizedSimulationAttrSamples;
  /* offset=0x0030 flags=0x0018001040000000 */ struct FVector4 ColorScale;
  /* offset=0x0040 flags=0x0018001040000000 */ struct FVector4 ColorBias;
  /* offset=0x0050 flags=0x0018001040000000 */ struct FVector4 MiscScale;
  /* offset=0x0060 flags=0x0018001040000000 */ struct FVector4 MiscBias;
  /* offset=0x0070 flags=0x0018001040000000 */ struct FVector4 SimulationAttrCurveScale;
  /* offset=0x0080 flags=0x0018001040000000 */ struct FVector4 SimulationAttrCurveBias;
  /* offset=0x0090 flags=0x0018001040000000 */ struct FVector4 SubImageSize;
  /* offset=0x00a0 flags=0x0018001040000000 */ struct FVector4 SizeBySpeed;
  /* offset=0x00b0 flags=0x0018001040000000 */ struct FVector ConstantAcceleration;
  /* offset=0x00bc flags=0x0018001040000000 */ struct FVector OrbitOffsetBase;
  /* offset=0x00c8 flags=0x0018001040000000 */ struct FVector OrbitOffsetRange;
  /* offset=0x00d4 flags=0x0018001040000000 */ struct FVector OrbitFrequencyBase;
  /* offset=0x00e0 flags=0x0018001040000000 */ struct FVector OrbitFrequencyRange;
  /* offset=0x00ec flags=0x0018001040000000 */ struct FVector OrbitPhaseBase;
  /* offset=0x00f8 flags=0x0018001040000000 */ struct FVector OrbitPhaseRange;
  /* offset=0x0104 flags=0x0018001040000200 */ float GlobalVectorFieldScale;
  /* offset=0x0108 flags=0x0018001040000200 */ float GlobalVectorFieldTightness;
  /* offset=0x010c flags=0x0018001040000200 */ float PerParticleVectorFieldScale;
  /* offset=0x0110 flags=0x0018001040000200 */ float PerParticleVectorFieldBias;
  /* offset=0x0114 flags=0x0018001040000200 */ float DragCoefficientScale;
  /* offset=0x0118 flags=0x0018001040000200 */ float DragCoefficientBias;
  /* offset=0x011c flags=0x0018001040000200 */ float ResilienceScale;
  /* offset=0x0120 flags=0x0018001040000200 */ float ResilienceBias;
  /* offset=0x0124 flags=0x0018001040000200 */ float CollisionRadiusScale;
  /* offset=0x0128 flags=0x0018001040000200 */ float CollisionRadiusBias;
  /* offset=0x012c flags=0x0018001040000200 */ float CollisionTimeBias;
  /* offset=0x0130 flags=0x0018001040000200 */ float CollisionRandomSpread;
  /* offset=0x0134 flags=0x0018001040000200 */ float CollisionRandomDistribution;
  /* offset=0x0138 flags=0x0018001040000200 */ float OneMinusFriction;
  /* offset=0x013c flags=0x0018001040000200 */ float RotationRateScale;
  /* offset=0x0140 flags=0x0018001040000200 */ float CameraMotionBlurAmount;
  /* offset=0x0144 flags=0x0018001040000200 */ uint8 ScreenAlignment;
  /* offset=0x0145 flags=0x0018001040000200 */ uint8 LockAxisFlag;
  /* offset=0x0148 flags=0x0018001040000000 */ struct FVector2D PivotOffset;
  /* offset=0x0150 flags=0x0018001000000000 */ uint8 bRemoveHMDRoll:1;
  /* offset=0x0154 flags=0x0018001040000200 */ float MinFacingCameraBlendDistance;
  /* offset=0x0158 flags=0x0018001040000200 */ float MaxFacingCameraBlendDistance;
};

struct FGameBaseInfo {
  /* offset=0x0000 flags=0x0018000000000200 */ FString GameSvrId;
  /* offset=0x000c flags=0x0018000000000200 */ FString GameAppID;
  /* offset=0x0018 flags=0x0018000000000200 */ FString OpenID;
  /* offset=0x0024 flags=0x0018001040000200 */ int8 AreaID;
  /* offset=0x0025 flags=0x0018001040000200 */ int8 PlatID;
  /* offset=0x0028 flags=0x0018000000000200 */ FString ZoneID;
  /* offset=0x0038 flags=0x0018001040000200 */ uint64 BattleID;
  /* offset=0x0040 flags=0x0018000000000200 */ FString UserName;
  /* offset=0x0050 flags=0x0018001040000200 */ uint64 RoleID;
  /* offset=0x0058 flags=0x0018001040000200 */ int8 RoleType;
  /* offset=0x005c flags=0x0018000000000200 */ FString PicUrl;
};

struct FGameModeName {
  /* offset=0x0000 flags=0x0018000000000201 */ FString Name;
  /* offset=0x0010 flags=0x0010000000000001 */ struct FSoftClassPath GameMode;
};

struct FGameModeParam {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 MapId;
  /* offset=0x0004 flags=0x0018000000000201 */ FString MapName;
  /* offset=0x0010 flags=0x0018001040000215 */ float Radius1;
  /* offset=0x0014 flags=0x0018001040000215 */ float Radius2;
  /* offset=0x0018 flags=0x0018001040000215 */ float Radius3;
  /* offset=0x001c flags=0x0018001040000015 */ struct FVector MapCenter;
  /* offset=0x0028 flags=0x0018001040000215 */ float PlaneSpeed;
  /* offset=0x002c flags=0x0018001040000215 */ float PlaneHeight;
  /* offset=0x0030 flags=0x0018001040000215 */ float CanOpenParachuteHeight;
  /* offset=0x0034 flags=0x0018001040000215 */ float ForceOpenParachuteHeight;
  /* offset=0x0038 flags=0x0018001040000215 */ float CloseParachuteHeight;
};

struct FGameModePlayerBattleResultData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Reason;
  /* offset=0x000c flags=0x0018001040000200 */ int32 RemainingPlayerCount;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 TotalPlayerCount;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 RemainingTeamCount;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 TotalTeamCount;
  /* offset=0x001c flags=0x0018001040000200 */ bool IsSolo;
  /* offset=0x0020 flags=0x0018001040000200 */ uint64 Killer;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 ShootWeaponShotNum;
  /* offset=0x002c flags=0x0018001040000200 */ int32 ShootWeaponShotAndHitPlayerNum;
  /* offset=0x0030 flags=0x0018001040000200 */ int32 HealTimes;
  /* offset=0x0034 flags=0x0010000000000200 */ TArray<FString> KillFlow;
  /* offset=0x0040 flags=0x0010000000000200 */ TArray<struct FTLog_PickUpItemFlow> TLog_PickUpItemFlowData;
  /* offset=0x004c flags=0x0018001040000200 */ int32 destroyVehicleNum;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 is_escape;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<struct FGameModeTeammateBattleResultData> TeammateList;
  /* offset=0x0060 flags=0x0018001040000000 */ struct FVector LandLocation;
  /* offset=0x006c flags=0x0018001040000000 */ struct FVector DeadLocation;
  /* offset=0x0078 flags=0x0018000000000200 */ FString DeadDamangeType;
  /* offset=0x0084 flags=0x0018000000000200 */ FString DeadTimeStr;
  /* offset=0x0090 flags=0x0018000000000200 */ FString logoutime;
  /* offset=0x009c flags=0x0018001040000200 */ float Pronetime;
};

struct FGameModePlayerItem {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 ItemTableID;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 Count;
};

struct FGameModePlayerParams {
  /* offset=0x0000 flags=0x0018000000000200 */ FString PlayerName;
  /* offset=0x000c flags=0x0018001040000200 */ uint32 PlayerKey;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 TeamID;
  /* offset=0x0014 flags=0x0018001040000200 */ bool bIsGM;
  /* offset=0x0015 flags=0x0018001040000200 */ uint8 gender;
  /* offset=0x0016 flags=0x0018001040000200 */ bool bAIPlayer;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FGameModePlayerItem> ItemList;
  /* offset=0x0028 flags=0x0018001040000200 */ FName CurrentPlayerState;
  /* offset=0x0030 flags=0x0018001040000200 */ FName CurrentCharacterState;
  /* offset=0x0038 flags=0x0018001040000200 */ float SyncedTimestamp;
  /* offset=0x003c flags=0x0018001040000200 */ float DestinyValue;
  /* offset=0x0040 flags=0x0018001040000200 */ float WarmScore;
};

struct FGameModeTeammateBattleResultData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Name;
  /* offset=0x0010 flags=0x0018001040000200 */ uint64 UID;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 Kill;
  /* offset=0x001c flags=0x0018000000000200 */ FString State;
  /* offset=0x0028 flags=0x0018001040000200 */ float travelDistance;
  /* offset=0x002c flags=0x0018001040000200 */ float marchDistance;
  /* offset=0x0030 flags=0x0018001040000200 */ float driveDistance;
  /* offset=0x0034 flags=0x0018001040000200 */ float DamageAmount;
  /* offset=0x0038 flags=0x0018001040000200 */ float HealAmount;
  /* offset=0x003c flags=0x0018001040000200 */ int32 AssistNum;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 HeadShotNum;
  /* offset=0x0044 flags=0x0018001040000200 */ float surviveTime;
  /* offset=0x0048 flags=0x0018001040000200 */ int32 rescueTimes;
  /* offset=0x004c flags=0x0018001040000200 */ int32 DestroyVehicles;
};

struct FGameNameRedirect {
  /* offset=0x0000 flags=0x0018001040000200 */ FName OldGameName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName NewGameName;
};

struct FGameWidgetConfig {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Path;
  /* offset=0x000c flags=0x0018000000000200 */ FString Container;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 ZOrder;
  /* offset=0x001c flags=0x0018001040000200 */ UClass<UObject>* WidgetClass;
};

struct FGameplayResourceSet {
};

struct FGameplayTag {
  /* offset=0x0000 flags=0x0028081040020201 */ FName TagName;
};

struct FGameplayTagCategoryRemap {
  /* offset=0x0000 flags=0x0018000000000201 */ FString BaseCategory;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<FString> RemapCategories;
};

struct FGameplayTagContainer {
  /* offset=0x0000 flags=0x0020080000000204 */ TArray<struct FGameplayTag> GameplayTags;
  /* offset=0x000c flags=0x0020080000002200 */ TArray<struct FGameplayTag> ParentTags;
};

struct FGameplayTagQuery {
  /* offset=0x0000 flags=0x0048001040000200 */ int32 TokenStreamVersion;
  /* offset=0x0004 flags=0x0040000000000200 */ TArray<struct FGameplayTag> TagDictionary;
  /* offset=0x0010 flags=0x0040000000000200 */ TArray<uint8> QueryTokenStream;
  /* offset=0x001c flags=0x0048000000000200 */ FString UserDescription;
  /* offset=0x0028 flags=0x0048000000000200 */ FString AutoDescription;
};

struct FGameplayTagRedirect {
  /* offset=0x0000 flags=0x0018001040000201 */ FName OldTagName;
  /* offset=0x0008 flags=0x0018001040000201 */ FName NewTagName;
};

struct FGameplayTagSource {
  /* offset=0x0000 flags=0x0018001040000200 */ FName SourceName;
  /* offset=0x0008 flags=0x0018001040000200 */ enum EGameplayTagSourceType SourceType;
  /* offset=0x000c flags=0x0018001040000200 */ UGameplayTagsList* SourceTagList;
};

struct FGameplayTagTableRow: FTableRowBase {
  /* offset=0x0008 flags=0x0018001040000215 */ FName Tag;
  /* offset=0x0010 flags=0x0018000000000215 */ FString DevComment;
};

struct FGenericStruct {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 Data;
};

struct FGeomSelection {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 Type;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 Index;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 SelectionIndex;
};

struct FGeometry {
};

struct FGeometryCacheMeshData {
};

struct FGooglePlayAchievementMapping {
  /* offset=0x0000 flags=0x0018000000000201 */ FString Name;
  /* offset=0x000c flags=0x0018000000000201 */ FString AchievementID;
};

struct FGooglePlayLeaderboardMapping {
  /* offset=0x0000 flags=0x0018000000000201 */ FString Name;
  /* offset=0x000c flags=0x0018000000000201 */ FString LeaderboardID;
};

struct FGrassInput {
  /* offset=0x0000 flags=0x0018001040000201 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000201 */ ULandscapeGrassType* GrassType;
  /* offset=0x0010 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

struct FGrassVariety {
  /* offset=0x0000 flags=0x0018001040000201 */ UStaticMesh* GrassMesh;
  /* offset=0x0004 flags=0x0018001040000201 */ float GrassDensity;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bUseGrid;
  /* offset=0x000c flags=0x0018001040000201 */ float PlacementJitter;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 StartCullDistance;
  /* offset=0x0014 flags=0x0018001040000201 */ int32 EndCullDistance;
  /* offset=0x0018 flags=0x0018001040000201 */ int32 MinLOD;
  /* offset=0x001c flags=0x0018001040000201 */ enum EGrassScaling Scaling;
  /* offset=0x0020 flags=0x0018000000000001 */ struct FFloatInterval ScaleX;
  /* offset=0x0028 flags=0x0018000000000001 */ struct FFloatInterval ScaleY;
  /* offset=0x0030 flags=0x0018000000000001 */ struct FFloatInterval ScaleZ;
  /* offset=0x0038 flags=0x0018001040000201 */ bool RandomRotation;
  /* offset=0x0039 flags=0x0018001040000201 */ bool AlignToSurface;
  /* offset=0x003a flags=0x0018001040000201 */ bool bUseLandscapeLightmap;
  /* offset=0x003b flags=0x0010041000000001 */ struct FLightingChannels LightingChannels;
  /* offset=0x003c flags=0x0018001040000201 */ bool bReceivesDecals;
};

struct FGrenadePredictResult {
  /* offset=0x0000 flags=0x0010000000000214 */ TArray<struct FVector> SplinePoints;
  /* offset=0x000c flags=0x0018001040000214 */ bool IsHitActor;
  /* offset=0x0010 flags=0x0018001040000014 */ struct FVector HitActorLocation;
  /* offset=0x001c flags=0x0010001040000014 */ struct FRotator HitActorRotation;
};

struct FGrenadeSlotData {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 grenadeType;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 GrenadeCounts;
};

struct FGroupInfoWrapper {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 SnsAction;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 Flag;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 ErrorCode;
  /* offset=0x000c flags=0x0018001040000200 */ int32 platform;
  /* offset=0x0010 flags=0x0018000000000200 */ FString Desc;
  /* offset=0x001c flags=0x0010000000000000 */ struct FWechatGroupInfomation wechatGroupInfo;
};

struct FGroupSpotComponentArray {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 GroupType;
  /* offset=0x0004 flags=0x001000800000020d */ TArray<UGroupSpotSceneComponent*> AllGroupComponents;
};

struct FGroupTypeSceneComponents {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 GroupType;
  /* offset=0x0004 flags=0x001000800000020d */ TArray<USceneComponent*> SceneComponents;
};

struct FGroupedSkeletalOptimizationSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bAutoComputeLODDistance;
  /* offset=0x0001 flags=0x0018001040000201 */ enum ESkeletalMeshLODType LevelOfDetailType;
  /* offset=0x0004 flags=0x0010000000000001 */ struct FSkeletalMeshOptimizationSettings ReductionSettings;
  /* offset=0x014c flags=0x0010001000000001 */ struct FMeshProxySettings ProxySettings;
  /* offset=0x0210 flags=0x0018001040000201 */ bool bForceLODRebuild;
};

struct FGuid {
  /* offset=0x0000 flags=0x0018001041000201 */ int32 A;
  /* offset=0x0004 flags=0x0018001041000201 */ int32 B;
  /* offset=0x0008 flags=0x0018001041000201 */ int32 C;
  /* offset=0x000c flags=0x0018001041000201 */ int32 D;
};

struct FHapticFeedbackDetails_Curve {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FRuntimeFloatCurve Frequency;
  /* offset=0x0058 flags=0x0010000000000001 */ struct FRuntimeFloatCurve Amplitude;
};

struct FHardwareCursorReference {
  /* offset=0x0000 flags=0x0018001040000201 */ FName CursorPath;
  /* offset=0x0008 flags=0x0018001040000001 */ struct FVector2D HotSpot;
};

struct FHealthPredictShowData {
  /* offset=0x0000 flags=0x0018000000000201 */ FString ShowDataKey;
  /* offset=0x000c flags=0x0018001040000201 */ uint8 ShowType;
  /* offset=0x0010 flags=0x0018001040000201 */ float Value;
  /* offset=0x0014 flags=0x0018001040000201 */ float LimitValue;
};

struct FHeightLOD {
  /* offset=0x0000 flags=0x0018001040000201 */ float Height;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 LOD;
};

struct FHitResult {
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bBlockingHit:1;
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bStartPenetrating:1;
  /* offset=0x0004 flags=0x0018001040000200 */ float Time;
  /* offset=0x0008 flags=0x0018001040000200 */ float Distance;
  /* offset=0x000c flags=0x0010001000000000 */ struct FVector_NetQuantize Location;
  /* offset=0x0018 flags=0x0010001000000000 */ struct FVector_NetQuantize ImpactPoint;
  /* offset=0x0024 flags=0x0010001000000000 */ struct FVector_NetQuantizeNormal Normal;
  /* offset=0x0030 flags=0x0010001000000000 */ struct FVector_NetQuantizeNormal ImpactNormal;
  /* offset=0x003c flags=0x0010001000000000 */ struct FVector_NetQuantize TraceStart;
  /* offset=0x0048 flags=0x0010001000000000 */ struct FVector_NetQuantize TraceEnd;
  /* offset=0x0054 flags=0x0018001040000200 */ float PenetrationDepth;
  /* offset=0x0058 flags=0x0018001040000200 */ int32 Item;
  /* offset=0x005c flags=0x001c001040000200 */ UPhysicalMaterial* PhysMaterial;
  /* offset=0x0064 flags=0x001c001040000200 */ AActor* Actor;
  /* offset=0x006c flags=0x001c001040080208 */ UPrimitiveComponent* Component;
  /* offset=0x0078 flags=0x0018001040000200 */ FName BoneName;
  /* offset=0x0080 flags=0x0018001040000200 */ int32 FaceIndex;
};

struct FHurtFlow {
  /* offset=0x0000 flags=0x0018000000000200 */ FString GameSvrId;
  /* offset=0x0010 flags=0x0018001040000200 */ int64 dtEventTime;
  /* offset=0x0018 flags=0x0018000000000200 */ FString GameAppID;
  /* offset=0x0024 flags=0x0018000000000200 */ FString OpenID;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 PlatID;
  /* offset=0x0031 flags=0x0018001040000200 */ int8 AreaID;
  /* offset=0x0034 flags=0x0018000000000200 */ FString ZoneID;
  /* offset=0x0040 flags=0x0018001040000200 */ uint64 BattleID;
  /* offset=0x0048 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 MrpcsFlowcount_;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
  /* offset=0x0060 flags=0x0018000000000200 */ FString UserName;
  /* offset=0x0070 flags=0x0018001040000200 */ uint64 RoleID;
  /* offset=0x0078 flags=0x0018001040000200 */ int8 RoleType;
  /* offset=0x007c flags=0x0018000000000200 */ FString EnemyOpenID;
  /* offset=0x0088 flags=0x0018000000000200 */ FString EnemyUserName;
  /* offset=0x0098 flags=0x0018001040000200 */ uint64 EnemyRoleID;
  /* offset=0x00a0 flags=0x0018001040000200 */ int32 EnemyRoleType;
  /* offset=0x00a4 flags=0x0018001040000200 */ uint32 HurtTime;
  /* offset=0x00a8 flags=0x0018001040000200 */ int32 HurtType;
  /* offset=0x00ac flags=0x0018001040000200 */ int32 HitType;
  /* offset=0x00b0 flags=0x0018001040000200 */ int32 DamageStart;
  /* offset=0x00b4 flags=0x0018001040000200 */ int32 DamageReduce;
  /* offset=0x00b8 flags=0x0018001040000200 */ int32 ArmorDef;
  /* offset=0x00bc flags=0x0018001040000200 */ int32 HPstart;
  /* offset=0x00c0 flags=0x0018001040000200 */ int32 HPEnd;
  /* offset=0x00c4 flags=0x0018001040000200 */ int32 ArmorHPStart1;
  /* offset=0x00c8 flags=0x0018001040000200 */ int32 ArmorHPEnd1;
  /* offset=0x00cc flags=0x0018001040000200 */ int32 ArmorHPStart2;
  /* offset=0x00d0 flags=0x0018001040000200 */ int32 ArmorHPEnd2;
  /* offset=0x00d4 flags=0x0018001040000200 */ int32 CarHPStart;
  /* offset=0x00d8 flags=0x0018001040000200 */ int32 CarHPEnd;
  /* offset=0x00dc flags=0x0018001040000200 */ int32 FallHeight;
  /* offset=0x00e0 flags=0x0018001040000200 */ int32 HypoxiaTime;
  /* offset=0x00e4 flags=0x0018001040000200 */ int32 HypoxiaHurtTotal;
  /* offset=0x00e8 flags=0x0018001040000200 */ int32 PlayerKilled;
  /* offset=0x00ec flags=0x0018001040000200 */ int32 ArmorKill;
  /* offset=0x00f0 flags=0x0018001040000200 */ int32 CarKill;
  /* offset=0x00f4 flags=0x0018001040000200 */ int32 IfIsAI;
  /* offset=0x00f8 flags=0x0018001040000200 */ uint32 HurtFlowID;
};

struct FIMSDKNoticeInfo {
  /* offset=0x0000 flags=0x0018000000000215 */ FString msgID;
  /* offset=0x000c flags=0x0018000000000215 */ FString OpenID;
  /* offset=0x0018 flags=0x0018000000000215 */ FString MsgUrl;
  /* offset=0x0024 flags=0x0018001040000215 */ enum EIMSDKNoticeType MsgType;
  /* offset=0x0028 flags=0x0018000000000215 */ FString MsgScene;
  /* offset=0x0034 flags=0x0018000000000215 */ FString StartTime;
  /* offset=0x0040 flags=0x0018000000000215 */ FString endTime;
  /* offset=0x004c flags=0x0018001040000215 */ enum EIMSDKContentType MsgContentType;
  /* offset=0x0050 flags=0x0018000000000215 */ FString MsgOrder;
  /* offset=0x005c flags=0x0018000000000215 */ FString ContentUrl;
  /* offset=0x0068 flags=0x0010000000000215 */ TArray<struct FIMSDKPictureInfomation> PicArray;
  /* offset=0x0074 flags=0x0018000000000215 */ FString MsgTitle;
  /* offset=0x0080 flags=0x0018000000000215 */ FString msgContent;
};

struct FIMSDKPictureInfomation {
  /* offset=0x0000 flags=0x0018001040000215 */ enum EIMSDKScreenDir PicScreenDir;
  /* offset=0x0004 flags=0x0018000000000215 */ FString PicPath;
  /* offset=0x0010 flags=0x0018000000000215 */ FString HashValue;
};

struct FImportFactorySettingValues {
  /* offset=0x0000 flags=0x0018000000004201 */ FString SettingName;
  /* offset=0x000c flags=0x0018000000004201 */ FString Value;
};

struct FImportanceTexture {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FIntPoint Size;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 NumMips;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<float> MarginalCDF;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<float> ConditionalCDF;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<struct FColor> TextureData;
  /* offset=0x0030 flags=0x001c001040000200 */ UTexture2D* Texture;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 Weighting;
};

struct FInAppPurchaseProductInfo {
  /* offset=0x0000 flags=0x0018000000000214 */ FString Identifier;
  /* offset=0x000c flags=0x0018000000000214 */ FString TransactionIdentifier;
  /* offset=0x0018 flags=0x0018000000000214 */ FString DisplayName;
  /* offset=0x0024 flags=0x0018000000000214 */ FString DisplayDescription;
  /* offset=0x0030 flags=0x0018000000000214 */ FString DisplayPrice;
  /* offset=0x003c flags=0x0018001040000214 */ float RawPrice;
  /* offset=0x0040 flags=0x0018000000000214 */ FString CurrencyCode;
  /* offset=0x004c flags=0x0018000000000214 */ FString CurrencySymbol;
  /* offset=0x0058 flags=0x0018000000000214 */ FString DecimalSeparator;
  /* offset=0x0064 flags=0x0018000000000214 */ FString GroupingSeparator;
  /* offset=0x0070 flags=0x0018000000000214 */ FString ReceiptData;
};

struct FInAppPurchaseProductRequest {
  /* offset=0x0000 flags=0x0018000000000204 */ FString ProductIdentifier;
  /* offset=0x000c flags=0x0018001040000204 */ bool bIsConsumable;
};

struct FInAppPurchaseRestoreInfo {
  /* offset=0x0000 flags=0x0018000000000214 */ FString Identifier;
  /* offset=0x000c flags=0x0018000000000214 */ FString ReceiptData;
  /* offset=0x0018 flags=0x0018000000000214 */ FString TransactionIdentifier;
};

struct FInGameChatMsg {
  /* offset=0x0000 flags=0x0018000000000200 */ FString PlayerName;
  /* offset=0x000c flags=0x0018001040000200 */ int32 playerIdentifier;
  /* offset=0x0010 flags=0x0018000000000200 */ FString msgContent;
  /* offset=0x001c flags=0x0018001040000200 */ int32 msgID;
};

struct FIndexedCurve {
  /* offset=0x0004 flags=0x0020080000002000 */ struct FKeyHandleMap KeyHandlesToIndices;
};

struct FIngameFriendChat {
  /* offset=0x0000 flags=0x0010000000000214 */ TArray<struct FIngameFriendChatMsg> ChatList;
};

struct FIngameFriendChatMsg {
  /* offset=0x0000 flags=0x0018000000000214 */ FString Name;
  /* offset=0x000c flags=0x0018000000000214 */ FString content;
  /* offset=0x0018 flags=0x0018001040000214 */ bool isSelf;
  /* offset=0x001c flags=0x0018001040000214 */ int32 MsgType;
  /* offset=0x0020 flags=0x0018001040000214 */ bool bReply;
};

struct FInputActionKeyMapping {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ActionName;
  /* offset=0x0008 flags=0x0018000000000005 */ struct FKey Key;
  /* offset=0x0018 flags=0x0018001000000005 */ uint8 bShift:1;
  /* offset=0x0018 flags=0x0018001000000005 */ uint8 bCtrl:1;
  /* offset=0x0018 flags=0x0018001000000005 */ uint8 bAlt:1;
  /* offset=0x0018 flags=0x0018001000000005 */ uint8 bCmd:1;
};

struct FInputAxisConfigEntry {
  /* offset=0x0000 flags=0x0018001040020201 */ FName AxisKeyName;
  /* offset=0x0008 flags=0x0010001000000001 */ struct FInputAxisProperties AxisProperties;
};

struct FInputAxisKeyMapping {
  /* offset=0x0000 flags=0x0018001040000205 */ FName AxisName;
  /* offset=0x0008 flags=0x0018000000000005 */ struct FKey Key;
  /* offset=0x0018 flags=0x0018001040000205 */ float Scale;
};

struct FInputAxisProperties {
  /* offset=0x0000 flags=0x0018001040000201 */ float DeadZone;
  /* offset=0x0004 flags=0x0018001040000201 */ float Sensitivity;
  /* offset=0x0008 flags=0x0018001040000201 */ float Exponent;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bInvert:1;
};

struct FInputBlendPose {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<struct FBranchFilter> BranchFilters;
};

struct FInputChord {
  /* offset=0x0000 flags=0x0018000000000005 */ struct FKey Key;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bShift:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bCtrl:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bAlt:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bCmd:1;
};

struct FInputEvent {
};

struct FInputScaleBias {
  /* offset=0x0000 flags=0x0018001040000205 */ float Scale;
  /* offset=0x0004 flags=0x0018001040000205 */ float Bias;
};

struct FInstancedStaticMeshInstanceData {
  /* offset=0x0000 flags=0x0010001040000001 */ struct FMatrix Transform;
};

struct FInstancedStaticMeshMappingInfo {
};

struct FInt32Interval {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 Min;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 Max;
};

struct FInt32Range {
  /* offset=0x0000 flags=0x0018000000000005 */ struct FInt32RangeBound LowerBound;
  /* offset=0x0008 flags=0x0018000000000005 */ struct FInt32RangeBound UpperBound;
};

struct FInt32RangeBound {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 Type;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 Value;
};

struct FIntMargin {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 Left;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 Top;
  /* offset=0x0008 flags=0x0018001040000205 */ int32 Right;
  /* offset=0x000c flags=0x0018001040000205 */ int32 Bottom;
};

struct FIntPoint {
  /* offset=0x0000 flags=0x0018001041000205 */ int32 X;
  /* offset=0x0004 flags=0x0018001041000205 */ int32 Y;
};

struct FIntVector {
  /* offset=0x0000 flags=0x0018001041000205 */ int32 X;
  /* offset=0x0004 flags=0x0018001041000205 */ int32 Y;
  /* offset=0x0008 flags=0x0018001041000205 */ int32 Z;
};

struct FIntegralCurve: FIndexedCurve {
  /* offset=0x0040 flags=0x0040000000000201 */ TArray<struct FIntegralKey> Keys;
  /* offset=0x004c flags=0x0048001040000201 */ int32 DefaultValue;
  /* offset=0x0050 flags=0x0048001040000200 */ bool bUseDefaultValueBeforeFirstKey;
};

struct FIntegralKey {
  /* offset=0x0000 flags=0x0018001040000201 */ float Time;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 Value;
};

struct FInteriorSettings {
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bIsWorldSettings:1;
  /* offset=0x0004 flags=0x0018001040000205 */ float ExteriorVolume;
  /* offset=0x0008 flags=0x0018001040000205 */ float ExteriorTime;
  /* offset=0x000c flags=0x0018001040000205 */ float ExteriorLPF;
  /* offset=0x0010 flags=0x0018001040000205 */ float ExteriorLPFTime;
  /* offset=0x0014 flags=0x0018001040000205 */ float InteriorVolume;
  /* offset=0x0018 flags=0x0018001040000205 */ float InteriorTime;
  /* offset=0x001c flags=0x0018001040000205 */ float InteriorLPF;
  /* offset=0x0020 flags=0x0018001040000205 */ float InteriorLPFTime;
};

struct FInterpControlPoint {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector PositionControlPoint;
  /* offset=0x000c flags=0x0018001040000205 */ bool bPositionIsRelative;
};

struct FInterpCurveFloat {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointFloat> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpCurveLinearColor {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointLinearColor> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpCurvePointFloat {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0004 flags=0x0018001040000205 */ float OutVal;
  /* offset=0x0008 flags=0x0018001040000205 */ float ArriveTangent;
  /* offset=0x000c flags=0x0018001040000205 */ float LeaveTangent;
  /* offset=0x0010 flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurvePointLinearColor {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FLinearColor OutVal;
  /* offset=0x0014 flags=0x0018001040000005 */ struct FLinearColor ArriveTangent;
  /* offset=0x0024 flags=0x0018001040000005 */ struct FLinearColor LeaveTangent;
  /* offset=0x0034 flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurvePointQuat {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0010 flags=0x0010001040000005 */ struct FQuat OutVal;
  /* offset=0x0020 flags=0x0010001040000005 */ struct FQuat ArriveTangent;
  /* offset=0x0030 flags=0x0010001040000005 */ struct FQuat LeaveTangent;
  /* offset=0x0040 flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurvePointTwoVectors {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0004 flags=0x0010001040000005 */ struct FTwoVectors OutVal;
  /* offset=0x001c flags=0x0010001040000005 */ struct FTwoVectors ArriveTangent;
  /* offset=0x0034 flags=0x0010001040000005 */ struct FTwoVectors LeaveTangent;
  /* offset=0x004c flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurvePointVector {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector OutVal;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector ArriveTangent;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector LeaveTangent;
  /* offset=0x0028 flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurvePointVector2D {
  /* offset=0x0000 flags=0x0018001040000205 */ float InVal;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector2D OutVal;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector2D ArriveTangent;
  /* offset=0x0014 flags=0x0018001040000005 */ struct FVector2D LeaveTangent;
  /* offset=0x001c flags=0x0018001040000205 */ uint8 InterpMode;
};

struct FInterpCurveQuat {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointQuat> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpCurveTwoVectors {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointTwoVectors> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpCurveVector {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointVector> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpCurveVector2D {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FInterpCurvePointVector2D> Points;
  /* offset=0x000c flags=0x0018001040000205 */ bool bIsLooped;
  /* offset=0x0010 flags=0x0018001040000205 */ float LoopKeyOffset;
};

struct FInterpGroupActorInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ FName ObjectName;
  /* offset=0x0008 flags=0x0010000000000201 */ TArray<AActor*> Actors;
};

struct FInterpLookupPoint {
  /* offset=0x0000 flags=0x0018001040000200 */ FName GroupName;
  /* offset=0x0008 flags=0x0018001040000200 */ float Time;
};

struct FInterpLookupTrack {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FInterpLookupPoint> Points;
};

struct FInterpolationParameter {
  /* offset=0x0000 flags=0x0018001040000201 */ float InterpolationTime;
  /* offset=0x0004 flags=0x0018001040000201 */ uint8 InterpolationType;
};

struct FItemAssociation {
  /* offset=0x0000 flags=0x0018001040010205 */ FName AssociationName;
  /* offset=0x0008 flags=0x0018001000010005 */ struct FItemDefineID AssociationTargetDefineID;
  /* offset=0x0020 flags=0x0048001040000200 */ UItemHandleBase* AssociationTargetHandle;
};

struct FItemClassStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018000000000200 */ FString ItemPath;
  /* offset=0x0010 flags=0x0018001040000200 */ bool bValidPath;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 ItemCount;
  /* offset=0x0018 flags=0x0018000000000200 */ FString ItemTogetherPath;
  /* offset=0x0024 flags=0x0018001040000200 */ int32 ItemTogetherCount;
  /* offset=0x0028 flags=0x0018001040000200 */ bool bValidTogetherPath;
};

struct FItemData {
  /* offset=0x0008 flags=0x0018001000000004 */ struct FItemDefineID DefineID;
  /* offset=0x0020 flags=0x0018000000000204 */ FString Name;
  /* offset=0x002c flags=0x0018000000000204 */ FString Desc;
  /* offset=0x0038 flags=0x0018000000000204 */ FString Icon;
  /* offset=0x0044 flags=0x0048001040000200 */ UItemHandleBase* ItemHandle;
};

struct FItemDefineID {
  /* offset=0x0000 flags=0x0018001040010205 */ int32 Type;
  /* offset=0x0004 flags=0x0018001040010205 */ int32 TypeSpecificID;
  /* offset=0x0008 flags=0x0018001040000214 */ bool bValidItem;
  /* offset=0x0009 flags=0x0018001040000214 */ bool bValidInstance;
  /* offset=0x0010 flags=0x0048001040000200 */ uint64 InstanceID;
};

struct FItemGenerateSpawnClass {
  /* offset=0x0000 flags=0x0018001040000205 */ UClass<UObject>* ItemClass;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 ItemCount;
};

struct FItemGenerateSpawnData {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 KeyID;
  /* offset=0x0004 flags=0x0018000000000205 */ FString ItemValue;
  /* offset=0x0010 flags=0x0018000000000205 */ FString ItemCategory;
  /* offset=0x001c flags=0x0018001040000205 */ int32 ItemWeight;
  /* offset=0x0020 flags=0x0018000000000205 */ FString ItemPath;
  /* offset=0x002c flags=0x0018001040000205 */ int32 ItemStackCount;
  /* offset=0x0030 flags=0x0018000000000205 */ FString ItemTogetherPath;
  /* offset=0x003c flags=0x0018001040000205 */ int32 ItemTogetherStackCount;
  /* offset=0x0040 flags=0x0018001040000205 */ int32 ItemTogetherCountMin;
  /* offset=0x0044 flags=0x0018001040000205 */ int32 ItemTogetherCountMax;
};

struct FItemGenerateSpawnDataArray {
  /* offset=0x0000 flags=0x0018000000000205 */ FString ValueCatetory;
  /* offset=0x000c flags=0x0010000000000205 */ TArray<struct FItemGenerateSpawnData> AllGenerateSpawnDatas;
};

struct FItemGenerateStatisticsData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 AllGroupSpotCount;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 AllValidGroupSpotCount;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 AllSpotCount;
  /* offset=0x000c flags=0x0018001040000200 */ int32 AllValidSpotCount;
  /* offset=0x0010 flags=0x0010000000000200 */ TMap<uint8, struct FItemGroupStatisticsData> GroupStatisticsData;
  /* offset=0x004c flags=0x0010000000000200 */ TMap<FString, struct FBuildingStatisticsData> BuildingStatisticsData;
  /* offset=0x0088 flags=0x0010000000000200 */ TMap<FString, struct FItemClassStatisticsData> ItemStatisticsData;
};

struct FItemGroupStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018001040000200 */ uint8 SpotGroupType;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 AllGroupSpotCount;
  /* offset=0x000c flags=0x0018001040000200 */ int32 AllValidGroupSpotCount;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 AllSpotCount;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 AllValidSpotCount;
};

struct FItemSpawnClass {
  /* offset=0x0000 flags=0x0018001040000205 */ UClass<UObject>* ItemClass;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 ItemCount;
};

struct FItemSpawnData {
  /* offset=0x0000 flags=0x0018001040000205 */ FName RowName;
  /* offset=0x0008 flags=0x0018001040000205 */ int32 KeyID;
  /* offset=0x000c flags=0x0018000000000205 */ FString ItemValue;
  /* offset=0x0018 flags=0x0018000000000205 */ FString ItemCategory;
  /* offset=0x0024 flags=0x0018001040000205 */ int32 ItemWeight;
  /* offset=0x0028 flags=0x0018000000000205 */ FString ItemPath;
  /* offset=0x0034 flags=0x0018001040000205 */ int32 ItemStackCount;
  /* offset=0x0038 flags=0x0018000000000205 */ FString ItemTogetherPath;
  /* offset=0x0044 flags=0x0018001040000205 */ int32 ItemTogetherStackCount;
  /* offset=0x0048 flags=0x0018001040000205 */ int32 ItemTogetherCountMin;
  /* offset=0x004c flags=0x0018001040000205 */ int32 ItemTogetherCountMax;
};

struct FItemSpotStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018001040000200 */ uint8 SpotType;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 AllSpotCount;
  /* offset=0x000c flags=0x0018001040000200 */ int32 AllValidSpotCount;
};

struct FJavaSurfaceViewDevice {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Manufacturer;
  /* offset=0x000c flags=0x0018000000000200 */ FString Model;
};

struct FKAggregateGeom {
  /* offset=0x0000 flags=0x0010000000000241 */ TArray<struct FKSphereElem> SphereElems;
  /* offset=0x000c flags=0x0010000000000241 */ TArray<struct FKBoxElem> BoxElems;
  /* offset=0x0018 flags=0x0010000000000241 */ TArray<struct FKSphylElem> SphylElems;
  /* offset=0x0024 flags=0x0010000000020241 */ TArray<struct FKConvexElem> ConvexElems;
};

struct FKBoxElem: FKShapeElem {
  /* offset=0x0010 flags=0x0010001060000000 */ struct FMatrix TM;
  /* offset=0x0050 flags=0x0010001060000000 */ struct FQuat Orientation;
  /* offset=0x0060 flags=0x0018001040000001 */ struct FVector Center;
  /* offset=0x006c flags=0x0010001040000001 */ struct FRotator Rotation;
  /* offset=0x0078 flags=0x0018001040000201 */ float X;
  /* offset=0x007c flags=0x0018001040000201 */ float Y;
  /* offset=0x0080 flags=0x0018001040000201 */ float Z;
};

struct FKConvexElem: FKShapeElem {
  /* offset=0x0010 flags=0x0010000000000200 */ TArray<struct FVector> VertexData;
  /* offset=0x001c flags=0x0010001040000000 */ struct FBox ElemBox;
  /* offset=0x0040 flags=0x0040001040000000 */ struct FTransform Transform;
};

struct FKShapeElem {
};

struct FKSphereElem: FKShapeElem {
  /* offset=0x0010 flags=0x0010001060000000 */ struct FMatrix TM;
  /* offset=0x0050 flags=0x0018001040000001 */ struct FVector Center;
  /* offset=0x005c flags=0x0018001040000201 */ float Radius;
};

struct FKSphylElem: FKShapeElem {
  /* offset=0x0010 flags=0x0010001060000000 */ struct FMatrix TM;
  /* offset=0x0050 flags=0x0010001060000000 */ struct FQuat Orientation;
  /* offset=0x0060 flags=0x0018001040000001 */ struct FVector Center;
  /* offset=0x006c flags=0x0010001040000001 */ struct FRotator Rotation;
  /* offset=0x0078 flags=0x0018001040000201 */ float Radius;
  /* offset=0x007c flags=0x0018001040000201 */ float Length;
};

struct FKey {
  /* offset=0x0000 flags=0x0048001040000200 */ FName KeyName;
};

struct FKeyBind {
  /* offset=0x0000 flags=0x0018000000004000 */ struct FKey Key;
  /* offset=0x0010 flags=0x0018000000004200 */ FString Command;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 Control:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 Shift:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 Alt:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 Cmd:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 bIgnoreCtrl:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 bIgnoreShift:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 bIgnoreAlt:1;
  /* offset=0x001c flags=0x0018001000004000 */ uint8 bIgnoreCmd:1;
  /* offset=0x001d flags=0x0018001000002000 */ uint8 bDisabled:1;
};

struct FKeyEvent: FInputEvent {
};

struct FKeyHandleMap {
};

struct FKillOrPutDownMessage {
  /* offset=0x0000 flags=0x0018001040000214 */ uint8 MsgType;
  /* offset=0x0004 flags=0x0018000000000214 */ FString UserName;
  /* offset=0x0010 flags=0x0018000000000214 */ FString ByString;
  /* offset=0x001c flags=0x0018000000000214 */ FString Name1;
  /* offset=0x0028 flags=0x0018000000000214 */ FString AttackActionName;
  /* offset=0x0034 flags=0x0018000000000214 */ FString AttackName;
  /* offset=0x0040 flags=0x0018001040000214 */ bool bIsHeadShot;
  /* offset=0x0044 flags=0x0018000000000214 */ FString HeadShotString;
  /* offset=0x0050 flags=0x0018000000000214 */ FString ByString2;
  /* offset=0x005c flags=0x0018000000000214 */ FString PutDownOrKillString;
  /* offset=0x0068 flags=0x0018000000000214 */ FString PutDownOrKillString2;
  /* offset=0x0074 flags=0x0018000000000214 */ FString Name2;
  /* offset=0x0080 flags=0x0018001040000214 */ int32 KillNum;
  /* offset=0x0084 flags=0x0018001040000214 */ bool bShowKillNum;
  /* offset=0x0088 flags=0x0018000000000214 */ FString FullMsg;
};

struct FKilledTipsBlock {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 DamageType;
  /* offset=0x0004 flags=0x0018000000000205 */ FString attackerName;
  /* offset=0x0010 flags=0x0018000000000205 */ FString WeaponName;
  /* offset=0x001c flags=0x0018000000000205 */ FString DeadName;
};

struct FLODSoloTrack {
  /* offset=0x0000 flags=0x0010000000002200 */ TArray<uint8> SoloEnableSetting;
};

struct FLandscapeSplineConnection {
  /* offset=0x0000 flags=0x0018001040000200 */ ULandscapeSplineSegment* Segment;
  /* offset=0x0004 flags=0x0018001000000000 */ uint8 End:1;
};

struct FLandscapeSplineInterpPoint {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector Center;
  /* offset=0x000c flags=0x0018001040000000 */ struct FVector Left;
  /* offset=0x0018 flags=0x0018001040000000 */ struct FVector Right;
  /* offset=0x0024 flags=0x0018001040000000 */ struct FVector FalloffLeft;
  /* offset=0x0030 flags=0x0018001040000000 */ struct FVector FalloffRight;
  /* offset=0x003c flags=0x0018001040000200 */ float StartEndFalloff;
};

struct FLandscapeSplineSegmentConnection {
  /* offset=0x0000 flags=0x0018001040000200 */ ULandscapeSplineControlPoint* ControlPoint;
  /* offset=0x0004 flags=0x0018001040000201 */ float TangentLen;
  /* offset=0x0008 flags=0x0018001040000201 */ FName SocketName;
};

struct FLatentActionInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 Linkage;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 UUID;
  /* offset=0x0008 flags=0x0018001040000200 */ FName ExecutionFunction;
  /* offset=0x0010 flags=0x0018001040000200 */ UObject* CallbackTarget;
};

struct FLaunchOnTestSettings {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FFilePath LaunchOnTestmap;
  /* offset=0x000c flags=0x0018000000004201 */ FString DeviceID;
};

struct FLayerActorStats {
  /* offset=0x0000 flags=0x0018001040000200 */ UClass<UObject>* Type;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 Total;
};

struct FLayerBlendInput {
  /* offset=0x0000 flags=0x0018001040000201 */ FName LayerName;
  /* offset=0x0008 flags=0x0018001040000201 */ uint8 BlendType;
  /* offset=0x0010 flags=0x0010000000000000 */ struct FExpressionInput LayerInput;
  /* offset=0x0040 flags=0x0010000000000000 */ struct FExpressionInput HeightInput;
  /* offset=0x0070 flags=0x0018001040000201 */ float PreviewWeight;
  /* offset=0x0074 flags=0x0018001040000001 */ struct FVector ConstLayerInput;
  /* offset=0x0080 flags=0x0018001040000201 */ float ConstHeightInput;
};

struct FLevelCollection {
  /* offset=0x0004 flags=0x0048001040000200 */ AGameStateBase* GameState;
  /* offset=0x0008 flags=0x0048001040000200 */ UNetDriver* NetDriver;
  /* offset=0x000c flags=0x0048001040000200 */ UDemoNetDriver* DemoNetDriver;
  /* offset=0x0010 flags=0x0048001040000200 */ ULevel* PersistentLevel;
  /* offset=0x0014 flags=0x0040000000000200 */ TSet<ULevel*> Levels;
};

struct FLevelSequenceBindingReference {
  /* offset=0x0000 flags=0x0048000020000200 */ FString PackageName;
  /* offset=0x0010 flags=0x0048000000000000 */ struct FSoftObjectPath ExternalObjectPath;
  /* offset=0x0028 flags=0x0048000000000200 */ FString ObjectPath;
};

struct FLevelSequenceBindingReferenceArray {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FLevelSequenceBindingReference> References;
};

struct FLevelSequenceBindingReferences {
  /* offset=0x0000 flags=0x0040000000000200 */ TMap<struct FGuid, struct FLevelSequenceBindingReferenceArray> BindingIdToReferences;
};

struct FLevelSequenceObject {
  /* offset=0x0000 flags=0x004c001040000000 */ UObject* ObjectOrOwner;
  /* offset=0x001c flags=0x0048000000000200 */ FString ComponentName;
  /* offset=0x0028 flags=0x004c001040002200 */ UObject* CachedComponent;
};

struct FLevelSequenceObjectReferenceMap {
};

struct FLevelSequencePlayerSnapshot {
  /* offset=0x0000 flags=0x0010000000020015 */ FText MasterName;
  /* offset=0x000c flags=0x0018001040020215 */ float MasterTime;
  /* offset=0x0010 flags=0x0010000000020015 */ FText CurrentShotName;
  /* offset=0x001c flags=0x0018001040020215 */ float CurrentShotLocalTime;
  /* offset=0x0020 flags=0x00180010400a021d */ UCameraComponent* CameraComponent;
  /* offset=0x0024 flags=0x0010001000020015 */ struct FLevelSequenceSnapshotSettings Settings;
  /* offset=0x002c flags=0x0018001000000000 */ struct FMovieSceneSequenceID ShotID;
};

struct FLevelSequenceSnapshotSettings {
  /* offset=0x0000 flags=0x0018001040020215 */ uint8 ZeroPadAmount;
  /* offset=0x0004 flags=0x0018001040020215 */ float FrameRate;
};

struct FLightingChannels {
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bChannel0:1;
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bChannel1:1;
  /* offset=0x0000 flags=0x0018001000000015 */ uint8 bChannel2:1;
};

struct FLightmassDirectionalLightSettings: FLightmassLightSettings {
  /* offset=0x000c flags=0x0018001040000201 */ float LightSourceAngle;
};

struct FLightmassLightSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ float IndirectLightingSaturation;
  /* offset=0x0004 flags=0x0018001040000201 */ float ShadowExponent;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bUseAreaShadowsForStationaryLight;
};

struct FLightmassMaterialInterfaceSettings {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bCastShadowAsMasked:1;
  /* offset=0x0004 flags=0x0018001040000200 */ float EmissiveBoost;
  /* offset=0x0008 flags=0x0018001040000201 */ float DiffuseBoost;
  /* offset=0x000c flags=0x0018001040000201 */ float ExportResolutionScale;
  /* offset=0x0010 flags=0x0018001000000000 */ uint8 bOverrideCastShadowAsMasked:1;
  /* offset=0x0010 flags=0x0018001000000000 */ uint8 bOverrideEmissiveBoost:1;
  /* offset=0x0010 flags=0x0018001000000000 */ uint8 bOverrideDiffuseBoost:1;
  /* offset=0x0010 flags=0x0018001000000000 */ uint8 bOverrideExportResolutionScale:1;
};

struct FLightmassPointLightSettings: FLightmassLightSettings {
};

struct FLightmassPrimitiveSettings {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bUseTwoSidedLighting:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bShadowIndirectOnly:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bUseEmissiveForStaticLighting:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bUseVertexNormalForHemisphereGather:1;
  /* offset=0x0004 flags=0x0018001040000200 */ float EmissiveLightFalloffExponent;
  /* offset=0x0008 flags=0x0018001040000200 */ float EmissiveLightExplicitInfluenceRadius;
  /* offset=0x000c flags=0x0018001040000201 */ float EmissiveBoost;
  /* offset=0x0010 flags=0x0018001040000201 */ float DiffuseBoost;
  /* offset=0x0014 flags=0x0018001040000201 */ float FullyOccludedSamplesFraction;
};

struct FLightmassWorldInfoSettings {
  /* offset=0x0000 flags=0x0018041040000201 */ float StaticLightingLevelScale;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 NumIndirectLightingBounces;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 NumSkyLightingBounces;
  /* offset=0x000c flags=0x0018041040000201 */ float IndirectLightingQuality;
  /* offset=0x0010 flags=0x0018041040000201 */ float IndirectLightingSmoothness;
  /* offset=0x0014 flags=0x0018001040000001 */ struct FColor EnvironmentColor;
  /* offset=0x0018 flags=0x0018001040000201 */ float EnvironmentIntensity;
  /* offset=0x001c flags=0x0018001040000200 */ float EmissiveBoost;
  /* offset=0x0020 flags=0x0018001040000201 */ float DiffuseBoost;
  /* offset=0x0024 flags=0x0018001040000201 */ uint8 VolumeLightingMethod;
  /* offset=0x0028 flags=0x0018001040000201 */ float VolumetricLightmapDetailCellSize;
  /* offset=0x002c flags=0x0018001040000201 */ float VolumetricLightmapMaximumBrickMemoryMb;
  /* offset=0x0030 flags=0x0018041040000201 */ float VolumeLightSamplePlacementScale;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bUseAmbientOcclusion:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bGenerateAmbientOcclusionMaterialMask:1;
  /* offset=0x0038 flags=0x0018001040000201 */ float DirectIlluminationOcclusionFraction;
  /* offset=0x003c flags=0x0018001040000201 */ float IndirectIlluminationOcclusionFraction;
  /* offset=0x0040 flags=0x0018001040000201 */ float OcclusionExponent;
  /* offset=0x0044 flags=0x0018001040000201 */ float FullyOccludedSamplesFraction;
  /* offset=0x0048 flags=0x0018001040000201 */ float MaxOcclusionDistance;
  /* offset=0x004c flags=0x0018041000000001 */ uint8 bVisualizeMaterialDiffuse:1;
  /* offset=0x004c flags=0x0018041000000001 */ uint8 bVisualizeAmbientOcclusion:1;
  /* offset=0x004c flags=0x0018041000000001 */ uint8 bCompressLightmaps:1;
};

struct FLinearColor {
  /* offset=0x0000 flags=0x0018001041000205 */ float R;
  /* offset=0x0004 flags=0x0018001041000205 */ float G;
  /* offset=0x0008 flags=0x0018001041000205 */ float B;
  /* offset=0x000c flags=0x0018001041000205 */ float A;
};

struct FLinearConstraint: FConstraintBaseParams {
  /* offset=0x0014 flags=0x0018001040000201 */ float Limit;
  /* offset=0x0018 flags=0x0018001040000201 */ uint8 XMotion;
  /* offset=0x0019 flags=0x0018001040000201 */ uint8 YMotion;
  /* offset=0x001a flags=0x0018001040000201 */ uint8 ZMotion;
};

struct FLinearDriveConstraint {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector PositionTarget;
  /* offset=0x000c flags=0x0018001040000001 */ struct FVector VelocityTarget;
  /* offset=0x0018 flags=0x0010001000000001 */ struct FConstraintDrive XDrive;
  /* offset=0x0028 flags=0x0010001000000001 */ struct FConstraintDrive YDrive;
  /* offset=0x0038 flags=0x0010001000000001 */ struct FConstraintDrive ZDrive;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bEnablePositionDrive:1;
};

struct FLocalShootHitData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 ShootID;
  /* offset=0x0004 flags=0x0010001000000000 */ struct FVector_NetQuantize ShootingDeviation;
  /* offset=0x0010 flags=0x0010001000000000 */ struct FVector_NetQuantize BulletsBornPosition;
  /* offset=0x001c flags=0x0018001040000200 */ int32 BulletFlyDistance;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 BulletDown;
  /* offset=0x0024 flags=0x0018001040000200 */ int8 CurBullet;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 ShootInterval;
  /* offset=0x002c flags=0x0018001040000200 */ int32 BulletFlyTime;
  /* offset=0x0030 flags=0x0018001040000200 */ int32 BulletShootTime;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 BulletHitTime;
  /* offset=0x0038 flags=0x0018001040000200 */ int32 AimFov;
  /* offset=0x003c flags=0x0018001040000200 */ uint8 bulletDamageReduceRatio;
  /* offset=0x0040 flags=0x0010001000000000 */ struct FVector_NetQuantize ShootingRecoil;
  /* offset=0x0050 flags=0x0018001040000200 */ int64 ClientStartTime;
  /* offset=0x0058 flags=0x0010000000000200 */ TArray<int32> MrpcsFlow;
};

struct FLocalizedSubtitle {
  /* offset=0x0000 flags=0x0018000000000200 */ FString LanguageExt;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FSubtitleCue> Subtitles;
  /* offset=0x0018 flags=0x0018001000000000 */ uint8 bMature:1;
  /* offset=0x0018 flags=0x0018001000000000 */ uint8 bManualWordWrap:1;
  /* offset=0x0018 flags=0x0018001000000000 */ uint8 bSingleLine:1;
};

struct FLocationBoneSocketInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ FName BoneSocketName;
  /* offset=0x0008 flags=0x0018001040000001 */ struct FVector Offset;
};

struct FMRMeshConfiguration {
};

struct FMapRealTimeInfo {
  /* offset=0x0000 flags=0x0018001040000014 */ struct FVector MapCenterToPlayer;
  /* offset=0x000c flags=0x0018001040000014 */ struct FVector MapCenterToBlueCircle;
  /* offset=0x0018 flags=0x0018001040000014 */ struct FVector MapCenterToWhiteCircle;
  /* offset=0x0024 flags=0x0018001040000014 */ struct FVector2D PlayerCoord;
  /* offset=0x002c flags=0x0018001040000014 */ struct FVector2D WhiteCircleCoord;
  /* offset=0x0034 flags=0x0018001040000014 */ struct FVector2D BlueCircleCoord;
  /* offset=0x003c flags=0x0018001040000214 */ float WhiteCircleRadius;
  /* offset=0x0040 flags=0x0018001040000214 */ float BlueCircleRadius;
};

struct FMargin {
  /* offset=0x0000 flags=0x0018001040000205 */ float Left;
  /* offset=0x0004 flags=0x0018001040000205 */ float Top;
  /* offset=0x0008 flags=0x0018001040000205 */ float Right;
  /* offset=0x000c flags=0x0018001040000205 */ float Bottom;
};

struct FMarkerMil {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FGuid Guid;
  /* offset=0x0010 flags=0x0018001040000200 */ FName MarkerName;
  /* offset=0x0018 flags=0x0010001000000000 */ FName BaseName;
  /* offset=0x0030 flags=0x0018001040000200 */ struct FVector2D Radius;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 Checksum;
};

struct FMarkerSyncAnimPosition {
  /* offset=0x0000 flags=0x0018001040000200 */ FName PreviousMarkerName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName NextMarkerName;
  /* offset=0x0010 flags=0x0018001040000200 */ float PositionBetweenMarkers;
};

struct FMarkerSyncData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FAnimSyncMarker> AuthoredSyncMarkers;
};

struct FMaterialAttributesInput: FExpressionInput {
  /* offset=0x0030 flags=0x0018001040002200 */ int32 PropertyConnectedBitmask;
};

struct FMaterialEditorPromotionSettings {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FFilePath DefaultMaterialAsset;
  /* offset=0x000c flags=0x0010000000000001 */ struct FFilePath DefaultDiffuseTexture;
  /* offset=0x0018 flags=0x0010000000000001 */ struct FFilePath DefaultNormalTexture;
};

struct FMaterialFunctionInfo {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FGuid stateID;
  /* offset=0x0010 flags=0x0018001040000200 */ UMaterialFunction* Function;
};

struct FMaterialInput {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 OutputIndex;
  /* offset=0x0004 flags=0x0018000000000200 */ FString InputName;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 Mask;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 MaskR;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 MaskG;
  /* offset=0x001c flags=0x0018001040000200 */ int32 MaskB;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 MaskA;
  /* offset=0x0028 flags=0x0018001040000200 */ FName ExpressionName;
};

struct FMaterialInstanceBasePropertyOverrides {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bOverride_OpacityMaskClipValue;
  /* offset=0x0001 flags=0x0018001040000201 */ bool bOverride_BlendMode;
  /* offset=0x0002 flags=0x0018001040000201 */ bool bOverride_ShadingModel;
  /* offset=0x0003 flags=0x0018001040000201 */ bool bOverride_DitheredLODTransition;
  /* offset=0x0004 flags=0x0018001040000201 */ bool bOverride_CastDynamicShadowAsMasked;
  /* offset=0x0005 flags=0x0018001040000201 */ bool bOverride_TwoSided;
  /* offset=0x0008 flags=0x0018001040000201 */ float OpacityMaskClipValue;
  /* offset=0x000c flags=0x0018001040000201 */ uint8 BlendMode;
  /* offset=0x000d flags=0x0018001040000201 */ uint8 ShadingModel;
  /* offset=0x000e flags=0x0018001000000001 */ uint8 TwoSided:1;
  /* offset=0x000e flags=0x0018001000000001 */ uint8 DitheredLODTransition:1;
  /* offset=0x000e flags=0x0018001000000001 */ uint8 bCastDynamicShadowAsMasked:1;
};

struct FMaterialParameterCollectionInfo {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FGuid stateID;
  /* offset=0x0010 flags=0x0018001040000200 */ UMaterialParameterCollection* ParameterCollection;
};

struct FMaterialProxySettings {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FIntPoint TextureSize;
  /* offset=0x0008 flags=0x0018001040000205 */ uint8 TextureSizingType;
  /* offset=0x000c flags=0x0018041040000205 */ float GutterSpace;
  /* offset=0x0010 flags=0x0018041040000201 */ enum EMaterialProxySmaplingQuality SamplingQuality;
  /* offset=0x0011 flags=0x0018041040000201 */ enum EUVStrech UVStrech;
  /* offset=0x0012 flags=0x0018001040000200 */ bool bSplitProxyMaterialBasedOnType;
  /* offset=0x0013 flags=0x0018001040000201 */ bool bUseTangentSpace;
  /* offset=0x0014 flags=0x0018001040000205 */ bool bNormalMap;
  /* offset=0x0015 flags=0x0018001040000205 */ bool bMetallicMap;
  /* offset=0x0018 flags=0x0018001040000205 */ float MetallicConstant;
  /* offset=0x001c flags=0x0018001040000205 */ bool bRoughnessMap;
  /* offset=0x0020 flags=0x0018001040000205 */ float RoughnessConstant;
  /* offset=0x0024 flags=0x0018001040000205 */ bool bSpecularMap;
  /* offset=0x0028 flags=0x0018001040000205 */ float SpecularConstant;
  /* offset=0x002c flags=0x0018001040000205 */ bool bEmissiveMap;
  /* offset=0x002d flags=0x0018001040000205 */ bool bOpacityMap;
  /* offset=0x0030 flags=0x0018001040000205 */ float OpacityConstant;
  /* offset=0x0034 flags=0x0018001060000200 */ float AOConstant;
  /* offset=0x0038 flags=0x0018001040000205 */ bool bOpacityMaskMap;
  /* offset=0x003c flags=0x0018001040000205 */ float OpacityMaskConstant;
  /* offset=0x0040 flags=0x0018001040000205 */ bool bAmbientOcclusionMap;
  /* offset=0x0044 flags=0x0018001040000205 */ float AmbientOcclusionConstant;
  /* offset=0x0048 flags=0x0018041040000005 */ struct FIntPoint DiffuseTextureSize;
  /* offset=0x0050 flags=0x0018041040000005 */ struct FIntPoint NormalTextureSize;
  /* offset=0x0058 flags=0x0018041040000005 */ struct FIntPoint MetallicTextureSize;
  /* offset=0x0060 flags=0x0018041040000005 */ struct FIntPoint RoughnessTextureSize;
  /* offset=0x0068 flags=0x0018041040000005 */ struct FIntPoint SpecularTextureSize;
  /* offset=0x0070 flags=0x0018041040000005 */ struct FIntPoint EmissiveTextureSize;
  /* offset=0x0078 flags=0x0018041040000005 */ struct FIntPoint OpacityTextureSize;
  /* offset=0x0080 flags=0x0018041040000001 */ struct FIntPoint OpacityMaskTextureSize;
  /* offset=0x0088 flags=0x0018041040000005 */ struct FIntPoint AmbientOcclusionTextureSize;
  /* offset=0x0090 flags=0x0018001040000200 */ uint8 MaterialMergeType;
  /* offset=0x0091 flags=0x0018041040000205 */ uint8 BlendMode;
};

struct FMaterialQualityOverrides {
  /* offset=0x0000 flags=0x0018001040004201 */ bool bEnableOverride;
  /* offset=0x0001 flags=0x0018001040004201 */ bool bForceFullyRough;
  /* offset=0x0002 flags=0x0018001040004201 */ bool bForceNonMetal;
  /* offset=0x0003 flags=0x0018001040004201 */ bool bForceDisableLMDirectionality;
  /* offset=0x0004 flags=0x0018001040004201 */ bool bForceLQReflections;
  /* offset=0x0005 flags=0x0018001040004201 */ enum EMobileCSMQuality MobileCSMQuality;
};

struct FMaterialSpriteElement {
  /* offset=0x0000 flags=0x0018001040000205 */ UMaterialInterface* Material;
  /* offset=0x0004 flags=0x0018001040000205 */ UCurveFloat* DistanceToOpacityCurve;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bSizeIsInScreenSpace:1;
  /* offset=0x000c flags=0x0018001040000205 */ float BaseSizeX;
  /* offset=0x0010 flags=0x0018001040000205 */ float BaseSizeY;
  /* offset=0x0014 flags=0x0018001040000205 */ UCurveFloat* DistanceToSizeCurve;
};

struct FMaterialTextureInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ float SamplingScale;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 UVChannelIndex;
  /* offset=0x0008 flags=0x0018001040000200 */ FName TextureName;
};

struct FMatrix {
  /* offset=0x0000 flags=0x0010001041000005 */ struct FPlane XPlane;
  /* offset=0x0010 flags=0x0010001041000005 */ struct FPlane YPlane;
  /* offset=0x0020 flags=0x0010001041000005 */ struct FPlane ZPlane;
  /* offset=0x0030 flags=0x0010001041000005 */ struct FPlane WPlane;
};

struct FMediaCaptureDevice {
  /* offset=0x0000 flags=0x0010000000002014 */ FText DisplayName;
  /* offset=0x000c flags=0x0018000000002214 */ FString URL;
};

struct FMediaPlaneParameters {
  /* offset=0x0000 flags=0x0018041040000205 */ UMaterialInterface* Material;
  /* offset=0x0008 flags=0x0018041040000205 */ FName TextureParameterName;
  /* offset=0x0010 flags=0x0018001040000205 */ bool bFillScreen;
  /* offset=0x0014 flags=0x0018001040000005 */ struct FVector2D FillScreenAmount;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector2D FixedSize;
  /* offset=0x0024 flags=0x0018001040002214 */ UTexture* RenderTexture;
  /* offset=0x0028 flags=0x0018001040002200 */ UMaterialInstanceDynamic* DynamicMaterial;
};

struct FMeleeDamageEvent: FSTPointDamageEvent {
};

struct FMemBTResultData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Name;
  /* offset=0x000c flags=0x0018001040000200 */ uint32 Kill;
  /* offset=0x0010 flags=0x0018000000000200 */ FString State;
  /* offset=0x001c flags=0x0018001040000200 */ float travelDistance;
  /* offset=0x0020 flags=0x0018001040000200 */ float DamageAmount;
  /* offset=0x0024 flags=0x0018001040000200 */ float surviveTime;
  /* offset=0x0028 flags=0x0018001040000200 */ uint32 AssistNum;
  /* offset=0x002c flags=0x0018001040000200 */ uint32 HeadShotNum;
  /* offset=0x0030 flags=0x0018001040000200 */ uint32 rescueTimes;
  /* offset=0x0034 flags=0x0018001040000200 */ float HealAmount;
  /* offset=0x0038 flags=0x0018001040000200 */ uint64 UID;
  /* offset=0x0040 flags=0x0018001040000200 */ int8 ShouldShowAddFriendBtn;
};

struct FMeshData {
  /* offset=0x0000 flags=0x0018001040002205 */ UStaticMesh* stMesh;
  /* offset=0x0004 flags=0x0018001040002205 */ USkeletalMesh* skMesh;
  /* offset=0x0008 flags=0x0018001040002205 */ UMaterialInstance* matIns;
  /* offset=0x000c flags=0x0018001040002205 */ enum EMeshType meshType;
  /* offset=0x0010 flags=0x0010000000002205 */ TArray<int32> hiddenSlots;
  /* offset=0x0020 flags=0x0018001000002005 */ struct FItemDefineID definedID;
};

struct FMeshPackage {
  /* offset=0x0000 flags=0x001c000000000005 */ UStaticMesh* maleStMesh;
  /* offset=0x0028 flags=0x001c000000000005 */ UStaticMesh* femaleStMesh;
  /* offset=0x0050 flags=0x001c000000000005 */ USkeletalMesh* maleSkMesh;
  /* offset=0x0078 flags=0x001c000000000005 */ USkeletalMesh* femaleSkMesh;
  /* offset=0x00a0 flags=0x001c000000000005 */ USkeletalMesh* maleLODSkMesh;
  /* offset=0x00c8 flags=0x001c000000000005 */ USkeletalMesh* femaleLODSkMesh;
  /* offset=0x00f0 flags=0x001c000000000005 */ UMaterialInterface* maleMat;
  /* offset=0x0118 flags=0x001c000000000005 */ UMaterialInterface* femaleMat;
  /* offset=0x0140 flags=0x0018001040000205 */ UMaterialInterface* baseMat;
  /* offset=0x0144 flags=0x001c001040000205 */ UClass<UAnimInstance>* animBP;
  /* offset=0x0148 flags=0x0010000000000205 */ TArray<enum EAvatarSlotType> hiddenFlags;
  /* offset=0x0154 flags=0x0018001040000204 */ enum EMeshType meshType;
};

struct FMeshProxySettings {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 ScreenSize;
  /* offset=0x0004 flags=0x0010001000000001 */ struct FMaterialProxySettings MaterialSettings;
  /* offset=0x0098 flags=0x0018001060000200 */ int32 TextureWidth;
  /* offset=0x009c flags=0x0018001060000200 */ int32 TextureHeight;
  /* offset=0x00a0 flags=0x0018001060000200 */ bool bExportNormalMap;
  /* offset=0x00a1 flags=0x0018001060000200 */ bool bExportMetallicMap;
  /* offset=0x00a2 flags=0x0018001060000200 */ bool bExportRoughnessMap;
  /* offset=0x00a3 flags=0x0018001060000200 */ bool bExportSpecularMap;
  /* offset=0x00a4 flags=0x0018001040000201 */ bool bCalculateCorrectLODModel;
  /* offset=0x00a8 flags=0x0018001040000201 */ float MergeDistance;
  /* offset=0x00ac flags=0x0018001040000201 */ float HardAngleThreshold;
  /* offset=0x00b0 flags=0x0018001040000201 */ int32 LightMapResolution;
  /* offset=0x00b4 flags=0x0018001040000201 */ bool bComputeLightMapResolution;
  /* offset=0x00b5 flags=0x0018001040000201 */ bool bRecalculateNormals;
  /* offset=0x00b6 flags=0x0018001060000200 */ bool bBakeVertexData;
  /* offset=0x00b7 flags=0x0018001040000201 */ bool bUseLandscapeCulling;
  /* offset=0x00b8 flags=0x0018001040000201 */ uint8 LandscapeCullingPrecision;
  /* offset=0x00b9 flags=0x0018001040000201 */ bool bAssignLODGroup;
  /* offset=0x00bc flags=0x0018001040000201 */ int32 LODGroupIndex;
  /* offset=0x00c0 flags=0x0018001040000201 */ bool bAggregateMeshes;
  /* offset=0x00c1 flags=0x0018001040000201 */ enum EChartAggregationMode AggregatorMode;
  /* offset=0x00c2 flags=0x0018001040000201 */ bool bUseCustomHemisphere;
};

struct FMeshSynData {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FItemDefineID DefineID;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 gender;
  /* offset=0x001c flags=0x0018001040000200 */ enum ESyncOperation operationType;
};

struct FMeshUVChannelInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bInitialized;
  /* offset=0x0001 flags=0x0018041040000201 */ bool bOverrideDensities;
  /* offset=0x0004 flags=0x0018041040000201 */ float LocalUVDensities;
};

struct FMiniItem {
  /* offset=0x0000 flags=0x0018001040010205 */ int32 Type;
  /* offset=0x0004 flags=0x0018001040010205 */ int32 TypeSpecificID;
};

struct FMinimalViewInfo {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector Location;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector LocationLocalSpace;
  /* offset=0x0018 flags=0x0010001040000005 */ struct FRotator Rotation;
  /* offset=0x0024 flags=0x0018001040000205 */ float FOV;
  /* offset=0x0028 flags=0x0018001040000205 */ float OrthoWidth;
  /* offset=0x002c flags=0x0018001240000205 */ float OrthoNearClipPlane;
  /* offset=0x0030 flags=0x0018001240000205 */ float OrthoFarClipPlane;
  /* offset=0x0034 flags=0x0018001040000205 */ float AspectRatio;
  /* offset=0x0038 flags=0x0018001000000005 */ uint8 bConstrainAspectRatio:1;
  /* offset=0x0038 flags=0x0018041000000005 */ uint8 bUseFieldOfViewForLOD:1;
  /* offset=0x0039 flags=0x0018001040000205 */ uint8 ProjectionMode;
  /* offset=0x003c flags=0x0018001040000204 */ float PostProcessBlendWeight;
  /* offset=0x0040 flags=0x0010000000000004 */ struct FPostProcessSettings PostProcessSettings;
  /* offset=0x0510 flags=0x0018001040022805 */ struct FVector2D OffCenterProjectionOffset;
};

struct FModulatorContinuousParams {
  /* offset=0x0000 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000201 */ float Default;
  /* offset=0x000c flags=0x0018001040000201 */ float MinInput;
  /* offset=0x0010 flags=0x0018001040000201 */ float MaxInput;
  /* offset=0x0014 flags=0x0018001040000201 */ float MinOutput;
  /* offset=0x0018 flags=0x0018001040000201 */ float MaxOutput;
  /* offset=0x001c flags=0x0018001040000201 */ uint8 ParamMode;
};

struct FMotionEvent: FInputEvent {
};

struct FMoveCheatAntiStrategy2 {
  /* offset=0x0000 flags=0x0018001040000200 */ uint32 bIsOpen;
  /* offset=0x0004 flags=0x0018001040000200 */ float CheckTimeSpeedIntervel;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 MaxAllowCheatMoveTimes;
  /* offset=0x000c flags=0x0018001040000200 */ float MaxMoveDistanceScaleFactor;
  /* offset=0x0010 flags=0x0018001040000200 */ float MaxPublishForbidMoveTime;
  /* offset=0x0014 flags=0x0018001040000200 */ float MaxMoveSpeedValue;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 MaxSpeedSplitNum;
};

struct FMovementProperties {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bCanCrouch:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bCanJump:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bCanWalk:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bCanSwim:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bCanFly:1;
};

struct FMovieSceneBinding {
  /* offset=0x0000 flags=0x0048001040000000 */ struct FGuid ObjectGuid;
  /* offset=0x0010 flags=0x0048000000000200 */ FString BindingName;
  /* offset=0x001c flags=0x0040008000000208 */ TArray<UMovieSceneTrack*> Tracks;
};

struct FMovieSceneBindingOverrideData {
  /* offset=0x0000 flags=0x0018001000000001 */ struct FMovieSceneObjectBindingID ObjectBindingId;
  /* offset=0x0018 flags=0x001c001040000201 */ UObject* Object;
  /* offset=0x0020 flags=0x0018001040000201 */ bool bOverridesDefault;
};

struct FMovieSceneCameraAnimSectionData {
  /* offset=0x0000 flags=0x0018001040000201 */ UCameraAnim* CameraAnim;
  /* offset=0x0004 flags=0x0018001040000201 */ float PlayRate;
  /* offset=0x0008 flags=0x0018001040000201 */ float PlayScale;
  /* offset=0x000c flags=0x0018001040000201 */ float BlendInTime;
  /* offset=0x0010 flags=0x0018001040000201 */ float BlendOutTime;
  /* offset=0x0014 flags=0x0018001040000201 */ bool bLooping;
};

struct FMovieSceneCameraShakeSectionData {
  /* offset=0x0000 flags=0x001c001040000201 */ UClass<UCameraShake>* ShakeClass;
  /* offset=0x0004 flags=0x0018001040000201 */ float PlayScale;
  /* offset=0x0008 flags=0x0018001040000201 */ uint8 PlaySpace;
  /* offset=0x000c flags=0x0010001040000001 */ struct FRotator UserDefinedPlaySpace;
};

struct FMovieSceneCaptureSettings {
  /* offset=0x0000 flags=0x0010000000004001 */ struct FDirectoryPath OutputDirectory;
  /* offset=0x000c flags=0x001c041040004201 */ UClass<AGameModeBase>* GameModeOverride;
  /* offset=0x0010 flags=0x0018000000004201 */ FString OutputFormat;
  /* offset=0x001c flags=0x0018041040004201 */ bool bOverwriteExisting;
  /* offset=0x001d flags=0x0018041040004201 */ bool bUseRelativeFrameNumbers;
  /* offset=0x0020 flags=0x0018041040004201 */ int32 HandleFrames;
  /* offset=0x0024 flags=0x0018001040004200 */ uint8 ZeroPadFrameNumbers;
  /* offset=0x0028 flags=0x0018001040004201 */ int32 FrameRate;
  /* offset=0x002c flags=0x0010001000004001 */ struct FCaptureResolution Resolution;
  /* offset=0x0034 flags=0x0018041040004201 */ bool bEnableTextureStreaming;
  /* offset=0x0035 flags=0x0018001040004201 */ bool bCinematicEngineScalability;
  /* offset=0x0036 flags=0x0018001040004201 */ bool bCinematicMode;
  /* offset=0x0037 flags=0x0018041040004201 */ bool bAllowMovement;
  /* offset=0x0038 flags=0x0018041040004201 */ bool bAllowTurning;
  /* offset=0x0039 flags=0x0018041040004201 */ bool bShowPlayer;
  /* offset=0x003a flags=0x0018041040004201 */ bool bShowHUD;
};

struct FMovieSceneEasingSettings {
  /* offset=0x0000 flags=0x0018001040000200 */ float AutoEaseInTime;
  /* offset=0x0004 flags=0x0018001040000200 */ float AutoEaseOutTime;
  /* offset=0x0008 flags=0x0014001040000200 */ UInterface<UMovieSceneEasingFunction>* EaseIn;
  /* offset=0x0010 flags=0x0018001040000200 */ bool bManualEaseIn;
  /* offset=0x0014 flags=0x0018001040000200 */ float ManualEaseInTime;
  /* offset=0x0018 flags=0x0014001040000200 */ UInterface<UMovieSceneEasingFunction>* EaseOut;
  /* offset=0x0020 flags=0x0018001040000200 */ bool bManualEaseOut;
  /* offset=0x0024 flags=0x0018001040000200 */ float ManualEaseOutTime;
};

struct FMovieSceneEvalTemplatePtr {
};

struct FMovieSceneEvaluationField {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FFloatRange> Ranges;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FMovieSceneEvaluationGroup> Groups;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FMovieSceneEvaluationMetaData> MetaData;
};

struct FMovieSceneEvaluationFieldSegmentPtr: FMovieSceneEvaluationFieldTrackPtr {
  /* offset=0x0008 flags=0x0018001040000200 */ int32 SegmentIndex;
};

struct FMovieSceneEvaluationFieldTrackPtr {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FMovieSceneSequenceID SequenceID;
  /* offset=0x0004 flags=0x0018001000000000 */ struct FMovieSceneTrackIdentifier TrackIdentifier;
};

struct FMovieSceneEvaluationGroup {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FMovieSceneEvaluationGroupLUTIndex> LUTIndices;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FMovieSceneEvaluationFieldSegmentPtr> SegmentPtrLUT;
};

struct FMovieSceneEvaluationGroupLUTIndex {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 LUTOffset;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 NumInitPtrs;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 NumEvalPtrs;
};

struct FMovieSceneEvaluationKey {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FMovieSceneSequenceID SequenceID;
  /* offset=0x0004 flags=0x0018001000000000 */ struct FMovieSceneTrackIdentifier TrackIdentifier;
  /* offset=0x0008 flags=0x0018001040000200 */ uint32 SectionIdentifier;
};

struct FMovieSceneEvaluationMetaData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FMovieSceneSequenceID> ActiveSequences;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FMovieSceneOrderedEvaluationKey> ActiveEntities;
};

struct FMovieSceneEvaluationTemplate {
  /* offset=0x0000 flags=0x0040000000000200 */ TMap<uint32, struct FMovieSceneEvaluationTrack> Tracks;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FMovieSceneEvaluationField EvaluationField;
  /* offset=0x009c flags=0x0010000000000000 */ struct FMovieSceneSequenceHierarchy Hierarchy;
  /* offset=0x0114 flags=0x0040000000000000 */ struct FMovieSceneTemplateGenerationLedger TemplateLedger;
  /* offset=0x0190 flags=0x0018001000000000 */ uint8 bHasLegacyTrackInstances:1;
  /* offset=0x0190 flags=0x0018001000000000 */ uint8 bKeepStaleTracks:1;
};

struct FMovieSceneEvaluationTrack {
  /* offset=0x0000 flags=0x0048001040000000 */ struct FGuid ObjectBindingId;
  /* offset=0x0010 flags=0x0048001040000200 */ uint16 EvaluationPriority;
  /* offset=0x0012 flags=0x0048001040000200 */ enum EEvaluationMethod EvaluationMethod;
  /* offset=0x0014 flags=0x0040000000000200 */ TArray<struct FMovieSceneSegment> Segments;
  /* offset=0x0020 flags=0x0040000000000200 */ TArray<struct FMovieSceneEvalTemplatePtr> ChildTemplates;
  /* offset=0x0030 flags=0x0040000000000000 */ struct FMovieSceneTrackImplementationPtr TrackTemplate;
  /* offset=0x0068 flags=0x0048001040000200 */ FName EvaluationGroup;
  /* offset=0x0070 flags=0x0048001000000000 */ uint8 bEvaluateInPreroll:1;
  /* offset=0x0070 flags=0x0048001000000000 */ uint8 bEvaluateInPostroll:1;
};

struct FMovieSceneEventParameters {
};

struct FMovieSceneEventSectionData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<float> KeyTimes;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FEventPayload> KeyValues;
};

struct FMovieSceneObjectBindingID {
  /* offset=0x0000 flags=0x0048001040000200 */ int32 SequenceID;
  /* offset=0x0004 flags=0x0048001040000200 */ enum EMovieSceneObjectBindingSpace Space;
  /* offset=0x0008 flags=0x0048001040000001 */ struct FGuid Guid;
};

struct FMovieSceneOrderedEvaluationKey {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FMovieSceneEvaluationKey Key;
  /* offset=0x000c flags=0x0018001040000200 */ uint32 EvaluationIndex;
};

struct FMovieScenePossessable {
  /* offset=0x0000 flags=0x0048001040000000 */ struct FGuid Guid;
  /* offset=0x0010 flags=0x0048000000000200 */ FString Name;
  /* offset=0x001c flags=0x0048001040000200 */ UClass<UObject>* PossessedObjectClass;
  /* offset=0x0020 flags=0x0048001040000000 */ struct FGuid ParentGuid;
};

struct FMovieSceneSectionEvalOptions {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bCanEditCompletionMode;
  /* offset=0x0001 flags=0x0018001040000201 */ enum EMovieSceneCompletionMode CompletionMode;
};

struct FMovieSceneSectionParameters {
  /* offset=0x0000 flags=0x0018001040000201 */ float StartOffset;
  /* offset=0x0004 flags=0x0018001040000201 */ float TimeScale;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 HierarchicalBias;
  /* offset=0x000c flags=0x0018001060000200 */ float PrerollTime;
  /* offset=0x0010 flags=0x0018001060000200 */ float PostrollTime;
};

struct FMovieSceneSegment {
};

struct FMovieSceneSequenceHierarchy {
  /* offset=0x0000 flags=0x0040000000000200 */ TMap<uint32, struct FMovieSceneSubSequenceData> SubSequences;
  /* offset=0x003c flags=0x0040000000000200 */ TMap<uint32, struct FMovieSceneSequenceHierarchyNode> Hierarchy;
};

struct FMovieSceneSequenceHierarchyNode {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FMovieSceneSequenceID ParentID;
  /* offset=0x0004 flags=0x0010000000000200 */ TArray<struct FMovieSceneSequenceID> Children;
};

struct FMovieSceneSequenceID {
  /* offset=0x0000 flags=0x0048001040000200 */ uint32 Value;
};

struct FMovieSceneSequencePlaybackSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 LoopCount;
  /* offset=0x0004 flags=0x0018001040000205 */ float PlayRate;
  /* offset=0x0008 flags=0x0018001040000205 */ bool bRandomStartTime;
  /* offset=0x000c flags=0x0018001040000205 */ float StartTime;
  /* offset=0x0010 flags=0x0018001040000205 */ bool bRestoreState;
  /* offset=0x0011 flags=0x0018001040000205 */ bool bDisableMovementInput;
  /* offset=0x0012 flags=0x0018001040000205 */ bool bDisableLookAtInput;
  /* offset=0x0013 flags=0x0018001040000205 */ bool bHidePlayer;
  /* offset=0x0014 flags=0x0018001040000205 */ bool bHideHud;
  /* offset=0x0018 flags=0x0014001040000200 */ UInterface<UMovieSceneBindingOverridesInterface>* BindingOverrides;
};

struct FMovieSceneSequenceTransform {
  /* offset=0x0000 flags=0x0018001040000200 */ float TimeScale;
  /* offset=0x0004 flags=0x0018001040000200 */ float Offset;
};

struct FMovieSceneSkeletalAnimationParams {
  /* offset=0x0000 flags=0x0018001040000201 */ UAnimSequenceBase* Animation;
  /* offset=0x0004 flags=0x0018001040000201 */ float StartOffset;
  /* offset=0x0008 flags=0x0018001040000201 */ float EndOffset;
  /* offset=0x000c flags=0x0018001040000201 */ float PlayRate;
  /* offset=0x0010 flags=0x0018001000000001 */ uint8 bReverse:1;
  /* offset=0x0018 flags=0x0018001040000201 */ FName SlotName;
  /* offset=0x0020 flags=0x0010000000000001 */ struct FRichCurve Weight;
};

struct FMovieSceneSpawnable {
  /* offset=0x0000 flags=0x0048001040000000 */ struct FGuid Guid;
  /* offset=0x0010 flags=0x0048000000000200 */ FString Name;
  /* offset=0x001c flags=0x0048001040000200 */ UObject* ObjectTemplate;
  /* offset=0x0020 flags=0x0040000000000200 */ TArray<struct FGuid> ChildPossessables;
  /* offset=0x002c flags=0x0048001040000200 */ enum ESpawnOwnership Ownership;
};

struct FMovieSceneSubSequenceData {
  /* offset=0x0000 flags=0x0018001040000200 */ UMovieSceneSequence* Sequence;
  /* offset=0x0004 flags=0x0018001040000200 */ UObject* SequenceKeyObject;
  /* offset=0x0008 flags=0x0010001000000000 */ struct FMovieSceneSequenceTransform RootToSequenceTransform;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FGuid SourceSequenceSignature;
  /* offset=0x0020 flags=0x0018001000000000 */ struct FMovieSceneSequenceID DeterministicSequenceID;
  /* offset=0x0024 flags=0x0018000000000000 */ struct FFloatRange PreRollRange;
  /* offset=0x0034 flags=0x0018000000000000 */ struct FFloatRange PostRollRange;
  /* offset=0x0044 flags=0x0018001040000200 */ int32 HierarchicalBias;
};

struct FMovieSceneTemplateGenerationLedger {
  /* offset=0x0000 flags=0x0018001000000000 */ struct FMovieSceneTrackIdentifier LastTrackIdentifier;
  /* offset=0x0004 flags=0x0010000000000200 */ TMap<struct FMovieSceneTrackIdentifier, int32> TrackReferenceCounts;
  /* offset=0x0040 flags=0x0010000000000200 */ TMap<struct FGuid, struct FMovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;
};

struct FMovieSceneTrackCompilationParams {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bForEditorPreview;
  /* offset=0x0001 flags=0x0018001040000200 */ bool bDuringBlueprintCompile;
};

struct FMovieSceneTrackEvalOptions {
  /* offset=0x0000 flags=0x0018001000000000 */ uint8 bCanEvaluateNearestSection:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bEvalNearestSection:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bEvaluateInPreroll:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bEvaluateInPostroll:1;
  /* offset=0x0000 flags=0x0018001020000000 */ uint8 bEvaluateNearestSection:1;
};

struct FMovieSceneTrackIdentifier {
  /* offset=0x0000 flags=0x0048001040000200 */ uint32 Value;
};

struct FMovieSceneTrackIdentifiers {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FMovieSceneTrackIdentifier> Data;
};

struct FMovieSceneTrackImplementationPtr {
};

struct FMovieSceneTransformMask {
  /* offset=0x0000 flags=0x0048001040000200 */ uint32 Mask;
};

struct FNameCurve: FIndexedCurve {
  /* offset=0x0040 flags=0x0010000000000241 */ TArray<struct FNameCurveKey> Keys;
};

struct FNameCurveKey {
  /* offset=0x0000 flags=0x0018001040000201 */ float Time;
  /* offset=0x0008 flags=0x0018001040000201 */ FName Value;
};

struct FNamedCurveValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000205 */ float Value;
};

struct FNamedEmitterMaterial {
  /* offset=0x0000 flags=0x0018001040000201 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000201 */ UMaterialInterface* Material;
};

struct FNamedFilmbackPreset {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Name;
  /* offset=0x000c flags=0x0010001040000000 */ struct FCameraFilmbackSettings FilmbackSettings;
};

struct FNamedInterface {
  /* offset=0x0000 flags=0x0018001040000200 */ FName InterfaceName;
  /* offset=0x0008 flags=0x0018001040000200 */ UObject* InterfaceObject;
};

struct FNamedInterfaceDef {
  /* offset=0x0000 flags=0x0018001040000200 */ FName InterfaceName;
  /* offset=0x0008 flags=0x0018000000000200 */ FString InterfaceClassName;
};

struct FNamedLensPreset {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Name;
  /* offset=0x000c flags=0x0010001040000000 */ struct FCameraLensSettings LensSettings;
};

struct FNamedSlotBinding {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x001a001040080208 */ UWidget* content;
};

struct FNavAgentProperties: FMovementProperties {
  /* offset=0x0004 flags=0x0018001040000205 */ float AgentRadius;
  /* offset=0x0008 flags=0x0018001040000205 */ float AgentHeight;
  /* offset=0x000c flags=0x0018001040000205 */ float AgentStepHeight;
  /* offset=0x0010 flags=0x0018001040000205 */ float NavWalkingSearchHeightScale;
  /* offset=0x0014 flags=0x001c001040000205 */ UClass<ANavigationData>* PreferredNavData;
};

struct FNavAgentSelector {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent0:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent1:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent2:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent3:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent4:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent5:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent6:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bSupportsAgent7:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent8:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent9:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent10:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent11:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent12:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent13:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent14:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bSupportsAgent15:1;
};

struct FNavAvoidanceMask {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup0:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup1:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup2:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup3:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup4:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup5:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup6:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bGroup7:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup8:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup9:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup10:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup11:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup12:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup13:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup14:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bGroup15:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup16:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup17:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup18:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup19:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup20:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup21:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup22:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bGroup23:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup24:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup25:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup26:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup27:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup28:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup29:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup30:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bGroup31:1;
};

struct FNavCollisionBox {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector Offset;
  /* offset=0x000c flags=0x0018001040000001 */ struct FVector Extent;
};

struct FNavCollisionCylinder {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector Offset;
  /* offset=0x000c flags=0x0018001040000201 */ float Radius;
  /* offset=0x0010 flags=0x0018001040000201 */ float Height;
};

struct FNavDataConfig: FNavAgentProperties {
  /* offset=0x0018 flags=0x0018001040000205 */ FName Name;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FColor Color;
  /* offset=0x0024 flags=0x0018001040000015 */ struct FVector DefaultQueryExtent;
  /* offset=0x0030 flags=0x001c001040002215 */ UClass<ANavigationData>* NavigationDataClass;
  /* offset=0x0038 flags=0x0010000000004000 */ struct FSoftClassPath NavigationDataClassName;
};

struct FNavGraphNode {
  /* offset=0x0000 flags=0x0018001040000200 */ UObject* Owner;
};

struct FNavigationEvent: FInputEvent {
};

struct FNavigationFilterArea {
  /* offset=0x0000 flags=0x001c001040000201 */ UClass<UNavArea>* AreaClass;
  /* offset=0x0004 flags=0x0018001040000201 */ float TravelCostOverride;
  /* offset=0x0008 flags=0x0018001040000201 */ float EnteringCostOverride;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bIsExcluded:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bOverrideTravelCost:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bOverrideEnteringCost:1;
};

struct FNavigationFilterFlags {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag0:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag1:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag2:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag3:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag4:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag5:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag6:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bNavFlag7:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag8:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag9:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag10:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag11:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag12:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag13:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag14:1;
  /* offset=0x0001 flags=0x0018001000000001 */ uint8 bNavFlag15:1;
};

struct FNavigationLink: FNavigationLinkBase {
  /* offset=0x0030 flags=0x0018001040000005 */ struct FVector Left;
  /* offset=0x003c flags=0x0018001040000001 */ struct FVector Right;
};

struct FNavigationLinkBase {
  /* offset=0x0000 flags=0x0018001040000201 */ float LeftProjectHeight;
  /* offset=0x0004 flags=0x0018001040000201 */ float MaxFallDownLength;
  /* offset=0x0008 flags=0x0018001040000201 */ uint8 Direction;
  /* offset=0x0010 flags=0x0018001040000201 */ float SnapRadius;
  /* offset=0x0014 flags=0x0018001040000201 */ float SnapHeight;
  /* offset=0x0018 flags=0x0010001000000001 */ struct FNavAgentSelector SupportedAgents;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent0:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent1:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent2:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent3:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent4:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent5:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent6:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupportsAgent7:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent8:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent9:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent10:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent11:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent12:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent13:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent14:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsAgent15:1;
  /* offset=0x0020 flags=0x0018001000000001 */ uint8 bUseSnapHeight:1;
  /* offset=0x0020 flags=0x0018001000000001 */ uint8 bSnapToCheapestArea:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag0:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag1:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag2:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag3:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag4:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bCustomFlag5:1;
  /* offset=0x0021 flags=0x0018001000000000 */ uint8 bCustomFlag6:1;
  /* offset=0x0021 flags=0x0018001000000000 */ uint8 bCustomFlag7:1;
  /* offset=0x0024 flags=0x004c001040000201 */ UClass<UNavArea>* AreaClass;
};

struct FNavigationSegmentLink: FNavigationLinkBase {
  /* offset=0x0030 flags=0x0018001040000001 */ struct FVector LeftStart;
  /* offset=0x003c flags=0x0018001040000001 */ struct FVector LeftEnd;
  /* offset=0x0048 flags=0x0018001040000001 */ struct FVector RightStart;
  /* offset=0x0054 flags=0x0018001040000001 */ struct FVector RightEnd;
};

struct FNetDriverDefinition {
  /* offset=0x0000 flags=0x0018001040000200 */ FName DefName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName DriverClassName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName DriverClassNameFallback;
};

struct FNetViewer {
  /* offset=0x0000 flags=0x0018001040000200 */ UNetConnection* Connection;
  /* offset=0x0004 flags=0x0018001040000200 */ AActor* InViewer;
  /* offset=0x0008 flags=0x0018001040000200 */ AActor* ViewTarget;
  /* offset=0x000c flags=0x0018001040000000 */ struct FVector ViewLocation;
  /* offset=0x0018 flags=0x0018001040000000 */ struct FVector ViewDir;
};

struct FNode {
  /* offset=0x0000 flags=0x0018001040020201 */ FName Name;
  /* offset=0x0008 flags=0x0018001040020201 */ FName ParentName;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FTransform Transform;
  /* offset=0x0040 flags=0x0018000000000201 */ FString DisplayName;
  /* offset=0x004c flags=0x0018001040000201 */ bool bAdvanced;
};

struct FNodeMap {
  /* offset=0x0000 flags=0x0018001040000200 */ FName TargetNodeName;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FTransform SourceToTargetTransform;
};

struct FNoticeInfo {
  /* offset=0x0000 flags=0x0018000000000215 */ FString msgID;
  /* offset=0x000c flags=0x0018000000000215 */ FString OpenID;
  /* offset=0x0018 flags=0x0018000000000215 */ FString MsgUrl;
  /* offset=0x0024 flags=0x0018001040000215 */ enum ENoticeType MsgType;
  /* offset=0x0028 flags=0x0018000000000215 */ FString MsgScene;
  /* offset=0x0034 flags=0x0018000000000215 */ FString StartTime;
  /* offset=0x0040 flags=0x0018000000000215 */ FString endTime;
  /* offset=0x004c flags=0x0018001040000215 */ enum EContentType MsgContentType;
  /* offset=0x0050 flags=0x0018000000000215 */ FString MsgOrder;
  /* offset=0x005c flags=0x0018000000000215 */ FString ContentUrl;
  /* offset=0x0068 flags=0x0010000000000215 */ TArray<struct FPictureInfomation> PicArray;
  /* offset=0x0074 flags=0x0018000000000215 */ FString MsgTitle;
  /* offset=0x0080 flags=0x0018000000000215 */ FString msgContent;
};

struct FOptionalMovieSceneBlendType {
  /* offset=0x0000 flags=0x0048001040000200 */ enum EMovieSceneBlendType BlendType;
  /* offset=0x0001 flags=0x0048001040000200 */ bool bIsValid;
};

struct FOrbitOptions {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bProcessDuringSpawn:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bProcessDuringUpdate:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bUseEmitterTime:1;
};

struct FOutputMaterialInfo {
};

struct FOverlayItem {
  /* offset=0x0000 flags=0x0018001000000005 */ struct FTimespan StartTime;
  /* offset=0x0008 flags=0x0018001000000005 */ struct FTimespan endTime;
  /* offset=0x0010 flags=0x0018000000000205 */ FString Text;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector2D Position;
};

struct FPIELoginSettingsInternal {
  /* offset=0x0000 flags=0x0018000000000201 */ FString ID;
  /* offset=0x000c flags=0x0018000000002201 */ FString Token;
  /* offset=0x0018 flags=0x0018000000000201 */ FString Type;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<uint8> TokenBytes;
};

struct FPackedNormal {
  /* offset=0x0000 flags=0x0018001041000201 */ uint8 X;
  /* offset=0x0001 flags=0x0018001041000201 */ uint8 Y;
  /* offset=0x0002 flags=0x0018001041000201 */ uint8 Z;
  /* offset=0x0003 flags=0x0018001041000201 */ uint8 W;
};

struct FPaintContext {
};

struct FPaintedVertex {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector Position;
  /* offset=0x000c flags=0x0018000000000000 */ struct FPackedNormal Normal;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FColor Color;
};

struct FPaperFlipbookKeyFrame {
  /* offset=0x0000 flags=0x0018001040000201 */ UPaperSprite* Sprite;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 FrameRun;
};

struct FPaperSpriteSocket {
  /* offset=0x0000 flags=0x0010001040000015 */ struct FTransform LocalTransform;
  /* offset=0x0030 flags=0x0018001040000215 */ FName SocketName;
};

struct FPaperTerrainMaterialRule {
  /* offset=0x0000 flags=0x0018001040000201 */ UPaperSprite* StartCap;
  /* offset=0x0004 flags=0x0010000000000201 */ TArray<UPaperSprite*> Body;
  /* offset=0x0010 flags=0x0018001040000201 */ UPaperSprite* EndCap;
  /* offset=0x0014 flags=0x0018001040000201 */ float MinimumAngle;
  /* offset=0x0018 flags=0x0018001040000201 */ float MaximumAngle;
  /* offset=0x001c flags=0x0018001040000201 */ bool bEnableCollision;
  /* offset=0x0020 flags=0x0018001040000201 */ float CollisionOffset;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 DrawOrder;
};

struct FPaperTileInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ UPaperTileSet* TileSet;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 PackedTileIndex;
};

struct FPaperTileMetadata {
  /* offset=0x0000 flags=0x0018001040000215 */ FName UserDataName;
  /* offset=0x0008 flags=0x0010000000000001 */ struct FSpriteGeometryCollection CollisionData;
  /* offset=0x0030 flags=0x0018001040000200 */ uint8 TerrainMembership;
};

struct FPaperTileSetTerrain {
  /* offset=0x0000 flags=0x0018000000000201 */ FString TerrainName;
  /* offset=0x000c flags=0x0018001040000200 */ int32 CenterTileIndex;
};

struct FParachuteStateParams {
  /* offset=0x0000 flags=0x0018001040000205 */ float MinForwardForce;
  /* offset=0x0004 flags=0x0018001040000205 */ float MaxForwardForce;
  /* offset=0x0008 flags=0x0018001040000205 */ float DragForceFractor;
  /* offset=0x000c flags=0x0018001040000205 */ float MinPitchAngle;
  /* offset=0x0010 flags=0x0018001040000205 */ float MaxPitchAngle;
  /* offset=0x0014 flags=0x0018001040000205 */ float MinRollAngle;
  /* offset=0x0018 flags=0x0018001040000205 */ float MaxRollAngle;
  /* offset=0x001c flags=0x0018001040000205 */ float MinForwardSpeed;
  /* offset=0x0020 flags=0x0018001040000205 */ float MaxForwardSpeed;
  /* offset=0x0024 flags=0x0018001040000205 */ float MinRightSpeed;
  /* offset=0x0028 flags=0x0018001040000205 */ float MaxRightSpeed;
  /* offset=0x002c flags=0x0018001040000205 */ float MinDownSpeed;
  /* offset=0x0030 flags=0x0018001040000205 */ float MaxDownSpeed;
};

struct FParticleBurst {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 Count;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 CountLow;
  /* offset=0x0008 flags=0x0018001040000201 */ float Time;
};

struct FParticleEditorPromotionSettings {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FFilePath DefaultParticleAsset;
};

struct FParticleEvent_GenerateInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 Type;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 Frequency;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 ParticleFrequency;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 FirstTimeOnly:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 LastTimeOnly:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 UseReflectedImpactVector:1;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bUseOrbitOffset:1;
  /* offset=0x0010 flags=0x0018001040000201 */ FName CustomName;
  /* offset=0x0018 flags=0x0010008000000209 */ TArray<UParticleModuleEventSendToGame*> ParticleModuleEventsToSendToGame;
};

struct FParticleRandomSeedInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bGetSeedFromInstance:1;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bInstanceSeedIsIndex:1;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bResetSeedOnEmitterLooping:1;
  /* offset=0x0008 flags=0x0018001000000001 */ uint8 bRandomlySelectSeedArray:1;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<int32> RandomSeeds;
};

struct FParticleReplayTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040000201 */ float Duration;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 ClipIDNumber;
};

struct FParticleSysParam {
  /* offset=0x0000 flags=0x0018001040000205 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000205 */ uint8 ParamType;
  /* offset=0x000c flags=0x0018001040000205 */ float Scalar;
  /* offset=0x0010 flags=0x0018001040000205 */ float Scalar_Low;
  /* offset=0x0014 flags=0x0018001040000005 */ struct FVector Vector;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FVector Vector_Low;
  /* offset=0x002c flags=0x0018001040000005 */ struct FColor Color;
  /* offset=0x0030 flags=0x0018001040000205 */ AActor* Actor;
  /* offset=0x0034 flags=0x0018001040000205 */ UMaterialInterface* Material;
};

struct FParticleSystemLOD {
};

struct FPartyReservation {
  /* offset=0x0000 flags=0x0018001040002200 */ int32 TeamNum;
  /* offset=0x0004 flags=0x0018000000002000 */ struct FUniqueNetIdRepl PartyLeader;
  /* offset=0x0010 flags=0x0010000000002200 */ TArray<struct FPlayerReservation> PartyMembers;
};

struct FPassiveSoundMixModifier {
  /* offset=0x0000 flags=0x0018001040000201 */ USoundMix* SoundMix;
  /* offset=0x0004 flags=0x0018001040000201 */ float MinVolumeThreshold;
  /* offset=0x0008 flags=0x0018001040000201 */ float MaxVolumeThreshold;
};

struct FPawnActionEvent {
  /* offset=0x0000 flags=0x0018001040000200 */ UPawnAction* Action;
};

struct FPawnActionStack {
  /* offset=0x0000 flags=0x0048001040000200 */ UPawnAction* TopAction;
};

struct FPerBoneBlendWeight {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 SourceIndex;
  /* offset=0x0004 flags=0x0018001040000200 */ float BlendWeight;
};

struct FPerBoneInterpolation {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FBoneReference BoneReference;
  /* offset=0x0018 flags=0x0018001040000201 */ float InterpolationSpeedPerSec;
};

struct FPhysicalAnimationData {
  /* offset=0x0000 flags=0x0018001040000200 */ FName BodyName;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bIsLocalSimulation:1;
  /* offset=0x000c flags=0x0018001040000205 */ float OrientationStrength;
  /* offset=0x0010 flags=0x0018001040000205 */ float AngularVelocityStrength;
  /* offset=0x0014 flags=0x0018001040000205 */ float PositionStrength;
  /* offset=0x0018 flags=0x0018001040000205 */ float VelocityStrength;
  /* offset=0x001c flags=0x0018001040000205 */ float MaxLinearForce;
  /* offset=0x0020 flags=0x0018001040000205 */ float MaxAngularForce;
};

struct FPhysicalAnimationProfile {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ProfileName;
  /* offset=0x0008 flags=0x0010001000000001 */ struct FPhysicalAnimationData PhysicalAnimationData;
};

struct FPhysicalSurfaceName {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Type;
  /* offset=0x0008 flags=0x0018001040000200 */ FName Name;
};

struct FPhysicsConstraintProfileHandle {
  /* offset=0x0000 flags=0x0010001000000000 */ struct FConstraintProfileProperties ProfileProperties;
  /* offset=0x0108 flags=0x0018001040000201 */ FName ProfileName;
};

struct FPickUpGlobalDataTableRow: FSurviveTableRowBase {
  /* offset=0x000c flags=0x0018001040000205 */ uint8 SurvivePickUpGlobalCategory;
  /* offset=0x0010 flags=0x0010000000000005 */ struct FSlateBrush SmallProfileImage;
  /* offset=0x0078 flags=0x0010000000000005 */ struct FSlateBrush LargerProfileImage;
  /* offset=0x00e0 flags=0x0018000000000205 */ FString Name;
  /* offset=0x00ec flags=0x0018000000000205 */ FString Description;
  /* offset=0x00f8 flags=0x0018001040000205 */ int32 DisplayPriority;
};

struct FPickUpItemData {
  /* offset=0x0000 flags=0x0018001000000005 */ struct FItemDefineID ID;
  /* offset=0x0018 flags=0x0018001040000205 */ int32 Count;
  /* offset=0x001c flags=0x0010000000000205 */ TArray<struct FBattleItemAdditionalData> AdditionalDataList;
  /* offset=0x0028 flags=0x0018001040000205 */ int32 InstanceID;
};

struct FPickUpWrapperItem {
  /* offset=0x0000 flags=0x0018001000000004 */ struct FItemDefineID DefineID;
  /* offset=0x0018 flags=0x0018001040000204 */ int32 Count;
  /* offset=0x001c flags=0x0010000000000204 */ TArray<struct FBattleItemAdditionalData> AdditionalData;
  /* offset=0x0028 flags=0x0018001040000204 */ int32 ParentIndex;
  /* offset=0x0030 flags=0x0018001040000204 */ FName ParentSideAssociationName;
  /* offset=0x0038 flags=0x0018001040000204 */ int32 ItemInstanceID;
};

struct FPictureInfomation {
  /* offset=0x0000 flags=0x0018001040000215 */ enum EScreenDir PicScreenDir;
  /* offset=0x0004 flags=0x0018000000000215 */ FString PicPath;
  /* offset=0x0010 flags=0x0018000000000215 */ FString HashValue;
};

struct FPingServerInfo {
};

struct FPlane: FVector {
  /* offset=0x000c flags=0x0018001041000205 */ float W;
};

struct FPlatformInterfaceData {
  /* offset=0x0000 flags=0x0018001040000200 */ FName DataName;
  /* offset=0x0008 flags=0x0018001040000200 */ uint8 Type;
  /* offset=0x000c flags=0x0018001040000200 */ int32 IntValue;
  /* offset=0x0010 flags=0x0018001040000200 */ float FloatValue;
  /* offset=0x0014 flags=0x0018000000000200 */ FString StringValue;
  /* offset=0x0020 flags=0x0018001040000200 */ UObject* ObjectValue;
};

struct FPlatformInterfaceDelegateResult {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bSuccessful;
  /* offset=0x0008 flags=0x0010000000000000 */ struct FPlatformInterfaceData Data;
};

struct FPlayerAnimData {
  /* offset=0x0000 flags=0x0018001040000205 */ UAnimationAsset* Animation;
  /* offset=0x0004 flags=0x0018001040000205 */ float Rate;
};

struct FPlayerAnimList {
  /* offset=0x0000 flags=0x0010001000000005 */ struct FPlayerAnimData MovementAnim;
  /* offset=0x0008 flags=0x0010001000000005 */ struct FPlayerAnimData AimAnim;
  /* offset=0x0010 flags=0x0010001000000005 */ struct FPlayerAnimData ReloadAnim;
  /* offset=0x0018 flags=0x0010001000000005 */ struct FPlayerAnimData EquipWeaponAnim;
  /* offset=0x0020 flags=0x0010001000000005 */ struct FPlayerAnimData ChangePoseAnim;
  /* offset=0x0028 flags=0x0010001000000005 */ struct FPlayerAnimData PickUpAnim;
  /* offset=0x0030 flags=0x0010001000000005 */ struct FPlayerAnimData FireAnim;
  /* offset=0x0038 flags=0x0010001000000005 */ struct FPlayerAnimData HurtAnim;
  /* offset=0x0040 flags=0x0010001000000005 */ struct FPlayerAnimData TurnAnim;
  /* offset=0x0048 flags=0x0010001000000005 */ struct FPlayerAnimData PullingPlugAnim;
  /* offset=0x0050 flags=0x0010001000000005 */ struct FPlayerAnimData PutDownWeaponAnim;
  /* offset=0x0058 flags=0x0010001000000005 */ struct FPlayerAnimData WeaponIdle;
  /* offset=0x0060 flags=0x0010000000000205 */ TArray<struct FPlayerAnimData> JumpAnimList;
  /* offset=0x006c flags=0x0010000000000205 */ TArray<struct FPlayerAnimData> ExtraAnimList;
};

struct FPlayerInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 Level;
  /* offset=0x0004 flags=0x0018000000000200 */ FString Name;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 LocalPosition;
  /* offset=0x0014 flags=0x0010000000000000 */ struct FSonInfo mySon;
};

struct FPlayerReservation {
  /* offset=0x0000 flags=0x0018000000002000 */ struct FUniqueNetIdRepl UniqueId;
  /* offset=0x000c flags=0x0018000000002200 */ FString ValidationStr;
  /* offset=0x0018 flags=0x0018001040002200 */ float ElapsedTime;
};

struct FPlayerVehAnimList {
  /* offset=0x0000 flags=0x0018001040000205 */ UAnimationAsset* IdleAnim;
  /* offset=0x0004 flags=0x0018001040000205 */ UAnimationAsset* LeanOutAnim;
  /* offset=0x0008 flags=0x0018001040000205 */ UAnimationAsset* LeanInAnim;
  /* offset=0x000c flags=0x0018001040000205 */ UAnimationAsset* AimAnim;
  /* offset=0x0010 flags=0x0018001040000205 */ UAnimationAsset* ScopeAnim;
  /* offset=0x0014 flags=0x0018001040000205 */ UAnimationAsset* WeaponIdleAddition;
  /* offset=0x0018 flags=0x0018001040000205 */ UAnimationAsset* WeaponAimAddition;
  /* offset=0x001c flags=0x0018001040000205 */ UAnimationAsset* WeaponReloadAddition;
};

struct FPluginRedirect {
  /* offset=0x0000 flags=0x0018000000000200 */ FString OldPluginName;
  /* offset=0x000c flags=0x0018000000000200 */ FString NewPluginName;
};

struct FPointDamageEvent: FDamageEvent {
  /* offset=0x0008 flags=0x0018001040000200 */ float Damage;
  /* offset=0x000c flags=0x0010001000000000 */ struct FVector_NetQuantizeNormal ShotDirection;
  /* offset=0x0018 flags=0x0010009040000000 */ struct FHitResult HitInfo;
};

struct FPointerEvent: FInputEvent {
};

struct FPointerToUberGraphFrame {
};

struct FPoisonDamageEvent: FSTPointDamageEvent {
};

struct FPoseChangeTime {
  /* offset=0x0000 flags=0x0018001040000201 */ float PoseChange_Prone_Stand;
  /* offset=0x0004 flags=0x0018001040000201 */ float PoseChange_Prone_Move;
  /* offset=0x0008 flags=0x0018001040000201 */ float PoseChange_UnProne_Stand;
  /* offset=0x000c flags=0x0018001040000201 */ float PoseChange_UnProne_Move;
};

struct FPoseData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FTransform> LocalSpacePose;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<bool> LocalSpacePoseMask;
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<float> CurveData;
};

struct FPoseDataContainer {
  /* offset=0x0000 flags=0x0040000000000200 */ TArray<struct FSmartName> PoseNames;
  /* offset=0x000c flags=0x0040000000000200 */ TArray<struct FPoseData> Poses;
  /* offset=0x0018 flags=0x0040000000000200 */ TArray<FName> Tracks;
  /* offset=0x0024 flags=0x0040000000002200 */ TMap<FName, int32> TrackMap;
  /* offset=0x0060 flags=0x0040000000000200 */ TArray<struct FAnimCurveBase> Curves;
};

struct FPoseLink: FPoseLinkBase {
};

struct FPoseLinkBase {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 LinkID;
};

struct FPoseSnapshot {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FTransform> LocalTransforms;
  /* offset=0x000c flags=0x0010000000000205 */ TArray<FName> BoneNames;
  /* offset=0x0018 flags=0x0018001040000205 */ FName SkeletalMeshName;
  /* offset=0x0020 flags=0x0018001040000205 */ FName SnapshotName;
  /* offset=0x0028 flags=0x0018001040000205 */ bool bIsValid;
};

struct FPostProcessSettings {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_WhiteTemp:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_WhiteTint:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorSaturation:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorContrast:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorGamma:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorGain:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorOffset:1;
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bOverride_ColorSaturationShadows:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorContrastShadows:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorGammaShadows:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorGainShadows:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorOffsetShadows:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorSaturationMidtones:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorContrastMidtones:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorGammaMidtones:1;
  /* offset=0x0001 flags=0x0018001000000005 */ uint8 bOverride_ColorGainMidtones:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorOffsetMidtones:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorSaturationHighlights:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorContrastHighlights:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorGammaHighlights:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorGainHighlights:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorOffsetHighlights:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorCorrectionShadowsMax:1;
  /* offset=0x0002 flags=0x0018001000000005 */ uint8 bOverride_ColorCorrectionHighlightsMin:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmWhitePoint:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmSaturation:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmChannelMixerRed:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmChannelMixerGreen:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmChannelMixerBlue:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmContrast:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmDynamicRange:1;
  /* offset=0x0003 flags=0x0018001000000005 */ uint8 bOverride_FilmHealAmount:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmToeAmount:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmShadowTint:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmShadowTintBlend:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmShadowTintAmount:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmSlope:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmToe:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmShoulder:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bOverride_FilmBlackClip:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_FilmWhiteClip:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_SceneColorTint:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_SceneFringeIntensity:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_AmbientCubemapTint:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_AmbientCubemapIntensity:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_BloomMethod:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_BloomIntensity:1;
  /* offset=0x0005 flags=0x0018001000000005 */ uint8 bOverride_BloomThreshold:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom1Tint:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom1Size:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom2Size:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom2Tint:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom3Tint:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom3Size:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom4Tint:1;
  /* offset=0x0006 flags=0x0018001000000005 */ uint8 bOverride_Bloom4Size:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_Bloom5Tint:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_Bloom5Size:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_Bloom6Tint:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_Bloom6Size:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_BloomSizeScale:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionTexture:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionSize:1;
  /* offset=0x0007 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionCenterUV:1;
  /* offset=0x0008 flags=0x0018001020000000 */ uint8 bOverride_BloomConvolutionPreFilter:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionPreFilterMin:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionPreFilterMax:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionPreFilterMult:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomConvolutionBufferScale:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomDirtMaskIntensity:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomDirtMaskTint:1;
  /* offset=0x0008 flags=0x0018001000000005 */ uint8 bOverride_BloomDirtMask:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureMethod:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureLowPercent:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureHighPercent:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureMinBrightness:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureMaxBrightness:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureSpeedUp:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureSpeedDown:1;
  /* offset=0x0009 flags=0x0018001000000005 */ uint8 bOverride_AutoExposureBias:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_HistogramLogMin:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_HistogramLogMax:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareIntensity:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareTint:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareTints:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareBokehSize:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareBokehShape:1;
  /* offset=0x000a flags=0x0018001000000005 */ uint8 bOverride_LensFlareThreshold:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_VignetteIntensity:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_GrainIntensity:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_GrainJitter:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionIntensity:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionStaticFraction:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionRadius:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionFadeDistance:1;
  /* offset=0x000b flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionFadeRadius:1;
  /* offset=0x000c flags=0x0018001020000000 */ uint8 bOverride_AmbientOcclusionDistance:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionRadiusInWS:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionPower:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionBias:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionQuality:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionMipBlend:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionMipScale:1;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bOverride_AmbientOcclusionMipThreshold:1;
  /* offset=0x000d flags=0x0018001000000005 */ uint8 bOverride_LPVIntensity:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVDirectionalOcclusionIntensity:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVDirectionalOcclusionRadius:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVDiffuseOcclusionExponent:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVSpecularOcclusionExponent:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVDiffuseOcclusionIntensity:1;
  /* offset=0x000d flags=0x0018001000000001 */ uint8 bOverride_LPVSpecularOcclusionIntensity:1;
  /* offset=0x000d flags=0x0018001000000005 */ uint8 bOverride_LPVSize:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVSecondaryOcclusionIntensity:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVSecondaryBounceIntensity:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVGeometryVolumeBias:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVVplInjectionBias:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVEmissiveInjectionIntensity:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVFadeRange:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_LPVDirectionalOcclusionFadeRange:1;
  /* offset=0x000e flags=0x0018001000000005 */ uint8 bOverride_IndirectLightingColor:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_IndirectLightingIntensity:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_ColorGradingIntensity:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_ColorGradingLUT:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldFocalDistance:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldFstop:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldSensorWidth:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldDepthBlurRadius:1;
  /* offset=0x000f flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldDepthBlurAmount:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldFocalRegion:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldNearTransitionRegion:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldFarTransitionRegion:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldScale:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldMaxBokehSize:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldNearBlurSize:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldFarBlurSize:1;
  /* offset=0x0010 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldMethod:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_MobileHQGaussian:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldBokehShape:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldOcclusion:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldColorThreshold:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldSizeThreshold:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldSkyFocusDistance:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_DepthOfFieldVignetteSize:1;
  /* offset=0x0011 flags=0x0018001000000005 */ uint8 bOverride_MotionBlurAmount:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_MotionBlurMax:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_MotionBlurPerObjectSize:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_ScreenPercentage:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_ScreenSpaceReflectionIntensity:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_ScreenSpaceReflectionQuality:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_ScreenSpaceReflectionMaxRoughness:1;
  /* offset=0x0012 flags=0x0018001000000005 */ uint8 bOverride_ScreenSpaceReflectionRoughnessScale:1;
  /* offset=0x0014 flags=0x0018001240000205 */ float WhiteTemp;
  /* offset=0x0018 flags=0x0018001240000205 */ float WhiteTint;
  /* offset=0x0020 flags=0x0018001240000005 */ struct FVector4 ColorSaturation;
  /* offset=0x0030 flags=0x0018001240000005 */ struct FVector4 ColorContrast;
  /* offset=0x0040 flags=0x0018001240000005 */ struct FVector4 ColorGamma;
  /* offset=0x0050 flags=0x0018001240000005 */ struct FVector4 ColorGain;
  /* offset=0x0060 flags=0x0018001240000005 */ struct FVector4 ColorOffset;
  /* offset=0x0070 flags=0x0018001240000005 */ struct FVector4 ColorSaturationShadows;
  /* offset=0x0080 flags=0x0018001240000005 */ struct FVector4 ColorContrastShadows;
  /* offset=0x0090 flags=0x0018001240000005 */ struct FVector4 ColorGammaShadows;
  /* offset=0x00a0 flags=0x0018001240000005 */ struct FVector4 ColorGainShadows;
  /* offset=0x00b0 flags=0x0018001240000005 */ struct FVector4 ColorOffsetShadows;
  /* offset=0x00c0 flags=0x0018001240000205 */ float ColorCorrectionShadowsMax;
  /* offset=0x00d0 flags=0x0018001240000005 */ struct FVector4 ColorSaturationMidtones;
  /* offset=0x00e0 flags=0x0018001240000005 */ struct FVector4 ColorContrastMidtones;
  /* offset=0x00f0 flags=0x0018001240000005 */ struct FVector4 ColorGammaMidtones;
  /* offset=0x0100 flags=0x0018001240000005 */ struct FVector4 ColorGainMidtones;
  /* offset=0x0110 flags=0x0018001240000005 */ struct FVector4 ColorOffsetMidtones;
  /* offset=0x0120 flags=0x0018001240000005 */ struct FVector4 ColorSaturationHighlights;
  /* offset=0x0130 flags=0x0018001240000005 */ struct FVector4 ColorContrastHighlights;
  /* offset=0x0140 flags=0x0018001240000005 */ struct FVector4 ColorGammaHighlights;
  /* offset=0x0150 flags=0x0018001240000005 */ struct FVector4 ColorGainHighlights;
  /* offset=0x0160 flags=0x0018001240000005 */ struct FVector4 ColorOffsetHighlights;
  /* offset=0x0170 flags=0x0018001240000205 */ float ColorCorrectionHighlightsMin;
  /* offset=0x0174 flags=0x0018001240000205 */ float FilmSlope;
  /* offset=0x0178 flags=0x0018001240000205 */ float FilmToe;
  /* offset=0x017c flags=0x0018001240000205 */ float FilmShoulder;
  /* offset=0x0180 flags=0x0018001240000205 */ float FilmBlackClip;
  /* offset=0x0184 flags=0x0018001240000205 */ float FilmWhiteClip;
  /* offset=0x0188 flags=0x0018001240000005 */ struct FLinearColor FilmWhitePoint;
  /* offset=0x0198 flags=0x0018041240000005 */ struct FLinearColor FilmShadowTint;
  /* offset=0x01a8 flags=0x0018041240000205 */ float FilmShadowTintBlend;
  /* offset=0x01ac flags=0x0018041240000205 */ float FilmShadowTintAmount;
  /* offset=0x01b0 flags=0x0018001240000205 */ float FilmSaturation;
  /* offset=0x01b4 flags=0x0018041240000005 */ struct FLinearColor FilmChannelMixerRed;
  /* offset=0x01c4 flags=0x0018041240000005 */ struct FLinearColor FilmChannelMixerGreen;
  /* offset=0x01d4 flags=0x0018041240000005 */ struct FLinearColor FilmChannelMixerBlue;
  /* offset=0x01e4 flags=0x0018001240000205 */ float FilmContrast;
  /* offset=0x01e8 flags=0x0018041240000205 */ float FilmToeAmount;
  /* offset=0x01ec flags=0x0018041240000205 */ float FilmHealAmount;
  /* offset=0x01f0 flags=0x0018041240000205 */ float FilmDynamicRange;
  /* offset=0x01f4 flags=0x0018001240000005 */ struct FLinearColor SceneColorTint;
  /* offset=0x0204 flags=0x0018001240000205 */ float SceneFringeIntensity;
  /* offset=0x0208 flags=0x0018001040000205 */ uint8 BloomMethod;
  /* offset=0x020c flags=0x0018001240000205 */ float BloomIntensity;
  /* offset=0x0210 flags=0x0018001240000205 */ float BloomThreshold;
  /* offset=0x0214 flags=0x0018041240000205 */ float BloomSizeScale;
  /* offset=0x0218 flags=0x0018041240000205 */ float Bloom1Size;
  /* offset=0x021c flags=0x0018041240000205 */ float Bloom2Size;
  /* offset=0x0220 flags=0x0018041240000205 */ float Bloom3Size;
  /* offset=0x0224 flags=0x0018041240000205 */ float Bloom4Size;
  /* offset=0x0228 flags=0x0018041240000205 */ float Bloom5Size;
  /* offset=0x022c flags=0x0018041240000205 */ float Bloom6Size;
  /* offset=0x0230 flags=0x0018041240000005 */ struct FLinearColor Bloom1Tint;
  /* offset=0x0240 flags=0x0018041240000005 */ struct FLinearColor Bloom2Tint;
  /* offset=0x0250 flags=0x0018041240000005 */ struct FLinearColor Bloom3Tint;
  /* offset=0x0260 flags=0x0018041240000005 */ struct FLinearColor Bloom4Tint;
  /* offset=0x0270 flags=0x0018041240000005 */ struct FLinearColor Bloom5Tint;
  /* offset=0x0280 flags=0x0018041240000005 */ struct FLinearColor Bloom6Tint;
  /* offset=0x0290 flags=0x0018001040000205 */ UTexture2D* BloomConvolutionTexture;
  /* offset=0x0294 flags=0x0018041240000205 */ float BloomConvolutionSize;
  /* offset=0x0298 flags=0x0018041240000005 */ struct FVector2D BloomConvolutionCenterUV;
  /* offset=0x02a0 flags=0x0018001060000000 */ struct FVector BloomConvolutionPreFilter;
  /* offset=0x02ac flags=0x0018041240000205 */ float BloomConvolutionPreFilterMin;
  /* offset=0x02b0 flags=0x0018041240000205 */ float BloomConvolutionPreFilterMax;
  /* offset=0x02b4 flags=0x0018041240000205 */ float BloomConvolutionPreFilterMult;
  /* offset=0x02b8 flags=0x0018041240000205 */ float BloomConvolutionBufferScale;
  /* offset=0x02bc flags=0x0018001040000205 */ UTexture* BloomDirtMask;
  /* offset=0x02c0 flags=0x0018001240000205 */ float BloomDirtMaskIntensity;
  /* offset=0x02c4 flags=0x0018001240000005 */ struct FLinearColor BloomDirtMaskTint;
  /* offset=0x02d4 flags=0x0018001240000005 */ struct FLinearColor AmbientCubemapTint;
  /* offset=0x02e4 flags=0x0018001240000205 */ float AmbientCubemapIntensity;
  /* offset=0x02e8 flags=0x0018001040000205 */ UTextureCube* AmbientCubemap;
  /* offset=0x02ec flags=0x0018001040000205 */ uint8 AutoExposureMethod;
  /* offset=0x02f0 flags=0x0018041240000205 */ float AutoExposureLowPercent;
  /* offset=0x02f4 flags=0x0018041240000205 */ float AutoExposureHighPercent;
  /* offset=0x02f8 flags=0x0018001240000205 */ float AutoExposureMinBrightness;
  /* offset=0x02fc flags=0x0018001240000205 */ float AutoExposureMaxBrightness;
  /* offset=0x0300 flags=0x0018001240000205 */ float AutoExposureSpeedUp;
  /* offset=0x0304 flags=0x0018001240000205 */ float AutoExposureSpeedDown;
  /* offset=0x0308 flags=0x0018001240000205 */ float AutoExposureBias;
  /* offset=0x030c flags=0x0018041240000205 */ float HistogramLogMin;
  /* offset=0x0310 flags=0x0018041240000205 */ float HistogramLogMax;
  /* offset=0x0314 flags=0x0018001240000205 */ float LensFlareIntensity;
  /* offset=0x0318 flags=0x0018001240000005 */ struct FLinearColor LensFlareTint;
  /* offset=0x0328 flags=0x0018001240000205 */ float LensFlareBokehSize;
  /* offset=0x032c flags=0x0018001240000205 */ int32 LensFlareCount;
  /* offset=0x0330 flags=0x0018001240000205 */ float LensFlareThreshold;
  /* offset=0x0334 flags=0x0018001040000205 */ UTexture* LensFlareBokehShape;
  /* offset=0x0338 flags=0x0018001040000001 */ struct FLinearColor LensFlareTints;
  /* offset=0x03b8 flags=0x0018001240000205 */ float VignetteIntensity;
  /* offset=0x03bc flags=0x0018001240000205 */ float GrainJitter;
  /* offset=0x03c0 flags=0x0018001240000205 */ float GrainIntensity;
  /* offset=0x03c4 flags=0x0018001240000205 */ float AmbientOcclusionIntensity;
  /* offset=0x03c8 flags=0x0018041240000205 */ float AmbientOcclusionStaticFraction;
  /* offset=0x03cc flags=0x0018001240000205 */ float AmbientOcclusionRadius;
  /* offset=0x03d0 flags=0x0018041000000005 */ uint8 AmbientOcclusionRadiusInWS:1;
  /* offset=0x03d4 flags=0x0018041240000205 */ float AmbientOcclusionFadeDistance;
  /* offset=0x03d8 flags=0x0018041240000205 */ float AmbientOcclusionFadeRadius;
  /* offset=0x03dc flags=0x0018001060000200 */ float AmbientOcclusionDistance;
  /* offset=0x03e0 flags=0x0018041240000205 */ float AmbientOcclusionPower;
  /* offset=0x03e4 flags=0x0018041240000205 */ float AmbientOcclusionBias;
  /* offset=0x03e8 flags=0x0018041240000205 */ float AmbientOcclusionQuality;
  /* offset=0x03ec flags=0x0018041240000205 */ float AmbientOcclusionMipBlend;
  /* offset=0x03f0 flags=0x0018041240000205 */ float AmbientOcclusionMipScale;
  /* offset=0x03f4 flags=0x0018041240000205 */ float AmbientOcclusionMipThreshold;
  /* offset=0x03f8 flags=0x0018001240000005 */ struct FLinearColor IndirectLightingColor;
  /* offset=0x0408 flags=0x0018001240000205 */ float IndirectLightingIntensity;
  /* offset=0x040c flags=0x0018001240000205 */ float ColorGradingIntensity;
  /* offset=0x0410 flags=0x0018001040000205 */ UTexture* ColorGradingLUT;
  /* offset=0x0414 flags=0x0018001040000205 */ uint8 DepthOfFieldMethod;
  /* offset=0x0415 flags=0x0018001000000005 */ uint8 bMobileHQGaussian:1;
  /* offset=0x0418 flags=0x0018001240000205 */ float DepthOfFieldFstop;
  /* offset=0x041c flags=0x0018001040000204 */ float DepthOfFieldSensorWidth;
  /* offset=0x0420 flags=0x0018001240000205 */ float DepthOfFieldFocalDistance;
  /* offset=0x0424 flags=0x0018001240000205 */ float DepthOfFieldDepthBlurAmount;
  /* offset=0x0428 flags=0x0018001240000205 */ float DepthOfFieldDepthBlurRadius;
  /* offset=0x042c flags=0x0018001240000205 */ float DepthOfFieldFocalRegion;
  /* offset=0x0430 flags=0x0018001240000205 */ float DepthOfFieldNearTransitionRegion;
  /* offset=0x0434 flags=0x0018001240000205 */ float DepthOfFieldFarTransitionRegion;
  /* offset=0x0438 flags=0x0018001240000205 */ float DepthOfFieldScale;
  /* offset=0x043c flags=0x0018001240000205 */ float DepthOfFieldMaxBokehSize;
  /* offset=0x0440 flags=0x0018001240000205 */ float DepthOfFieldNearBlurSize;
  /* offset=0x0444 flags=0x0018001240000205 */ float DepthOfFieldFarBlurSize;
  /* offset=0x0448 flags=0x0018041040000205 */ UTexture* DepthOfFieldBokehShape;
  /* offset=0x044c flags=0x0018041240000205 */ float DepthOfFieldOcclusion;
  /* offset=0x0450 flags=0x0018041240000205 */ float DepthOfFieldColorThreshold;
  /* offset=0x0454 flags=0x0018041240000205 */ float DepthOfFieldSizeThreshold;
  /* offset=0x0458 flags=0x0018041240000205 */ float DepthOfFieldSkyFocusDistance;
  /* offset=0x045c flags=0x0018041240000205 */ float DepthOfFieldVignetteSize;
  /* offset=0x0460 flags=0x0018001240000205 */ float MotionBlurAmount;
  /* offset=0x0464 flags=0x0018001240000205 */ float MotionBlurMax;
  /* offset=0x0468 flags=0x0018001240000205 */ float MotionBlurPerObjectSize;
  /* offset=0x046c flags=0x0018001240000205 */ float LPVIntensity;
  /* offset=0x0470 flags=0x0018041240000205 */ float LPVVplInjectionBias;
  /* offset=0x0474 flags=0x0018001040000205 */ float LPVSize;
  /* offset=0x0478 flags=0x0018001240000205 */ float LPVSecondaryOcclusionIntensity;
  /* offset=0x047c flags=0x0018041240000205 */ float LPVSecondaryBounceIntensity;
  /* offset=0x0480 flags=0x0018041240000205 */ float LPVGeometryVolumeBias;
  /* offset=0x0484 flags=0x0018041240000205 */ float LPVEmissiveInjectionIntensity;
  /* offset=0x0488 flags=0x0018001240000205 */ float LPVDirectionalOcclusionIntensity;
  /* offset=0x048c flags=0x0018041240000205 */ float LPVDirectionalOcclusionRadius;
  /* offset=0x0490 flags=0x0018001240000205 */ float LPVDiffuseOcclusionExponent;
  /* offset=0x0494 flags=0x0018001240000205 */ float LPVSpecularOcclusionExponent;
  /* offset=0x0498 flags=0x0018041240000205 */ float LPVDiffuseOcclusionIntensity;
  /* offset=0x049c flags=0x0018041240000205 */ float LPVSpecularOcclusionIntensity;
  /* offset=0x04a0 flags=0x0018001240000205 */ float ScreenSpaceReflectionIntensity;
  /* offset=0x04a4 flags=0x0018001240000205 */ float ScreenSpaceReflectionQuality;
  /* offset=0x04a8 flags=0x0018001240000205 */ float ScreenSpaceReflectionMaxRoughness;
  /* offset=0x04ac flags=0x0018041240000205 */ float LPVFadeRange;
  /* offset=0x04b0 flags=0x0018041240000205 */ float LPVDirectionalOcclusionFadeRange;
  /* offset=0x04b4 flags=0x0018001240000205 */ float ScreenPercentage;
  /* offset=0x04b8 flags=0x0010000000000005 */ struct FWeightedBlendables WeightedBlendables;
  /* offset=0x04c4 flags=0x0010000020000200 */ TArray<UObject*> Blendables;
};

struct FPredictProjectilePathParams {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector StartLocation;
  /* offset=0x000c flags=0x0018001040000005 */ struct FVector LaunchVelocity;
  /* offset=0x0018 flags=0x0018001040000205 */ bool bTraceWithCollision;
  /* offset=0x001c flags=0x0018001040000205 */ float ProjectileRadius;
  /* offset=0x0020 flags=0x0018001040000205 */ float MaxSimTime;
  /* offset=0x0024 flags=0x0018001040000205 */ bool bTraceWithChannel;
  /* offset=0x0025 flags=0x0018001040000205 */ uint8 TraceChannel;
  /* offset=0x0028 flags=0x0010040000000205 */ TArray<uint8> ObjectTypes;
  /* offset=0x0034 flags=0x0010040000000205 */ TArray<AActor*> ActorsToIgnore;
  /* offset=0x0040 flags=0x0018041040000205 */ float SimFrequency;
  /* offset=0x0044 flags=0x0018041040000205 */ float OverrideGravityZ;
  /* offset=0x0048 flags=0x0018041040000205 */ uint8 DrawDebugType;
  /* offset=0x004c flags=0x0018041040000205 */ float DrawDebugTime;
  /* offset=0x0050 flags=0x0018041040000205 */ bool bTraceComplex;
};

struct FPredictProjectilePathPointData {
  /* offset=0x0000 flags=0x0018001040020015 */ struct FVector Location;
  /* offset=0x000c flags=0x0018001040020015 */ struct FVector Velocity;
  /* offset=0x0018 flags=0x0018001040020215 */ float Time;
};

struct FPredictProjectilePathResult {
  /* offset=0x0000 flags=0x0010000000020215 */ TArray<struct FPredictProjectilePathPointData> PathData;
  /* offset=0x000c flags=0x0010001000020015 */ struct FPredictProjectilePathPointData LastTraceDestination;
  /* offset=0x0028 flags=0x0010009040020015 */ struct FHitResult HitResult;
};

struct FPreviewMeshCollectionEntry {
  /* offset=0x0000 flags=0x001c000000000001 */ USkeletalMesh* SkeletalMesh;
};

struct FPrimaryAssetId {
  /* offset=0x0000 flags=0x0010001000000005 */ struct FPrimaryAssetType PrimaryAssetType;
  /* offset=0x0008 flags=0x0018001040000205 */ FName PrimaryAssetName;
};

struct FPrimaryAssetRules {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 Priority;
  /* offset=0x0004 flags=0x0018001040000201 */ bool bApplyRecursively;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 ChunkId;
  /* offset=0x000c flags=0x0018001040000201 */ enum EPrimaryAssetCookRule CookRule;
};

struct FPrimaryAssetRulesOverride {
  /* offset=0x0000 flags=0x0018001000000001 */ struct FPrimaryAssetId PrimaryAssetId;
  /* offset=0x0010 flags=0x0010001000000001 */ struct FPrimaryAssetRules Rules;
};

struct FPrimaryAssetType {
  /* offset=0x0000 flags=0x0018001040000205 */ FName Name;
};

struct FPrimaryAssetTypeInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ FName PrimaryAssetType;
  /* offset=0x0008 flags=0x004c000000000001 */ UClass<UObject>* AssetBaseClass;
  /* offset=0x0030 flags=0x0018001040002200 */ UClass<UObject>* AssetBaseClassLoaded;
  /* offset=0x0034 flags=0x0018001040000201 */ bool bHasBlueprintClasses;
  /* offset=0x0035 flags=0x0018001040000201 */ bool bIsEditorOnly;
  /* offset=0x0038 flags=0x0040000000000201 */ TArray<struct FDirectoryPath> Directories;
  /* offset=0x0044 flags=0x0040000000000201 */ TArray<struct FSoftObjectPath> SpecificAssets;
  /* offset=0x0050 flags=0x0010001000000001 */ struct FPrimaryAssetRules Rules;
  /* offset=0x0060 flags=0x0010000000002200 */ TArray<FString> AssetScanPaths;
  /* offset=0x006c flags=0x0018001040002200 */ bool bIsDynamicAsset;
  /* offset=0x0070 flags=0x0018001040002200 */ int32 NumberOfAssets;
};

struct FPrimitiveComponentPostPhysicsTickFunction: FTickFunction {
};

struct FPrimitiveMaterialRef {
  /* offset=0x0000 flags=0x0018001040080208 */ UPrimitiveComponent* Primitive;
  /* offset=0x0004 flags=0x0018001040080208 */ UDecalComponent* Decal;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 ElementIndex;
};

struct FProceduralFoliageInstance {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector Location;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FQuat Rotation;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FVector Normal;
  /* offset=0x002c flags=0x0018001040000205 */ float Age;
  /* offset=0x0030 flags=0x0018001040000200 */ float Scale;
  /* offset=0x0034 flags=0x0018001040000200 */ UFoliageType_InstancedStaticMesh* Type;
};

struct FProfileMatch {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Profile;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<struct FProfileMatchItem> Match;
};

struct FProfileMatchItem {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 SourceType;
  /* offset=0x0001 flags=0x0018001040000200 */ uint8 CompareType;
  /* offset=0x0004 flags=0x0018000000000200 */ FString MatchString;
};

struct FProgressBarStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush BackgroundImage;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush FillImage;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush MarqueeImage;
};

struct FPropertyPathSegment {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 ArrayIndex;
  /* offset=0x000c flags=0x0048001040002200 */ UStruct* Struct;
  /* offset=0x0010 flags=0x0048001040002200 */ UField* Field;
};

struct FPurchaseInfo {
  /* offset=0x0000 flags=0x0018000000000200 */ FString Identifier;
  /* offset=0x000c flags=0x0018000000000200 */ FString DisplayName;
  /* offset=0x0018 flags=0x0018000000000200 */ FString DisplayDescription;
  /* offset=0x0024 flags=0x0018000000000200 */ FString DisplayPrice;
};

struct FQuat {
  /* offset=0x0000 flags=0x0018001041000205 */ float X;
  /* offset=0x0004 flags=0x0018001041000205 */ float Y;
  /* offset=0x0008 flags=0x0018001041000205 */ float Z;
  /* offset=0x000c flags=0x0018001041000205 */ float W;
};

struct FROscillator {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FFOscillator Pitch;
  /* offset=0x000c flags=0x0010001000000001 */ struct FFOscillator Yaw;
  /* offset=0x0018 flags=0x0010001000000001 */ struct FFOscillator Roll;
};

struct FRadialDamageEvent: FDamageEvent {
  /* offset=0x0008 flags=0x0010001000000000 */ struct FRadialDamageParams Params;
  /* offset=0x001c flags=0x0018001040000000 */ struct FVector Origin;
  /* offset=0x0028 flags=0x0010008000000200 */ TArray<struct FHitResult> ComponentHits;
};

struct FRadialDamageParams {
  /* offset=0x0000 flags=0x0018001040000205 */ float BaseDamage;
  /* offset=0x0004 flags=0x0018001040000205 */ float MinimumDamage;
  /* offset=0x0008 flags=0x0018001040000205 */ float InnerRadius;
  /* offset=0x000c flags=0x0018001040000205 */ float OuterRadius;
  /* offset=0x0010 flags=0x0018001040000205 */ float DamageFalloff;
};

struct FRandomActionGroup {
  /* offset=0x0000 flags=0x0010008000000209 */ TArray<UUTSkillAction*> Actions;
};

struct FRandomStream {
  /* offset=0x0000 flags=0x0018001041000205 */ int32 InitialSeed;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 Seed;
};

struct FRawCurveTracks {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FFloatCurve> FloatCurves;
};

struct FRawDistribution {
  /* offset=0x0000 flags=0x0018000000000000 */ struct FDistributionLookupTable Table;
};

struct FRawDistributionFloat: FRawDistribution {
  /* offset=0x001c flags=0x0048001040000200 */ float MinValue;
  /* offset=0x0020 flags=0x0048001040000200 */ float MaxValue;
  /* offset=0x0024 flags=0x0018001042080209 */ UDistributionFloat* Distribution;
};

struct FRawDistributionVector: FRawDistribution {
  /* offset=0x001c flags=0x0048001040000200 */ float MinValue;
  /* offset=0x0020 flags=0x0048001040000200 */ float MaxValue;
  /* offset=0x0024 flags=0x0048001040000000 */ struct FVector MinValueVec;
  /* offset=0x0030 flags=0x0048001040000000 */ struct FVector MaxValueVec;
  /* offset=0x003c flags=0x0018001042080209 */ UDistributionVector* Distribution;
};

struct FReConnectGameStateInfo {
  /* offset=0x0000 flags=0x0018001040000214 */ bool bIsLessning;
  /* offset=0x0004 flags=0x0018001040000214 */ float CircleStateStartServerWorldSecond;
  /* offset=0x0008 flags=0x0018001040000214 */ float CircleStatusLastTime;
  /* offset=0x000c flags=0x0018001040000214 */ float CircleStatusElapsedTime;
  /* offset=0x0010 flags=0x0018001040000214 */ uint8 CircleStatus;
  /* offset=0x0014 flags=0x0018001040000014 */ struct FVector BlueCircle;
  /* offset=0x0020 flags=0x0018001040000014 */ struct FVector OriginalBlueCircle;
  /* offset=0x002c flags=0x0018001040000014 */ struct FVector WhiteCircle;
  /* offset=0x0038 flags=0x0018001040000214 */ uint8 AirAttackStatus;
  /* offset=0x003c flags=0x0018001040000014 */ struct FVector AirAttackArea;
  /* offset=0x0048 flags=0x0018001040000214 */ int32 AirAttackWave;
  /* offset=0x004c flags=0x0018001040000014 */ struct FVector AirplaneStartLocation;
  /* offset=0x0058 flags=0x0018001040000014 */ struct FVector AirplaneStopLocation;
};

struct FRedirector {
  /* offset=0x0000 flags=0x0018001040000200 */ FName OldName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName NewName;
};

struct FRegisterTimer {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 waveindex;
  /* offset=0x0004 flags=0x0010000000000200 */ TArray<float> times;
};

struct FRenderItem {
  /* offset=0x0000 flags=0x0018000000000200 */ FString RenderKey;
  /* offset=0x000c flags=0x0018001040000200 */ float RenderValue;
};

struct FRepAttachment {
  /* offset=0x0000 flags=0x0018001040000200 */ AActor* AttachParent;
  /* offset=0x0004 flags=0x0010001000000000 */ struct FVector_NetQuantize100 LocationOffset;
  /* offset=0x0010 flags=0x0010001000000000 */ struct FVector_NetQuantize100 RelativeScale3D;
  /* offset=0x001c flags=0x0010001040000000 */ struct FRotator RotationOffset;
  /* offset=0x0028 flags=0x0018001040000200 */ FName AttachSocket;
  /* offset=0x0030 flags=0x0018001040080208 */ USceneComponent* AttachComponent;
};

struct FRepMovement {
  /* offset=0x0000 flags=0x0018001040002000 */ struct FVector LinearVelocity;
  /* offset=0x000c flags=0x0018001040002000 */ struct FVector AngularVelocity;
  /* offset=0x0018 flags=0x0018001040002000 */ struct FVector Location;
  /* offset=0x0024 flags=0x0010001040002000 */ struct FRotator Rotation;
  /* offset=0x0030 flags=0x0018001000002000 */ uint8 bSimulatedPhysicSleep:1;
  /* offset=0x0030 flags=0x0018001000002000 */ uint8 bRepPhysics:1;
  /* offset=0x0031 flags=0x0018041040010201 */ enum EVectorQuantization LocationQuantizationLevel;
  /* offset=0x0032 flags=0x0018041040010201 */ enum EVectorQuantization VelocityQuantizationLevel;
  /* offset=0x0033 flags=0x0018041040010201 */ enum ERotatorQuantization RotationQuantizationLevel;
};

struct FRepRootMotionMontage {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bIsActive;
  /* offset=0x0004 flags=0x0018001040000200 */ UAnimMontage* AnimMontage;
  /* offset=0x0008 flags=0x0018001040000200 */ float Position;
  /* offset=0x000c flags=0x0010001000000000 */ struct FVector_NetQuantize100 Location;
  /* offset=0x0018 flags=0x0010001040000000 */ struct FRotator Rotation;
  /* offset=0x0024 flags=0x0018001040080208 */ UPrimitiveComponent* MovementBase;
  /* offset=0x0028 flags=0x0018001040000200 */ FName MovementBaseBoneName;
  /* offset=0x0030 flags=0x0018001040000200 */ bool bRelativePosition;
  /* offset=0x0031 flags=0x0018001040000200 */ bool bRelativeRotation;
  /* offset=0x0034 flags=0x0010000000000000 */ struct FRootMotionSourceGroup AuthoritativeRootMotion;
  /* offset=0x00c4 flags=0x0010001000000000 */ struct FVector_NetQuantize10 Acceleration;
  /* offset=0x00d0 flags=0x0010001000000000 */ struct FVector_NetQuantize10 LinearVelocity;
};

struct FReplicatedVehicleState {
  /* offset=0x0000 flags=0x0018001040000200 */ float SteeringInput;
  /* offset=0x0004 flags=0x0018001040000200 */ float ThrottleInput;
  /* offset=0x0008 flags=0x0018001040000200 */ float BrakeInput;
  /* offset=0x000c flags=0x0018001040000200 */ float HandbrakeInput;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 CurrentGear;
};

struct FResponseChannel {
  /* offset=0x0000 flags=0x0018001040000201 */ FName Channel;
  /* offset=0x0008 flags=0x0018001040000201 */ uint8 Response;
};

struct FResultRatingData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 rank_rating;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 kill_rating;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 win_rating;
  /* offset=0x000c flags=0x0018001040000200 */ int32 change_rank_rating;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 change_kill_rating;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 change_win_rating;
};

struct FReverbSettings {
  /* offset=0x0000 flags=0x0018001000000005 */ uint8 bApplyReverb:1;
  /* offset=0x0001 flags=0x0018001060000200 */ uint8 ReverbType;
  /* offset=0x0004 flags=0x0018001040000205 */ UReverbEffect* ReverbEffect;
  /* offset=0x0008 flags=0x0018001040000205 */ float Volume;
  /* offset=0x000c flags=0x0018001040000205 */ float FadeTime;
};

struct FRichCurve: FIndexedCurve {
  /* offset=0x0040 flags=0x0018001040000200 */ uint8 PreInfinityExtrap;
  /* offset=0x0041 flags=0x0018001040000200 */ uint8 PostInfinityExtrap;
  /* offset=0x0044 flags=0x0018001040000201 */ float DefaultValue;
  /* offset=0x0048 flags=0x0010000000000241 */ TArray<struct FRichCurveKey> Keys;
};

struct FRichCurveKey {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 InterpMode;
  /* offset=0x0001 flags=0x0018001040000200 */ uint8 TangentMode;
  /* offset=0x0002 flags=0x0018001040000200 */ uint8 TangentWeightMode;
  /* offset=0x0004 flags=0x0018001040000201 */ float Time;
  /* offset=0x0008 flags=0x0018001040000201 */ float Value;
  /* offset=0x000c flags=0x0018001040000200 */ float ArriveTangent;
  /* offset=0x0010 flags=0x0018001040000200 */ float ArriveTangentWeight;
  /* offset=0x0014 flags=0x0018001040000200 */ float LeaveTangent;
  /* offset=0x0018 flags=0x0018001040000200 */ float LeaveTangentWeight;
};

struct FRigTransformConstraint {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 TranformType;
  /* offset=0x0008 flags=0x0018001040000201 */ FName ParentSpace;
  /* offset=0x0010 flags=0x0018001040000200 */ float Weight;
};

struct FRigidBodyErrorCorrection {
  /* offset=0x0000 flags=0x0018001040000200 */ float LinearDeltaThresholdSq;
  /* offset=0x0004 flags=0x0018001040000200 */ float LinearInterpAlpha;
  /* offset=0x0008 flags=0x0018001040000200 */ float LinearRecipFixTime;
  /* offset=0x000c flags=0x0018001040000200 */ float AngularDeltaThreshold;
  /* offset=0x0010 flags=0x0018001040000200 */ float AngularInterpAlpha;
  /* offset=0x0014 flags=0x0018001040000200 */ float AngularRecipFixTime;
  /* offset=0x0018 flags=0x0018001040000200 */ float BodySpeedThresholdSq;
};

struct FRigidBodyState {
  /* offset=0x0000 flags=0x0010001000000000 */ struct FVector_NetQuantize100 Position;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FQuat Quaternion;
  /* offset=0x0020 flags=0x0010001000000000 */ struct FVector_NetQuantize100 LinVel;
  /* offset=0x002c flags=0x0010001000000000 */ struct FVector_NetQuantize100 AngVel;
  /* offset=0x0038 flags=0x0018001040000200 */ uint8 Flags;
};

struct FRollbackNetStartupActorInfo {
  /* offset=0x0008 flags=0x0018001040000200 */ UObject* Archetype;
  /* offset=0x0024 flags=0x0018001040000200 */ ULevel* Level;
};

struct FRootMotionMovementParams {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bHasRootMotion;
  /* offset=0x0004 flags=0x0018001040000200 */ float BlendWeight;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FTransform RootMotionTransform;
};

struct FRootMotionSourceGroup {
  /* offset=0x007c flags=0x0018001040000200 */ bool bHasAdditiveSources;
  /* offset=0x007d flags=0x0018001040000200 */ bool bHasOverrideSources;
  /* offset=0x0080 flags=0x0010001000000000 */ struct FVector_NetQuantize10 LastPreAdditiveVelocity;
  /* offset=0x008c flags=0x0018001040000200 */ bool bIsAdditiveVelocityApplied;
  /* offset=0x008d flags=0x0010001000000000 */ struct FRootMotionSourceSettings LastAccumulatedSettings;
};

struct FRootMotionSourceSettings {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Flags;
};

struct FRotator {
  /* offset=0x0000 flags=0x0018001041000205 */ float Pitch;
  /* offset=0x0004 flags=0x0018001041000205 */ float Yaw;
  /* offset=0x0008 flags=0x0018001041000205 */ float Roll;
};

struct FRuntimeConvexCollisionSection {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FVector> VertexBuffer;
  /* offset=0x000c flags=0x0010001040000000 */ struct FBox BoundingBox;
};

struct FRuntimeFloatCurve {
  /* offset=0x0000 flags=0x0010000000000000 */ struct FRichCurve EditorCurveData;
  /* offset=0x0054 flags=0x0018001040000201 */ UCurveFloat* ExternalCurve;
};

struct FRuntimeMeshCollisionSection {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FVector> VertexBuffer;
  /* offset=0x000c flags=0x0010000000000200 */ TArray<int32> IndexBuffer;
};

struct FRuntimeMeshComponentPrePhysicsTickFunction: FTickFunction {
};

struct FRuntimeMeshTangent {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector TangentX;
  /* offset=0x000c flags=0x0018001040000205 */ bool bFlipTangentY;
};

struct FSDeviation {
  /* offset=0x0000 flags=0x0018001040010215 */ float DeviationBase;
  /* offset=0x0004 flags=0x0018001040010215 */ float DeviationBaseAim;
  /* offset=0x0008 flags=0x0018001040010215 */ float DeviationBaseADS;
  /* offset=0x000c flags=0x0018001040010215 */ float DeviationRecoilGain;
  /* offset=0x0010 flags=0x0018001040010215 */ float DeviationRecoilGainAim;
  /* offset=0x0014 flags=0x0018001040010215 */ float DeviationRecoilGainADS;
  /* offset=0x0018 flags=0x0018001040010215 */ float DeviationMax;
  /* offset=0x001c flags=0x0018001040010215 */ float DeviationMinMove;
  /* offset=0x0020 flags=0x0018001040010215 */ float DeviationMaxMove;
  /* offset=0x0024 flags=0x0018001040010215 */ float DeviationMoveMultiplier;
  /* offset=0x0028 flags=0x0018001040010215 */ float DeviationMoveMinRefrence;
  /* offset=0x002c flags=0x0018001040010215 */ float DeviationMoveMaxRefrence;
  /* offset=0x0030 flags=0x0018001040010215 */ float DeviationStanceStand;
  /* offset=0x0034 flags=0x0018001040010215 */ float DeviationStanceCrouch;
  /* offset=0x0038 flags=0x0018001040010215 */ float DeviationStanceProne;
  /* offset=0x003c flags=0x0018001040010215 */ float DeviationStanceJump;
};

struct FSHAHashData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Hash;
};

struct FSRangeAttenuateConfig {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 rangeStart;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 rangeEnd;
  /* offset=0x0008 flags=0x0018001040000201 */ float rangeAttenuateFactor;
};

struct FSRecoilInfo {
  /* offset=0x0000 flags=0x0018001040010215 */ float VerticalRecoilMin;
  /* offset=0x0004 flags=0x0018001040010215 */ float VerticalRecoilMax;
  /* offset=0x0008 flags=0x0018001040010215 */ float VerticalRecoilVariation;
  /* offset=0x000c flags=0x0018001040010215 */ float VerticalRecoveryModifier;
  /* offset=0x0010 flags=0x0018001040010215 */ float VerticalRecoveryClamp;
  /* offset=0x0014 flags=0x0018001040010215 */ float VerticalRecoveryMax;
  /* offset=0x0018 flags=0x0018001040010215 */ float LeftMax;
  /* offset=0x001c flags=0x0018001040010215 */ float RightMax;
  /* offset=0x0020 flags=0x0018001040010215 */ float HorizontalTendency;
  /* offset=0x0024 flags=0x0018001040010215 */ UCurveVector* RecoilCurve;
  /* offset=0x0028 flags=0x0018001040010215 */ int32 BulletPerSwitch;
  /* offset=0x002c flags=0x0018001040010215 */ float TimePerSwitch;
  /* offset=0x0030 flags=0x0018001040010215 */ bool SwitchOnTime;
  /* offset=0x0034 flags=0x0018001040010215 */ float RecoilSpeedVertical;
  /* offset=0x0038 flags=0x0018001040010215 */ float RecoilSpeedHorizontal;
  /* offset=0x003c flags=0x0018001040010215 */ float RecovertySpeedVertical;
  /* offset=0x0040 flags=0x0018001040010215 */ float RecoilValueClimb;
  /* offset=0x0044 flags=0x0018001040010215 */ float RecoilValueFail;
  /* offset=0x0048 flags=0x0018001040010215 */ float RecoilModifierStand;
  /* offset=0x004c flags=0x0018001040010215 */ float RecoilModifierCrouch;
  /* offset=0x0050 flags=0x0018001040010215 */ float RecoilModifierProne;
  /* offset=0x0054 flags=0x0018001040010215 */ float RecoilHorizontalMinScalar;
  /* offset=0x0058 flags=0x0018001040010215 */ float BurstEmptyDelay;
  /* offset=0x005c flags=0x0018001040010215 */ bool ShootSightReturn;
  /* offset=0x0060 flags=0x0018001040010215 */ float ShootSightReturnSpeed;
};

struct FSTBaseBuffTemplateItem {
  /* offset=0x0000 flags=0x0018001040000205 */ FName Name;
  /* offset=0x0008 flags=0x001a00104008020d */ USTBaseBuff* Buff;
};

struct FSTExtraVehicleSeat {
  /* offset=0x0000 flags=0x0018001040000201 */ enum ESTExtraVehicleSeatType SeatType;
  /* offset=0x0008 flags=0x0018001040000201 */ FName AnimCompTagName;
  /* offset=0x0010 flags=0x0018001040000201 */ FName EnterVehicleSocket;
  /* offset=0x0018 flags=0x0018001040000201 */ FName LeaveVehicleSocket;
  /* offset=0x0020 flags=0x0018001040000201 */ uint8 OccupyMovementMode;
  /* offset=0x0021 flags=0x0018001040000201 */ uint8 HoldWeaponType;
  /* offset=0x0022 flags=0x0018001040000201 */ uint8 SeatSpecialType;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 GUIDisplayIndex;
};

struct FSTExtraVehicleWheelHP {
  /* offset=0x0000 flags=0x0018001040000205 */ float HPMax;
  /* offset=0x0008 flags=0x0018001040000205 */ FName BoneName;
};

struct FSTPointDamageEvent: FPointDamageEvent {
};

struct FSTR_CameraSetting {
  /* offset=0x0000 flags=0x0008001040000205 */ float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;
  /* offset=0x0004 flags=0x0008001040000205 */ float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;
  /* offset=0x0008 flags=0x0008001040000005 */ struct FVector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;
};

struct FSTReplicatedVehicleState {
  /* offset=0x0000 flags=0x0018001040000200 */ int8 SteeringInput;
  /* offset=0x0001 flags=0x0018001040000200 */ int8 ThrottleInput;
  /* offset=0x0002 flags=0x0018001040000200 */ int8 BrakeInput;
  /* offset=0x0003 flags=0x0018001040000200 */ int8 HandbrakeInput;
  /* offset=0x0004 flags=0x0018001040000200 */ int8 CurrentGear;
};

struct FSTVehicleWheelDust {
  /* offset=0x0000 flags=0x0018001040010201 */ uint8 ContactSurface;
  /* offset=0x0004 flags=0x0018001040010201 */ UParticleSystem* MoveFx;
  /* offset=0x0008 flags=0x0018001040010201 */ UParticleSystem* SlipFx;
  /* offset=0x000c flags=0x0018001040010201 */ UParticleSystem* HubFx;
  /* offset=0x0010 flags=0x0018001040010201 */ float minSpeed;
};

struct FScalarMaterialInput: FMaterialInput {
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 UseConstant:1;
  /* offset=0x0034 flags=0x0018001040000200 */ float Constant;
};

struct FScalarParameterNameAndCurve {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 Index;
  /* offset=0x000c flags=0x0010000000000000 */ struct FRichCurve ParameterCurve;
};

struct FScalarParameterValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000205 */ float ParameterValue;
  /* offset=0x000c flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

struct FScrollBarStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush HorizontalBackgroundImage;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush VerticalBackgroundImage;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush VerticalTopSlotImage;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush HorizontalTopSlotImage;
  /* offset=0x01a8 flags=0x0010000000000005 */ struct FSlateBrush VerticalBottomSlotImage;
  /* offset=0x0210 flags=0x0010000000000005 */ struct FSlateBrush HorizontalBottomSlotImage;
  /* offset=0x0278 flags=0x0010000000000005 */ struct FSlateBrush NormalThumbImage;
  /* offset=0x02e0 flags=0x0010000000000005 */ struct FSlateBrush HoveredThumbImage;
  /* offset=0x0348 flags=0x0010000000000005 */ struct FSlateBrush DraggedThumbImage;
};

struct FScrollBoxStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush TopShadowBrush;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush BottomShadowBrush;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush LeftShadowBrush;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush RightShadowBrush;
};

struct FSearchedPickUpItemResult {
  /* offset=0x0000 flags=0x0018001040000214 */ APickUpWrapperActor* Wrapper;
  /* offset=0x0008 flags=0x0010000000000014 */ struct FPickUpItemData MainItemData;
};

struct FSearchedTombBoxAndWrapperListResult {
  /* offset=0x0000 flags=0x0018001040000214 */ APlayerTombBox* Box;
  /* offset=0x0004 flags=0x0010000000000214 */ TArray<struct FSearchedPickUpItemResult> SearchedPickUpItemResultList;
};

struct FSecurityLogHitTargetInfo {
};

struct FSensibilityConfig {
  /* offset=0x0000 flags=0x0010001000000004 */ struct FSensibilityMode NormalMode;
  /* offset=0x0014 flags=0x0010001000000004 */ struct FSensibilityMode FireMode;
  /* offset=0x0028 flags=0x0010001000000004 */ struct FSensibilityMode MotionMode;
};

struct FSensibilityMode {
  /* offset=0x0000 flags=0x0018001040000204 */ float NoAim;
  /* offset=0x0004 flags=0x0018001040000204 */ float Sight1X;
  /* offset=0x0008 flags=0x0018001040000204 */ float Sight2X;
  /* offset=0x000c flags=0x0018001040000204 */ float Sight4X;
  /* offset=0x0010 flags=0x0018001040000204 */ float Sight8X;
};

struct FServerCheckBox {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 PoseID;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector BodyBoundBoxExtent;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector HeadBoundBoxExtent;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector Offset;
  /* offset=0x0028 flags=0x0018001040000005 */ struct FVector PitchOffset;
  /* offset=0x0034 flags=0x0018001040000205 */ float ReferenceHSlope;
  /* offset=0x0038 flags=0x0018001040000205 */ float ReferenceVSlope;
  /* offset=0x003c flags=0x0018001040000205 */ float HMinScale;
  /* offset=0x0040 flags=0x0018001040000205 */ float VMinScale;
  /* offset=0x0044 flags=0x0018001040000205 */ float HMaxScale;
  /* offset=0x0048 flags=0x0018001040000205 */ float VMaxScale;
};

struct FServerHitEnemyReplicatedData {
  /* offset=0x0000 flags=0x0018001040000201 */ ASTExtraBaseCharacter* HitTargetPawn;
  /* offset=0x0004 flags=0x0018001040000201 */ uint32 EventID;
};

struct FShapedTextOptions {
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bOverride_TextShapingMethod:1;
  /* offset=0x0000 flags=0x0018001000000001 */ uint8 bOverride_TextFlowDirection:1;
  /* offset=0x0001 flags=0x0018041040000215 */ enum ETextShapingMethod TextShapingMethod;
  /* offset=0x0002 flags=0x0018041040000215 */ enum ETextFlowDirection TextFlowDirection;
};

struct FShootWeaponDamageEvent: FSTPointDamageEvent {
};

struct FSimViewData {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 ViewPitch;
  /* offset=0x0001 flags=0x0018001040000200 */ uint8 ViewYaw;
  /* offset=0x0002 flags=0x0018001040000200 */ uint8 ViewRoll;
};

struct FSimpleMemberReference {
  /* offset=0x0000 flags=0x0018001040000200 */ UObject* MemberParent;
  /* offset=0x0008 flags=0x0018001040000200 */ FName MemberName;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FGuid MemberGuid;
};

struct FSimplygonChannelCastingSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 MaterialChannel;
  /* offset=0x0001 flags=0x0018001040000201 */ uint8 Caster;
  /* offset=0x0002 flags=0x0018001040000201 */ bool bActive;
  /* offset=0x0003 flags=0x0018001040000201 */ uint8 ColorChannels;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 BitsPerChannel;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bUseSRGB;
  /* offset=0x0009 flags=0x0018001040000201 */ bool bBakeVertexColors;
  /* offset=0x000a flags=0x0018001040000201 */ bool bFlipBackfacingNormals;
  /* offset=0x000b flags=0x0018001040000201 */ bool bUseTangentSpaceNormals;
  /* offset=0x000c flags=0x0018001040000201 */ bool bFlipGreenChannel;
};

struct FSimplygonMaterialLODSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bActive;
  /* offset=0x0001 flags=0x0018001040000201 */ uint8 MaterialLODType;
  /* offset=0x0002 flags=0x0018001040000201 */ bool bUseAutomaticSizes;
  /* offset=0x0003 flags=0x0018001040000201 */ uint8 TextureWidth;
  /* offset=0x0004 flags=0x0018001040000201 */ uint8 TextureHeight;
  /* offset=0x0005 flags=0x0018001040000201 */ uint8 SamplingQuality;
  /* offset=0x0008 flags=0x0018001040000201 */ int32 GutterSpace;
  /* offset=0x000c flags=0x0018001040000201 */ uint8 TextureStrech;
  /* offset=0x000d flags=0x0018001040000201 */ bool bReuseExistingCharts;
  /* offset=0x0010 flags=0x0010000000000200 */ TArray<struct FSimplygonChannelCastingSettings> ChannelsToCast;
  /* offset=0x001c flags=0x0018001040000201 */ bool bBakeVertexData;
  /* offset=0x001d flags=0x0018001040000201 */ bool bBakeActorData;
  /* offset=0x001e flags=0x0018001040000201 */ bool bAllowMultiMaterial;
  /* offset=0x001f flags=0x0018001040000201 */ bool bPreferTwoSideMaterials;
  /* offset=0x0020 flags=0x0018001040000201 */ bool bUseVertexWeights;
  /* offset=0x0024 flags=0x0010000000000000 */ struct FOutputMaterialInfo OutputMaterialInfo;
};

struct FSimplygonRemeshingSettings {
  /* offset=0x0000 flags=0x0018001040000200 */ bool bActive;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 ScreenSize;
  /* offset=0x0008 flags=0x0018001040000201 */ bool bRecalculateNormals;
  /* offset=0x000c flags=0x0018001040000201 */ float HardAngleThreshold;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 MergeDistance;
  /* offset=0x0014 flags=0x0018001040000201 */ bool bUseClippingPlane;
  /* offset=0x0018 flags=0x0018001040000201 */ float ClippingLevel;
  /* offset=0x001c flags=0x0018001040000201 */ int32 AxisIndex;
  /* offset=0x0020 flags=0x0018001040000201 */ bool bPlaneNegativeHalfspace;
  /* offset=0x0021 flags=0x0018001040000201 */ bool bUseMassiveLOD;
  /* offset=0x0022 flags=0x0018001040000201 */ bool bUseAggregateLOD;
  /* offset=0x0024 flags=0x0010000000000001 */ struct FSimplygonMaterialLODSettings MaterialLODSettings;
};

struct FSimulatedRootMotionReplicatedMove {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0008 flags=0x0010008000000000 */ struct FRepRootMotionMontage RootMotion;
};

struct FSingleAnimationPlayData {
  /* offset=0x0000 flags=0x0018001040000205 */ UAnimationAsset* AnimToPlay;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bSavedLooping:1;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bSavedPlaying:1;
  /* offset=0x0008 flags=0x0018001040000205 */ float SavedPosition;
  /* offset=0x000c flags=0x0018041040000205 */ float SavedPlayRate;
};

struct FSkelMeshComponentLODInfo {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<bool> HiddenMaterials;
};

struct FSkelMeshSkinWeightInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 Bones;
  /* offset=0x0020 flags=0x0018001040000200 */ uint8 Weights;
};

struct FSkeletalMaterial {
  /* offset=0x0000 flags=0x0018001040000215 */ UMaterialInterface* MaterialInterface;
  /* offset=0x0004 flags=0x0018001060000200 */ bool bEnableShadowCasting;
  /* offset=0x0005 flags=0x0018001060000200 */ bool bRecomputeTangent;
  /* offset=0x0008 flags=0x0018001040000215 */ FName MaterialSlotName;
  /* offset=0x0010 flags=0x0010001000020015 */ struct FMeshUVChannelInfo UVChannelData;
};

struct FSkeletalMeshLODGroupSettings {
  /* offset=0x0000 flags=0x0028081040000201 */ float ScreenSize;
  /* offset=0x0004 flags=0x0020080000000001 */ struct FSkeletalMeshOptimizationSettings OptimizationSettings;
};

struct FSkeletalMeshLODInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ float ScreenSize;
  /* offset=0x0004 flags=0x0018001040000201 */ float LODHysteresis;
  /* offset=0x0008 flags=0x0010000000000200 */ TArray<int32> LODMaterialMap;
  /* offset=0x0014 flags=0x0010000020000200 */ TArray<bool> bEnableShadowCasting;
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<struct FTriangleSortSettings> TriangleSortSettings;
  /* offset=0x002c flags=0x0018001000000000 */ uint8 bHasBeenSimplified:1;
  /* offset=0x0030 flags=0x0010000000000001 */ struct FSkeletalMeshOptimizationSettings ReductionSettings;
  /* offset=0x0178 flags=0x0010000020000000 */ struct FSimplygonRemeshingSettings RemeshingSettings;
  /* offset=0x0204 flags=0x0010000000000001 */ struct FGroupedSkeletalOptimizationSettings OptimizationSettings;
  /* offset=0x0418 flags=0x0010000020000200 */ TArray<FName> RemovedBones;
  /* offset=0x0424 flags=0x0010000000000201 */ TArray<struct FBoneReference> BonesToRemove;
  /* offset=0x0430 flags=0x0018001040000201 */ UAnimSequence* BakePose;
  /* offset=0x0434 flags=0x0018040000020201 */ FString SourceImportFilename;
  /* offset=0x0440 flags=0x0018001000000000 */ uint8 bHasPerLODVertexColors:1;
};

struct FSkeletalMeshOptimizationSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 ReductionMethod;
  /* offset=0x0004 flags=0x0018001040000201 */ float NumOfTrianglesPercentage;
  /* offset=0x0008 flags=0x0018001040000201 */ float MaxDeviationPercentage;
  /* offset=0x000c flags=0x0018001040000201 */ int32 ScreenSize;
  /* offset=0x0010 flags=0x0018001040000201 */ float WeldingThreshold;
  /* offset=0x0014 flags=0x0018001040000201 */ bool bRecalcNormals;
  /* offset=0x0018 flags=0x0018001040000201 */ float NormalsThreshold;
  /* offset=0x001c flags=0x0018001040000201 */ uint8 SilhouetteImportance;
  /* offset=0x001d flags=0x0018001040000201 */ uint8 TextureImportance;
  /* offset=0x001e flags=0x0018001040000201 */ uint8 ShadingImportance;
  /* offset=0x001f flags=0x0018001040000201 */ uint8 SkinningImportance;
  /* offset=0x0020 flags=0x0018001040000201 */ float BoneReductionRatio;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 MaxBonesPerVertex;
  /* offset=0x0028 flags=0x0018001040000201 */ bool bTransferMorphTarget;
  /* offset=0x002c flags=0x0010000020000200 */ TArray<struct FBoneReference> BonesToRemove;
  /* offset=0x0038 flags=0x0018001040000201 */ int32 BaseLOD;
  /* offset=0x003c flags=0x0018001040000200 */ int32 LODChainLastIndex;
  /* offset=0x0040 flags=0x0018001040000201 */ bool bUseVertexWeights;
  /* offset=0x0041 flags=0x0018001040000201 */ bool bUseVertexWeightsForMaterial;
  /* offset=0x0042 flags=0x0018001040000201 */ bool bSimplifyMaterials;
  /* offset=0x0044 flags=0x0010000020000000 */ struct FSimplygonMaterialLODSettings MaterialLODSettings;
  /* offset=0x00ac flags=0x0010001000000001 */ struct FMaterialProxySettings MaterialSettings;
  /* offset=0x0140 flags=0x0018001040000201 */ bool bForceRebuild;
  /* offset=0x0144 flags=0x0018001060000200 */ UAnimSequence* BakePose;
};

struct FSkillAction_AttachActorCreateData {
  /* offset=0x0000 flags=0x001c001040000205 */ UClass<AActor>* ActorTemplate;
  /* offset=0x0008 flags=0x0018001040000205 */ FName AttachSocketName;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector RelativeLocation;
  /* offset=0x001c flags=0x0010001040000005 */ struct FRotator RelativeRotation;
  /* offset=0x0028 flags=0x0018001040000205 */ bool DestroyAfterSkill;
  /* offset=0x0029 flags=0x0018001040000205 */ bool DestroyAfterPhase;
};

struct FSkillAction_SpawnActorCreateData {
  /* offset=0x0000 flags=0x001c001040000205 */ UClass<AActor>* ActorTemplate;
  /* offset=0x0004 flags=0x001800104008020d */ UUTSkillLocationPicker* LocationPicker;
  /* offset=0x0008 flags=0x0018001040000205 */ bool bLocalSpawn;
  /* offset=0x0009 flags=0x0018001040000205 */ bool bEnableAttach;
  /* offset=0x0010 flags=0x0018001040000205 */ FName AttachSocket;
  /* offset=0x0018 flags=0x0018001040000005 */ struct FVector OffsetLocationStand;
  /* offset=0x0024 flags=0x0018001040000005 */ struct FVector OffsetLocationCrouch;
  /* offset=0x0030 flags=0x0018001040000005 */ struct FVector OffsetLocationProne;
  /* offset=0x003c flags=0x0010001040000005 */ struct FRotator OffsetRotation;
};

struct FSkillAction_SpawnProjectileCreateData {
  /* offset=0x0000 flags=0x001c001040000205 */ UClass<AUAEProjectile>* ProjectileTemplate;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector OffsetLocation;
  /* offset=0x0010 flags=0x0010001040000005 */ struct FRotator OffsetRotation;
};

struct FSkillConditionWarpper {
  /* offset=0x0000 flags=0x001a00104008020d */ UUTSkillCondition* SkillCondition;
};

struct FSkillPoseMontageData {
  /* offset=0x0000 flags=0x0018001040000201 */ UAnimMontage* AnimMontage_Stand;
  /* offset=0x0004 flags=0x0018001040000201 */ UAnimMontage* AnimMontage_Crouch;
  /* offset=0x0008 flags=0x0018001040000201 */ UAnimMontage* AnimMontage_Prone;
  /* offset=0x000c flags=0x0018001040000201 */ UAnimMontage* AnimMontage_Vehicle;
};

struct FSlateBrush {
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector2D ImageSize;
  /* offset=0x000c flags=0x0010001000000005 */ struct FMargin Margin;
  /* offset=0x001c flags=0x0010000000000005 */ struct FSlateColor TintColor;
  /* offset=0x0038 flags=0x0028081040000205 */ UObject* ResourceObject;
  /* offset=0x0040 flags=0x0028081040000200 */ FName ResourceName;
  /* offset=0x0048 flags=0x0020081000000000 */ struct FBox2D UVRegion;
  /* offset=0x005c flags=0x0018001040000205 */ uint8 DrawAs;
  /* offset=0x005d flags=0x0018001040000205 */ uint8 Tiling;
  /* offset=0x005e flags=0x0018001040000205 */ uint8 Mirroring;
  /* offset=0x005f flags=0x0018001040000200 */ uint8 ImageType;
  /* offset=0x0060 flags=0x0028081000000000 */ uint8 bIsDynamicallyLoaded:1;
  /* offset=0x0060 flags=0x0028081020000000 */ uint8 bHasUObject:1;
};

struct FSlateChildSize {
  /* offset=0x0000 flags=0x0018001040000205 */ float Value;
  /* offset=0x0004 flags=0x0018001040000205 */ uint8 SizeRule;
};

struct FSlateColor {
  /* offset=0x0000 flags=0x0028081040000005 */ struct FLinearColor SpecifiedColor;
  /* offset=0x0010 flags=0x0028081040000205 */ uint8 ColorUseRule;
};

struct FSlateFontInfo {
  /* offset=0x0000 flags=0x0018001040000205 */ UObject* FontObject;
  /* offset=0x0004 flags=0x0018001040000205 */ UObject* FontMaterial;
  /* offset=0x0008 flags=0x0018001000000005 */ struct FFontOutlineSettings OutlineSettings;
  /* offset=0x0030 flags=0x0018001040000205 */ FName TypefaceFontName;
  /* offset=0x0038 flags=0x0018001040000205 */ int32 Size;
};

struct FSlateMeshVertex {
  /* offset=0x0000 flags=0x0018001040000000 */ struct FVector2D Position;
  /* offset=0x0008 flags=0x0018001040000000 */ struct FColor Color;
  /* offset=0x000c flags=0x0018001040000000 */ struct FVector2D UV0;
  /* offset=0x0014 flags=0x0018001040000000 */ struct FVector2D UV1;
  /* offset=0x001c flags=0x0018001040000000 */ struct FVector2D UV2;
  /* offset=0x0024 flags=0x0018001040000000 */ struct FVector2D UV3;
  /* offset=0x002c flags=0x0018001040000000 */ struct FVector2D UV4;
  /* offset=0x0034 flags=0x0018001040000000 */ struct FVector2D UV5;
};

struct FSlateSound {
  /* offset=0x0000 flags=0x0028081040000205 */ UObject* ResourceObject;
};

struct FSlateWidgetStyle {
};

struct FSliderStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush NormalBarImage;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush DisabledBarImage;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush NormalThumbImage;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush DisabledThumbImage;
  /* offset=0x01a8 flags=0x0018001040000205 */ float BarThickness;
};

struct FSlotAnimationTrack {
  /* offset=0x0000 flags=0x0018001040000201 */ FName SlotName;
  /* offset=0x0008 flags=0x0010000000000001 */ struct FAnimTrack AnimTrack;
};

struct FSmartName {
  /* offset=0x0000 flags=0x0018001040020201 */ FName DisplayName;
};

struct FSmartNameContainer {
};

struct FSocketReference {
  /* offset=0x0000 flags=0x0018001040000201 */ FName SocketName;
};

struct FSoftClassPath: FSoftObjectPath {
};

struct FSoftObjectPath {
  /* offset=0x0000 flags=0x0018001040000200 */ FName AssetPathName;
  /* offset=0x0008 flags=0x0018000000000200 */ FString SubPathString;
};

struct FSonInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 xlevel;
  /* offset=0x0004 flags=0x0018000000000200 */ FString xname;
};

struct FSoundAttenuationSettings: FBaseAttenuationSettings {
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bAttenuate:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bSpatialize:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bAttenuateWithLPF:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bEnableListenerFocus:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bEnableFocusInterpolation:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bEnableOcclusion:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bUseComplexCollisionForOcclusion:1;
  /* offset=0x007c flags=0x0018001000000005 */ uint8 bEnableReverbSend:1;
  /* offset=0x007d flags=0x0018001000000005 */ uint8 bApplyNormalizationToStereoSounds:1;
  /* offset=0x007d flags=0x0018001000000005 */ uint8 bEnableLogFrequencyScaling:1;
  /* offset=0x007e flags=0x0018001060000200 */ uint8 DistanceType;
  /* offset=0x0080 flags=0x0018001040000205 */ float OmniRadius;
  /* offset=0x0084 flags=0x0018001040000205 */ float StereoSpread;
  /* offset=0x0088 flags=0x0018001040000205 */ uint8 SpatializationAlgorithm;
  /* offset=0x008c flags=0x0018001040000205 */ USpatializationPluginSourceSettingsBase* SpatializationPluginSettings;
  /* offset=0x0090 flags=0x0018001060000200 */ float RadiusMin;
  /* offset=0x0094 flags=0x0018001060000200 */ float RadiusMax;
  /* offset=0x0098 flags=0x0018001040000205 */ float LPFRadiusMin;
  /* offset=0x009c flags=0x0018001040000205 */ float LPFRadiusMax;
  /* offset=0x00a0 flags=0x0018001040000205 */ enum EAirAbsorptionMethod AbsorptionMethod;
  /* offset=0x00a4 flags=0x0010000000000005 */ struct FRuntimeFloatCurve CustomLowpassAirAbsorptionCurve;
  /* offset=0x00fc flags=0x0010000000000005 */ struct FRuntimeFloatCurve CustomHighpassAirAbsorptionCurve;
  /* offset=0x0154 flags=0x0018001040000205 */ float LPFFrequencyAtMin;
  /* offset=0x0158 flags=0x0018001040000205 */ float LPFFrequencyAtMax;
  /* offset=0x015c flags=0x0018001040000205 */ float HPFFrequencyAtMin;
  /* offset=0x0160 flags=0x0018001040000205 */ float HPFFrequencyAtMax;
  /* offset=0x0164 flags=0x0018001040000205 */ float FocusAzimuth;
  /* offset=0x0168 flags=0x0018001040000205 */ float NonFocusAzimuth;
  /* offset=0x016c flags=0x0018001040000205 */ float FocusDistanceScale;
  /* offset=0x0170 flags=0x0018001040000205 */ float NonFocusDistanceScale;
  /* offset=0x0174 flags=0x0018001040000205 */ float FocusPriorityScale;
  /* offset=0x0178 flags=0x0018001040000205 */ float NonFocusPriorityScale;
  /* offset=0x017c flags=0x0018001040000205 */ float FocusVolumeAttenuation;
  /* offset=0x0180 flags=0x0018001040000205 */ float NonFocusVolumeAttenuation;
  /* offset=0x0184 flags=0x0018001040000205 */ float FocusAttackInterpSpeed;
  /* offset=0x0188 flags=0x0018001040000205 */ float FocusReleaseInterpSpeed;
  /* offset=0x018c flags=0x0018001040000205 */ uint8 OcclusionTraceChannel;
  /* offset=0x0190 flags=0x0018001040000205 */ float OcclusionLowPassFilterFrequency;
  /* offset=0x0194 flags=0x0018001040000205 */ float OcclusionVolumeAttenuation;
  /* offset=0x0198 flags=0x0018001040000205 */ float OcclusionInterpolationTime;
  /* offset=0x019c flags=0x0018001040000205 */ UOcclusionPluginSourceSettingsBase* OcclusionPluginSettings;
  /* offset=0x01a0 flags=0x0018001040000205 */ enum EReverbSendMethod ReverbSendMethod;
  /* offset=0x01a4 flags=0x0018001040000205 */ UReverbPluginSourceSettingsBase* ReverbPluginSettings;
  /* offset=0x01a8 flags=0x0018001040000205 */ float ReverbWetLevelMin;
  /* offset=0x01ac flags=0x0018001040000205 */ float ReverbWetLevelMax;
  /* offset=0x01b0 flags=0x0018001040000205 */ float ReverbDistanceMin;
  /* offset=0x01b4 flags=0x0018001040000205 */ float ReverbDistanceMax;
  /* offset=0x01b8 flags=0x0010000000000005 */ struct FRuntimeFloatCurve CustomReverbSendCurve;
  /* offset=0x0210 flags=0x0018001040000205 */ float ManualReverbSendLevel;
};

struct FSoundClassAdjuster {
  /* offset=0x0000 flags=0x0018001040000201 */ USoundClass* SoundClassObject;
  /* offset=0x0004 flags=0x0018001040000201 */ float VolumeAdjuster;
  /* offset=0x0008 flags=0x0018001040000201 */ float PitchAdjuster;
  /* offset=0x000c flags=0x0018001000000001 */ uint8 bApplyToChildren:1;
  /* offset=0x0010 flags=0x0018001040000201 */ float VoiceCenterChannelVolumeAdjuster;
};

struct FSoundClassProperties {
  /* offset=0x0000 flags=0x0018001040000201 */ float Volume;
  /* offset=0x0004 flags=0x0018001040000201 */ float Pitch;
  /* offset=0x0008 flags=0x0018001040000201 */ float StereoBleed;
  /* offset=0x000c flags=0x0018001040000201 */ float LFEBleed;
  /* offset=0x0010 flags=0x0018001040000201 */ float VoiceCenterChannelVolume;
  /* offset=0x0014 flags=0x0018001040000201 */ float RadioFilterVolume;
  /* offset=0x0018 flags=0x0018001040000201 */ float RadioFilterVolumeThreshold;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bApplyEffects:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bAlwaysPlay:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bIsUISound:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bIsMusic:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bReverb:1;
  /* offset=0x0020 flags=0x0018001040000201 */ float Default2DReverbSendAmount;
  /* offset=0x0024 flags=0x0018001000000001 */ uint8 bCenterChannelOnly:1;
  /* offset=0x0024 flags=0x0018001000000001 */ uint8 bApplyAmbientVolumes:1;
  /* offset=0x0025 flags=0x0018001040000201 */ uint8 OutputTarget;
};

struct FSoundConcurrencySettings {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 MaxCount;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bLimitToOwner:1;
  /* offset=0x0005 flags=0x0018001040000205 */ uint8 ResolutionRule;
  /* offset=0x0008 flags=0x0018001040000205 */ float VolumeScale;
};

struct FSoundGroup {
  /* offset=0x0000 flags=0x0018001040004200 */ uint8 SoundGroup;
  /* offset=0x0004 flags=0x0018000000004200 */ FString DisplayName;
  /* offset=0x0010 flags=0x0018001000004000 */ uint8 bAlwaysDecompressOnLoad:1;
  /* offset=0x0014 flags=0x0018001040004200 */ float DecompressedDuration;
};

struct FSoundSourceBusSendInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ float SendLevel;
  /* offset=0x0004 flags=0x0018001040000201 */ USoundSourceBus* SoundSourceBus;
};

struct FSoundSubmixSendInfo {
  /* offset=0x0000 flags=0x0018001040000201 */ float SendLevel;
  /* offset=0x0004 flags=0x0018001040000201 */ USoundSubmix* SoundSubmix;
};

struct FSoundTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040000200 */ float Volume;
  /* offset=0x0008 flags=0x0018001040000200 */ float Pitch;
  /* offset=0x000c flags=0x0018001040000201 */ USoundBase* Sound;
};

struct FSourceEffectChainEntry {
  /* offset=0x0000 flags=0x0018001040000205 */ USoundEffectSourcePreset* Preset;
  /* offset=0x0004 flags=0x0018001000000005 */ uint8 bBypass:1;
};

struct FSpawnAndBackpackWeaponReplicatedData {
  /* offset=0x0000 flags=0x0018001040000204 */ ASTExtraWeapon* TargetWeapon;
  /* offset=0x0008 flags=0x0018001040000204 */ FName LogicSocket;
  /* offset=0x0010 flags=0x0018001040000204 */ bool bAutoUse;
  /* offset=0x0011 flags=0x0018001040000204 */ bool bNeedSwitch;
  /* offset=0x0018 flags=0x0018001000000004 */ struct FItemDefineID ID;
  /* offset=0x0030 flags=0x0018001040000204 */ bool bResetBulletNum;
  /* offset=0x0034 flags=0x0018001040000204 */ int32 OperationIndex;
};

struct FSpinBoxStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush BackgroundBrush;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush HoveredBackgroundBrush;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush ActiveFillBrush;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush InactiveFillBrush;
  /* offset=0x01a8 flags=0x0010000000000005 */ struct FSlateBrush ArrowsImage;
  /* offset=0x0210 flags=0x0010000000000000 */ struct FSlateColor ForegroundColor;
  /* offset=0x022c flags=0x0010001000000005 */ struct FMargin TextPadding;
};

struct FSplineCurves {
  /* offset=0x0000 flags=0x0018000000000000 */ struct FInterpCurveVector Position;
  /* offset=0x0014 flags=0x0018000000000000 */ struct FInterpCurveQuat Rotation;
  /* offset=0x0028 flags=0x0018000000000000 */ struct FInterpCurveVector Scale;
  /* offset=0x003c flags=0x0018000000000000 */ struct FInterpCurveFloat ReparamTable;
};

struct FSplineMeshParams {
  /* offset=0x0000 flags=0x0018001040000001 */ struct FVector startPos;
  /* offset=0x000c flags=0x0018001040000001 */ struct FVector StartTangent;
  /* offset=0x0018 flags=0x0018041040000001 */ struct FVector2D StartScale;
  /* offset=0x0020 flags=0x0018041040000201 */ float StartRoll;
  /* offset=0x0024 flags=0x0018041040000001 */ struct FVector2D StartOffset;
  /* offset=0x002c flags=0x0018001040000001 */ struct FVector EndPos;
  /* offset=0x0038 flags=0x0018001040000001 */ struct FVector EndTangent;
  /* offset=0x0044 flags=0x0018041040000001 */ struct FVector2D EndScale;
  /* offset=0x004c flags=0x0018041040000201 */ float EndRoll;
  /* offset=0x0050 flags=0x0018041040000001 */ struct FVector2D EndOffset;
};

struct FSplinePoint {
  /* offset=0x0000 flags=0x0018001040000205 */ float InputKey;
  /* offset=0x0004 flags=0x0018001040000005 */ struct FVector Position;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector ArriveTangent;
  /* offset=0x001c flags=0x0018001040000005 */ struct FVector LeaveTangent;
  /* offset=0x0028 flags=0x0010001040000005 */ struct FRotator Rotation;
  /* offset=0x0034 flags=0x0018001040000005 */ struct FVector Scale;
  /* offset=0x0040 flags=0x0018001040000205 */ uint8 Type;
};

struct FSpotGroupProperty {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 SpotGroupType;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 SpotGroupPercent;
  /* offset=0x0008 flags=0x0010000000000205 */ TArray<struct FSpotTypeProperty> SpotTypeProperties;
};

struct FSpotTypeProperty {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 SpotType;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 SpotPercentMin;
  /* offset=0x0008 flags=0x0018001040000205 */ int32 SpotPercentMax;
  /* offset=0x000c flags=0x0018001040000205 */ int32 SpotPercentDot;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 ItemPerSpotMin;
  /* offset=0x0014 flags=0x0018001040000205 */ int32 ItemPerSpotMax;
  /* offset=0x0018 flags=0x0010000000000205 */ TArray<struct FSpotWeight> WeightsPerValue;
  /* offset=0x0024 flags=0x0010000000000205 */ TArray<struct FSpotWeight> WeightsPerCategory;
};

struct FSpotWeight {
  /* offset=0x0000 flags=0x0018000000000205 */ FString Name;
  /* offset=0x000c flags=0x0018001040000205 */ int32 Weight;
};

struct FSpriteGeometryCollection {
  /* offset=0x0000 flags=0x0010040000000201 */ TArray<struct FSpriteGeometryShape> Shapes;
  /* offset=0x000c flags=0x0018001040000201 */ uint8 GeometryType;
  /* offset=0x0010 flags=0x0018001040000201 */ int32 PixelsPerSubdivisionX;
  /* offset=0x0014 flags=0x0018001040000201 */ int32 PixelsPerSubdivisionY;
  /* offset=0x0018 flags=0x0018041040000201 */ bool bAvoidVertexMerging;
  /* offset=0x001c flags=0x0018041040000201 */ float AlphaThreshold;
  /* offset=0x0020 flags=0x0018041040000201 */ float DetailAmount;
  /* offset=0x0024 flags=0x0018041040000201 */ float SimplifyEpsilon;
};

struct FSpriteGeometryShape {
  /* offset=0x0000 flags=0x0018001040020201 */ enum ESpriteShapeType ShapeType;
  /* offset=0x0004 flags=0x0010000000000201 */ TArray<struct FVector2D> Vertices;
  /* offset=0x0010 flags=0x0018001040020001 */ struct FVector2D BoxSize;
  /* offset=0x0018 flags=0x0018001040020001 */ struct FVector2D BoxPosition;
  /* offset=0x0020 flags=0x0018001040020201 */ float Rotation;
  /* offset=0x0024 flags=0x0018001040020201 */ bool bNegativeWinding;
};

struct FSpriteInstanceData {
  /* offset=0x0000 flags=0x0010001040000001 */ struct FMatrix Transform;
  /* offset=0x0040 flags=0x0018001040000201 */ UPaperSprite* SourceSprite;
  /* offset=0x0044 flags=0x0018001040000001 */ struct FColor VertexColor;
  /* offset=0x0048 flags=0x0018001040000201 */ int32 MaterialIndex;
};

struct FStatColorMapEntry {
  /* offset=0x0000 flags=0x0018001040044200 */ float In;
  /* offset=0x0004 flags=0x0018001040044000 */ struct FColor Out;
};

struct FStatColorMapping {
  /* offset=0x0000 flags=0x0018000000044200 */ FString StatName;
  /* offset=0x000c flags=0x0010000000044200 */ TArray<struct FStatColorMapEntry> ColorMap;
  /* offset=0x0018 flags=0x0018001000044000 */ uint8 DisableBlend:1;
};

struct FStaticMaterial {
  /* offset=0x0000 flags=0x0018001040000215 */ UMaterialInterface* MaterialInterface;
  /* offset=0x0008 flags=0x0018001040000215 */ FName MaterialSlotName;
  /* offset=0x0010 flags=0x0010001000020015 */ struct FMeshUVChannelInfo UVChannelData;
};

struct FStaticMeshComponentLODInfo {
  /* offset=0x0018 flags=0x0010000000000200 */ TArray<struct FPaintedVertex> PaintedVertices;
};

struct FStatusChange {
  /* offset=0x0000 flags=0x001c001040000205 */ UClass<USTBaseBuffStatusType>* StatusName;
  /* offset=0x0004 flags=0x0018001040000205 */ bool StatusValue;
};

struct FStreamingTextureBuildInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ uint32 PackedRelativeBox;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 TextureLevelIndex;
  /* offset=0x0008 flags=0x0018001040000200 */ float TexelFactor;
};

struct FStringCurve: FIndexedCurve {
  /* offset=0x0040 flags=0x0018000000000201 */ FString DefaultValue;
  /* offset=0x004c flags=0x0010000000000241 */ TArray<struct FStringCurveKey> Keys;
};

struct FStringCurveKey {
  /* offset=0x0000 flags=0x0018001040000201 */ float Time;
  /* offset=0x0004 flags=0x0018000000000201 */ FString Value;
};

struct FStructBoneOverride {
  /* offset=0x0000 flags=0x0018001040000205 */ FName BoneName;
  /* offset=0x0008 flags=0x0018001040000205 */ float Density;
  /* offset=0x000c flags=0x0018001040000205 */ float TestRadius;
};

struct FStructRedirect {
  /* offset=0x0000 flags=0x0018001040000200 */ FName OldStructName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName NewStructName;
};

struct FSubLevelComponentMapValue {
  /* offset=0x0000 flags=0x0018000000000201 */ FString Name;
  /* offset=0x000c flags=0x0010000000000201 */ TArray<int32> IndexOffsetArray;
  /* offset=0x0018 flags=0x0010000000000201 */ TArray<int32> VertexOffsetIndex;
  /* offset=0x0024 flags=0x0010000000000201 */ TArray<int32> BorderIndex1;
  /* offset=0x0030 flags=0x0010000000000201 */ TArray<int32> BorderIndex2;
  /* offset=0x003c flags=0x0010000000000201 */ TArray<int32> BorderIndex3;
  /* offset=0x0048 flags=0x0010000000000201 */ TArray<int32> BorderIndex4;
  /* offset=0x0054 flags=0x0010000000000201 */ TArray<int32> UnderBorderIndex1;
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<int32> UnderBorderIndex2;
  /* offset=0x006c flags=0x0010000000000201 */ TArray<int32> UnderBorderIndex3;
  /* offset=0x0078 flags=0x0010000000000201 */ TArray<int32> UnderBorderIndex4;
  /* offset=0x0084 flags=0x0010000000000201 */ TArray<int32> BorderIndicesBuffer1;
  /* offset=0x0090 flags=0x0010000000000201 */ TArray<int32> BorderIndicesBuffer2;
  /* offset=0x009c flags=0x0010000000000201 */ TArray<int32> BorderIndicesBuffer3;
  /* offset=0x00a8 flags=0x0010000000000201 */ TArray<int32> BorderIndicesBuffer4;
  /* offset=0x00b4 flags=0x0018000000000201 */ FString Sibling1Name;
  /* offset=0x00c0 flags=0x0018000000000201 */ FString Sibling2Name;
  /* offset=0x00cc flags=0x0018000000000201 */ FString Sibling3Name;
  /* offset=0x00d8 flags=0x0018000000000201 */ FString Sibling4Name;
  /* offset=0x00e4 flags=0x0018001040000201 */ int32 Sibling1Idx;
  /* offset=0x00e8 flags=0x0018001040000201 */ int32 Sibling2Idx;
  /* offset=0x00ec flags=0x0018001040000201 */ int32 Sibling3Idx;
  /* offset=0x00f0 flags=0x0018001040000201 */ int32 Sibling4Idx;
};

struct FSubmixEffectDynamicsProcessorSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ enum ESubmixEffectDynamicsProcessorType DynamicsProcessorType;
  /* offset=0x0001 flags=0x0018001040000205 */ enum ESubmixEffectDynamicsPeakMode PeakMode;
  /* offset=0x0004 flags=0x0018001040000205 */ float LookAheadMsec;
  /* offset=0x0008 flags=0x0018001040000205 */ float AttackTimeMsec;
  /* offset=0x000c flags=0x0018001040000205 */ float ReleaseTimeMsec;
  /* offset=0x0010 flags=0x0018001040000205 */ float ThresholdDb;
  /* offset=0x0014 flags=0x0018001040000205 */ float Ratio;
  /* offset=0x0018 flags=0x0018001040000205 */ float KneeBandwidthDb;
  /* offset=0x001c flags=0x0018001040000205 */ float InputGainDb;
  /* offset=0x0020 flags=0x0018001040000205 */ float OutputGainDb;
  /* offset=0x0024 flags=0x0018001000000005 */ uint8 bChannelLinked:1;
  /* offset=0x0024 flags=0x0018001000000005 */ uint8 bAnalogMode:1;
};

struct FSubmixEffectEQBand {
  /* offset=0x0000 flags=0x0018001040000205 */ float Frequency;
  /* offset=0x0004 flags=0x0018001040000205 */ float Bandwidth;
  /* offset=0x0008 flags=0x0018001040000205 */ float GainDb;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bEnabled:1;
};

struct FSubmixEffectReverbSettings {
  /* offset=0x0000 flags=0x0018001040000205 */ float Density;
  /* offset=0x0004 flags=0x0018001040000205 */ float Diffusion;
  /* offset=0x0008 flags=0x0018001040000205 */ float Gain;
  /* offset=0x000c flags=0x0018001040000205 */ float GainHF;
  /* offset=0x0010 flags=0x0018001040000205 */ float DecayTime;
  /* offset=0x0014 flags=0x0018001040000205 */ float DecayHFRatio;
  /* offset=0x0018 flags=0x0018001040000205 */ float ReflectionsGain;
  /* offset=0x001c flags=0x0018001040000205 */ float ReflectionsDelay;
  /* offset=0x0020 flags=0x0018001040000205 */ float LateGain;
  /* offset=0x0024 flags=0x0018001040000205 */ float LateDelay;
  /* offset=0x0028 flags=0x0018001040000205 */ float AirAbsorptionGainHF;
  /* offset=0x002c flags=0x0018001040000205 */ float WetLevel;
};

struct FSubmixEffectSubmixEQSettings {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FSubmixEffectEQBand> EQBands;
};

struct FSubsurfaceProfileStruct {
  /* offset=0x0000 flags=0x0018001040000215 */ float ScatterRadius;
  /* offset=0x0004 flags=0x0018001040000015 */ struct FLinearColor SubsurfaceColor;
  /* offset=0x0014 flags=0x0018001040000015 */ struct FLinearColor FalloffColor;
};

struct FSubtitleCue {
  /* offset=0x0000 flags=0x0010000000000001 */ FText Text;
  /* offset=0x000c flags=0x0018001040000201 */ float Time;
};

struct FSupportedAreaData {
  /* offset=0x0000 flags=0x0018000000000200 */ FString AreaClassName;
  /* offset=0x000c flags=0x0018001040000200 */ int32 AreaID;
  /* offset=0x0010 flags=0x0018001040002200 */ UClass<UObject>* AreaClass;
};

struct FSurviveTableRowBase: FTableRowBase {
  /* offset=0x0004 flags=0x0018001040000205 */ int32 ID;
  /* offset=0x0008 flags=0x0018001040000205 */ int32 PickUpSoundID;
};

struct FSwitchCameraData: FCameraData {
  /* offset=0x0014 flags=0x0018001040000201 */ float StartCameraSwitchDelayTimeFrom_Normal;
  /* offset=0x0018 flags=0x0018001040000201 */ float StartCameraSwitchDelayTimeFrom_Near;
  /* offset=0x001c flags=0x0018001040000201 */ float StartCameraSwitchDelayTimeFrom_Aim;
  /* offset=0x0020 flags=0x0018001040000201 */ float CameraSwitchTime;
};

struct FSyncAKEvent {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 AkEventID;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FVector AkLocation;
};

struct FTLog_PickUpItemFlow {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 ItemSpesificID;
  /* offset=0x0004 flags=0x0018001040000201 */ int32 Count;
  /* offset=0x0008 flags=0x0018001040000001 */ struct FVector Location;
  /* offset=0x0014 flags=0x0018000000000201 */ FString TimeStr;
};

struct FTLog_PropEquipUnequipFlow {
  /* offset=0x0000 flags=0x0018001040000201 */ int32 ItemSpesificID;
  /* offset=0x0004 flags=0x0018001040000201 */ enum ETLog_BackpackEquipmentSlotType SlotType;
  /* offset=0x0005 flags=0x0018001040000201 */ bool bEquip;
  /* offset=0x0008 flags=0x0018000000000201 */ FString TimeStr;
};

struct FTTEventTrack: FTTTrackBase {
  /* offset=0x000c flags=0x0018001040000200 */ UCurveFloat* CurveKeys;
};

struct FTTFloatTrack: FTTTrackBase {
  /* offset=0x000c flags=0x0018001040000200 */ UCurveFloat* CurveFloat;
};

struct FTTLinearColorTrack: FTTTrackBase {
  /* offset=0x000c flags=0x0018001040000200 */ UCurveLinearColor* CurveLinearColor;
};

struct FTTTrackBase {
  /* offset=0x0000 flags=0x0018001040000200 */ FName TrackName;
  /* offset=0x0008 flags=0x0018001040000200 */ bool bIsExternalCurve;
};

struct FTTVectorTrack: FTTTrackBase {
  /* offset=0x000c flags=0x0018001040000200 */ UCurveVector* CurveVector;
};

struct FTViewTarget {
  /* offset=0x0000 flags=0x0018001040000205 */ AActor* Target;
  /* offset=0x0010 flags=0x0010000000000005 */ struct FMinimalViewInfo POV;
  /* offset=0x0530 flags=0x0028081040000205 */ APlayerState* PlayerState;
};

struct FTableRowBase {
};

struct FTableRowStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0010000000000005 */ struct FSlateBrush SelectorFocusedBrush;
  /* offset=0x0070 flags=0x0010000000000005 */ struct FSlateBrush ActiveHoveredBrush;
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FSlateBrush ActiveBrush;
  /* offset=0x0140 flags=0x0010000000000005 */ struct FSlateBrush InactiveHoveredBrush;
  /* offset=0x01a8 flags=0x0010000000000005 */ struct FSlateBrush InactiveBrush;
  /* offset=0x0210 flags=0x0010000000000005 */ struct FSlateBrush EvenRowBackgroundHoveredBrush;
  /* offset=0x0278 flags=0x0010000000000005 */ struct FSlateBrush EvenRowBackgroundBrush;
  /* offset=0x02e0 flags=0x0010000000000005 */ struct FSlateBrush OddRowBackgroundHoveredBrush;
  /* offset=0x0348 flags=0x0010000000000005 */ struct FSlateBrush OddRowBackgroundBrush;
  /* offset=0x03b0 flags=0x0010000000000005 */ struct FSlateColor TextColor;
  /* offset=0x03cc flags=0x0010000000000005 */ struct FSlateColor SelectedTextColor;
  /* offset=0x03e8 flags=0x0010000000000005 */ struct FSlateBrush DropIndicator_Above;
  /* offset=0x0450 flags=0x0010000000000005 */ struct FSlateBrush DropIndicator_Onto;
  /* offset=0x04b8 flags=0x0010000000000005 */ struct FSlateBrush DropIndicator_Below;
};

struct FTagAndValue {
  /* offset=0x0000 flags=0x0018001040002204 */ FName Tag;
  /* offset=0x0008 flags=0x0018000000002204 */ FString Value;
};

struct FTeamMateStateInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ ASTExtraPlayerState* PlayerState;
  /* offset=0x0004 flags=0x0018001040000000 */ struct FVector Location;
  /* offset=0x0010 flags=0x0010001040000000 */ struct FRotator Rotation;
};

struct FTeamPlayerColorStruct {
  /* offset=0x0000 flags=0x0008001040000205 */ int32 PlayerIndex_2_B5DB2BC241DE79BAF475BE89C208CBB8;
  /* offset=0x0004 flags=0x0008001040000005 */ struct FLinearColor PlayerColor_5_2248AF6545C3D12AA0C1F18AF3A9AC40;
};

struct FTextBlockStyle: FSlateWidgetStyle {
  /* offset=0x0008 flags=0x0018000000000005 */ struct FSlateFontInfo Font;
  /* offset=0x0048 flags=0x0010000000000005 */ struct FSlateColor ColorAndOpacity;
  /* offset=0x0064 flags=0x0018001040000005 */ struct FVector2D ShadowOffset;
  /* offset=0x006c flags=0x0018001040000005 */ struct FLinearColor ShadowColorAndOpacity;
  /* offset=0x007c flags=0x0010000000000001 */ struct FSlateColor SelectedBackgroundColor;
  /* offset=0x0098 flags=0x0018041040000005 */ struct FLinearColor HighlightColor;
  /* offset=0x00a8 flags=0x0010040000000005 */ struct FSlateBrush HighlightShape;
  /* offset=0x0110 flags=0x0010040000000005 */ struct FSlateBrush UnderlineBrush;
};

struct FTextureLODGroup {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 Group;
  /* offset=0x000c flags=0x0018001040000200 */ int32 LODBias;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 NumStreamedMips;
  /* offset=0x0018 flags=0x0018001040000200 */ uint8 MipGenSettings;
  /* offset=0x001c flags=0x0018001040000200 */ int32 MinLODSize;
  /* offset=0x0020 flags=0x0018001040000200 */ int32 MaxLODSize;
  /* offset=0x0028 flags=0x0018001040000200 */ FName MinMagFilter;
  /* offset=0x0030 flags=0x0018001040000200 */ FName MipFilter;
};

struct FTextureParameterValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000205 */ UTexture* ParameterValue;
  /* offset=0x000c flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

struct FTickFunction {
  /* offset=0x0004 flags=0x0018041040010201 */ uint8 TickGroup;
  /* offset=0x0005 flags=0x0018041040010201 */ uint8 EndTickGroup;
  /* offset=0x0008 flags=0x0018041000010001 */ uint8 bTickEvenWhenPaused:1;
  /* offset=0x0008 flags=0x0018001000000000 */ uint8 bCanEverTick:1;
  /* offset=0x0008 flags=0x0018001000010001 */ uint8 bStartWithTickEnabled:1;
  /* offset=0x0008 flags=0x0018041000010001 */ uint8 bAllowTickOnDedicatedServer:1;
  /* offset=0x0030 flags=0x0018001040010201 */ float TickInterval;
};

struct FTimeDate {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 Millisecond;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 Second;
  /* offset=0x0008 flags=0x0018001040000205 */ int32 Minute;
  /* offset=0x000c flags=0x0018001040000205 */ int32 Hour;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 Day;
  /* offset=0x0014 flags=0x0018001040000205 */ int32 Month;
  /* offset=0x0018 flags=0x0018001040000205 */ int32 Year;
};

struct FTimeStamp {
  /* offset=0x0000 flags=0x0018000000000205 */ FString Title;
  /* offset=0x000c flags=0x0018001040000205 */ int32 Priority;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 StartTime;
  /* offset=0x0014 flags=0x0018001040000205 */ int32 endTime;
};

struct FTimeStretchCurve {
  /* offset=0x0000 flags=0x0048001040000201 */ float SamplingRate;
  /* offset=0x0004 flags=0x0048001040000201 */ float CurveValueMinPrecision;
  /* offset=0x0008 flags=0x0040000000020201 */ TArray<struct FTimeStretchCurveMarker> Markers;
  /* offset=0x0014 flags=0x0048001040020201 */ float Sum_dT_i_by_C_i;
};

struct FTimeStretchCurveMarker {
  /* offset=0x0000 flags=0x0018001040020201 */ float Time;
  /* offset=0x000c flags=0x0018001040020201 */ float Alpha;
};

struct FTimeline {
  /* offset=0x0000 flags=0x00480010c0000200 */ uint8 LengthMode;
  /* offset=0x0004 flags=0x00480010c0000200 */ float Length;
  /* offset=0x0008 flags=0x0048001000000000 */ uint8 bLooping:1;
  /* offset=0x0008 flags=0x0048001000000000 */ uint8 bReversePlayback:1;
  /* offset=0x0008 flags=0x0048001000000000 */ uint8 bPlaying:1;
  /* offset=0x000c flags=0x0048001040000200 */ float PlayRate;
  /* offset=0x0010 flags=0x0048001040000200 */ float Position;
  /* offset=0x0014 flags=0x0040008080000200 */ TArray<struct FTimelineEventEntry> Events;
  /* offset=0x0020 flags=0x0040008080000200 */ TArray<struct FTimelineVectorTrack> InterpVectors;
  /* offset=0x002c flags=0x0040008080000200 */ TArray<struct FTimelineFloatTrack> InterpFloats;
  /* offset=0x0038 flags=0x0040008080000200 */ TArray<struct FTimelineLinearColorTrack> InterpLinearColors;
  /* offset=0x0048 flags=0x0040001080080200 */ FOnTimelineEvent TimelinePostUpdateFunc;
  /* offset=0x0058 flags=0x0040001080080200 */ FOnTimelineEvent TimelineFinishedFunc;
  /* offset=0x00b0 flags=0x004c0010c0000200 */ UObject* PropertySetObject;
  /* offset=0x00b8 flags=0x00480010c0000200 */ FName DirectionPropertyName;
  /* offset=0x00c0 flags=0x00480010c0002200 */ UProperty* DirectionProperty;
};

struct FTimelineEventEntry {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0008 flags=0x0010001000080200 */ FOnTimelineEvent EventFunc;
};

struct FTimelineFloatTrack {
  /* offset=0x0000 flags=0x0018001040000200 */ UCurveFloat* FloatCurve;
  /* offset=0x0008 flags=0x0010001000080200 */ FOnTimelineFloat InterpFunc;
  /* offset=0x0018 flags=0x0018001040000200 */ FName TrackName;
  /* offset=0x0020 flags=0x0018001040000200 */ FName FloatPropertyName;
  /* offset=0x0028 flags=0x0018001040002200 */ UFloatProperty* FloatProperty;
};

struct FTimelineLinearColorTrack {
  /* offset=0x0000 flags=0x0018001040000200 */ UCurveLinearColor* LinearColorCurve;
  /* offset=0x0008 flags=0x0010001000080200 */ FOnTimelineLinearColor InterpFunc;
  /* offset=0x0018 flags=0x0018001040000200 */ FName TrackName;
  /* offset=0x0020 flags=0x0018001040000200 */ FName LinearColorPropertyName;
  /* offset=0x0028 flags=0x0018001040002200 */ UStructProperty* LinearColorProperty;
};

struct FTimelineVectorTrack {
  /* offset=0x0000 flags=0x0018001040000200 */ UCurveVector* VectorCurve;
  /* offset=0x0008 flags=0x0010001000080200 */ FOnTimelineVector InterpFunc;
  /* offset=0x0018 flags=0x0018001040000200 */ FName TrackName;
  /* offset=0x0020 flags=0x0018001040000200 */ FName VectorPropertyName;
  /* offset=0x0028 flags=0x0018001040002200 */ UStructProperty* VectorProperty;
};

struct FTimerHandle {
  /* offset=0x0000 flags=0x0048001040002200 */ uint64 Handle;
};

struct FTimespan {
};

struct FTireConfigMaterialFriction {
  /* offset=0x0000 flags=0x0018001040000201 */ UPhysicalMaterial* PhysicalMaterial;
  /* offset=0x0004 flags=0x0018001040000201 */ float FrictionScale;
};

struct FTireFrictionScalePair {
  /* offset=0x0000 flags=0x0018001040000200 */ UTireType* TireType;
  /* offset=0x0004 flags=0x0018001040000200 */ float FrictionScale;
};

struct FToggleTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040000201 */ uint8 ToggleAction;
};

struct FTouchInputControl {
  /* offset=0x0000 flags=0x0018001040000201 */ UTexture2D* Image1;
  /* offset=0x0004 flags=0x0018001040000201 */ UTexture2D* Image2;
  /* offset=0x0008 flags=0x0018001040000001 */ struct FVector2D Center;
  /* offset=0x0010 flags=0x0018001040000001 */ struct FVector2D VisualSize;
  /* offset=0x0018 flags=0x0018001040000001 */ struct FVector2D ThumbSize;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector2D InteractionSize;
  /* offset=0x0028 flags=0x0018001040000001 */ struct FVector2D InputScale;
  /* offset=0x0030 flags=0x0018000000000001 */ struct FKey MainInputKey;
  /* offset=0x0040 flags=0x0018000000000001 */ struct FKey AltInputKey;
};

struct FTrackToSkeletonMap {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 BoneTreeIndex;
};

struct FTransform {
  /* offset=0x0000 flags=0x0010001041000005 */ struct FQuat Rotation;
  /* offset=0x0010 flags=0x0018001041000005 */ struct FVector Translation;
  /* offset=0x001c flags=0x0018001041000005 */ struct FVector Scale3D;
};

struct FTransformBase {
  /* offset=0x0000 flags=0x0018001040000201 */ FName Node;
  /* offset=0x0008 flags=0x0010000000000001 */ struct FTransformBaseConstraint Constraints;
};

struct FTransformBaseConstraint {
  /* offset=0x0000 flags=0x0010000000000201 */ TArray<struct FRigTransformConstraint> TransformConstraints;
};

struct FTriangleSortSettings {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 TriangleSorting;
  /* offset=0x0001 flags=0x0018001040000201 */ uint8 CustomLeftRightAxis;
  /* offset=0x0008 flags=0x0018001040000201 */ FName CustomLeftRightBoneName;
};

struct FTwistConstraint: FConstraintBaseParams {
  /* offset=0x0014 flags=0x0018001040000201 */ float TwistLimitDegrees;
  /* offset=0x0018 flags=0x0018001040000201 */ uint8 TwistMotion;
};

struct FTwoVectors {
  /* offset=0x0000 flags=0x0018001041000005 */ struct FVector v1;
  /* offset=0x000c flags=0x0018001041000005 */ struct FVector v2;
};

struct FTypeface {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FTypefaceEntry> Fonts;
};

struct FTypefaceEntry {
  /* offset=0x0000 flags=0x0018001040000200 */ FName Name;
  /* offset=0x0008 flags=0x0018000000000000 */ struct FFontData Font;
};

struct FUAEResList {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 ResIndex;
  /* offset=0x0004 flags=0x0018000000000205 */ FString ResPathName;
  /* offset=0x0010 flags=0x0018001040000205 */ bool ServerNeedLoad;
  /* offset=0x0011 flags=0x0018001040000205 */ bool ClientNeedLoad;
  /* offset=0x0012 flags=0x0018001040000205 */ bool iEditorLoadType;
  /* offset=0x0013 flags=0x0018001040000205 */ bool BuildClientNeed;
  /* offset=0x0014 flags=0x0018001040000205 */ bool BuildServerNeed;
  /* offset=0x0015 flags=0x0018001040000205 */ bool IsResident;
};

struct FUIAdaptationStructure {
  /* offset=0x0000 flags=0x0008000000000205 */ FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;
  /* offset=0x000c flags=0x0008001040000205 */ float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;
  /* offset=0x0010 flags=0x0008001040000205 */ float RightOffset_7_338321234218040563FB88B423EA8023;
  /* offset=0x0014 flags=0x0008001040000205 */ float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;
  /* offset=0x0018 flags=0x0008001040000205 */ float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;
};

struct FUTBuffAttachment {
  /* offset=0x0000 flags=0x001800104008020d */ USceneComponent* Component;
  /* offset=0x0004 flags=0x001800104008020d */ USceneComponent* ComponentEnemy;
  /* offset=0x0008 flags=0x0018001040000205 */ FName SocketName;
  /* offset=0x0010 flags=0x0018001040000205 */ bool bShowOnlyFirstPersonView;
  /* offset=0x0014 flags=0x0018001040080208 */ USceneComponent* ComponentInstance;
};

struct FUTSkillActionCreateData {
  /* offset=0x0000 flags=0x0018001040000205 */ float DelayTime;
};

struct FUTSkillAppearance_ParticleSystem_Item {
  /* offset=0x0000 flags=0x001800104008020d */ UUTSkillPicker* TargetPicker;
  /* offset=0x0004 flags=0x0018001040000205 */ UParticleSystem* TemplateSelfTeam_Effect;
  /* offset=0x0008 flags=0x0018001040000205 */ UParticleSystem* TemplateEnermyTeam_Effect;
  /* offset=0x000c flags=0x0018001040000205 */ UParticleSystem* TemplateSelfTeamFPP_Effect;
  /* offset=0x0010 flags=0x0018001040000205 */ bool bLoop;
  /* offset=0x0014 flags=0x0018001040000205 */ float Scale;
  /* offset=0x0018 flags=0x0018001040000205 */ FName SocketName;
  /* offset=0x0020 flags=0x0018001040000005 */ struct FVector LocationOffset;
  /* offset=0x002c flags=0x0010001040000005 */ struct FRotator RotationOffset;
  /* offset=0x0038 flags=0x0018001040000005 */ struct FVector LocationOffsetTPP;
  /* offset=0x0044 flags=0x0010001040000005 */ struct FRotator RotationOffsetTPP;
  /* offset=0x0050 flags=0x0018001040000205 */ float ScaleTPP;
  /* offset=0x0058 flags=0x0018001040000205 */ FName HurtRotationSocketName;
  /* offset=0x0060 flags=0x0018001040000205 */ float AutoDispearTime;
  /* offset=0x0064 flags=0x0018001040000205 */ bool bAttachToPawn;
};

struct FUTSkillAppearance_SoundCue_Item {
  /* offset=0x0000 flags=0x0018001040000205 */ enum UTSkill_SoundCue_ListenType ListenType;
  /* offset=0x0004 flags=0x0018001040000205 */ UAkAudioEvent* AkEvent;
  /* offset=0x0008 flags=0x0018001040000205 */ bool bLoop;
};

struct FUTSkillCreateData {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 SkillGroupIndex;
  /* offset=0x0004 flags=0x0018001040000205 */ float Interval;
  /* offset=0x0008 flags=0x0018000000000205 */ FString CoolDownMessage;
  /* offset=0x0014 flags=0x0018001040000205 */ float Range;
  /* offset=0x0018 flags=0x001000800000020d */ TArray<UUTSkillPhase*> Phases;
  /* offset=0x0024 flags=0x0018001040000205 */ bool bIgnoreDamage;
};

struct FUTSkillEntryConfig {
  /* offset=0x0000 flags=0x0018001040010201 */ enum EUTSkillEntry Entry;
  /* offset=0x0004 flags=0x0018001040010201 */ int32 SkillIndex;
  /* offset=0x0008 flags=0x0018000000010201 */ FString Interrupts;
};

struct FUTSkillHitInfo {
  /* offset=0x0000 flags=0x0010000000020215 */ TArray<APawn*> ToPawn;
  /* offset=0x000c flags=0x0018001040020215 */ APawn* FromPawn;
  /* offset=0x0010 flags=0x0018001040020215 */ int32 SkillID;
  /* offset=0x0014 flags=0x0018001040020215 */ int32 SkillPhaseID;
  /* offset=0x0018 flags=0x0018001040000200 */ bool Flag;
};

struct FUTSkillPhaseCreateData {
  /* offset=0x0000 flags=0x0018001040000205 */ float PhaseDuration;
  /* offset=0x0004 flags=0x0018001040000205 */ float AltPhaseDuration;
  /* offset=0x0008 flags=0x0018001040000205 */ float CacheMouseInputTime;
  /* offset=0x000c flags=0x0018001040000205 */ bool bMustHasTarget;
  /* offset=0x000d flags=0x0018001040000205 */ bool bCoolDown;
  /* offset=0x0010 flags=0x001000800000020d */ TArray<UUTSkillCondition*> PhaseConditions;
  /* offset=0x001c flags=0x001800104009020d */ UUTSkillPicker* Picker;
  /* offset=0x0020 flags=0x001000800001020d */ TArray<UUTSkillEffect*> Actions;
  /* offset=0x002c flags=0x001000800001020d */ TArray<UUTSkillEffect*> HurtAppearances;
  /* offset=0x0038 flags=0x0018001040000205 */ enum UTSkillPhaseType PhaseType;
  /* offset=0x003c flags=0x0018000000000205 */ FString EnterPhaseTipString;
  /* offset=0x0048 flags=0x0010008000000208 */ TArray<UUTSkillEventEffectMapForEditor*> EditorEventEffectMap;
};

struct FUTSkillPickedTarget {
  /* offset=0x0000 flags=0x001c001040000200 */ AActor* Target;
  /* offset=0x0008 flags=0x0018001040000200 */ bool IsHeadshot;
  /* offset=0x0009 flags=0x0018001040000200 */ uint8 hitPos;
};

struct FUTSkillPickerCreateData {
  /* offset=0x0000 flags=0x0018001040000205 */ enum UTSkillPickerType PickerType;
  /* offset=0x0001 flags=0x0018001040000205 */ enum UTPickerTargetType PickerTargetType;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 PickerMaxCount;
  /* offset=0x0008 flags=0x0018001040000205 */ bool bIncludeOwner;
  /* offset=0x0009 flags=0x0018001040000205 */ bool bOnlyHero;
  /* offset=0x000a flags=0x0018001040000205 */ bool bEnableTrace;
  /* offset=0x000b flags=0x0018001040000205 */ bool bIsUsingViewRotation;
};

struct FUTSkillPicker_FanCreateData {
  /* offset=0x0000 flags=0x0018001040000205 */ float Radius;
  /* offset=0x0004 flags=0x0018001040000205 */ float Angle;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FVector Offset;
  /* offset=0x0014 flags=0x0018001040000205 */ bool Random;
  /* offset=0x0015 flags=0x0018001040000205 */ bool IsCheckHeadshot;
  /* offset=0x0016 flags=0x0018001040000205 */ bool IsShowDebugFan;
};

struct FUTSkillSynData {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 CurSkillIndex;
  /* offset=0x0004 flags=0x0018001040000205 */ int32 CurSkillPhase;
};

struct FUniqueNetIdRepl: FUniqueNetIdWrapper {
};

struct FUniqueNetIdWrapper {
};

struct FUserActivity {
  /* offset=0x0000 flags=0x0018000000000204 */ FString ActionName;
};

struct FUserDetailSetting {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 DeviceQualityLevel;
  /* offset=0x0004 flags=0x0018001040000200 */ int32 UserQualitySetting;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 DeviceSupportHDR;
  /* offset=0x000c flags=0x0018001040000200 */ int32 IsOpenHDR;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 UserHDRSetting;
  /* offset=0x0014 flags=0x0018001040000200 */ float UserMCSSetting;
  /* offset=0x0018 flags=0x0018001040000200 */ int32 UserShadowSetting;
  /* offset=0x001c flags=0x0018001040000200 */ int32 PUBGLimitSetting;
};

struct FUserWidgetState {
  /* offset=0x0000 flags=0x0018000000000204 */ FString WidgetName;
  /* offset=0x0010 flags=0x0018001040000205 */ FName ContainerName;
  /* offset=0x0018 flags=0x0018001040000205 */ int32 ZOrder;
  /* offset=0x001c flags=0x001800104008020c */ UUAEUserWidget* Widget;
};

struct FVOscillator {
  /* offset=0x0000 flags=0x0010001000000001 */ struct FFOscillator X;
  /* offset=0x000c flags=0x0010001000000001 */ struct FFOscillator Y;
  /* offset=0x0018 flags=0x0010001000000001 */ struct FFOscillator Z;
};

struct FVaultData {
  /* offset=0x0000 flags=0x0008000000000205 */ FString montageSectionName_7_0E6EFDD2441CFF562A032DAC952922CF;
  /* offset=0x000c flags=0x0008001040000205 */ UCurveFloat* runCurve_4_EB26D4B04E0BF112150F9DAEBC25B4F7;
  /* offset=0x0010 flags=0x0008001040000205 */ UCurveFloat* fowardCurve_31_D55B5E974DFC24E74019D6A31F141C7C;
  /* offset=0x0014 flags=0x0008001040000205 */ float blockdis_28_FAA34AE04D5F621CD5FA08B1C4D4B37E;
  /* offset=0x0018 flags=0x0008001040000205 */ float blockheight_27_6E4FCDFF4446BA2250C19BB28913EBD8;
  /* offset=0x001c flags=0x0008001040000205 */ float jumplength_47_9688AE2B4F2BEF79873A64A463F93E21;
  /* offset=0x0020 flags=0x0000001040000205 */ bool IsJump_18_602D0B664C933E0434EF71A8DFFDBD7F;
  /* offset=0x0021 flags=0x0000001040000205 */ bool forceStartSync_39_921F70144A2C12C3A5C929BEE107315F;
  /* offset=0x0022 flags=0x0000001040000205 */ bool isPutUpGun_41_0B6F491C47984A012CE0A8A740398D10;
  /* offset=0x0024 flags=0x0008001040000205 */ float CountTime_44_F467486040D210D7A55E3A93FD62BD77;
  /* offset=0x0028 flags=0x0008001040000205 */ float playSpeed_50_D2F6C3D243B8799B4E0FE88E44823E6D;
  /* offset=0x002c flags=0x0008001040000205 */ float speedChangeTime_58_14BE38BF403A2B6F8E94E387CB638965;
  /* offset=0x0030 flags=0x0008001040000205 */ float changeSpeedRate_61_5D150C9C4C80B4F16BD0EF8309AC2BEA;
};

struct FVector {
  /* offset=0x0000 flags=0x0018001041000205 */ float X;
  /* offset=0x0004 flags=0x0018001041000205 */ float Y;
  /* offset=0x0008 flags=0x0018001041000205 */ float Z;
};

struct FVector2D {
  /* offset=0x0000 flags=0x0018001041000205 */ float X;
  /* offset=0x0004 flags=0x0018001041000205 */ float Y;
};

struct FVector2MaterialInput: FMaterialInput {
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 UseConstant:1;
  /* offset=0x0034 flags=0x0018001040000200 */ float ConstantX;
  /* offset=0x0038 flags=0x0018001040000200 */ float ConstantY;
};

struct FVector4 {
  /* offset=0x0000 flags=0x0018001041000205 */ float X;
  /* offset=0x0004 flags=0x0018001041000205 */ float Y;
  /* offset=0x0008 flags=0x0018001041000205 */ float Z;
  /* offset=0x000c flags=0x0018001041000205 */ float W;
};

struct FVectorMaterialInput: FMaterialInput {
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 UseConstant:1;
  /* offset=0x0034 flags=0x0018001040000000 */ struct FVector Constant;
};

struct FVectorParameterNameAndCurves {
  /* offset=0x0000 flags=0x0018001040000200 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000200 */ int32 Index;
  /* offset=0x000c flags=0x0010000000000000 */ struct FRichCurve XCurve;
  /* offset=0x0060 flags=0x0010000000000000 */ struct FRichCurve YCurve;
  /* offset=0x00b4 flags=0x0010000000000000 */ struct FRichCurve ZCurve;
};

struct FVectorParameterValue {
  /* offset=0x0000 flags=0x0018001040000205 */ FName ParameterName;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FLinearColor ParameterValue;
  /* offset=0x0018 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

struct FVectorSpringState {
};

struct FVector_NetQuantize: FVector {
};

struct FVector_NetQuantize10: FVector {
};

struct FVector_NetQuantize100: FVector {
};

struct FVector_NetQuantizeNormal: FVector {
};

struct FVehCharAnimData {
  /* offset=0x0000 flags=0x0018001040010205 */ uint8 VehAnimType;
  /* offset=0x0004 flags=0x0018001040010205 */ UAnimationAsset* VehAnim;
};

struct FVehicleClassStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018000000000200 */ FString VehiclePath;
  /* offset=0x0010 flags=0x0018001040000200 */ bool bValidPath;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 AllVehicleCount;
};

struct FVehicleDamageEvent: FSTPointDamageEvent {
};

struct FVehicleDifferential4WData {
  /* offset=0x0000 flags=0x0018001040000201 */ uint8 DifferentialType;
  /* offset=0x0004 flags=0x0018001040000201 */ float FrontRearSplit;
  /* offset=0x0008 flags=0x0018001040000201 */ float FrontLeftRightSplit;
  /* offset=0x000c flags=0x0018001040000201 */ float RearLeftRightSplit;
  /* offset=0x0010 flags=0x0018001040000201 */ float CentreBias;
  /* offset=0x0014 flags=0x0018001040000201 */ float FrontBias;
  /* offset=0x0018 flags=0x0018001040000201 */ float RearBias;
};

struct FVehicleEngineData {
  /* offset=0x0000 flags=0x0010000000000001 */ struct FRuntimeFloatCurve TorqueCurve;
  /* offset=0x0058 flags=0x0018001040000201 */ float MaxRPM;
  /* offset=0x005c flags=0x0018001040000201 */ float MOI;
  /* offset=0x0060 flags=0x0018041040000201 */ float DampingRateFullThrottle;
  /* offset=0x0064 flags=0x0018041040000201 */ float DampingRateZeroThrottleClutchEngaged;
  /* offset=0x0068 flags=0x0018041040000201 */ float DampingRateZeroThrottleClutchDisengaged;
};

struct FVehicleGearData {
  /* offset=0x0000 flags=0x0018001040000201 */ float Ratio;
  /* offset=0x0004 flags=0x0018001040000201 */ float DownRatio;
  /* offset=0x0008 flags=0x0018001040000201 */ float UpRatio;
};

struct FVehicleGenerateSpawnData {
  /* offset=0x0000 flags=0x0018001040000205 */ int32 KeyID;
  /* offset=0x0004 flags=0x0018000000000205 */ FString VehicleType;
  /* offset=0x0010 flags=0x0018000000000205 */ FString VehiclePath;
  /* offset=0x001c flags=0x0018001040000205 */ int32 VehicleWeight;
  /* offset=0x0020 flags=0x0018001040000205 */ bool SnapFloor;
};

struct FVehicleGenerateSpawnDataArray {
  /* offset=0x0000 flags=0x0018000000000205 */ FString Catetory;
  /* offset=0x000c flags=0x0010000000000205 */ TArray<struct FVehicleGenerateSpawnData> AllGenerateSpawnDatas;
};

struct FVehicleGenerateStatisticsData {
  /* offset=0x0000 flags=0x0010000000000200 */ TArray<struct FVehicleSpotStatisticsData> VehicleSpotStatisticsData;
  /* offset=0x000c flags=0x0010000000000200 */ TMap<FString, struct FVehicleClassStatisticsData> VehicleClassStatisticsData;
};

struct FVehicleInputRate {
  /* offset=0x0000 flags=0x0018001040000201 */ float RiseRate;
  /* offset=0x0004 flags=0x0018001040000201 */ float FallRate;
};

struct FVehicleSpotComponentArray {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 SpotType;
  /* offset=0x0004 flags=0x001000800000020d */ TArray<UVehicleSpotSceneComponent*> AllSpots;
};

struct FVehicleSpotProperty {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 SpotType;
  /* offset=0x0004 flags=0x0010000000000205 */ TArray<struct FSpotWeight> WeightsPerCategory;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 FuelPercentMin;
  /* offset=0x0014 flags=0x0018001040000205 */ int32 FuelPercentMax;
  /* offset=0x0018 flags=0x0018001040000205 */ bool bActiveByStartVolume;
  /* offset=0x0019 flags=0x0018001040000205 */ uint8 RandomType;
  /* offset=0x001c flags=0x0018001040000205 */ float TotalCountMultiplierWithPalyerCount;
  /* offset=0x0020 flags=0x0018001040000205 */ int32 TotalCountRangeMin;
  /* offset=0x0024 flags=0x0018001040000205 */ int32 TotalCountRangeMax;
  /* offset=0x0028 flags=0x0018001040000205 */ float ProbabilityPersent;
  /* offset=0x002c flags=0x0018001040000205 */ float ProbabilityPersentWithPalyerCount;
};

struct FVehicleSpotStatisticsData: FTableRowBase {
  /* offset=0x0004 flags=0x0018001040000200 */ uint8 SpotType;
  /* offset=0x0008 flags=0x0018000000000200 */ FString VehiclePath;
  /* offset=0x0014 flags=0x0018001040000200 */ float VehicleLocationX;
  /* offset=0x0018 flags=0x0018001040000200 */ float VehicleLocationY;
  /* offset=0x001c flags=0x0018001040000200 */ float VehicleLocationZ;
};

struct FVehicleTransmissionData {
  /* offset=0x0000 flags=0x0018001040000201 */ bool bUseGearAutoBox;
  /* offset=0x0004 flags=0x0018001040000201 */ float GearSwitchTime;
  /* offset=0x0008 flags=0x0018001040000201 */ float GearAutoBoxLatency;
  /* offset=0x000c flags=0x0018041040000201 */ float FinalRatio;
  /* offset=0x0010 flags=0x0010040000000201 */ TArray<struct FVehicleGearData> ForwardGears;
  /* offset=0x001c flags=0x0018041040000201 */ float ReverseGearRatio;
  /* offset=0x0020 flags=0x0018041040000201 */ float NeutralGearUpRatio;
  /* offset=0x0024 flags=0x0018041040000201 */ float ClutchStrength;
};

struct FVehicleUserReconnRepData {
  /* offset=0x0000 flags=0x0018001040000200 */ ASTExtraVehicleBase* Vehicle;
  /* offset=0x0004 flags=0x0018001040000200 */ ASTExtraPlayerCharacter* Character;
  /* offset=0x0008 flags=0x0018001040000200 */ enum ESTExtraVehicleUserState VehicleUserState;
  /* offset=0x000c flags=0x0018001040000200 */ int32 SeatIdx;
};

struct FViewTargetTransitionParams {
  /* offset=0x0000 flags=0x0018001040000205 */ float BlendTime;
  /* offset=0x0004 flags=0x0018001040000205 */ uint8 BlendFunction;
  /* offset=0x0008 flags=0x0018001040000205 */ float BlendExp;
  /* offset=0x000c flags=0x0018001000000005 */ uint8 bLockOutgoing:1;
};

struct FVirtualBone {
  /* offset=0x0000 flags=0x0018001040000200 */ FName SourceBoneName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName TargetBoneName;
  /* offset=0x0010 flags=0x0018001040000200 */ FName VirtualBoneName;
};

struct FVisibilityTrackKey {
  /* offset=0x0000 flags=0x0018001040000200 */ float Time;
  /* offset=0x0004 flags=0x0018001040000201 */ uint8 Action;
  /* offset=0x0005 flags=0x0018001040000200 */ uint8 ActiveCondition;
};

struct FVoiceCheckObjectNode {
  /* offset=0x0000 flags=0x0018001040000200 */ ASTExtraBaseCharacter* nowCharacter;
  /* offset=0x0004 flags=0x0018001040000200 */ ASTExtraVehicleBase* nowVehicle;
  /* offset=0x0008 flags=0x001800104008020c */ UImage* moveImage;
  /* offset=0x000c flags=0x001800104008020c */ UImage* weaponImage;
  /* offset=0x0010 flags=0x001800104008020c */ UImage* silencerWeaponImage;
  /* offset=0x0014 flags=0x001800104008020c */ UImage* VehicleImage;
};

struct FWakeupInfoWrapper {
};

struct FWalkableSlopeOverride {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 WalkableSlopeBehavior;
  /* offset=0x0004 flags=0x0018001040000205 */ float WalkableSlopeAngle;
};

struct FWaveParameter {
  /* offset=0x0000 flags=0x0018001040000205 */ float Rotation;
  /* offset=0x0004 flags=0x0018001040000205 */ float Length;
  /* offset=0x0008 flags=0x0018001040000205 */ float Amplitude;
  /* offset=0x000c flags=0x0018001040000205 */ float Steepness;
  /* offset=0x0010 flags=0x0018001040000205 */ float TimeScale;
};

struct FWaveSetParameters {
  /* offset=0x0000 flags=0x0010001000000005 */ struct FWaveParameter Wave01;
  /* offset=0x0014 flags=0x0010001000000005 */ struct FWaveParameter Wave02;
  /* offset=0x0028 flags=0x0010001000000005 */ struct FWaveParameter Wave03;
  /* offset=0x003c flags=0x0010001000000005 */ struct FWaveParameter Wave04;
  /* offset=0x0050 flags=0x0010001000000005 */ struct FWaveParameter Wave05;
  /* offset=0x0064 flags=0x0010001000000005 */ struct FWaveParameter Wave06;
  /* offset=0x0078 flags=0x0010001000000005 */ struct FWaveParameter Wave07;
  /* offset=0x008c flags=0x0010001000000005 */ struct FWaveParameter Wave08;
};

struct FWeaponAttachmentAttrModify {
  /* offset=0x0000 flags=0x0018000000010201 */ FString ModifyAttr;
  /* offset=0x000c flags=0x0018001040010201 */ enum EAttrOperator Op;
  /* offset=0x0010 flags=0x0018001040010201 */ float ModifyValue;
};

struct FWeaponAttachmentConfig {
  /* offset=0x0000 flags=0x0010000000010001 */ FText AttachmentName;
  /* offset=0x000c flags=0x0018001040010215 */ enum EWeaponAttachmentSocketType AttachmentSocketType;
  /* offset=0x000d flags=0x0018001040010215 */ enum EOpticalSightType SightType;
  /* offset=0x000e flags=0x0018001040010201 */ bool IsExtendMaxBulletNumInOneClip;
  /* offset=0x000f flags=0x0018001040010201 */ bool IsSilencer;
  /* offset=0x0010 flags=0x0018001040010201 */ bool IsFireSuppressor;
  /* offset=0x0014 flags=0x0010000000010201 */ TArray<struct FWeaponAttachmentAttrModify> WeaponAttachmentAttrModifys;
  /* offset=0x0020 flags=0x0010000000010201 */ TArray<struct FWeaponAttachmentDesc> WeaponAttachmentDescs;
  /* offset=0x002c flags=0x0010000000010201 */ TMap<int32, FName> socketTypeToName;
  /* offset=0x0068 flags=0x0010001000010001 */ struct FWeaponMeshCfg MeshPackage;
  /* offset=0x0074 flags=0x0018001040010201 */ UMaterialInstance* MeshMat;
  /* offset=0x0078 flags=0x0018001000010001 */ struct FItemDefineID ExtraDefinedID;
};

struct FWeaponAttachmentDesc {
  /* offset=0x0000 flags=0x0010000000010001 */ FText Desc;
  /* offset=0x000c flags=0x0010000000010001 */ FText DescValue;
};

struct FWeaponAttachmentSlot {
  /* offset=0x0000 flags=0x0018001040010215 */ int32 TypeSpecificID;
};

struct FWeaponAttrModifyConfig {
  /* offset=0x0000 flags=0x0018000000010201 */ FString ModifyConfigID;
  /* offset=0x000c flags=0x0010000000010201 */ TArray<struct FWeaponAttrModifyData> WeaponAttrModifiers;
};

struct FWeaponAttrModifyData {
  /* offset=0x0000 flags=0x0018000000010201 */ FString ModifyAttr;
  /* offset=0x000c flags=0x0018001040010201 */ enum EAttrOperator Op;
  /* offset=0x0010 flags=0x0018001040010201 */ float ModifyValue;
};

struct FWeaponComponentDataTableRow: FSurviveTableRowBase {
  /* offset=0x000c flags=0x0018001040010215 */ int32 WeaponComponentID;
  /* offset=0x0010 flags=0x0018001040010215 */ uint8 Type;
  /* offset=0x0014 flags=0x0018001040010215 */ UStaticMesh* ShowMesh;
};

struct FWeaponComponentItemData {
  /* offset=0x0000 flags=0x0010000000000014 */ struct FPickUpGlobalDataTableRow PickUpGlobalDataTableRow;
  /* offset=0x0100 flags=0x0010000000000014 */ struct FWeaponComponentDataTableRow WeaponComponentDataTableRow;
};

struct FWeaponHitPartCoff {
  /* offset=0x0000 flags=0x0018001040000201 */ float Head;
  /* offset=0x0004 flags=0x0018001040000201 */ float Body;
  /* offset=0x0008 flags=0x0018001040000201 */ float Limbs;
};

struct FWeaponMeshCfg {
  /* offset=0x0000 flags=0x0018001040002205 */ UStaticMesh* stMesh;
  /* offset=0x0004 flags=0x0018001040002205 */ USkeletalMesh* skMesh;
  /* offset=0x0008 flags=0x0018001040002205 */ int32 meshType;
};

struct FWeaponReconnectReplicateData {
  /* offset=0x0000 flags=0x0018001040000204 */ ASTExtraPlayerController* OwnerPlayerController;
  /* offset=0x0004 flags=0x0018000000000204 */ FString OwnerPlayerName;
  /* offset=0x0010 flags=0x0018001040000204 */ FName WeaponInventoryLogicSocket;
  /* offset=0x0018 flags=0x0018001040000204 */ int32 WeaponBulletNumInClip;
  /* offset=0x001c flags=0x0018001040000204 */ uint8 CurWeaponState;
  /* offset=0x001d flags=0x0018001040000204 */ uint8 CurShootType;
  /* offset=0x0020 flags=0x0018001040000204 */ int32 CurShootTotalType;
  /* offset=0x0028 flags=0x0018001000000004 */ struct FItemDefineID DefineID;
  /* offset=0x0040 flags=0x0018001040000204 */ int32 BackpackPistolListIndex;
  /* offset=0x0044 flags=0x0018001040000204 */ bool bIsCurrentWeapon;
  /* offset=0x0048 flags=0x0018001040000204 */ int32 OperationIndex;
};

struct FWeaponReconnectReplicateDataWrapper {
  /* offset=0x0000 flags=0x0010000000000000 */ struct FWeaponReconnectReplicateData WeaponReconnectReplicateData;
  /* offset=0x0050 flags=0x0018001040000200 */ ASTExtraWeapon* Weapon;
};

struct FWeaponSlotSwitchTimeData {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 EquipSlot;
  /* offset=0x0004 flags=0x0018001040000205 */ float TotalTime;
  /* offset=0x0008 flags=0x0018001040000205 */ float AttachWeaponTime;
};

struct FWeaponSystemDataOnSimulateClient {
  /* offset=0x0000 flags=0x0018001040000204 */ ASTExtraWeapon* TargetWeapon;
  /* offset=0x0008 flags=0x0018001040000204 */ FName LogicSocket;
  /* offset=0x0010 flags=0x0018001040000204 */ bool bAutoUse;
  /* offset=0x0018 flags=0x0018001000000004 */ struct FItemDefineID ID;
  /* offset=0x0030 flags=0x0018001040000204 */ int32 OperationIndex;
};

struct FWeaponSystemReconnectReplicateData {
  /* offset=0x0000 flags=0x0018001040000200 */ FName LastUseNoneGrenadeLogicSlot;
  /* offset=0x0008 flags=0x0018001040000200 */ FName LastUseLogicSlot;
  /* offset=0x0010 flags=0x0010000000000200 */ TArray<FName> GrenadeLogicSlotList;
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FItemDefineID> GrenadeDefineIDList;
};

struct FWeatherLevelInfo {
  /* offset=0x0000 flags=0x0018001040000205 */ uint8 WeatherType;
  /* offset=0x0004 flags=0x0018000000000205 */ FString WeatherLevel;
  /* offset=0x0010 flags=0x0018001040000205 */ int32 Weight;
};

struct FWebviewInfoWrapper {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 ErrorCode;
  /* offset=0x0004 flags=0x0018000000000200 */ FString Reason;
  /* offset=0x0010 flags=0x0018001040000200 */ int32 Extend;
  /* offset=0x0014 flags=0x0018001040000200 */ int32 Extend2;
  /* offset=0x0018 flags=0x0018000000000200 */ FString MsgData;
};

struct FWechatGroupInfomation {
  /* offset=0x0000 flags=0x0018000000000200 */ FString OpenIdList;
  /* offset=0x000c flags=0x0018000000000200 */ FString MemberNum;
  /* offset=0x0018 flags=0x0018000000000200 */ FString ChatRoomURL;
};

struct FWeightedBlendable {
  /* offset=0x0000 flags=0x0018001240000205 */ float Weight;
  /* offset=0x0004 flags=0x0018001040000205 */ UObject* Object;
};

struct FWeightedBlendables {
  /* offset=0x0000 flags=0x0010000000000205 */ TArray<struct FWeightedBlendable> Array;
};

struct FWeightmapLayerAllocationInfo {
  /* offset=0x0000 flags=0x0018001040000200 */ ULandscapeLayerInfoObject* LayerInfo;
  /* offset=0x0004 flags=0x0018001040000200 */ uint8 WeightmapTextureIndex;
  /* offset=0x0005 flags=0x0018001040000200 */ uint8 WeightmapTextureChannel;
};

struct FWheelHubSetup {
  /* offset=0x0000 flags=0x001c001040000201 */ UClass<UVehicleWheel>* WheelClass;
  /* offset=0x0008 flags=0x0018001040000201 */ FName TireBoneName;
};

struct FWheelSetup {
  /* offset=0x0000 flags=0x001c001040000201 */ UClass<UVehicleWheel>* WheelClass;
  /* offset=0x0008 flags=0x0018001040000201 */ FName BoneName;
  /* offset=0x0010 flags=0x0018001040000001 */ struct FVector AdditionalOffset;
};

struct FWidgetAnimationBinding {
  /* offset=0x0000 flags=0x0018001040000200 */ FName WidgetName;
  /* offset=0x0008 flags=0x0018001040000200 */ FName SlotWidgetName;
  /* offset=0x0010 flags=0x0018001040000000 */ struct FGuid AnimationGuid;
  /* offset=0x0020 flags=0x0018001040000200 */ bool bIsRootWidget;
};

struct FWidgetNavigationData {
  /* offset=0x0000 flags=0x0018001040000215 */ enum EUINavigationRule Rule;
  /* offset=0x0008 flags=0x0018001040000215 */ FName WidgetToFocus;
  /* offset=0x0010 flags=0x001c001040080208 */ UWidget* Widget;
};

struct FWidgetTransform {
  /* offset=0x0000 flags=0x0018001040000005 */ struct FVector2D Translation;
  /* offset=0x0008 flags=0x0018001040000005 */ struct FVector2D Scale;
  /* offset=0x0010 flags=0x0018001040000005 */ struct FVector2D Shear;
  /* offset=0x0018 flags=0x0018001040000205 */ float Angle;
};

struct FWonderfulCutOutputData {
  /* offset=0x0000 flags=0x0018001040020215 */ float BeginTimeSecs;
  /* offset=0x0004 flags=0x0018001040020215 */ float EndTimeSecs;
  /* offset=0x0008 flags=0x0018001040020215 */ uint8 WonderfulCutType;
  /* offset=0x000c flags=0x0018001040020215 */ float ShootDistance;
};

struct FWonderfulCutShootDamageData {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 DamagePlayerID;
  /* offset=0x0004 flags=0x0010000000000200 */ TArray<struct FWonderfulCut_OneShootDamage> ShootDamageList;
};

struct FWonderfulCutShootDamageSortData {
  /* offset=0x0000 flags=0x0018001040000200 */ float DamageIntervalSecs;
  /* offset=0x0004 flags=0x0018001040000200 */ float DamageTimeSecs;
  /* offset=0x0008 flags=0x0018001040000200 */ uint8 ShootDamageType;
  /* offset=0x000c flags=0x0018001040000200 */ float ShootDistance;
};

struct FWonderfulCut_OneShootDamage {
  /* offset=0x0000 flags=0x0018001040000200 */ uint8 ShootDamageType;
  /* offset=0x0004 flags=0x0018001040000200 */ float DamageTimeSecs;
  /* offset=0x0008 flags=0x0018001040000200 */ float ShootDistance;
};

struct FWorldTileSpotArray {
  /* offset=0x0000 flags=0x0018001040000200 */ int32 WorldCompositionID;
  /* offset=0x0004 flags=0x0010008000000208 */ TArray<UItemSpotSceneComponent*> AllSpotComponents;
};

struct FanPickerData {
  /* offset=0x0000 flags=0x0018001040000205 */ float Radius;
  /* offset=0x0004 flags=0x0018001040000205 */ float Angle;
  /* offset=0x0008 flags=0x0018001040000205 */ float Offset;
  /* offset=0x000c flags=0x0018001040000205 */ bool IsShowDebugFan;
  /* offset=0x000d flags=0x0018001040000205 */ bool bEnableTrace;
};

class UAIActingComponent: public UActorComponent {
  /* offset=0x00c0 flags=0x0010000000000200 */ TArray<struct FAIActingCandidateData> CandidateAIList;
  /* offset=0x0144 flags=0x0028081040000201 */ int32 MaxActiveAI;
  /* offset=0x0148 flags=0x0028081040000201 */ float AISpawnCircleOriginOffset;
  /* offset=0x014c flags=0x0028081040000201 */ float NoWhiteCirclesRadius;
  /* offset=0x0150 flags=0x0028081040000201 */ float SelectActionPeriod;
  /* offset=0x0154 flags=0x0028081040000201 */ float SpawnCheckHumanRadiusSquare;
  /* offset=0x0158 flags=0x0028081040000201 */ int32 TryFindSpawnAILocNum;
  /* offset=0x015c flags=0x0020080000000201 */ TArray<struct FAIActingItem> AIActingItemList;
  /* offset=0x0168 flags=0x0028081040000201 */ float AIAttackEachOtherBeginTime;
  /* offset=0x016c flags=0x0028081040000201 */ int32 FullFeedLimit;
  /* offset=0x0170 flags=0x0028081040000201 */ float DeliveryWaveInterval;
  /* offset=0x0174 flags=0x0028081040000201 */ float DeliveryBeginTime;
  /* offset=0x0178 flags=0x0028081040000201 */ float DeliveryFreq;
  /* offset=0x017c flags=0x0028081040000201 */ int32 DeliveryAINumEachPeriod;
  /* offset=0x0180 flags=0x0028081040000201 */ float MinimumWarmScore;
  /* offset=0x0184 flags=0x0020080000000201 */ TArray<struct FAIDeliveryAreaLimit> AIDeliveryAreaLimit;
  /* offset=0x0190 flags=0x0048001040000200 */ ACirleAreaVolume* CircleAreaVolume;
  /* offset=0x0194 flags=0x0048001040080208 */ UCircleMgrComponent* CircleMgrComponent;

  void BroadFinishLastBreathFunction(FString Killer, FString Killed, int32 WeaponID);
};

class UAIAsyncTaskBlueprintProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FOAISimpleDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOAISimpleDelegate OnFail;

  void OnMoveCompleted(struct FAIRequestID RequestID, uint8 MovementResult);
};

class UAIBlueprintHelperLibrary: public UBlueprintFunctionLibrary {
  UAIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(UObject* WorldContextObject, APawn* Pawn, struct FVector Destination, AActor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);
  AAIController* GetAIController(AActor* ControlledActor);
  UBlackboardComponent* GetBlackboard(AActor* Target);
  UNavigationPath* GetCurrentPath(AController* Controller);
  bool IsValidAIDirection(struct FVector DirectionVector);
  bool IsValidAILocation(struct FVector Location);
  bool IsValidAIRotation(struct FRotator Rotation);
  void LockAIResourcesWithAnimation(UAnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);
  void SendAIMessage(APawn* Target, FName Message, UObject* MessageSource, bool bSuccess);
  APawn* SpawnAIFromClass(UObject* WorldContextObject, UClass<APawn>* PawnClass, UBehaviorTree* BehaviorTree, struct FVector Location, struct FRotator Rotation, bool bNoCollisionFail);
  void UnlockAIResourcesWithAnimation(UAnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);
};

class AAIController: public AController {
  /* offset=0x0314 flags=0x0028081000000005 */ uint8 bStopAILogicOnUnposses:1;
  /* offset=0x0314 flags=0x0018001000000000 */ uint8 bLOSflag:1;
  /* offset=0x0314 flags=0x0018001000000000 */ uint8 bSkipExtraLOSChecks:1;
  /* offset=0x0314 flags=0x0018001000000000 */ uint8 bAllowStrafe:1;
  /* offset=0x0314 flags=0x0018001000000000 */ uint8 bWantsPlayerState:1;
  /* offset=0x0314 flags=0x0018001000000005 */ uint8 bSetControlRotationFromPawnOrientation:1;
  /* offset=0x0318 flags=0x00480010400b0209 */ UPathFollowingComponent* PathFollowingComponent;
  /* offset=0x031c flags=0x001800104008020c */ UBrainComponent* BrainComponent;
  /* offset=0x0320 flags=0x00180010400b0209 */ UAIPerceptionComponent* PerceptionComponent;
  /* offset=0x0324 flags=0x004800104008021c */ UPawnActionsComponent* ActionsComp;
  /* offset=0x0328 flags=0x002808104008021c */ UBlackboardComponent* Blackboard;
  /* offset=0x032c flags=0x0028081040080208 */ UGameplayTasksComponent* CachedGameplayTasksComponent;
  /* offset=0x0330 flags=0x002c081040000205 */ UClass<UNavigationQueryFilter>* DefaultNavigationFilterClass;
  /* offset=0x0334 flags=0x0010000010080200 */ FAIMoveCompletedSignature ReceiveMoveCompleted;

  void ClaimTaskResource(UClass<UGameplayTaskResource>* ResourceClass);
  UAIPerceptionComponent* GetAIPerceptionComponent();
  struct FVector GetFocalPoint();
  struct FVector GetFocalPointOnActor(AActor* Actor);
  AActor* GetFocusActor();
  struct FVector GetImmediateMoveDestination();
  uint8 GetMoveStatus();
  UPathFollowingComponent* GetPathFollowingComponent();
  bool HasPartialPath();
  void K2_ClearFocus();
  void K2_SetFocalPoint(struct FVector FP);
  void K2_SetFocus(AActor* NewFocus);
  uint8 MoveToActor(AActor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, UClass<UNavigationQueryFilter>* FilterClass, bool bAllowPartialPath);
  uint8 MoveToLocation(struct FVector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, UClass<UNavigationQueryFilter>* FilterClass, bool bAllowPartialPath);
  void OnGameplayTaskResourcesClaimed(struct FGameplayResourceSet NewlyClaimed, struct FGameplayResourceSet FreshlyReleased);
  void OnPossess(APawn* PossessedPawn);
  void OnUnpossess(APawn* UnpossessedPawn);
  void OnUsingBlackBoard(UBlackboardComponent* BlackboardComp, UBlackboardData* BlackboardAsset);
  bool RunBehaviorTree(UBehaviorTree* BTAsset);
  void SetMoveBlockDetection(bool bEnable);
  void UnclaimTaskResource(UClass<UGameplayTaskResource>* ResourceClass);
  bool UseBlackboard(UBlackboardData* BlackboardAsset, UBlackboardComponent* BlackboardComponent);
};

class UAIDataProvider: public UObject {
};

class UAIDataProvider_QueryParams: public UAIDataProvider {
  /* offset=0x0020 flags=0x0018001040000201 */ FName ParamName;
  /* offset=0x0028 flags=0x0018001040000200 */ float FloatValue;
  /* offset=0x002c flags=0x0018001040000200 */ int32 IntValue;
  /* offset=0x0030 flags=0x0018001040000200 */ bool BoolValue;
};

class UAIDataProvider_Random: public UAIDataProvider_QueryParams {
  /* offset=0x0034 flags=0x0028081040000201 */ float Min;
  /* offset=0x0038 flags=0x0028081040000201 */ float Max;
  /* offset=0x003c flags=0x0028081000000001 */ uint8 bInteger:1;
};

class UAIHotSpotManager: public UObject {
};

class UAIPerceptionComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0020088000010209 */ TArray<UAISenseConfig*> SensesConfig;
  /* offset=0x00b8 flags=0x002c081040010201 */ UClass<UAISense>* DominantSense;
  /* offset=0x00d0 flags=0x0028081040002200 */ AAIController* AIOwner;
  /* offset=0x0130 flags=0x0010000010080200 */ FPerceptionUpdatedDelegate OnPerceptionUpdated;
  /* offset=0x013c flags=0x0010000010080200 */ FActorPerceptionUpdatedDelegate OnTargetPerceptionUpdated;

  bool GetActorsPerception(AActor* Actor, struct FActorPerceptionBlueprintInfo Info);
  void GetCurrentlyPerceivedActors(UClass<UAISense>* SenseToUse, TArray<AActor*> OutActors);
  void GetKnownPerceivedActors(UClass<UAISense>* SenseToUse, TArray<AActor*> OutActors);
  void GetPerceivedActors(UClass<UAISense>* SenseToUse, TArray<AActor*> OutActors);
  void GetPerceivedHostileActors(TArray<AActor*> OutActors);
  void OnOwnerEndPlay(AActor* Actor, uint8 EndPlayReason);
  void RequestStimuliListenerUpdate();
  void SetSenseEnabled(UClass<UAISense>* SenseClass, bool bEnable);
};

class UAIPerceptionListenerInterface: public UInterface {
};

class UAIPerceptionStimuliSourceComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081000004015 */ uint8 bAutoRegisterAsSource:1;
  /* offset=0x00b0 flags=0x0024080000000215 */ TArray<UClass<UAISense>*> RegisterAsSourceForSenses;

  void RegisterForSense(UClass<UAISense>* SenseClass);
  void RegisterWithPerceptionSystem();
  void UnregisterFromPerceptionSystem();
  void UnregisterFromSense(UClass<UAISense>* SenseClass);
};

class UAIPerceptionSystem: public UObject {
  /* offset=0x005c flags=0x0020080000000200 */ TArray<UAISense*> Senses;
  /* offset=0x0068 flags=0x0028081040004201 */ float PerceptionAgingRate;

  UClass<UAISense>* GetSenseClassForStimulus(UObject* WorldContextObject, struct FAIStimulus Stimulus);
  void OnPerceptionStimuliSourceEndPlay(AActor* Actor, uint8 EndPlayReason);
  bool RegisterPerceptionStimuliSource(UObject* WorldContextObject, UClass<UAISense>* Sense, AActor* Target);
  void ReportEvent(UAISenseEvent* PerceptionEvent);
  void ReportPerceptionEvent(UObject* WorldContextObject, UAISenseEvent* PerceptionEvent);
};

class AAIPickupResouce: public AActor {
  /* offset=0x02a8 flags=0x0018001040000201 */ int32 GroupID;
  /* offset=0x02ac flags=0x0048001040080208 */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02b0 flags=0x0048001040080208 */ UBillboardComponent* SignSprite;
  /* offset=0x02b4 flags=0x0048001040080208 */ UBillboardComponent* GoodSprite;
  /* offset=0x02b8 flags=0x0048001040080208 */ UBillboardComponent* BadSprite;
};

class UAIResourceInterface: public UInterface {
};

class UAIResource_Logic: public UGameplayTaskResource {
};

class UAIResource_Movement: public UGameplayTaskResource {
};

class UAISense: public UObject {
  /* offset=0x001c flags=0x0028081040004215 */ float DefaultExpirationAge;
  /* offset=0x0020 flags=0x0028081040014215 */ enum EAISenseNotifyType NotifyType;
  /* offset=0x0021 flags=0x0028081000014015 */ uint8 bWantsNewPawnNotification:1;
  /* offset=0x0021 flags=0x0028081000014015 */ uint8 bAutoRegisterAllPawnsAsSources:1;
  /* offset=0x0024 flags=0x0048001040000200 */ UAIPerceptionSystem* PerceptionSystemInstance;
};

class UAISenseBlueprintListener: public UUserDefinedStruct {
};

class UAISenseConfig: public UObject {
  /* offset=0x001c flags=0x00280c1040000015 */ struct FColor DebugColor;
  /* offset=0x0020 flags=0x0028081040010215 */ float MaxAge;
  /* offset=0x0024 flags=0x0028081000010015 */ uint8 bStartsEnabled:1;
};

class UAISenseConfig_Blueprint: public UAISenseConfig {
  /* offset=0x0034 flags=0x001c001042014215 */ UClass<UAISense_Blueprint>* Implementation;
};

class UAISenseConfig_Damage: public UAISenseConfig {
  /* offset=0x0034 flags=0x001c001042014215 */ UClass<UAISense_Damage>* Implementation;
};

class UAISenseConfig_Hearing: public UAISenseConfig {
  /* offset=0x0034 flags=0x001c001042014215 */ UClass<UAISense_Hearing>* Implementation;
  /* offset=0x0038 flags=0x0018001040010215 */ float HearingRange;
  /* offset=0x003c flags=0x0018001040010215 */ float LoSHearingRange;
  /* offset=0x0040 flags=0x0018001000010001 */ uint8 bUseLoSHearing:1;
  /* offset=0x0044 flags=0x0010001040014015 */ struct FAISenseAffiliationFilter DetectionByAffiliation;
};

class UAISenseConfig_Prediction: public UAISenseConfig {
};

class UAISenseConfig_Sight: public UAISenseConfig {
  /* offset=0x0034 flags=0x001c001042014215 */ UClass<UAISense_Sight>* Implementation;
  /* offset=0x0038 flags=0x0018001040014215 */ float SightRadius;
  /* offset=0x003c flags=0x0018001040014215 */ float LoseSightRadius;
  /* offset=0x0040 flags=0x0018001040014215 */ float PeripheralVisionAngleDegrees;
  /* offset=0x0044 flags=0x0010001040014015 */ struct FAISenseAffiliationFilter DetectionByAffiliation;
  /* offset=0x0048 flags=0x0018001040014215 */ float AutoSuccessRangeFromLastSeenLocation;
};

class UAISenseConfig_Team: public UAISenseConfig {
};

class UAISenseConfig_Touch: public UAISenseConfig {
};

class UAISenseEvent: public UObject {
};

class UAISenseEvent_Damage: public UAISenseEvent {
  /* offset=0x001c flags=0x0010001000000005 */ struct FAIDamageEvent Event;
};

class UAISenseEvent_Hearing: public UAISenseEvent {
  /* offset=0x0020 flags=0x0020081000000005 */ struct FAINoiseEvent Event;
};

class UAISense_Blueprint: public UAISense {
  /* offset=0x0100 flags=0x002c081040000205 */ UClass<UUserDefinedStruct>* ListenerDataType;
  /* offset=0x0104 flags=0x002008800000021c */ TArray<UAIPerceptionComponent*> ListenerContainer;
  /* offset=0x0110 flags=0x0020080000000200 */ TArray<UAISenseEvent*> UnprocessedEvents;

  void GetAllListenerActors(TArray<AActor*> ListenerActors);
  void GetAllListenerComponents(TArray<UAIPerceptionComponent*> ListenerComponents);
  void K2_OnNewPawn(APawn* NewPawn);
  void OnListenerRegistered(AActor* ActorListener, UAIPerceptionComponent* PerceptionComponent);
  void OnListenerUnregistered(AActor* ActorListener, UAIPerceptionComponent* PerceptionComponent);
  void OnListenerUpdated(AActor* ActorListener, UAIPerceptionComponent* PerceptionComponent);
  float OnUpdate(TArray<UAISenseEvent*> EventsToProcess);
};

class UAISense_Damage: public UAISense {
  /* offset=0x0100 flags=0x0010000000000200 */ TArray<struct FAIDamageEvent> RegisteredEvents;

  void ReportDamageEvent(UObject* WorldContextObject, AActor* DamagedActor, AActor* Instigator, float DamageAmount, struct FVector EventLocation, struct FVector HitLocation);
};

class UAISense_Hearing: public UAISense {
  /* offset=0x0100 flags=0x0020080000000200 */ TArray<struct FAINoiseEvent> NoiseEvents;
  /* offset=0x010c flags=0x0028081040004200 */ float SpeedOfSoundSq;

  void ReportNoiseEvent(UObject* WorldContextObject, struct FVector NoiseLocation, float Loudness, AActor* Instigator, float MaxRange, FName Tag);
};

class UAISense_Prediction: public UAISense {
  /* offset=0x0100 flags=0x0010000000000200 */ TArray<struct FAIPredictionEvent> RegisteredEvents;

  void RequestControllerPredictionEvent(AAIController* Requestor, AActor* PredictedActor, float PredictionTime);
  void RequestPawnPredictionEvent(APawn* Requestor, AActor* PredictedActor, float PredictionTime);
};

class UAISense_Sight: public UAISense {
  /* offset=0x0184 flags=0x0028081040014201 */ int32 MaxTracesPerTick;
  /* offset=0x0188 flags=0x0028081040014201 */ int32 MinQueriesPerTimeSliceCheck;
  /* offset=0x0190 flags=0x0028081040014201 */ double MaxTimeSlicePerTick;
  /* offset=0x0198 flags=0x0028081040014201 */ float HighImportanceQueryDistanceThreshold;
  /* offset=0x01a0 flags=0x0028081040014201 */ float MaxQueryImportance;
  /* offset=0x01a4 flags=0x0028081040014201 */ float SightLimitQueryImportance;
};

class UAISense_Team: public UAISense {
  /* offset=0x0100 flags=0x0010000000000200 */ TArray<struct FAITeamStimulusEvent> RegisteredEvents;
};

class UAISense_Touch: public UAISense {
  /* offset=0x0100 flags=0x0010000000000200 */ TArray<struct FAITouchEvent> RegisteredEvents;
};

class UAISightTargetInterface: public UInterface {
};

class UAISystem: public UAISystemBase {
  /* offset=0x0048 flags=0x0020080000044001 */ struct FSoftClassPath PerceptionSystemClassName;
  /* offset=0x0060 flags=0x0020080000044001 */ struct FSoftClassPath HotSpotManagerClassName;
  /* offset=0x0078 flags=0x0018001040054201 */ float AcceptanceRadius;
  /* offset=0x007c flags=0x0018001040054201 */ float PathfollowingRegularPathPointAcceptanceRadius;
  /* offset=0x0080 flags=0x0018001040054201 */ float PathfollowingNavLinkAcceptanceRadius;
  /* offset=0x0084 flags=0x0018001040054201 */ bool bFinishMoveOnGoalOverlap;
  /* offset=0x0085 flags=0x0018001040054201 */ bool bAcceptPartialPaths;
  /* offset=0x0086 flags=0x0018001040054201 */ bool bAllowStrafing;
  /* offset=0x0087 flags=0x0018001040054201 */ bool bEnableBTAITasks;
  /* offset=0x0088 flags=0x0018001040054201 */ bool bAllowControllersAsEQSQuerier;
  /* offset=0x0089 flags=0x0018001040054201 */ bool bEnableDebuggerPlugin;
  /* offset=0x008a flags=0x0018001040044201 */ uint8 DefaultSightCollisionChannel;
  /* offset=0x008c flags=0x0028081040002200 */ UBehaviorTreeManager* BehaviorTreeManager;
  /* offset=0x0090 flags=0x0028081040002200 */ UEnvQueryManager* EnvironmentQueryManager;
  /* offset=0x0094 flags=0x0028081040002200 */ UAIPerceptionSystem* PerceptionSystem;
  /* offset=0x0098 flags=0x0020080000002200 */ TArray<UAIAsyncTaskBlueprintProxy*> AllProxyObjects;
  /* offset=0x00a4 flags=0x0028081040002200 */ UAIHotSpotManager* HotSpotManager;
  /* offset=0x00a8 flags=0x0028081040002200 */ UNavLocalGridManager* NavLocalGrids;

  void AIIgnorePlayers();
  void AILoggingVerbose();
};

class UAISystemBase: public UObject {
  /* offset=0x0020 flags=0x0040000002044000 */ struct FSoftClassPath AISystemClassName;
  /* offset=0x0038 flags=0x0048001042044200 */ FName AISystemModuleName;
  /* offset=0x0040 flags=0x0048001042044200 */ bool bInstantiateAISystemOnClient;
};

class UAITask: public UGameplayTask {
  /* offset=0x0048 flags=0x0028081040000214 */ AAIController* OwnerController;
};

class UAITask_LockLogic: public UAITask {
};

class UAITask_MoveTo: public UAITask {
  /* offset=0x004c flags=0x0020080010080200 */ FGenericGameplayTaskDelegate OnRequestFailed;
  /* offset=0x0058 flags=0x0020080010080200 */ FMoveTaskCompletedSignature OnMoveFinished;
  /* offset=0x0064 flags=0x0020080000000000 */ struct FAIMoveRequest MoveRequest;

  UAITask_MoveTo* AIMoveTo(AAIController* Controller, struct FVector GoalLocation, AActor* GoalActor, float AcceptanceRadius, uint8 StopOnOverlap, uint8 AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking);
};

class UAITask_RunEQS: public UAITask {
  UAITask_RunEQS* RunEQS(AAIController* Controller, UEnvQuery* QueryTemplate);
};

class AAbstractNavData: public ANavigationData {
};

class UAchievementBlueprintLibrary: public UBlueprintFunctionLibrary {
  void GetCachedAchievementDescription(UObject* WorldContextObject, APlayerController* PlayerController, FName AchievementID, bool bFoundID, FText Title, FText LockedDescription, FText UnlockedDescription, bool bHidden);
  void GetCachedAchievementProgress(UObject* WorldContextObject, APlayerController* PlayerController, FName AchievementID, bool bFoundID, float Progress);
};

class UAchievementQueryCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UAchievementQueryCallbackProxy* CacheAchievementDescriptions(UObject* WorldContextObject, APlayerController* PlayerController);
  UAchievementQueryCallbackProxy* CacheAchievements(UObject* WorldContextObject, APlayerController* PlayerController);
};

class UAchievementWriteCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FAchievementWriteDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FAchievementWriteDelegate OnFailure;

  UAchievementWriteCallbackProxy* WriteAchievementProgress(UObject* WorldContextObject, APlayerController* PlayerController, FName AchievementName, float Progress, int32 UserTag);
};

class UActivityGroupItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_Exciting8Item_UIBP_C* Lobby_Exciting8Item_UIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_activity_group_C* LuaRef;
  /* offset=0x023c flags=0x0008000000010005 */ struct FBP_STRUCT_ActivityGroupInfo ItemData;
  /* offset=0x0288 flags=0x0000001040000205 */ bool EnableClicked;

  void Construct();
  void CustomEvent();
  void ExecuteUbergraph_ActivityGroupItem_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate);
  void InitItem(Abp_activity_group_C* LuaRef, struct FBP_STRUCT_ActivityGroupInfo ItemData, UActivityGroupItem_BP_C* Ins);
  void OnGotoBtnClicked();
  void SetData(struct FBP_STRUCT_ActivityGroupInfo ItemData, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void SetLuaRef(Abp_activity_group_C* LuaRef);
  void SetNum(int32 Index, FText CallFunc_Conv_IntToText_ReturnValue);
};

class UActivityGroup_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_Exciting8UI_UIBP_C* Lobby_Exciting8UI_UIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_activity_group_C* LuaRef;

  void Construct();
  void ExecuteUbergraph_ActivityGroup_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_activity_group_C* K2Node_DynamicCast_AsBp_Activity_Group, bool K2Node_DynamicCast_bSuccess);
  void InitItems(UActivityGroupItem_BP_C* CallFunc_InitItem_Ins, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins2, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins3, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins4, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins5, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins6, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins7, UActivityGroupItem_BP_C* CallFunc_InitItem_Ins8);
  void UIClose();
  void UIShow();
};

class UActivity_FeasWind_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UHorizontalBox* BigAwardGot;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* BtnGetBig;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* BtnViewBox;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* ButClickShare;
  /* offset=0x0240 flags=0x000a0010c008020c */ UVerticalBox* ConBigProgress;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_item;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* labelBigItemName;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* labelBigProgress;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* labelItemName;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* labelTarget;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* labelTime;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* labelTitle;
  /* offset=0x0260 flags=0x000a0010c008020c */ UWidgetSwitcher* stateSwither;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* TextBtnShare;
};

class UActivity_FeastUIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x0234 flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x0238 flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x023c flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x0240 flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x0244 flags=0x000a0010c008020c */ UActivity_FeasWind_C* Activity_FeasWind;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* BtnClose;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* BtnRule;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_red_l;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* labelOpenTime;
};

class UActivity_FeastViewBoxUIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UWrapBox* AbsoluteWrapBox;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x0240 flags=0x0008001040010a05 */ Abp_noticebox_panel_C* MySelf;
};

class UActivity_RedEnvelopesUIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008021c */ UWidgetAnimation* DX_RedEnvelope;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UProgressBar* BalanceProgressBar;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* black_bg;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UButton* Button_Determine;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* dajidali;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UTextBlock* Determine_Money_Text;
  /* offset=0x01cc flags=0x000a0010c008020c */ UTextBlock* Determine_Notice_Text;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UCanvasPanel* Determine_Text;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* FX_Light01;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UImage* FX_Light02;
  /* offset=0x01dc flags=0x000a0010c008020c */ UImage* FX_Light03;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UImage* FX_Light04;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01ec flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01fc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0200 flags=0x000a0010c008020c */ UHorizontalBox* LeftMoneyBar;
  /* offset=0x0204 flags=0x000a0010c008020c */ UCanvasPanel* LeftMoneyPanel;
  /* offset=0x0208 flags=0x000a0010c008020c */ UCanvasPanel* LeftMoneyPoints;
  /* offset=0x020c flags=0x000a0010c008020c */ UCanvasPanel* LeftMoneyPointsText;
  /* offset=0x0210 flags=0x000a0010c008020c */ UButton* QQBut_Receive;
  /* offset=0x0214 flags=0x000a0010c008020c */ UButton* QQBut_Share;
  /* offset=0x0218 flags=0x000a0010c008020c */ UTextBlock* QQShareNoticeText;
  /* offset=0x021c flags=0x000a0010c008020c */ UImage* RED_BG;
  /* offset=0x0220 flags=0x000a0010c008020c */ UImage* Sharetext;
  /* offset=0x0224 flags=0x000a0010c008020c */ UTextBlock* TextSuffix;
  /* offset=0x0228 flags=0x000a0010c008020c */ UTextBlock* TotalMoneyText;
  /* offset=0x022c flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0230 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* WXBut_Receive;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* WXBut_Share;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* WXShareNoticeText;

  void ShowEffects(bool Is show, enum ESlateVisibility Type);
};

class AActor: public UObject {
  /* offset=0x001c flags=0x0010000000010001 */ struct FActorTickFunction PrimaryActorTick;
  /* offset=0x0058 flags=0x0018041040000204 */ float CustomTimeDilation;
  /* offset=0x005c flags=0x0018001200000035 */ uint8 bHidden:1;
  /* offset=0x005c flags=0x0018001000000000 */ uint8 bNetTemporary:1;
  /* offset=0x005c flags=0x0018001000000000 */ uint8 bNetStartup:1;
  /* offset=0x005c flags=0x0018001000010015 */ uint8 bOnlyRelevantToOwner:1;
  /* offset=0x005c flags=0x0018001000010005 */ uint8 bAlwaysRelevant:1;
  /* offset=0x005c flags=0x0018001100010021 */ uint8 bReplicateMovement:1;
  /* offset=0x005c flags=0x0018001000000020 */ uint8 bTearOff:1;
  /* offset=0x005c flags=0x0018001000002000 */ uint8 bExchangedRoles:1;
  /* offset=0x005d flags=0x0018001000010001 */ uint8 bNetLoadOnClient:1;
  /* offset=0x005d flags=0x0018001000010005 */ uint8 bNetUseOwnerRelevancy:1;
  /* offset=0x005d flags=0x0018001000010001 */ uint8 bBlockInput:1;
  /* offset=0x005d flags=0x0018001000010001 */ uint8 bAllowTickBeforeBeginPlay:1;
  /* offset=0x005e flags=0x0048001000000000 */ uint8 bActorEnableCollision:1;
  /* offset=0x005e flags=0x0028081000010015 */ uint8 bReplicates:1;
  /* offset=0x005f flags=0x0048001040002220 */ uint8 RemoteRole;
  /* offset=0x0060 flags=0x0048001140000220 */ AActor* Owner;
  /* offset=0x0068 flags=0x0018001040000200 */ FName NetDriverName;
  /* offset=0x0070 flags=0x0010041100010021 */ struct FRepMovement ReplicatedMovement;
  /* offset=0x00a4 flags=0x0018001040000215 */ float InitialLifeSpan;
  /* offset=0x00a8 flags=0x0040009100002020 */ struct FRepAttachment AttachmentReplication;
  /* offset=0x00e0 flags=0x0018001040000220 */ uint8 Role;
  /* offset=0x00e1 flags=0x0018001040010215 */ uint8 NetDormancy;
  /* offset=0x00e2 flags=0x0018001040000201 */ uint8 AutoReceiveInput;
  /* offset=0x00e4 flags=0x0018001040000201 */ int32 InputPriority;
  /* offset=0x00e8 flags=0x0018001040080208 */ UInputComponent* InputComponent;
  /* offset=0x00ec flags=0x0018001040010215 */ float NetCullDistanceSquared;
  /* offset=0x00f0 flags=0x0018001040002200 */ int32 NetTag;
  /* offset=0x00f8 flags=0x0018001040010205 */ float NetUpdateFrequency;
  /* offset=0x00fc flags=0x0018001040010205 */ float MinNetUpdateFrequency;
  /* offset=0x0100 flags=0x0018001040010205 */ float NetPriority;
  /* offset=0x0108 flags=0x0018001000000004 */ uint8 bAutoDestroyWhenFinished:1;
  /* offset=0x0108 flags=0x0018001001000025 */ uint8 bCanBeDamaged:1;
  /* offset=0x0108 flags=0x0048001000202000 */ uint8 bActorIsBeingDestroyed:1;
  /* offset=0x0108 flags=0x0018001000000000 */ uint8 bCollideWhenPlacing:1;
  /* offset=0x0108 flags=0x0018041000000005 */ uint8 bFindCameraComponentWhenViewTarget:1;
  /* offset=0x0108 flags=0x0018001000000000 */ uint8 bRelevantForNetworkReplays:1;
  /* offset=0x0108 flags=0x0018001000000005 */ uint8 bGenerateOverlapEventsDuringLevelStreaming:1;
  /* offset=0x0108 flags=0x00280c1000000001 */ uint8 bCanBeInCluster:1;
  /* offset=0x0109 flags=0x0028081000000000 */ uint8 bAllowReceiveTickEventOnDedicatedServer:1;
  /* offset=0x0109 flags=0x0018001000000000 */ uint8 bActorSeamlessTraveled:1;
  /* offset=0x0109 flags=0x0018041000000001 */ uint8 bIgnoresOriginShifting:1;
  /* offset=0x0109 flags=0x0018041000000001 */ uint8 bEnableAutoLODGeneration:1;
  /* offset=0x010a flags=0x0018001040000205 */ enum ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod;
  /* offset=0x0110 flags=0x0019001140000224 */ APawn* Instigator;
  /* offset=0x0114 flags=0x0010000000002200 */ TArray<AActor*> Children;
  /* offset=0x0120 flags=0x002808104008021c */ USceneComponent* RootComponent;
  /* offset=0x0124 flags=0x0020080000002200 */ TArray<AMatineeActor*> ControllingMatineeActors;
  /* offset=0x0138 flags=0x0010000000000200 */ TArray<FName> Layers;
  /* offset=0x0144 flags=0x004c001040080208 */ UChildActorComponent* ParentComponent;
  /* offset=0x014c flags=0x0010040000000205 */ TArray<FName> Tags;
  /* offset=0x0158 flags=0x0018001040002200 */ uint64 HiddenEditorViews;
  /* offset=0x0160 flags=0x0010000010080200 */ FTakeAnyDamageSignature OnTakeAnyDamage;
  /* offset=0x016c flags=0x0010000010080200 */ FTakePointDamageSignature OnTakePointDamage;
  /* offset=0x0178 flags=0x0010000010080200 */ FActorBeginOverlapSignature OnActorBeginOverlap;
  /* offset=0x0184 flags=0x0010000010080200 */ FActorEndOverlapSignature OnActorEndOverlap;
  /* offset=0x0190 flags=0x0010000010080200 */ FActorBeginCursorOverSignature OnBeginCursorOver;
  /* offset=0x019c flags=0x0010000010080200 */ FActorEndCursorOverSignature OnEndCursorOver;
  /* offset=0x01a8 flags=0x0010000010080200 */ FActorOnClickedSignature OnClicked;
  /* offset=0x01b4 flags=0x0010000010080200 */ FActorOnReleasedSignature OnReleased;
  /* offset=0x01c0 flags=0x0010000010080200 */ FActorOnInputTouchBeginSignature OnInputTouchBegin;
  /* offset=0x01cc flags=0x0010000010080200 */ FActorOnInputTouchEndSignature OnInputTouchEnd;
  /* offset=0x01d8 flags=0x0010000010080200 */ FActorBeginTouchOverSignature OnInputTouchEnter;
  /* offset=0x01e4 flags=0x0010000010080200 */ FActorEndTouchOverSignature OnInputTouchLeave;
  /* offset=0x01f0 flags=0x0010000010080200 */ FActorHitSignature OnActorHit;
  /* offset=0x01fc flags=0x0010000010080200 */ FActorDestroyedSignature OnDestroyed;
  /* offset=0x0208 flags=0x0010000010080200 */ FActorEndPlaySignature OnEndPlay;
  /* offset=0x028c flags=0x0010408400000208 */ TArray<UActorComponent*> BlueprintCreatedComponents;
  /* offset=0x0298 flags=0x0040008000000208 */ TArray<UActorComponent*> InstanceComponents;

  bool ActorHasTag(FName Tag);
  UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, struct FTransform RelativeTransform, UObject* ComponentTemplateContext);
  void AddTickPrerequisiteActor(AActor* PrerequisiteActor);
  void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
  void DetachRootComponentFromParent(bool bMaintainWorldPosition);
  void DisableInput(APlayerController* PlayerController);
  void EnableInput(APlayerController* PlayerController);
  void FlushNetDormancy();
  void ForceNetUpdate();
  void GetActorBounds(bool bOnlyCollidingComponents, struct FVector Origin, struct FVector BoxExtent);
  bool GetActorEnableCollision();
  void GetActorEyesViewPoint(struct FVector OutLocation, struct FRotator OutRotation);
  struct FVector GetActorForwardVector();
  struct FVector GetActorRelativeScale3D();
  struct FVector GetActorRightVector();
  struct FVector GetActorScale3D();
  float GetActorTickInterval();
  float GetActorTimeDilation();
  struct FVector GetActorUpVector();
  void GetAllChildActors(TArray<AActor*> ChildActors, bool bIncludeDescendants);
  AActor* GetAttachParentActor();
  FName GetAttachParentSocketName();
  void GetAttachedActors(TArray<AActor*> OutActors);
  UActorComponent* GetComponentByClass(UClass<UActorComponent>* ComponentClass);
  TArray<UActorComponent*> GetComponentsByClass(UClass<UActorComponent>* ComponentClass);
  TArray<UActorComponent*> GetComponentsByTag(UClass<UActorComponent>* ComponentClass, FName Tag);
  float GetDistanceTo(AActor* OtherActor);
  float GetDotProductTo(AActor* OtherActor);
  float GetGameTimeSinceCreation();
  float GetHorizontalDistanceTo(AActor* OtherActor);
  float GetHorizontalDotProductTo(AActor* OtherActor);
  float GetInputAxisKeyValue(struct FKey InputAxisKey);
  float GetInputAxisValue(FName InputAxisName);
  struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey);
  APawn* GetInstigator();
  AController* GetInstigatorController();
  float GetLifeSpan();
  void GetOverlappingActors(TArray<AActor*> OverlappingActors, UClass<AActor>* ClassFilter);
  void GetOverlappingComponents(TArray<UPrimitiveComponent*> OverlappingComponents);
  AActor* GetOwner();
  AActor* GetParentActor();
  UChildActorComponent* GetParentComponent();
  uint8 GetRemoteRole();
  float GetSquaredDistanceTo(AActor* OtherActor);
  bool GetTickableWhenPaused();
  struct FTransform GetTransform();
  struct FVector GetVelocity();
  float GetVerticalDistanceTo(AActor* OtherActor);
  bool HasAuthority();
  bool IsActorBeingDestroyed();
  bool IsActorTickEnabled();
  bool IsChildActor();
  bool IsOverlappingActor(AActor* Other);
  void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddActorLocalTransform(struct FTransform NewTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddActorWorldTransform(struct FTransform DeltaTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AttachRootComponentTo(USceneComponent* InParent, FName InSocketName, uint8 AttachLocationType, bool bWeldSimulatedBodies);
  void K2_AttachRootComponentToActor(AActor* InParentActor, FName InSocketName, uint8 AttachLocationType, bool bWeldSimulatedBodies);
  void K2_AttachToActor(AActor* ParentActor, FName SocketName, enum EAttachmentRule LocationRule, enum EAttachmentRule RotationRule, enum EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
  void K2_AttachToComponent(USceneComponent* Parent, FName SocketName, enum EAttachmentRule LocationRule, enum EAttachmentRule RotationRule, enum EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
  void K2_DestroyActor();
  void K2_DestroyComponent(UActorComponent* Component);
  void K2_DetachFromActor(enum EDetachmentRule LocationRule, enum EDetachmentRule RotationRule, enum EDetachmentRule ScaleRule);
  struct FVector K2_GetActorLocation();
  struct FRotator K2_GetActorRotation();
  USceneComponent* K2_GetRootComponent();
  void K2_OnBecomeViewTarget(APlayerController* PC);
  void K2_OnEndViewTarget(APlayerController* PC);
  void K2_OnReset();
  bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetActorRelativeTransform(struct FTransform NewRelativeTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics);
  bool K2_SetActorTransform(struct FTransform NewTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation);
  UMaterialInstanceDynamic* MakeMIDForMaterial(UMaterialInterface* Parent);
  void MakeNoise(float Loudness, APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, FName Tag);
  void OnRep_AttachmentReplication();
  void OnRep_Instigator();
  void OnRep_Owner();
  void OnRep_ReplicateMovement();
  void OnRep_ReplicatedMovement();
  void PrestreamTextures(float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups);
  void ReceiveActorBeginCursorOver();
  void ReceiveActorBeginOverlap(AActor* OtherActor);
  void ReceiveActorEndCursorOver();
  void ReceiveActorEndOverlap(AActor* OtherActor);
  void ReceiveActorOnClicked(struct FKey ButtonPressed);
  void ReceiveActorOnInputTouchBegin(uint8 FingerIndex);
  void ReceiveActorOnInputTouchEnd(uint8 FingerIndex);
  void ReceiveActorOnInputTouchEnter(uint8 FingerIndex);
  void ReceiveActorOnInputTouchLeave(uint8 FingerIndex);
  void ReceiveActorOnReleased(struct FKey ButtonReleased);
  void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
  void ReceiveBeginPlay();
  void ReceiveDestroyed();
  void ReceiveEndPlay(uint8 EndPlayReason);
  void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult Hit);
  void ReceivePointDamage(float Damage, UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, struct FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, struct FHitResult HitInfo);
  void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, struct FVector Origin, struct FHitResult HitInfo, AController* InstigatedBy, AActor* DamageCauser);
  void ReceiveTick(float DeltaSeconds);
  void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);
  void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
  void SetActorEnableCollision(bool bNewActorEnableCollision);
  void SetActorHiddenInGame(bool bNewHidden);
  void SetActorRelativeScale3D(struct FVector NewRelativeScale);
  void SetActorScale3D(struct FVector NewScale3D);
  void SetActorTickEnabled(bool bEnabled);
  void SetActorTickInterval(float TickInterval);
  void SetLifeSpan(float InLifespan);
  void SetNetDormancy(uint8 NewDormancy);
  void SetOwner(AActor* NewOwner);
  void SetReplicateMovement(bool bInReplicateMovement);
  void SetReplicates(bool bInReplicates);
  void SetTickGroup(uint8 NewTickGroup);
  void SetTickableWhenPaused(bool bTickableWhenPaused);
  void SnapRootComponentTo(AActor* InParentActor, FName InSocketName);
  void TearOff();
  void UserConstructionScript();
  bool WasRecentlyRendered(float Tolerance);
};

class AActorCacheMgr: public AActor {
  /* offset=0x02a8 flags=0x0010000000000200 */ TMap<UClass<AActor>*, UActorCachePool*> DataMap;

  bool AddToPool(UClass<AActor>* Type, AActor* Target);
  AActor* GetActor(UClass<AActor>* Type);
};

class UActorCachePool: public UObject {
};

class UActorChannel: public UChannel {
  /* offset=0x004c flags=0x0018001040000200 */ AActor* Actor;
};

class UActorComponent: public UObject {
  /* offset=0x0020 flags=0x0010000000010001 */ struct FActorComponentTickFunction PrimaryComponentTick;
  /* offset=0x005c flags=0x0010000000000205 */ TArray<FName> ComponentTags;
  /* offset=0x0068 flags=0x0018001040000205 */ bool bDestroyIfOnClientNoLocalControl;
  /* offset=0x006c flags=0x0020088000000208 */ TArray<UAssetUserData*> AssetUserData;
  /* offset=0x0078 flags=0x0028081000010035 */ uint8 bReplicates:1;
  /* offset=0x0078 flags=0x0028081000000000 */ uint8 bNetAddressable:1;
  /* offset=0x0079 flags=0x0018001000000015 */ uint8 bAutoActivate:1;
  /* offset=0x007a flags=0x0018001100002020 */ uint8 bIsActive:1;
  /* offset=0x007a flags=0x0018001000010001 */ uint8 bEditableWhenInherited:1;
  /* offset=0x007a flags=0x00280c1000000001 */ uint8 bCanEverAffectNavigation:1;
  /* offset=0x007a flags=0x0018001000000015 */ uint8 bIsEditorOnly:1;
  /* offset=0x007c flags=0x0018001040000200 */ enum EComponentCreationMethod CreationMethod;
  /* offset=0x0080 flags=0x0040000000000200 */ TArray<struct FSimpleMemberReference> UCSModifiedProperties;
  /* offset=0x008c flags=0x0010000010080200 */ FActorComponentActivatedSignature OnComponentActivated;
  /* offset=0x0098 flags=0x0010000010080200 */ FActorComponentDeactivateSignature OnComponentDeactivated;

  void Activate(bool bReset);
  void AddTickPrerequisiteActor(AActor* PrerequisiteActor);
  void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
  bool ComponentHasTag(FName Tag);
  void Deactivate();
  float GetComponentTickInterval();
  AActor* GetOwner();
  bool IsActive();
  bool IsBeingDestroyed();
  bool IsComponentTickEnabled();
  void K2_DestroyComponent(UObject* Object);
  void OnRep_IsActive();
  void ReceiveBeginPlay();
  void ReceiveEndPlay(uint8 EndPlayReason);
  void ReceiveTick(float DeltaSeconds);
  void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor);
  void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent);
  void SetActive(bool bNewActive, bool bReset);
  void SetAutoActivate(bool bNewAutoActivate);
  void SetComponentTickEnabled(bool bEnabled);
  void SetComponentTickInterval(float TickInterval);
  void SetIsReplicated(bool ShouldReplicate);
  void SetTickGroup(uint8 NewTickGroup);
  void SetTickableWhenPaused(bool bTickableWhenPaused);
  void ToggleActive();
};

class UActorSequence: public UMovieSceneSequence {
  /* offset=0x0278 flags=0x004a001040080208 */ UMovieScene* MovieScene;
  /* offset=0x027c flags=0x0040000000000000 */ struct FActorSequenceObjectReferenceMap ObjectReferences;
};

class UActorSequenceComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0020081000000001 */ struct FMovieSceneSequencePlaybackSettings PlaybackSettings;
  /* offset=0x00cc flags=0x002a081040080209 */ UActorSequence* Sequence;
  /* offset=0x00d0 flags=0x0028081040002214 */ UActorSequencePlayer* SequencePlayer;
  /* offset=0x00d4 flags=0x0028081040000201 */ bool bAutoPlay;
};

class UActorSequencePlayer: public UMovieSceneSequencePlayer {
};

class UAdvancedBuoyancyComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ bool bUseDrag;
  /* offset=0x0271 flags=0x0018001040000205 */ bool bDebugOn;
  /* offset=0x0274 flags=0x0018001040000205 */ AOceanManager* TheOcean;
  /* offset=0x0278 flags=0x0018001040000205 */ float WaterDensity;
  /* offset=0x027c flags=0x0018001040000205 */ float Gravity;
  /* offset=0x0280 flags=0x0018001040000205 */ float MeshDensity;
  /* offset=0x0290 flags=0x001800104008020d */ UStaticMeshComponent* BuoyantMesh;
  /* offset=0x02a0 flags=0x0010001040000005 */ struct FTransform MeshTransform;
  /* offset=0x02d0 flags=0x0018001040000205 */ float FalseVolume;
  /* offset=0x02d4 flags=0x0018001040000205 */ float BuoyancyReductionCoefficient;
  /* offset=0x02d8 flags=0x0018001040000205 */ float BuoyancyPitchReductionCoefficient;
  /* offset=0x02dc flags=0x0018001040000205 */ float DensityCorrection;
  /* offset=0x02e0 flags=0x0018001040000205 */ float DensityCorrectionModifier;
  /* offset=0x02e4 flags=0x0018001040000205 */ float SubmergedVolume;
  /* offset=0x02e8 flags=0x0018001040000205 */ float ImpactCoefficient;
  /* offset=0x02ec flags=0x0018001040000005 */ struct FVector DragCoefficient;
  /* offset=0x02f8 flags=0x0018001040000005 */ struct FVector SuctionCoefficient;
  /* offset=0x0304 flags=0x0018001040000205 */ float ViscousDragCoefficient;
  /* offset=0x0308 flags=0x0018001040000205 */ float MaxSlamAcceleration;
  /* offset=0x030c flags=0x0010000000000205 */ TArray<struct FVector> AdvancedGridHeight;
  /* offset=0x0318 flags=0x0010000000000205 */ TArray<struct FForceTriangle> SubmergedTris;
  /* offset=0x0324 flags=0x0010000000000205 */ TArray<float> TriSizes;
  /* offset=0x0330 flags=0x0010000000000205 */ TArray<float> TriSubmergedArea;

  void ApplyForce(struct FForceTriangle TriForce);
  void ApplySlamForce(struct FVector SlamForce, struct FVector TriCenter);
  void DrawDebugStuff(struct FForceTriangle TriForce, struct FColor DebugColor);
  void GetOcean();
  float GetOceanDepthFromGrid(struct FVector Position, bool bJustGetHeightAtLocation);
  void SetMeshDensity(float NewDensity, float NewWaterDensity);
  TArray<struct FForceTriangle> SplitTriangle(struct FBuoyancyVertex H, struct FBuoyancyVertex M, struct FBuoyancyVertex L, struct FVector InArrow);
  float TriangleArea(struct FVector A, struct FVector B, struct FVector C);
};

class UAgentBoundComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018041040000005 */ struct FVector LocalCenter;
  /* offset=0x00b8 flags=0x0018041040000005 */ struct FVector LocalSize;
};

class UAimOffsetBlendSpace: public UBlendSpace {
};

class UAimOffsetBlendSpace1D: public UBlendSpace1D {
};

class UAirAttackCS: public UTimerRegistComponent {
  /* offset=0x00d8 flags=0x004c001040010201 */ UClass<ASTExtraExplosionEffect>* ExplosionEffectTemplate;

  void AirAttackThrowBomb(int32 Index);
  void DoBombHarmAtLocation(struct FVector bombLocation);
  void OnAirAttack(uint8 airattacktype, int32 waveindex);
};

class UAirAttackComponent: public UTimerRegistComponent {
  /* offset=0x00d8 flags=0x0018001040010005 */ struct FVector MapOriginal;
  /* offset=0x00e4 flags=0x0018001040010205 */ float MapRadius;
  /* offset=0x00e8 flags=0x0018001040010205 */ float FlightHeight;
  /* offset=0x00ec flags=0x0018001040010205 */ float SeaLevelHeight;
  /* offset=0x00f0 flags=0x0018001040010205 */ float DelayTime;
  /* offset=0x00f4 flags=0x0018001040010205 */ int32 WaveCount;
  /* offset=0x00f8 flags=0x0018001040010205 */ int32 WaveInternal;
  /* offset=0x00fc flags=0x0010001000010005 */ struct FAirAttackCfg AirAttackConfig;
};

class AAirDropBoxActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040000205 */ float DroppingSpeed;
  /* offset=0x02ac flags=0x0018001040000205 */ bool bIsHitTheGround;
  /* offset=0x02b0 flags=0x0018001040000205 */ float HitGroundHeight;
  /* offset=0x02b4 flags=0x0018001040010201 */ float SmokeStartScaleDistance;
  /* offset=0x02b8 flags=0x0018001040010201 */ float SmokeEndScaleDistance;
  /* offset=0x02bc flags=0x0018001040010201 */ float SmokeStartScaleValue;
  /* offset=0x02c0 flags=0x0018001040010201 */ float SmokeEndScaleValue;
  /* offset=0x02c4 flags=0x0018001040000200 */ float PrevSmokeCurrentDistanceScaler;
  /* offset=0x02c8 flags=0x0018001040000205 */ bool bIsShowingSmoke;
  /* offset=0x02cc flags=0x001c001040010201 */ UClass<APlayerTombBox>* DeadInventoryBoxTemplate;
  /* offset=0x02d0 flags=0x0018001040010201 */ FName WrapperBoxName;

  void BoxReachGround();
  void DistanceScalerChangedEvent(float Scale);
  void GenerateWrappersBox(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, struct FVector BoxLoc);
};

class UAirDropComponent: public UTimerRegistComponent {
  /* offset=0x00d8 flags=0x0010001000010005 */ struct FAirDropPlaneParams AirDropPlaneParams;
  /* offset=0x00f4 flags=0x0010000000010205 */ TArray<struct FAirDropConfig> AirDropConfigs;
  /* offset=0x0100 flags=0x001c001040010201 */ UClass<AAirDropPlane>* AirDropPlaneBluePrint;
  /* offset=0x0104 flags=0x001c001040010201 */ UClass<AAirDropBoxActor>* AirDropBoxBlueprint;
  /* offset=0x0108 flags=0x0018001040010201 */ float StuffBoxToWorldBoundaryMinDis;
  /* offset=0x010c flags=0x0040001000000000 */ struct FAirDropOrder AirDropOrder;

  void OnAirDropStart();
  void OnAirPlaneDropStuff();
};

class AAirDropPlane: public AFlightVehicle {
  /* offset=0x02a8 flags=0x0010001100000025 */ struct FFlyingParam FlyingParam;
  /* offset=0x02b8 flags=0x0018001040000005 */ struct FVector DroppingStuffLocation;
  /* offset=0x02c4 flags=0x0018001040000205 */ float DroppingSpeed;
  /* offset=0x02c8 flags=0x0018001040000205 */ float LifeSpanAfterDrop;
  /* offset=0x02d4 flags=0x002808104008020d */ UProjectileMovementComponent* PMComp;

  void OnRep_FlyingParams();
};

class AAkAcousticPortal: public AVolume {
  /* offset=0x02d0 flags=0x0018001040000205 */ float Gain;
  /* offset=0x02d4 flags=0x0018001040000215 */ enum AkAcousticPortalState InitialState;

  void ClosePortal();
  enum AkAcousticPortalState GetCurrentState();
  void OpenPortal();
};

class UAkAcousticTexture: public UObject {
};

class AAkAmbientSound: public AActor {
  /* offset=0x02a8 flags=0x0018001060000200 */ UAkAudioEvent* AkAudioEvent;
  /* offset=0x02ac flags=0x00180010400a021d */ UAkComponent* AkComponent;
  /* offset=0x02b0 flags=0x0018021040000205 */ bool StopWhenOwnerIsDestroyed;
  /* offset=0x02b1 flags=0x0018021040000205 */ bool AutoPost;

  void StartAmbientSound();
  void StopAmbientSound();
};

class UAkAudioBank: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ bool AutoLoad;
};

class UAkAudioEvent: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ UAkAudioBank* RequiredBank;
  /* offset=0x0020 flags=0x0018001040000214 */ float MaxAttenuationRadius;
  /* offset=0x0024 flags=0x0018001040000214 */ bool IsInfinite;
  /* offset=0x0028 flags=0x0018001040000214 */ float MinimumDuration;
  /* offset=0x002c flags=0x0018001040000214 */ float MaximumDuration;
};

class UAkAuxBus: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ UAkAudioBank* RequiredBank;
};

class UAkComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018041040000205 */ UAkAuxBus* EarlyReflectionAuxBus;
  /* offset=0x0274 flags=0x0018040000000205 */ FString EarlyReflectionAuxBusName;
  /* offset=0x0280 flags=0x0018041040000215 */ int32 EarlyReflectionOrder;
  /* offset=0x0284 flags=0x0018041040000205 */ float EarlyReflectionBusSendGain;
  /* offset=0x0288 flags=0x0018041040000205 */ float EarlyReflectionMaxPathLength;
  /* offset=0x0290 flags=0x0018041000000005 */ uint8 EnableSpotReflectors:1;
  /* offset=0x0290 flags=0x0018041000000005 */ uint8 DrawFirstOrderReflections:1;
  /* offset=0x0290 flags=0x0018041000000005 */ uint8 DrawSecondOrderReflections:1;
  /* offset=0x0290 flags=0x0018041000000005 */ uint8 DrawHigherOrderReflections:1;
  /* offset=0x0291 flags=0x0018001040000200 */ bool StopWhenOwnerDestroyed;
  /* offset=0x0294 flags=0x0018001040000215 */ float AttenuationScalingFactor;
  /* offset=0x0298 flags=0x0018001040000205 */ float OcclusionRefreshInterval;
  /* offset=0x029c flags=0x0018001040000205 */ UAkAudioEvent* AkAudioEvent;
  /* offset=0x02a0 flags=0x0018040000000205 */ FString EventName;

  float GetAttenuationRadius();
  int32 PostAkEvent(UAkAudioEvent* AkEvent, FString in_EventName);
  int32 PostAkEventByName(FString in_EventName);
  int32 PostAssociatedAkEvent();
  void PostTrigger(FString Trigger);
  void SetAttenuationScalingFactor(float Value);
  void SetEarlyReflectionOrder(int32 NewEarlyReflectionOrder);
  void SetListeners(TArray<UAkComponent*> Listeners);
  void SetOutputBusVolume(float BusVolume);
  void SetRTPCValue(FString RTPC, float Value, int32 InterpolationTimeMs);
  void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);
  void SetSwitch(FString SwitchGroup, FString SwitchState);
  void Stop();
  void UseEarlyReflections(UAkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);
  void UseReverbVolumes(bool inUseReverbVolumes);
};

class UAkGameplayStatics: public UBlueprintFunctionLibrary {
  void AddOutputCaptureMarker(FString MarkerText);
  void ClearBanks();
  UAkComponent* GetAkComponent(USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, uint8 LocationType);
  float GetOcclusionScalingFactor();
  bool IsEditor();
  bool IsGame(UObject* WorldContextObject);
  void LoadBank(UAkAudioBank* Bank, FString BankName);
  void LoadBankByName(FString BankName);
  void LoadBanks(TArray<UAkAudioBank*> SoundBanks, bool SynchronizeSoundBanks);
  void LoadInitBank();
  int32 PostEvent(UAkAudioEvent* AkEvent, AActor* Actor, bool bStopWhenAttachedToDestroyed, FString EventName);
  int32 PostEventAtLocation(UAkAudioEvent* AkEvent, struct FVector Location, struct FRotator Orientation, FString EventName, UObject* WorldContextObject);
  void PostEventAtLocationByName(FString EventName, struct FVector Location, struct FRotator Orientation, UObject* WorldContextObject);
  int32 PostEventAttached(UAkAudioEvent* AkEvent, AActor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);
  void PostEventByName(FString EventName, AActor* Actor, bool bStopWhenAttachedToDestroyed);
  void PostTrigger(FName Trigger, AActor* Actor);
  void SetBusConfig(FString BusName, enum AkChannelConfiguration ChannelConfiguration);
  void SetOcclusionRefreshInterval(float RefreshInterval, AActor* Actor);
  void SetOcclusionScalingFactor(float ScalingFactor);
  void SetOutputBusVolume(float BusVolume, AActor* Actor);
  void SetPanningRule(enum PanningRule PanRule);
  void SetRTPCValue(FName RTPC, float Value, int32 InterpolationTimeMs, AActor* Actor);
  void SetState(FName StateGroup, FName State);
  void SetSwitch(FName SwitchGroup, FName SwitchState, AActor* Actor);
  void ShowAKComponentPosition(bool _IsShow);
  UAkComponent* SpawnAkComponentAtLocation(UObject* WorldContextObject, UAkAudioEvent* AkEvent, UAkAuxBus* EarlyReflectionsBus, struct FVector Location, struct FRotator Orientation, bool AutoPost, FString EventName, FString EarlyReflectionsBusName, bool AutoDestroy);
  void StartAllAmbientSounds(UObject* WorldContextObject);
  void StartOutputCapture(FString Filename);
  void StartProfilerCapture(FString Filename);
  void StopActor(AActor* Actor);
  void StopAll();
  void StopAllAmbientSounds(UObject* WorldContextObject);
  void StopOutputCapture();
  void StopProfilerCapture();
  void Suspend();
  void UnloadBank(UAkAudioBank* Bank, FString BankName);
  void UnloadBankByName(FString BankName);
  void UseEarlyReflections(AActor* Actor, UAkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);
  void UseReverbVolumes(bool inUseReverbVolumes, AActor* Actor);
  void WakeupFromSuspend();
};

class UAkLateReverbComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bEnable:1;
  /* offset=0x0274 flags=0x0018001040000205 */ UAkAuxBus* AuxBus;
  /* offset=0x0278 flags=0x0018040000000205 */ FString AuxBusName;
  /* offset=0x0284 flags=0x0018001040000205 */ float SendLevel;
  /* offset=0x0288 flags=0x0018001040000205 */ float FadeRate;
  /* offset=0x028c flags=0x0018001040000205 */ float Priority;
};

class AAkReverbVolume: public AVolume {
  /* offset=0x02d0 flags=0x0018001020000000 */ uint8 bEnabled:1;
  /* offset=0x02d4 flags=0x0018001060000200 */ UAkAuxBus* AuxBus;
  /* offset=0x02d8 flags=0x0018000020000200 */ FString AuxBusName;
  /* offset=0x02e4 flags=0x0018001060000200 */ float SendLevel;
  /* offset=0x02e8 flags=0x0018001060000200 */ float FadeRate;
  /* offset=0x02ec flags=0x0018001060000200 */ float Priority;
  /* offset=0x02f0 flags=0x00180010400a020d */ UAkLateReverbComponent* LateReverbComponent;
};

class UAkRoomComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bEnable:1;
  /* offset=0x0278 flags=0x0018001040000205 */ float Priority;

  void AddSpatialAudioRoom();
  void RemoveSpatialAudioRoom();
};

class UAkSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ uint8 MaxSimultaneousReverbVolumes;
  /* offset=0x0020 flags=0x0010000000004001 */ struct FFilePath WwiseProjectPath;
  /* offset=0x002c flags=0x0010000000004001 */ struct FDirectoryPath WwiseWindowsInstallationPath;
  /* offset=0x0038 flags=0x0010000000004001 */ struct FFilePath WwiseMacInstallationPath;
  /* offset=0x0044 flags=0x0018001040004200 */ bool SuppressWwiseProjectPathWarnings;
  /* offset=0x0045 flags=0x0018001040004201 */ bool UseAlternateObstructionOcclusionFeature;
};

class UAkSoundPlayerSceneComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000201 */ UAkAudioEvent* AkSoundEvent;
};

class AAkSpatialAudioVolume: public AVolume {
  /* offset=0x02d0 flags=0x00180010400a021d */ UAkSurfaceReflectorSetComponent* SurfaceReflectorSet;
  /* offset=0x02d4 flags=0x00180010400a021d */ UAkLateReverbComponent* LateReverb;
  /* offset=0x02d8 flags=0x00180010400a021d */ UAkRoomComponent* room;
};

class AAkSpotReflector: public AActor {
  /* offset=0x02a8 flags=0x0018001040000205 */ UAkAuxBus* AuxBus;
  /* offset=0x02ac flags=0x0018040000000205 */ FString AuxBusName;
  /* offset=0x02b8 flags=0x0018001040000205 */ UAkAcousticTexture* AcousticTexture;
  /* offset=0x02bc flags=0x0018001040000205 */ float DistanceScalingFactor;
  /* offset=0x02c0 flags=0x0018001040000205 */ float Level;
};

class UAkSurfaceReflectorSetComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bEnableSurfaceReflectors:1;
  /* offset=0x0274 flags=0x0010000000000205 */ TArray<struct FAkPoly> AcousticPolys;

  void RemoveSurfaceReflectorSet();
  void SendSurfaceReflectorSet();
  void UpdateSurfaceReflectorSet();
};

class AAmbientSound: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UAudioComponent* AudioComponent;

  void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
  void FadeIn(float FadeInDuration, float FadeVolumeLevel);
  void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
  void Play(float StartTime);
  void Stop();
};

class UAndroidDeviceProfileMatchingRules: public UObject {
  /* offset=0x001c flags=0x0010000000004201 */ TArray<struct FProfileMatch> MatchProfile;
};

class UAndroidJavaSurfaceViewDevices: public UObject {
  /* offset=0x001c flags=0x0010000000004201 */ TArray<struct FJavaSurfaceViewDevice> SurfaceViewDevices;
};

class UAndroidMediaSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ bool CacheableVideoSampleBuffers;
};

class UAndroidPermissionCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FAndroidPermissionDynamicDelegate OnPermissionsGrantedDynamicDelegate;
};

class UAndroidPermissionFunctionLibrary: public UBlueprintFunctionLibrary {
  UAndroidPermissionCallbackProxy* AcquirePermissions(TArray<FString> Permissions);
  bool CheckPermission(FString permission);
};

class UAndroidRuntimeSettings: public UObject {
  /* offset=0x001c flags=0x0018000000044201 */ FString PackageName;
  /* offset=0x0028 flags=0x0018001040044201 */ int32 StoreVersion;
  /* offset=0x002c flags=0x0018000000044201 */ FString ApplicationDisplayName;
  /* offset=0x0038 flags=0x0018000000044201 */ FString VersionDisplayName;
  /* offset=0x0044 flags=0x0018001040044201 */ int32 MinSDKVersion;
  /* offset=0x0048 flags=0x0018001040044201 */ int32 TargetSDKVersion;
  /* offset=0x004c flags=0x0018001040044201 */ uint8 InstallLocation;
  /* offset=0x004d flags=0x0018001040044201 */ bool bEnableGradle;
  /* offset=0x004e flags=0x0018001040044201 */ bool bPackageDataInsideApk;
  /* offset=0x004f flags=0x0018001040044201 */ bool bCreateAllPlatformsInstall;
  /* offset=0x0050 flags=0x0018001040044201 */ bool bDisableVerifyOBBOnStartUp;
  /* offset=0x0051 flags=0x0018001040044201 */ bool bUseExternalFilesDir;
  /* offset=0x0052 flags=0x0018001040044201 */ uint8 Orientation;
  /* offset=0x0054 flags=0x0018001040044201 */ float MaxAspectRatio;
  /* offset=0x0058 flags=0x0018001040044201 */ uint8 AntVerbosity;
  /* offset=0x0059 flags=0x0018001040044201 */ bool bFullScreen;
  /* offset=0x005a flags=0x0018001040044201 */ bool bEnableNewKeyboard;
  /* offset=0x005b flags=0x0018001040044201 */ uint8 DepthBufferPreference;
  /* offset=0x005c flags=0x0010000000044201 */ TArray<FString> ExtraManifestNodeTags;
  /* offset=0x0068 flags=0x0010000000044201 */ TArray<FString> ExtraApplicationNodeTags;
  /* offset=0x0074 flags=0x0018000000044201 */ FString ExtraApplicationSettings;
  /* offset=0x0080 flags=0x0010000000044201 */ TArray<FString> ExtraActivityNodeTags;
  /* offset=0x008c flags=0x0018000000044201 */ FString ExtraActivitySettings;
  /* offset=0x0098 flags=0x0010000000044201 */ TArray<FString> ExtraPermissions;
  /* offset=0x00a4 flags=0x0018001040044201 */ bool bAndroidVoiceEnabled;
  /* offset=0x00a5 flags=0x0018001040044201 */ bool bPackageForGearVR;
  /* offset=0x00a6 flags=0x0018001040044201 */ bool bRemoveOSIG;
  /* offset=0x00a8 flags=0x0010000000044201 */ TArray<uint8> GoogleVRCaps;
  /* offset=0x00b4 flags=0x0018001040044201 */ bool bGoogleVRSustainedPerformance;
  /* offset=0x00b8 flags=0x0018000000044201 */ FString KeyStore;
  /* offset=0x00c4 flags=0x0018000000044201 */ FString KeyAlias;
  /* offset=0x00d0 flags=0x0018000000044201 */ FString KeyStorePassword;
  /* offset=0x00dc flags=0x0018000000044201 */ FString KeyPassword;
  /* offset=0x00e8 flags=0x0018001040044201 */ bool bBuildForArmV7;
  /* offset=0x00e9 flags=0x0018001040044201 */ bool bBuildForArm64;
  /* offset=0x00ea flags=0x0018001040044201 */ bool bBuildForX86;
  /* offset=0x00eb flags=0x0018001040044201 */ bool bBuildForX8664;
  /* offset=0x00ec flags=0x0018001040044201 */ bool bBuildForES2;
  /* offset=0x00ed flags=0x0018001040044201 */ bool bBuildForES31;
  /* offset=0x00ee flags=0x0018001040044201 */ bool bSupportsVulkan;
  /* offset=0x00ef flags=0x0018001040044201 */ bool bBuildWithHiddenSymbolVisibility;
  /* offset=0x00f0 flags=0x0018001040044201 */ bool bEnableGooglePlaySupport;
  /* offset=0x00f1 flags=0x0018001040044201 */ bool bUseGetAccounts;
  /* offset=0x00f4 flags=0x0018000000044201 */ FString GamesAppID;
  /* offset=0x0100 flags=0x0010000000044201 */ TArray<struct FGooglePlayAchievementMapping> AchievementMap;
  /* offset=0x010c flags=0x0010000000044201 */ TArray<struct FGooglePlayLeaderboardMapping> LeaderboardMap;
  /* offset=0x0118 flags=0x0018001040044201 */ bool bSupportAdMob;
  /* offset=0x011c flags=0x0018000000044201 */ FString AdMobAdUnitID;
  /* offset=0x0128 flags=0x0010000000044201 */ TArray<FString> AdMobAdUnitIDs;
  /* offset=0x0134 flags=0x0018000000044201 */ FString GooglePlayLicenseKey;
  /* offset=0x0140 flags=0x0018000000044201 */ FString GCMClientSenderID;
  /* offset=0x014c flags=0x0018001040044201 */ bool bShowLaunchImage;
  /* offset=0x014d flags=0x0018001040044201 */ uint8 AndroidAudio;
  /* offset=0x0150 flags=0x0018001040004201 */ int32 AudioSampleRate;
  /* offset=0x0154 flags=0x0018001040004201 */ int32 AudioCallbackBufferFrameSize;
  /* offset=0x0158 flags=0x0018001040004201 */ int32 AudioNumBuffersToEnqueue;
  /* offset=0x015c flags=0x0018001040004201 */ int32 AudioMaxChannels;
  /* offset=0x0160 flags=0x0018001040004201 */ int32 AudioNumSourceWorkers;
  /* offset=0x0164 flags=0x0018000000004201 */ FString SpatializationPlugin;
  /* offset=0x0170 flags=0x0018000000004201 */ FString ReverbPlugin;
  /* offset=0x017c flags=0x0018000000004201 */ FString OcclusionPlugin;
  /* offset=0x0188 flags=0x0018001040044201 */ uint8 AndroidGraphicsDebugger;
  /* offset=0x018c flags=0x0010000000044001 */ struct FDirectoryPath MaliGraphicsDebuggerPath;
  /* offset=0x0198 flags=0x0010000000044001 */ struct FDirectoryPath RenderDocPath;
  /* offset=0x01a4 flags=0x0018001040044201 */ bool bMultiTargetFormat_ETC1;
  /* offset=0x01a5 flags=0x0018001040044201 */ bool bMultiTargetFormat_ETC2;
  /* offset=0x01a6 flags=0x0018001040044201 */ bool bMultiTargetFormat_DXT;
  /* offset=0x01a7 flags=0x0018001040044201 */ bool bMultiTargetFormat_PVRTC;
  /* offset=0x01a8 flags=0x0018001040044201 */ bool bMultiTargetFormat_ATC;
  /* offset=0x01a9 flags=0x0018001040044201 */ bool bMultiTargetFormat_ASTC;
  /* offset=0x01ac flags=0x0018001040044201 */ float TextureFormatPriority_ETC1;
  /* offset=0x01b0 flags=0x0018001040044201 */ float TextureFormatPriority_ETC2;
  /* offset=0x01b4 flags=0x0018001040044201 */ float TextureFormatPriority_DXT;
  /* offset=0x01b8 flags=0x0018001040044201 */ float TextureFormatPriority_PVRTC;
  /* offset=0x01bc flags=0x0018001040044201 */ float TextureFormatPriority_ATC;
  /* offset=0x01c0 flags=0x0018001040044201 */ float TextureFormatPriority_ASTC;
};

class UAnimBlueprint: public UBlueprint {
  /* offset=0x0154 flags=0x0018011040000200 */ USkeleton* TargetSkeleton;
  /* offset=0x0158 flags=0x0010000000000200 */ TArray<struct FAnimGroupInfo> Groups;
  /* offset=0x0164 flags=0x0018001040000201 */ bool bUseMultiThreadedAnimationUpdate;
  /* offset=0x0165 flags=0x0018001040000201 */ bool bWarnAboutBlueprintUsage;
};

class UAnimBlueprintGeneratedClass: public UBlueprintGeneratedClass {
  /* offset=0x01d8 flags=0x0010000000000200 */ TArray<struct FBakedAnimationStateMachine> BakedStateMachines;
  /* offset=0x01e4 flags=0x0018001040000200 */ USkeleton* TargetSkeleton;
  /* offset=0x01e8 flags=0x0010008000000200 */ TArray<struct FAnimNotifyEvent> AnimNotifies;
  /* offset=0x01f4 flags=0x0018001040000200 */ int32 RootAnimNodeIndex;
  /* offset=0x01f8 flags=0x0010000000000200 */ TArray<int32> OrderedSavedPoseIndices;
  /* offset=0x0214 flags=0x0010000000000200 */ TArray<FName> SyncGroupNames;
};

class UAnimClassData: public UObject {
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<struct FBakedAnimationStateMachine> BakedStateMachines;
  /* offset=0x002c flags=0x0018001040000200 */ USkeleton* TargetSkeleton;
  /* offset=0x0030 flags=0x0010008000000200 */ TArray<struct FAnimNotifyEvent> AnimNotifies;
  /* offset=0x003c flags=0x0018001040000200 */ int32 RootAnimNodeIndex;
  /* offset=0x0040 flags=0x0010000000000200 */ TArray<int32> OrderedSavedPoseIndices;
  /* offset=0x004c flags=0x0018001040000200 */ UStructProperty* RootAnimNodeProperty;
  /* offset=0x0050 flags=0x0010000000000200 */ TArray<UStructProperty*> AnimNodeProperties;
  /* offset=0x005c flags=0x0010000000000200 */ TArray<FName> SyncGroupNames;
};

class UAnimClassInterface: public UInterface {
};

class UAnimComposite: public UAnimCompositeBase {
  /* offset=0x007c flags=0x0010000000000000 */ struct FAnimTrack AnimationTrack;
};

class UAnimCompositeBase: public UAnimSequenceBase {
};

class UAnimCompress: public UObject {
  /* offset=0x001c flags=0x0018000000020201 */ FString Description;
  /* offset=0x0028 flags=0x0018001000000000 */ uint8 bNeedsSkeleton:1;
  /* offset=0x0029 flags=0x0018001040000200 */ uint8 TranslationCompressionFormat;
  /* offset=0x002a flags=0x0018001040000200 */ uint8 RotationCompressionFormat;
  /* offset=0x002b flags=0x0018001040000200 */ uint8 ScaleCompressionFormat;
  /* offset=0x002c flags=0x0018001040000201 */ float MaxCurveError;
};

class UAnimCompress_Automatic: public UAnimCompress {
  /* offset=0x0030 flags=0x0018001040000201 */ float MaxEndEffectorError;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bTryFixedBitwiseCompression:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bTryPerTrackBitwiseCompression:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bTryLinearKeyRemovalCompression:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bTryIntervalKeyRemoval:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bRunCurrentDefaultCompressor:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bAutoReplaceIfExistingErrorTooGreat:1;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bRaiseMaxErrorToExisting:1;
};

class UAnimCompress_BitwiseCompressOnly: public UAnimCompress {
};

class UAnimCompress_LeastDestructive: public UAnimCompress {
};

class UAnimCompress_PerTrackCompression: public UAnimCompress_RemoveLinearKeys {
  /* offset=0x0050 flags=0x0018001040000201 */ float MaxZeroingThreshold;
  /* offset=0x0054 flags=0x0018001040000201 */ float MaxPosDiffBitwise;
  /* offset=0x0058 flags=0x0018001040000201 */ float MaxAngleDiffBitwise;
  /* offset=0x005c flags=0x0018001040000201 */ float MaxScaleDiffBitwise;
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<uint8> AllowedRotationFormats;
  /* offset=0x006c flags=0x0010000000000201 */ TArray<uint8> AllowedTranslationFormats;
  /* offset=0x0078 flags=0x0010000000000201 */ TArray<uint8> AllowedScaleFormats;
  /* offset=0x0084 flags=0x0018001000000001 */ uint8 bResampleAnimation:1;
  /* offset=0x0088 flags=0x0018001040000201 */ float ResampledFramerate;
  /* offset=0x008c flags=0x0018001040000201 */ int32 MinKeysForResampling;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bUseAdaptiveError:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bUseOverrideForEndEffectors:1;
  /* offset=0x0094 flags=0x0018001040000201 */ int32 TrackHeightBias;
  /* offset=0x0098 flags=0x0018001040000201 */ float ParentingDivisor;
  /* offset=0x009c flags=0x0018001040000201 */ float ParentingDivisorExponent;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 bUseAdaptiveError2:1;
  /* offset=0x00a4 flags=0x0018001040000201 */ float RotationErrorSourceRatio;
  /* offset=0x00a8 flags=0x0018001040000201 */ float TranslationErrorSourceRatio;
  /* offset=0x00ac flags=0x0018001040000201 */ float ScaleErrorSourceRatio;
  /* offset=0x00b0 flags=0x0018001040000201 */ float MaxErrorPerTrackRatio;
  /* offset=0x00b4 flags=0x0018001040000200 */ float PerturbationProbeSize;
};

class UAnimCompress_RemoveEverySecondKey: public UAnimCompress {
  /* offset=0x0030 flags=0x0018001040000201 */ int32 MinKeys;
  /* offset=0x0034 flags=0x0018001000000001 */ uint8 bStartAtSecondKey:1;
};

class UAnimCompress_RemoveLinearKeys: public UAnimCompress {
  /* offset=0x0030 flags=0x0018001040000201 */ float MaxPosDiff;
  /* offset=0x0034 flags=0x0018001040000201 */ float MaxAngleDiff;
  /* offset=0x0038 flags=0x0018001040000201 */ float MaxScaleDiff;
  /* offset=0x003c flags=0x0018001040000201 */ float MaxEffectorDiff;
  /* offset=0x0040 flags=0x0018001040000201 */ float MinEffectorDiff;
  /* offset=0x0044 flags=0x0018001040000201 */ float EffectorDiffSocket;
  /* offset=0x0048 flags=0x0018001040000201 */ float ParentKeyScale;
  /* offset=0x004c flags=0x0018001000000001 */ uint8 bRetarget:1;
  /* offset=0x004c flags=0x0018001000000001 */ uint8 bActuallyFilterLinearKeys:1;
};

class UAnimCompress_RemoveTrivialKeys: public UAnimCompress {
  /* offset=0x0030 flags=0x0018001040000201 */ float MaxPosDiff;
  /* offset=0x0034 flags=0x0018001040000201 */ float MaxAngleDiff;
  /* offset=0x0038 flags=0x0018001040000201 */ float MaxScaleDiff;
};

class UAnimCustomInstance: public UAnimInstance {
};

class UAnimInstance: public UObject {
  /* offset=0x001c flags=0x0018001060000200 */ float DeltaTime;
  /* offset=0x0020 flags=0x0018001040002200 */ USkeleton* CurrentSkeleton;
  /* offset=0x0024 flags=0x0018001040010201 */ uint8 RootMotionMode;
  /* offset=0x0025 flags=0x0018001060000200 */ bool bRunUpdatesInWorkerThreads;
  /* offset=0x0026 flags=0x0018001060000200 */ bool bCanUseParallelUpdateAnimation;
  /* offset=0x0027 flags=0x0018001040000200 */ bool bUseMultiThreadedAnimationUpdate;
  /* offset=0x0028 flags=0x0018001060000200 */ bool bWarnAboutBlueprintUsage;
  /* offset=0x002c flags=0x0010000010080200 */ FOnMontageBlendingOutStartedMCDelegate OnMontageBlendingOut;
  /* offset=0x0038 flags=0x0010000010080200 */ FOnMontageStartedMCDelegate OnMontageStarted;
  /* offset=0x0044 flags=0x0010000010080200 */ FOnMontageEndedMCDelegate OnMontageEnded;
  /* offset=0x0050 flags=0x0010000010080200 */ FOnAllMontageInstancesEndedMCDelegate OnAllMontageInstancesEnded;
  /* offset=0x00a4 flags=0x0048001040002200 */ bool bQueueMontageEvents;
  /* offset=0x0118 flags=0x0010008000002200 */ TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState;

  void BlueprintBeginPlay();
  void BlueprintInitializeAnimation();
  void BlueprintPostEvaluateAnimation();
  void BlueprintUpdateAnimation(float DeltaTimeX);
  float CalculateDirection(struct FVector Velocity, struct FRotator BaseRotation);
  void ClearMorphTargets();
  UAnimMontage* GetCurrentActiveMontage();
  FName GetCurrentStateName(int32 MachineIndex);
  float GetCurveValue(FName CurveName);
  float GetInstanceAssetPlayerLength(int32 AssetPlayerIndex);
  float GetInstanceAssetPlayerTime(int32 AssetPlayerIndex);
  float GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex);
  float GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex);
  float GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex);
  float GetInstanceCurrentStateElapsedTime(int32 MachineIndex);
  float GetInstanceMachineWeight(int32 MachineIndex);
  float GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex);
  float GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex);
  float GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex);
  float GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex);
  AActor* GetOwningActor();
  USkeletalMeshComponent* GetOwningComponent();
  float GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex);
  float GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex);
  float GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex);
  float GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex);
  float GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex);
  struct FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);
  bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float OutMarkerTime);
  bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);
  bool IsAnyMontagePlaying();
  bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName);
  bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);
  void LockAIResources(bool bLockMovement, bool LockAILogic);
  float Montage_GetBlendTime(UAnimMontage* Montage);
  FName Montage_GetCurrentSection(UAnimMontage* Montage);
  bool Montage_GetIsStopped(UAnimMontage* Montage);
  float Montage_GetPlayRate(UAnimMontage* Montage);
  float Montage_GetPosition(UAnimMontage* Montage);
  bool Montage_IsActive(UAnimMontage* Montage);
  bool Montage_IsPlaying(UAnimMontage* Montage);
  void Montage_JumpToSection(FName SectionName, UAnimMontage* Montage);
  void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage* Montage);
  void Montage_Pause(UAnimMontage* Montage);
  float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate, enum EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt);
  void Montage_Resume(UAnimMontage* Montage);
  void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage* Montage);
  void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate);
  void Montage_SetPosition(UAnimMontage* Montage, float NewPosition);
  void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage);
  float PlaySlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount);
  UAnimMontage* PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
  void SavePoseSnapshot(FName SnapshotName);
  void SetMorphTarget(FName MorphTargetName, float Value);
  void SetRootMotionMode(uint8 Value);
  void SnapshotPose(struct FPoseSnapshot Snapshot);
  void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);
  APawn* TryGetPawnOwner();
  void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
};

class UAnimMetaData: public UObject {
};

class UAnimMontage: public UAnimCompositeBase {
  /* offset=0x007c flags=0x0010001000000001 */ struct FAlphaBlend BlendIn;
  /* offset=0x00a8 flags=0x0018001060000200 */ float BlendInTime;
  /* offset=0x00ac flags=0x0010001000000001 */ struct FAlphaBlend BlendOut;
  /* offset=0x00d8 flags=0x0018001060000200 */ float BlendOutTime;
  /* offset=0x00dc flags=0x0018001040000201 */ float BlendOutTriggerTime;
  /* offset=0x00e0 flags=0x0018001040000201 */ FName SyncGroup;
  /* offset=0x00e8 flags=0x0018001040000201 */ int32 SyncSlotIndex;
  /* offset=0x00ec flags=0x0010000000000000 */ struct FMarkerSyncData MarkerData;
  /* offset=0x0104 flags=0x0010008000000200 */ TArray<struct FCompositeSection> CompositeSections;
  /* offset=0x0110 flags=0x0010000000000200 */ TArray<struct FSlotAnimationTrack> SlotAnimTracks;
  /* offset=0x011c flags=0x0010000020000200 */ TArray<struct FBranchingPoint> BranchingPoints;
  /* offset=0x0128 flags=0x0018001040000200 */ bool bEnableRootMotionTranslation;
  /* offset=0x0129 flags=0x0018001040000200 */ bool bEnableRootMotionRotation;
  /* offset=0x012a flags=0x0018001040000200 */ uint8 RootMotionRootLock;
  /* offset=0x012c flags=0x0040000000000200 */ TArray<struct FBranchingPointMarker> BranchingPointMarkers;
  /* offset=0x0138 flags=0x0010000000000200 */ TArray<int32> BranchingPointStateNotifyIndices;
  /* offset=0x0144 flags=0x0010000000000001 */ struct FTimeStretchCurve TimeStretchCurve;
  /* offset=0x0168 flags=0x0018001040000201 */ FName TimeStretchCurveName;
};

class UAnimNotify: public UObject {
  FString GetNotifyName();
  bool Received_Notify(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation);
};

class UAnimNotifyState: public UObject {
  FString GetNotifyName();
  bool Received_NotifyBegin(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation, float TotalDuration);
  bool Received_NotifyEnd(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation);
  bool Received_NotifyTick(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation, float FrameDeltaTime);
};

class UAnimNotifyState_DisableRootMotion: public UAnimNotifyState {
};

class UAnimNotifyState_TimedParticleEffect: public UAnimNotifyState {
  /* offset=0x0020 flags=0x0018001040000211 */ UParticleSystem* PSTemplate;
  /* offset=0x0028 flags=0x0018001040000211 */ FName SocketName;
  /* offset=0x0030 flags=0x0018001040000011 */ struct FVector LocationOffset;
  /* offset=0x003c flags=0x0010001040000011 */ struct FRotator RotationOffset;
  /* offset=0x0048 flags=0x0018001040000211 */ bool bDestroyAtEnd;
};

class UAnimNotifyState_Trail: public UAnimNotifyState {
  /* offset=0x0020 flags=0x0018001040000215 */ UParticleSystem* PSTemplate;
  /* offset=0x0028 flags=0x0018001040000215 */ FName FirstSocketName;
  /* offset=0x0030 flags=0x0018001040000215 */ FName SecondSocketName;
  /* offset=0x0038 flags=0x0018001040000215 */ uint8 WidthScaleMode;
  /* offset=0x0040 flags=0x0018001040000215 */ FName WidthScaleCurve;
  /* offset=0x0048 flags=0x0018001000000015 */ uint8 bRecycleSpawnedSystems:1;

  UParticleSystem* OverridePSTemplate(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation);
};

class UAnimNotify_AkEvent_C: public UAnimNotify {
  /* offset=0x0028 flags=0x0008000000000205 */ FString Attach Name;
  /* offset=0x0034 flags=0x0008001040000205 */ UAkAudioEvent* Event;
  /* offset=0x0038 flags=0x0000001040000205 */ bool Follow;
  /* offset=0x003c flags=0x0008040000000205 */ FString EventName;

  bool Received_Notify(USkeletalMeshComponent* meshComp, UAnimSequenceBase* Animation, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_PostAkEvent_ReturnValue, bool CallFunc_IsGame_ReturnValue, TArray<UAkComponent*> K2Node_MakeArray_Array);
};

class UAnimNotify_PlayMontageNotify: public UAnimNotify {
  /* offset=0x0028 flags=0x0028081040000215 */ FName NotifyName;
};

class UAnimNotify_PlayMontageNotifyWindow: public UAnimNotifyState {
  /* offset=0x0020 flags=0x0028081040000215 */ FName NotifyName;
};

class UAnimNotify_PlayParticleEffect: public UAnimNotify {
  /* offset=0x0024 flags=0x0018001040000215 */ UParticleSystem* PSTemplate;
  /* offset=0x0028 flags=0x0018001040000015 */ struct FVector LocationOffset;
  /* offset=0x0034 flags=0x0010001040000015 */ struct FRotator RotationOffset;
  /* offset=0x0040 flags=0x0018001040000011 */ struct FVector Scale;
  /* offset=0x0060 flags=0x0018001000000015 */ uint8 Attached:1;
  /* offset=0x0068 flags=0x0018001040000215 */ FName SocketName;
};

class UAnimNotify_PlaySound: public UAnimNotify {
  /* offset=0x0024 flags=0x0019001040000215 */ USoundBase* Sound;
  /* offset=0x0028 flags=0x0019001040000215 */ float VolumeMultiplier;
  /* offset=0x002c flags=0x0019001040000215 */ float PitchMultiplier;
  /* offset=0x0030 flags=0x0018001000000015 */ uint8 bFollow:1;
  /* offset=0x0038 flags=0x0019001040000215 */ FName AttachName;
};

class UAnimNotify_ResetClothingSimulation: public UAnimNotify {
};

class UAnimSequence: public UAnimSequenceBase {
  /* offset=0x007c flags=0x0018011040000200 */ int32 NumFrames;
  /* offset=0x0080 flags=0x0020080000000200 */ TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable;
  /* offset=0x00f0 flags=0x0018011040000201 */ uint8 AdditiveAnimType;
  /* offset=0x00f1 flags=0x0018001040000201 */ uint8 RefPoseType;
  /* offset=0x00f4 flags=0x0018001040000201 */ UAnimSequence* RefPoseSeq;
  /* offset=0x00f8 flags=0x0018001040000201 */ int32 RefFrameIndex;
  /* offset=0x00fc flags=0x0018001040000200 */ int32 EncodingPkgVersion;
  /* offset=0x0100 flags=0x0018011040000201 */ FName RetargetSource;
  /* offset=0x0108 flags=0x0018011040000201 */ enum EAnimInterpolationType Interpolation;
  /* offset=0x0109 flags=0x0018011040000201 */ bool bEnableRootMotion;
  /* offset=0x010a flags=0x0018001040000201 */ uint8 RootMotionRootLock;
  /* offset=0x010b flags=0x0018001040000201 */ bool bForceRootLock;
  /* offset=0x010c flags=0x0018001040000200 */ bool bRootMotionSettingsCopiedFromMontage;
  /* offset=0x0110 flags=0x0010000000000200 */ TArray<struct FAnimSyncMarker> AuthoredSyncMarkers;
};

class UAnimSequenceBase: public UAnimationAsset {
  /* offset=0x005c flags=0x0010008000000200 */ TArray<struct FAnimNotifyEvent> Notifies;
  /* offset=0x0068 flags=0x0018011040020215 */ float SequenceLength;
  /* offset=0x006c flags=0x0018001040000201 */ float RateScale;
  /* offset=0x0070 flags=0x0010000000000000 */ struct FRawCurveTracks RawCurveData;

  float GetPlayLength();
};

class UAnimSequencerInstance: public UAnimCustomInstance {
};

class UAnimSet: public UObject {
  /* offset=0x001c flags=0x0048001000000001 */ uint8 bAnimRotationOnly:1;
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<FName> TrackBoneNames;
  /* offset=0x002c flags=0x0040000000002200 */ TArray<struct FAnimSetMeshLinkup> LinkupCache;
  /* offset=0x0038 flags=0x0040000000002200 */ TArray<uint8> BoneUseAnimTranslation;
  /* offset=0x0044 flags=0x0040000000002200 */ TArray<uint8> ForceUseMeshTranslation;
  /* offset=0x0050 flags=0x0040000000000201 */ TArray<FName> UseTranslationBoneNames;
  /* offset=0x005c flags=0x0040000000000201 */ TArray<FName> ForceMeshTranslationBoneNames;
  /* offset=0x0068 flags=0x0018001040000200 */ FName PreviewSkelMeshName;
  /* offset=0x0070 flags=0x0018001040000200 */ FName BestRatioSkelMeshName;
};

class UAnimSingleNodeInstance: public UAnimInstance {
  /* offset=0x02ec flags=0x0018001040002200 */ UAnimationAsset* CurrentAsset;
  /* offset=0x02f0 flags=0x0010001000082200 */ FPostEvaluateAnimEvent PostEvaluateAnimEvent;

  UAnimationAsset* GetAnimationAsset();
  float GetLength();
  void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
  void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
  void SetBlendSpaceInput(struct FVector InBlendInput);
  void SetLooping(bool bIsLooping);
  void SetPlayRate(float InPlayRate);
  void SetPlaying(bool bIsPlaying);
  void SetPosition(float InPosition, bool bFireNotifies);
  void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
  void SetPreviewCurveOverride(FName PoseName, float Value, bool bRemoveIfZero);
  void SetReverse(bool bInReverse);
  void StopAnim();
};

class UAnimStateMachineTypes: public UObject {
};

class UAnimationAsset: public UObject {
  /* offset=0x0020 flags=0x0048011040020201 */ USkeleton* Skeleton;
  /* offset=0x0044 flags=0x0040008000000209 */ TArray<UAnimMetaData*> MetaData;
  /* offset=0x0050 flags=0x00200c8000000209 */ TArray<UAssetUserData*> AssetUserData;
};

class UAnimationSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001040024201 */ int32 CompressCommandletVersion;
  /* offset=0x0034 flags=0x0010000000004201 */ TArray<FString> KeyEndEffectorsMatchNameArray;
  /* offset=0x0040 flags=0x001c001042004201 */ UClass<UAnimCompress>* DefaultCompressionAlgorithm;
  /* offset=0x0044 flags=0x0018001040004201 */ uint8 RotationCompressionFormat;
  /* offset=0x0045 flags=0x0018001040004201 */ uint8 TranslationCompressionFormat;
  /* offset=0x0048 flags=0x0018001040004201 */ float MaxCurveError;
  /* offset=0x004c flags=0x0018001040004201 */ float AlternativeCompressionThreshold;
  /* offset=0x0050 flags=0x0018001040004201 */ bool ForceRecompression;
  /* offset=0x0051 flags=0x0018001040004201 */ bool bOnlyCheckForMissingSkeletalMeshes;
  /* offset=0x0052 flags=0x0018001040004201 */ bool bForceBelowThreshold;
  /* offset=0x0053 flags=0x0018001040004201 */ bool bFirstRecompressUsingCurrentOrDefault;
  /* offset=0x0054 flags=0x0018001040004201 */ bool bRaiseMaxErrorToExisting;
  /* offset=0x0055 flags=0x0018001040004201 */ bool bTryFixedBitwiseCompression;
  /* offset=0x0056 flags=0x0018001040004201 */ bool bTryPerTrackBitwiseCompression;
  /* offset=0x0057 flags=0x0018001040004201 */ bool bTryLinearKeyRemovalCompression;
  /* offset=0x0058 flags=0x0018001040004201 */ bool bTryIntervalKeyRemoval;
  /* offset=0x0059 flags=0x0018001040004201 */ bool bEnablePerformanceLog;
  /* offset=0x005a flags=0x0018001040004201 */ bool bStripAnimationDataOnDedicatedServer;
};

class UApplicationLifecycleComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FApplicationLifetimeDelegate ApplicationWillDeactivateDelegate;
  /* offset=0x00b8 flags=0x0010000010080200 */ FApplicationLifetimeDelegate ApplicationHasReactivatedDelegate;
  /* offset=0x00c4 flags=0x0010000010080200 */ FApplicationLifetimeDelegate ApplicationWillEnterBackgroundDelegate;
  /* offset=0x00d0 flags=0x0010000010080200 */ FApplicationLifetimeDelegate ApplicationHasEnteredForegroundDelegate;
  /* offset=0x00dc flags=0x0010000010080200 */ FApplicationLifetimeDelegate ApplicationWillTerminateDelegate;
};

class UArrayProperty: public UProperty {
};

class UArrowComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000005 */ struct FColor ArrowColor;
  /* offset=0x05c4 flags=0x0018001040000205 */ float ArrowSize;
  /* offset=0x05c8 flags=0x0018001040000205 */ bool bIsScreenSizeScaled;
  /* offset=0x05cc flags=0x0018001040000205 */ float ScreenSize;
  /* offset=0x05d0 flags=0x0018001000000005 */ uint8 bTreatAsASprite:1;

  void SetArrowColor(struct FLinearColor NewColor);
};

class UAssetImportData: public UObject {
};

class UAssetManager: public UObject {
  /* offset=0x01bc flags=0x0020080000000200 */ TArray<UObject*> ObjectReferenceList;
  /* offset=0x01c8 flags=0x0028081040000200 */ bool bIsGlobalAsyncScanEnvironment;
  /* offset=0x01c9 flags=0x0028081040000200 */ bool bShouldGuessTypeAndName;
  /* offset=0x01ca flags=0x0028081040000200 */ bool bShouldUseSynchronousLoad;
  /* offset=0x01cb flags=0x0028081040000200 */ bool bIsLoadingFromPakFiles;
  /* offset=0x01cc flags=0x0028081040000200 */ bool bShouldAcquireMissingChunksOnLoad;
  /* offset=0x01cd flags=0x0028081040000200 */ bool bOnlyCookProductionAssets;
  /* offset=0x01ce flags=0x0028081040000200 */ bool bIsBulkScanning;
  /* offset=0x01cf flags=0x0028081040000200 */ bool bIsManagementDatabaseCurrent;
  /* offset=0x01d0 flags=0x0028081040000200 */ bool bUpdateManagementDatabaseAfterScan;
  /* offset=0x01d1 flags=0x0028081040000200 */ bool bIncludeOnlyOnDiskAssets;
  /* offset=0x01d4 flags=0x0028081040000200 */ int32 NumberOfSpawnedNotifications;
};

class UAssetManagerSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0010000000004201 */ TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan;
  /* offset=0x003c flags=0x0010000000004201 */ TArray<struct FDirectoryPath> DirectoriesToExclude;
  /* offset=0x0048 flags=0x0010000000004201 */ TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules;
  /* offset=0x0054 flags=0x0018001040004201 */ bool bOnlyCookProductionAssets;
  /* offset=0x0055 flags=0x0018001040004201 */ bool bShouldGuessTypeAndNameInEditor;
  /* offset=0x0056 flags=0x0018001040004201 */ bool bShouldAcquireMissingChunksOnLoad;
  /* offset=0x0058 flags=0x0010000000004201 */ TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects;
  /* offset=0x0064 flags=0x0010000000004201 */ TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects;
  /* offset=0x0070 flags=0x0010000000004201 */ TArray<struct FAssetManagerRedirect> AssetPathRedirects;
};

class UAssetMappingTable: public UObject {
  /* offset=0x001c flags=0x0040000000020241 */ TArray<struct FAssetMapping> MappedAssets;
};

class UAssetRegistry: public UInterface {
  bool GetAllAssets(TArray<struct FAssetData> OutAssetData, bool bIncludeOnlyOnDiskAssets);
  void GetAllCachedPaths(TArray<FString> OutPathList);
  struct FAssetData GetAssetByObjectPath(FName ObjectPath, bool bIncludeOnlyOnDiskAssets);
  bool GetAssets(struct FARFilter Filter, TArray<struct FAssetData> OutAssetData);
  bool GetAssetsByClass(FName ClassName, TArray<struct FAssetData> OutAssetData, bool bSearchSubClasses);
  bool GetAssetsByPackageName(FName PackageName, TArray<struct FAssetData> OutAssetData, bool bIncludeOnlyOnDiskAssets);
  bool GetAssetsByPath(FName PackagePath, TArray<struct FAssetData> OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);
  void GetSubPaths(FString InBasePath, TArray<FString> OutPathList, bool bInRecurse);
  bool HasAssets(FName PackagePath, bool bRecursive);
  bool IsLoadingAssets();
  void RunAssetsThroughFilter(TArray<struct FAssetData> AssetDataList, struct FARFilter Filter);
};

class UAssetRegistryHelpers: public UObject {
  struct FAssetData CreateAssetData(UObject* InAsset, bool bAllowBlueprintClass);
  UObject* GetAsset(struct FAssetData InAssetData);
  UInterface<UAssetRegistry>* GetAssetRegistry();
  UClass<UObject>* GetClass(struct FAssetData InAssetData);
  FString GetExportTextName(struct FAssetData InAssetData);
  FString GetFullName(struct FAssetData InAssetData);
  bool GetTagValue(struct FAssetData InAssetData, FName InTagName, FString OutTagValue);
  bool IsAssetLoaded(struct FAssetData InAssetData);
  bool IsRedirector(struct FAssetData InAssetData);
  bool IsUAsset(struct FAssetData InAssetData);
  bool IsValid(struct FAssetData InAssetData);
  struct FARFilter SetFilterTagsAndValues(struct FARFilter InFilter, TArray<struct FTagAndValue> InTagsAndValues);
  struct FSoftObjectPath ToSoftObjectPath(struct FAssetData InAssetData);
};

class UAssetRegistryImpl: public UObject {
};

class UAssetUserData: public UObject {
};

class UAsyncActionChangePrimaryAssetBundles: public UAsyncActionLoadPrimaryAssetBase {
  /* offset=0x004c flags=0x0010000010080200 */ FOnPrimaryAssetBundlesChanged Completed;

  UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(TArray<FName> NewBundles, TArray<FName> OldBundles);
  UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<FName> AddBundles, TArray<FName> RemoveBundles);
};

class UAsyncActionLoadPrimaryAsset: public UAsyncActionLoadPrimaryAssetBase {
  /* offset=0x004c flags=0x0010000010080200 */ FOnPrimaryAssetLoaded Completed;

  UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct FPrimaryAssetId PrimaryAsset, TArray<FName> LoadBundles);
};

class UAsyncActionLoadPrimaryAssetBase: public UBlueprintAsyncActionBase {
};

class UAsyncActionLoadPrimaryAssetClass: public UAsyncActionLoadPrimaryAssetBase {
  /* offset=0x004c flags=0x0010000010080200 */ FOnPrimaryAssetClassLoaded Completed;

  UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct FPrimaryAssetId PrimaryAsset, TArray<FName> LoadBundles);
};

class UAsyncActionLoadPrimaryAssetClassList: public UAsyncActionLoadPrimaryAssetBase {
  /* offset=0x004c flags=0x0010000010080200 */ FOnPrimaryAssetClassListLoaded Completed;

  UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<FName> LoadBundles);
};

class UAsyncActionLoadPrimaryAssetList: public UAsyncActionLoadPrimaryAssetBase {
  /* offset=0x004c flags=0x0010000010080200 */ FOnPrimaryAssetListLoaded Completed;

  UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<FName> LoadBundles);
};

class UAsyncTaskDownloadImage: public UBlueprintAsyncActionBase {
  /* offset=0x001c flags=0x0010000010080200 */ FDownloadImageDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FDownloadImageDelegate OnFail;

  UAsyncTaskDownloadImage* DownloadImage(FString URL);
};

class AAtmosphericFog: public AInfo {
  /* offset=0x02a8 flags=0x00480010400a021d */ UAtmosphericFogComponent* AtmosphericFogComponent;
};

class UAtmosphericFogComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000205 */ float SunMultiplier;
  /* offset=0x0274 flags=0x0018001240000205 */ float FogMultiplier;
  /* offset=0x0278 flags=0x0018001240000205 */ float DensityMultiplier;
  /* offset=0x027c flags=0x0018001240000205 */ float DensityOffset;
  /* offset=0x0280 flags=0x0018001240000205 */ float DistanceScale;
  /* offset=0x0284 flags=0x0018001240000205 */ float AltitudeScale;
  /* offset=0x0288 flags=0x0018001240000205 */ float DistanceOffset;
  /* offset=0x028c flags=0x0018001240000205 */ float GroundOffset;
  /* offset=0x0290 flags=0x0018001240000205 */ float StartDistance;
  /* offset=0x0294 flags=0x0018001240000205 */ float SunDiscScale;
  /* offset=0x0298 flags=0x0018001240000215 */ float DefaultBrightness;
  /* offset=0x029c flags=0x0018001240000015 */ struct FColor DefaultLightColor;
  /* offset=0x02a0 flags=0x0018001200000015 */ uint8 bDisableSunDisk:1;
  /* offset=0x02a0 flags=0x0018001200000015 */ uint8 bDisableGroundScattering:1;
  /* offset=0x02a4 flags=0x0020081000000015 */ struct FAtmospherePrecomputeParameters PrecomputeParams;
  /* offset=0x02d0 flags=0x0018001060000200 */ UTexture2D* TransmittanceTexture;
  /* offset=0x02d4 flags=0x0018001060000200 */ UTexture2D* IrradianceTexture;

  void DisableGroundScattering(bool NewGroundScattering);
  void DisableSunDisk(bool NewSunDisk);
  void SetAltitudeScale(float NewAltitudeScale);
  void SetDefaultBrightness(float NewBrightness);
  void SetDefaultLightColor(struct FLinearColor NewLightColor);
  void SetDensityMultiplier(float NewDensityMultiplier);
  void SetDensityOffset(float NewDensityOffset);
  void SetDistanceOffset(float NewDistanceOffset);
  void SetDistanceScale(float NewDistanceScale);
  void SetFogMultiplier(float NewFogMultiplier);
  void SetPrecomputeParams(float DensityHeight, int32 MaxScatteringOrder, int32 InscatterAltitudeSampleNum);
  void SetStartDistance(float NewStartDistance);
  void SetSunMultiplier(float NewSunMultiplier);
  void StartPrecompute();
};

class AAttachActor_EnergyDrink_BP_C: public AActor {
  /* offset=0x02a8 flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x02ac flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class UAttrModifyComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010100010080200 */ FOnAttrModifiedEvent OnAttrModified;
  /* offset=0x00b8 flags=0x0020080000010201 */ TArray<struct FAttrModifyItem> ConfigAttrModifyList;
  /* offset=0x0100 flags=0x0040000100002220 */ TArray<int8> AttrModifyStateList;
  /* offset=0x010c flags=0x0040000100002220 */ TArray<struct FAttrModifyItem> DynamicModifierRepList;

  bool DisableAllAttrModifier();
  bool DisableAttrModifier(FString AttrModifyItemName);
  bool DisableModifierToActor(AActor* TargetActor);
  bool EnableAllAttrModifier();
  bool EnableAttrModifier(FString AttrModifyItemName);
  void OnAttrModifiedEvent__DelegateSignature(TArray<struct FAttrAffected> AffectedAttrS);
  void OnRep_AttrModifyStateList();
  void OnRep_DynamicModifierList();
  bool RegisterModifyAbleAttr(TArray<struct FAttrRegisterItem> AttrRegists);
};

class UAttrModifyInterface: public UInterface {
  UAttrModifyComponent* GetAttrModifyComponent();
  TArray<AActor*> GetRelevantActors();
};

class UAudioComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ USoundBase* Sound;
  /* offset=0x0274 flags=0x0010040000000205 */ TArray<struct FAudioComponentParam> InstanceParameters;
  /* offset=0x0280 flags=0x0018041040000201 */ USoundClass* SoundClassOverride;
  /* offset=0x0284 flags=0x0018001000000000 */ uint8 bAutoDestroy:1;
  /* offset=0x0284 flags=0x0018001000000000 */ uint8 bStopWhenOwnerDestroyed:1;
  /* offset=0x0284 flags=0x0018001000000000 */ uint8 bShouldRemainActiveIfDropped:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bAllowSpatialization:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bOverrideAttenuation:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bOverrideSubtitlePriority:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bIsUISound:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bEnableLowPassFilter:1;
  /* offset=0x0285 flags=0x0018001000000005 */ uint8 bOverridePriority:1;
  /* offset=0x0285 flags=0x0018001000000005 */ uint8 bSuppressSubtitles:1;
  /* offset=0x0290 flags=0x0018001040000200 */ FName AudioComponentUserID;
  /* offset=0x0298 flags=0x0018001040000205 */ float PitchModulationMin;
  /* offset=0x029c flags=0x0018001040000205 */ float PitchModulationMax;
  /* offset=0x02a0 flags=0x0018001040000205 */ float VolumeModulationMin;
  /* offset=0x02a4 flags=0x0018001040000205 */ float VolumeModulationMax;
  /* offset=0x02a8 flags=0x0018001040000205 */ float VolumeMultiplier;
  /* offset=0x02ac flags=0x0018001040000205 */ float Priority;
  /* offset=0x02b0 flags=0x0018001040000205 */ float SubtitlePriority;
  /* offset=0x02b4 flags=0x0018001060000200 */ float VolumeWeightedPriorityScale;
  /* offset=0x02b8 flags=0x0018001040000205 */ float PitchMultiplier;
  /* offset=0x02bc flags=0x0018001060000200 */ float HighFrequencyGainMultiplier;
  /* offset=0x02c0 flags=0x0018001040000205 */ float LowPassFilterFrequency;
  /* offset=0x02c4 flags=0x0018001040000205 */ USoundAttenuation* AttenuationSettings;
  /* offset=0x02c8 flags=0x0010000000000005 */ struct FSoundAttenuationSettings AttenuationOverrides;
  /* offset=0x04dc flags=0x0018001040000205 */ USoundConcurrency* ConcurrencySettings;
  /* offset=0x04e4 flags=0x0010000010080200 */ FOnAudioFinished OnAudioFinished;
  /* offset=0x0560 flags=0x0010000010080200 */ FOnAudioPlaybackPercent OnAudioPlaybackPercent;
  /* offset=0x05e0 flags=0x0010001000080200 */ FOnQueueSubtitles OnQueueSubtitles;

  void AdjustAttenuation(struct FSoundAttenuationSettings InAttenuationSettings);
  void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
  bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings OutAttenuationSettings);
  void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
  void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
  bool IsPlaying();
  void Play(float StartTime);
  void SetBoolParameter(FName InName, bool InBool);
  void SetFloatParameter(FName InName, float InFloat);
  void SetIntParameter(FName InName, int32 inInt);
  void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
  void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
  void SetPaused(bool bPause);
  void SetPitchMultiplier(float NewPitchMultiplier);
  void SetSound(USoundBase* NewSound);
  void SetSubmixSend(USoundSubmix* Submix, float SendLevel);
  void SetUISound(bool bInUISound);
  void SetVolumeMultiplier(float NewVolumeMultiplier);
  void SetWaveParameter(FName InName, USoundWave* InWave);
  void Stop();
};

class UAudioMixerBlueprintLibrary: public UBlueprintFunctionLibrary {
  void AddMasterSubmixEffect(UObject* WorldContextObject, USoundEffectSubmixPreset* SubmixEffectPreset);
  void AddSourceEffectToPresetChain(UObject* WorldContextObject, USoundEffectSourcePresetChain* PresetChain, struct FSourceEffectChainEntry Entry);
  void ClearMasterSubmixEffects(UObject* WorldContextObject);
  int32 GetNumberOfEntriesInSourceEffectChain(UObject* WorldContextObject, USoundEffectSourcePresetChain* PresetChain);
  void RemoveMasterSubmixEffect(UObject* WorldContextObject, USoundEffectSubmixPreset* SubmixEffectPreset);
  void RemoveSourceEffectFromPresetChain(UObject* WorldContextObject, USoundEffectSourcePresetChain* PresetChain, int32 EntryIndex);
  void SetBypassSourceEffectChainEntry(UObject* WorldContextObject, USoundEffectSourcePresetChain* PresetChain, int32 EntryIndex, bool bBypassed);
};

class UAudioSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018000000004001 */ struct FSoftObjectPath DefaultSoundClassName;
  /* offset=0x0048 flags=0x0018000000004001 */ struct FSoftObjectPath DefaultSoundConcurrencyName;
  /* offset=0x0060 flags=0x0018000000004001 */ struct FSoftObjectPath DefaultBaseSoundMix;
  /* offset=0x0078 flags=0x0018000000004001 */ struct FSoftObjectPath VoiPSoundClass;
  /* offset=0x0090 flags=0x0018041040004201 */ float DefaultReverbSendLevel;
  /* offset=0x0094 flags=0x0018041040004201 */ float LowPassFilterResonance;
  /* offset=0x0098 flags=0x0018001040004201 */ int32 MaximumConcurrentStreams;
  /* offset=0x009c flags=0x0010000000004201 */ TArray<struct FAudioQualitySettings> QualityLevels;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bAllowVirtualizedSounds:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bDisableMasterEQ:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bDisableMasterReverb:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bAllowCenterChannel3DPanning:1;
  /* offset=0x00ac flags=0x0018000000004201 */ FString DialogueFilenameFormat;
};

class AAudioVolume: public AVolume {
  /* offset=0x02d0 flags=0x0048001040000215 */ float Priority;
  /* offset=0x02d4 flags=0x0048001100000035 */ uint8 bEnabled:1;
  /* offset=0x02d8 flags=0x0040001000000015 */ struct FReverbSettings Settings;
  /* offset=0x02e8 flags=0x0040001000000015 */ struct FInteriorSettings AmbientZoneSettings;

  void OnRep_bEnabled();
  void SetEnabled(bool bNewEnabled);
  void SetInteriorSettings(struct FInteriorSettings NewInteriorSettings);
  void SetPriority(float NewPriority);
  void SetReverbSettings(struct FReverbSettings NewReverbSettings);
};

class AAutoRunPlayerTestActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040000201 */ float Interval;
  /* offset=0x02ac flags=0x0010000000000201 */ TArray<struct FVector> PortalLoctions;
};

class UAutoRunTest: public UActorComponent {
};

class UAutomatedLevelSequenceCapture: public UMovieSceneCapture {
};

class UAutomationTestSettings: public UObject {
  /* offset=0x001c flags=0x0010000000004201 */ TArray<FString> EngineTestModules;
  /* offset=0x0028 flags=0x0010000000004201 */ TArray<FString> EditorTestModules;
  /* offset=0x0038 flags=0x0018000000004001 */ struct FSoftObjectPath AutomationTestmap;
  /* offset=0x0050 flags=0x0010000000004201 */ TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;
  /* offset=0x005c flags=0x0010000000004201 */ TArray<struct FSoftObjectPath> AssetsToOpen;
  /* offset=0x0068 flags=0x0010000000004001 */ struct FBuildPromotionTestSettings BuildPromotionTest;
  /* offset=0x01dc flags=0x0010000000004001 */ struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest;
  /* offset=0x0200 flags=0x0010000000004001 */ struct FParticleEditorPromotionSettings ParticleEditorPromotionTest;
  /* offset=0x020c flags=0x0010000000004001 */ struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest;
  /* offset=0x0230 flags=0x0010000000004201 */ TArray<FString> TestLevelFolders;
  /* offset=0x023c flags=0x0010000000004201 */ TArray<struct FExternalToolDefinition> ExternalTools;
  /* offset=0x0248 flags=0x0010000000004201 */ TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;
  /* offset=0x0254 flags=0x0010000000004201 */ TArray<struct FLaunchOnTestSettings> LaunchOnSettings;
  /* offset=0x0260 flags=0x0018001040004001 */ struct FIntPoint DefaultScreenshotResolution;
};

class UAvatarBPUtils: public UObject {
  struct FAvatarItemData ConstructAvatarItemDataFromTable(struct FItemDefineID definedID);
  struct FAvatarItemData GetAvatarDataTableRowByID(struct FItemDefineID definedID);
};

class UAvatarComponent: public USceneComponent {
  /* offset=0x0270 flags=0x001800104008220c */ UMeshComponent* MasterBoneComponent;
  /* offset=0x0274 flags=0x0010000000012215 */ TMap<int32, struct FMeshData> avatarMeshList;
  /* offset=0x02b0 flags=0x001000800002221d */ TMap<int32, UMeshComponent*> meshComponentList;
  /* offset=0x02ec flags=0x0010000000010205 */ TMap<int32, FName> slotToSocket;
  /* offset=0x0328 flags=0x0010000000010205 */ TArray<FName> slotNameList;
  /* offset=0x0334 flags=0x0010000000002204 */ TMap<enum EAvatarSlotType, struct FMeshData> DefaultAvataConfig;
  /* offset=0x0370 flags=0x0018001040002214 */ int32 gender;
  /* offset=0x0374 flags=0x0018001040002204 */ bool isNeedRefresh;
  /* offset=0x0378 flags=0x0010000000000200 */ TMap<struct FSoftObjectPath, UBackpackAvatarHandle*> PendingLoadRes;

  void ApplyConfig();
  void ApplyMaterial(UBattleItemHandleBase* ItemHandle, UMeshComponent* meshComp);
  void ApplyMesh(UMeshComponent* Component, USkeletalMesh* SkeletalMesh, UStaticMesh* StaticMesh, UMaterialInstance* Material);
  bool ApplySkeletalMeshByID(int32 Slot, USkeletalMesh* Mesh, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  bool ApplyStaticMeshByID(int32 Slot, UStaticMesh* pSM, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  void ClearMeshByItemHandle(UBattleItemHandleBase* ItemHandle);
  void ClearMeshBySlot(int32 Slot, bool putDefault);
  bool GetEquimentMeshBySlot(int32 Slot, struct FMeshData meshPack);
  UMaterialInstance* GetMaterial(struct FMeshPackage meshPack);
  USkeletalMesh* GetSkeletalMesh(struct FMeshPackage meshPack);
  struct FItemDefineID GetSlotDefinedID(int32 slotID);
  UStaticMesh* GetStaticMesh(struct FMeshPackage meshPack);
  void InitDefaultMesh(UBattleItemHandleBase* Handle);
  bool IsSlotHasEquipped(int32 Slot);
  void LoadMeshsAsync(UBackpackAvatarHandle* handleList);
  bool PutOffEquiment(int32 Slot);
  bool PutOffEquimentByResID(int32 resID);
  bool PutOnEquipmentByItemHandle(UBattleItemHandleBase* ItemHandle, USkeletalMesh* skMesh, UStaticMesh* stMesh);
  bool PutOnEquipmentByResID(int32 resID);
  void ResetAllAvataSlot();
  void ResetComponentMaster();
};

class UAvatarUtils: public UBlueprintFunctionLibrary {
  struct FAvatarItemData ConstructAvatarItemDataFromTable(struct FItemDefineID definedID);
  struct FAvatarItemData GetAvatarDataTableRowByID(struct FItemDefineID definedID);
};

class UAvoidanceManager: public UObject {
  /* offset=0x0020 flags=0x0018001040004201 */ float DefaultTimeToLive;
  /* offset=0x0024 flags=0x0018001040004201 */ float LockTimeAfterAvoid;
  /* offset=0x0028 flags=0x0018001040004201 */ float LockTimeAfterClean;
  /* offset=0x002c flags=0x0018001040004201 */ float DeltaTimeToPredict;
  /* offset=0x0030 flags=0x0018001040004201 */ float ArtificialRadiusExpansion;
  /* offset=0x0034 flags=0x0018001060000200 */ float TestHeightDifference;
  /* offset=0x0038 flags=0x0018001040004201 */ float HeightCheckMargin;

  struct FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp);
  int32 GetNewAvoidanceUID();
  int32 GetObjectCount();
  bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight);
};

class UBPClassManager: public UDataAsset {
  /* offset=0x0020 flags=0x0020080000010201 */ TArray<struct FBPClassItem> BPClassList;
  /* offset=0x002c flags=0x0044000000002200 */ TMap<UClass<UObject>*, UClass<UObject>*> BPClassLookUp;
  /* offset=0x0068 flags=0x0044000000002200 */ TMap<FString, UClass<UObject>*> BPClassNameLookUp;
  /* offset=0x00a4 flags=0x0048000000004200 */ FString BPClassManagerPath;

  UBPClassManager* Get();
  UClass<UObject>* GetBPClassOverride(UClass<UObject>* InNativeClass);
  UClass<UObject>* GetBPClassOverrideByName(FString ClassTagName);
  UClass<UObject>* GetUClass(int32 KeyIndex);
};

class UBPTable: public UObject {
  /* offset=0x001c flags=0x0018000000000204 */ FString BPTableName;
  /* offset=0x0028 flags=0x0010000000000214 */ TMap<int32, struct FBPTableItem> BPTableItemMap;

  UClass<UObject>* GetClass(int32 ID);
  FString GetPath(int32 ID);
};

class ABP_Ammo_556mm_Pickup_C: public APickUpWrapperActor {
  /* offset=0x0300 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0304 flags=0x0008001440000204 */ UStaticMeshComponent* SM_Ammo_556mm;

  void ExecuteUbergraph_BP_Ammo_556mm_Pickup(int32 EntryPoint);
  void ReceiveBeginPlay();
  void UserConstructionScript();
};

class UBP_AutoAimingComponent_C: public UWeaponAutoAimingComponent {
  /* offset=0x0320 flags=0x0008001040010205 */ uint8 DrawDebugType;

  bool CanEnemeyRaycastReach(struct FVector startPoint, ASTExtraPlayerCharacter* Pawn, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, TArray<AActor*> ___object_Variable, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FRotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FHitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
};

class UBP_CommonBtn_C: public UCommonBtnComponent {
  /* offset=0x00b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;

  void BP_ShowDoorBtn(bool bShow, bool bOpen);
  void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);
  void ExecuteUbergraph_BP_CommonBtn(int32 EntryPoint, bool CallFunc_IsValid_ReturnValue, ABP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, ABP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, FPlayerControllerReconnectedDelegate K2Node_CreateDelegate_OutputDelegate, FOnCharacterNearDeathOrRescueingOtherNotifyDelegate K2Node_CreateDelegate_OutputDelegate2, AActor* CallFunc_GetOwner_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, bool ___bool_Has_Been_Initd_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen);
  void GetPlayerController(ABP_STExtraPlayerController_C* PlayerController, AActor* CallFunc_GetOwner_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void GetUI(UBasicSkillsMenu_BP_C* UI, ABP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);
  void OnShowDoorButton(uint8 Type);
  void PlayerControllerReconnectedDelegate_Event();
  void ReceiveBeginPlay();
  void RegistShowDoorButton(FED_CommonBtn K2Node_CreateDelegate_OutputDelegate, UBasicSkillsMenu_BP_C* CallFunc_GetUI_UI, bool CallFunc_IsValid_ReturnValue);
  void ShowDoorButton(bool Show, bool Open, AActor* CallFunc_GetOwner_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsLastBreathOrRescueingOther_ReturnValue, UBasicSkillsMenu_BP_C* CallFunc_GetUI_UI, bool CallFunc_IsValid_ReturnValue2);
  void ToogleDoor();
  void UI_Click();
  void UnRegistShowDoorButton(FED_CommonBtn K2Node_CreateDelegate_OutputDelegate, UBasicSkillsMenu_BP_C* CallFunc_GetUI_UI, bool CallFunc_IsValid_ReturnValue);
};

class ABP_DoorMetallic_C: public APUBGDoor {
  /* offset=0x02c8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02cc flags=0x0008001440000204 */ UBoxComponent* Interaction;
  /* offset=0x02d0 flags=0x0008001440000204 */ USceneComponent* Scene;
  /* offset=0x02d4 flags=0x0008001440000204 */ UBoxComponent* Box;
  /* offset=0x02d8 flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x02dc flags=0x0008001040000200 */ float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;
  /* offset=0x02e0 flags=0x0008001040000200 */ uint8 Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;
  /* offset=0x02e4 flags=0x0008001040000204 */ UTimelineComponent* Timeline;
  /* offset=0x02e8 flags=0x0008001040010205 */ float From;
  /* offset=0x02ec flags=0x0008001040010205 */ float To;

  void ActionDoorImmediatly(int32 doorStateDst);
  void ActionDoorOnClient(int32 doorStateDst);
  void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void ExecuteUbergraph_BP_DoorMetallic(int32 EntryPoint, struct FVector CallFunc_MakeVector_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue2, struct FRotator CallFunc_MakeRotator_ReturnValue3, float CallFunc_Lerp_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int32 K2Node_Event_doorStateDst2, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, AActor* K2Node_ComponentBoundEvent_OtherActor2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int32 K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult K2Node_ComponentBoundEvent_SweepResult, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, AActor* K2Node_ComponentBoundEvent_OtherActor, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, ACharacter* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, struct FRotator CallFunc_GetSocketRotation_ReturnValue, struct FVector CallFunc_GetRightVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue4, int32 K2Node_Event_doorStateDst, bool K2Node_SwitchInteger2_CmpSuccess, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4);
  void ReceiveBeginPlay();
  void Timeline_0__FinishedFunc();
  void Timeline_0__UpdateFunc();
  void UserConstructionScript();
};

class ABP_DoorNormal_C: public APUBGDoor {
  /* offset=0x02c8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02cc flags=0x0008001440000204 */ UParticleSystemComponent* ParticleSystem;
  /* offset=0x02d0 flags=0x0008001440000204 */ UBoxComponent* Interaction;
  /* offset=0x02d4 flags=0x0008001440000204 */ USceneComponent* Scene;
  /* offset=0x02d8 flags=0x0008001440000204 */ UBoxComponent* Box;
  /* offset=0x02dc flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x02e0 flags=0x0008001040000200 */ float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;
  /* offset=0x02e4 flags=0x0008001040000200 */ uint8 ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;
  /* offset=0x02e8 flags=0x0008001040000204 */ UTimelineComponent* ZeroToOne;
  /* offset=0x02ec flags=0x0008001040010205 */ UStaticMesh* BrokenMesh;
  /* offset=0x02f0 flags=0x0008001040010205 */ float HP;
  /* offset=0x02f4 flags=0x0008001040010205 */ float HPTimer;
  /* offset=0x02f8 flags=0x0008001040010205 */ float To;
  /* offset=0x02fc flags=0x0008001040010205 */ float From;
  /* offset=0x0300 flags=0x0008001040010205 */ float HPDummy;
  /* offset=0x0308 flags=0x0000001000010005 */ struct FTimerHandle DummyTimerHandler;
  /* offset=0x0310 flags=0x0008001040010205 */ float GrenadeDamageRatio;

  void ActionDoorImmediatly(int32 doorStateDst);
  void ActionDoorOnClient(int32 doorStateDst);
  void BP_DoorBroken(bool isBeginPlay);
  void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void EventTimer();
  void ExecuteUbergraph_BP_DoorNormal(int32 EntryPoint, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue2, struct FRotator CallFunc_MakeRotator_ReturnValue3, float CallFunc_Lerp_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, float K2Node_Event_Damage, UDamageType* K2Node_Event_DamageType, AController* K2Node_Event_InstigatedBy, AActor* K2Node_Event_DamageCauser, FString CallFunc_Concat_StrStr_ReturnValue, UBP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, AActor* K2Node_ComponentBoundEvent_OtherActor2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int32 K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult K2Node_ComponentBoundEvent_SweepResult, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, AActor* K2Node_ComponentBoundEvent_OtherActor, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_HasState_ReturnValue, ACharacter* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, int32 K2Node_Event_doorStateDst2, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, struct FVector CallFunc_MakeVector_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, struct FRotator CallFunc_GetSocketRotation_ReturnValue, struct FVector CallFunc_GetRightVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_SetStaticMesh_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue4, bool K2Node_Event_isBeginPlay, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int32 K2Node_Event_doorStateDst, bool K2Node_SwitchInteger2_CmpSuccess, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4);
  void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
  void ReceiveBeginPlay();
  void UserConstructionScript();
  void ZeroToOne__FinishedFunc();
  void ZeroToOne__UpdateFunc();
};

class UBP_GameEventListener_C: public UGameEventListener {
  /* offset=0x00c8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;

  void ChangeStreamingLevel(UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
  void CustomEvent(uint8 gamePawnEvent);
  void EnableGrassLOD(int32 Enable, UGameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);
  void ExecuteUbergraph_BP_GameEventListener(int32 EntryPoint, FGamePawnEventDelegate K2Node_CreateDelegate_OutputDelegate, uint8 K2Node_CustomEvent_gamePawnEvent, bool K2Node_SwitchEnum_CmpSuccess, uint8 K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, UGameInstance* CallFunc_GetGameInstance_ReturnValue2, int32 CallFunc_GetDeviceLevel_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsIOSPlatform_IsIOS3, bool CallFunc_IsIOSPlatform_IsIOS4);
  void InitIncaseReconnect(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
  void InitNearClip(APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchName_CmpSuccess);
  void IsIOSPlatform(bool IsIOS, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void ReceiveBeginPlay();
  void ReceiveEndPlay(uint8 EndPlayReason);
};

class UBP_GameFunctionLibrary_C: public UBlueprintFunctionLibrary {
  void AddActorTag(AActor* Target, FName TagInfo, UObject* __WorldContext, int32 CallFunc_Array_Add_ReturnValue);
  void ClampStringLength(FString Source, int32 Length, UObject* __WorldContext, FString Result, int32 CallFunc_Len_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void GetActorsByTag(FName Tag, UObject* ContextObject, UClass<AActor>* ActorClass, UObject* __WorldContext, TArray<AActor*> Targets, TArray<AActor*> Actors, TArray<AActor*> CallFunc_GetAllActorsOfClass_OutActors, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, AActor* CallFunc_Array_Get_Item, int32 ___int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue);
  void GetCurLevelMapTexture(UObject* __WorldContext, UTexture2D* Texture, FString CurLevelName, int32 ___int_Loop_Counter_Variable, FString CallFunc_GetCurrentLevelName_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Map_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void IsPlayerCanSeeWidget(UWidget* NewParam, UObject* __WorldContext, bool cansee, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void SetUpGamePostProcessEffectData(APostProcessVolume* Volume, UObject* ContextObject, UObject* __WorldContext, TArray<UMaterialInstanceDynamic*> MatsArr, int32 CallFunc_MakeLiteralInt_ReturnValue, UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3, int32 ___int_Variable, int32 ___int_Variable2, uint8 CallFunc_Conv_IntToByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, uint8 CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3);
};

class ABP_GlobalConfig_C: public AGlobalConfigActor {
  /* offset=0x02b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02b4 flags=0x0008001440000204 */ UBP_WeatherConfig_C* BP_WeatherConfig;
  /* offset=0x02b8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void ExecuteUbergraph_BP_GlobalConfig(int32 EntryPoint, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetUserHDRSetting_ReturnValue, bool CallFunc_IsOpenLDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue);
  void ReceiveBeginPlay();
  void UserConstructionScript();
};

class UBP_GrenadeDamageType_C: public UDamageType {
};

class ABP_GrenadePredictLine_C: public AGrenadePredictLine {
  /* offset=0x0368 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x036c flags=0x0008001440000204 */ UParticleSystemComponent* BlockParticle;
  /* offset=0x0370 flags=0x0008001440000204 */ USplineComponent* Spline;
  /* offset=0x0374 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;
  /* offset=0x0378 flags=0x0000000000010205 */ TArray<USplineMeshComponent*> SplineMeshes;
  /* offset=0x0384 flags=0x0008001040010205 */ int32 NumberSplineMeshes;
  /* offset=0x0388 flags=0x0008001040010205 */ float NumberPoints;
  /* offset=0x038c flags=0x0008001040010205 */ int32 NumberMeshesNeeded;
  /* offset=0x0390 flags=0x0009001040000005 */ struct FVector LauncheVelocity;
  /* offset=0x039c flags=0x0008001040010205 */ int32 NumberMeshesLastFrame;

  void CleanupSplineMeshes(int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, USplineMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void DrawSplineMeshes(int32 LoopIndex, USplineMeshComponent* CurrentSplineMesh, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, USplineMeshComponent* CallFunc_AddComponent_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 ___int_Variable2, USplineMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue2, struct FVector CallFunc_GetLocationAndTangentAtSplinePoint_Location, struct FVector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent, struct FVector CallFunc_GetLocationAndTangentAtSplinePoint_Location2, struct FVector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent2, USplineMeshComponent* CallFunc_Array_Get_Item2, int32 CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_GetNumberOfSplinePoints_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue);
  void ExecuteUbergraph_BP_GrenadePredictLine(int32 EntryPoint, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, struct FVector CallFunc_GetPredictedLineSTartPositionAndVelocity_StartPosition, struct FVector CallFunc_GetPredictedLineSTartPositionAndVelocity_StartVelocity, float CallFunc_VSize_ReturnValue, TArray<AActor*> ___object_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FHitResult CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit, TArray<struct FVector> CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions, struct FVector CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination, bool CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue, struct FVector CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue);
  void GetPositionByThrowMode(struct FVector Input, struct FVector Output, bool K2Node_SwitchEnum_CmpSuccess, struct FVector CallFunc_Add_VectorVector_ReturnValue);
  void GetPredictedLineSTartPositionAndVelocity(struct FVector StartPosition, struct FVector StartVelocity, APlayerController* CallFunc_GetPlayerController_ReturnValue, struct FVector CallFunc_GetActorForwardVector_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector CallFunc_GetPositionByThrowMode_output);
  void NotifyUpdateSpline();
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void SetSplineMeshMatParams(TArray<struct FVector> PredictTailPoints, struct FLinearColor CallFunc_MakeColor_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, struct FLinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, struct FLinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue2, int32 CallFunc_Array_LastIndex_ReturnValue2, float CallFunc_NormalizeToRange_ReturnValue, float CallFunc_FClamp_ReturnValue);
  void UpdateSplineBase(struct FVector Location, struct FRotator Rotation, bool isHit, struct FTransform NewLocalVar, struct FTransform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsVisible_ReturnValue, struct FHitResult CallFunc_K2_SetWorldTransform_SweepHitResult);
  void UserConstructionScript();
};

class ABP_Grenade_Base_C: public AUAEProjectile {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x0008001440000204 */ URotatingMovementComponent* RotatingMovement;
  /* offset=0x02b0 flags=0x0008001440000204 */ UDelayFlyProjMovementComponent* DelayFlyProjMovement;
  /* offset=0x02b4 flags=0x0008001440000204 */ UCapsuleComponent* RootCollision;
  /* offset=0x02b8 flags=0x0008001040010205 */ float SpeedForHigh;
  /* offset=0x02bc flags=0x0008001040010205 */ UChildActorComponent* ChildActorComponent;
  /* offset=0x02c0 flags=0x0008001040010205 */ UAkAudioEvent* FuzeAkSoundEvent;
  /* offset=0x02c4 flags=0x0008001040010205 */ UAkAudioEvent* ThrowAkSoundEvent;
  /* offset=0x02c8 flags=0x0008001040010205 */ UAkAudioEvent* WallCollideAkSoundEvent;
  /* offset=0x02cc flags=0x0008001040010205 */ float SpeedForLow;
  /* offset=0x02d0 flags=0x0000001040010205 */ bool IsTimeOut;
  /* offset=0x02d4 flags=0x0000001040010005 */ struct FRotator ViewOffsetRotation_H;
  /* offset=0x02e0 flags=0x0000001040010005 */ struct FRotator ViewOffsetRotation_L;
  /* offset=0x02ec flags=0x0008001040010005 */ struct FVector2D LowThrowMovementParam;
  /* offset=0x02f4 flags=0x0008001040010005 */ struct FVector2D HighThrowMovementParam;
  /* offset=0x02fc flags=0x0008001040010005 */ struct FVector _upperVectorAligned;
  /* offset=0x0308 flags=0x0008001040010005 */ struct FVector _surfaceNormalVector;
  /* offset=0x0314 flags=0x0000001040010205 */ bool _hasBeenThrowedOut;
  /* offset=0x0318 flags=0x0008001040010205 */ float showTime;

  void AlignToSurface();
  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(struct FHitResult ImpactResult, struct FVector ImpactVelocity);
  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature(struct FHitResult ImpactResult);
  void CallVoiceCheck(struct FVector CallFunc_K2_GetActorLocation_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APawn* CallFunc_K2_GetPawn_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue);
  void DettachFromOwner();
  void ExecuteUbergraph_BP_Grenade_Base(int32 EntryPoint, bool ___bool_Variable, TArray<AActor*> ___object_Variable, bool CallFunc_HasAuthority_ReturnValue, struct FTransform ___struct_Variable, UChildActorComponent* CallFunc_AddComponent_ReturnValue, int32 K2Node_Event_SkillID3, enum UTSkillStopReason K2Node_Event_Reason, int32 K2Node_Event_SkillID2, int32 K2Node_Event_SkillID, uint8 K2Node_Event_EventType2, uint8 K2Node_Event_EventType, enum EUTSkillEntry K2Node_Event_EntryEvent, float K2Node_Event_DeltaSeconds, AUAESkill* K2Node_Event_SkillOwner, uint8 K2Node_CustomEvent_SkillEventType, AActor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable2, uint8 CallFunc_GetThrowGrenadeMode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, AActor* CallFunc_GetOwner_ReturnValue2, APawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ABP_GrenadePredictLine_C* K2Node_DynamicCast_AsBP_Grenade_Predict_Line, bool K2Node_DynamicCast_bSuccess3, AActor* CallFunc_GetOwner_ReturnValue3, APawn* K2Node_DynamicCast_AsPawn2, bool K2Node_DynamicCast_bSuccess4, struct FVector K2Node_CustomEvent_InitVelocity, bool K2Node_CustomEvent_IsThrowHigh, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue, struct FHitResult K2Node_ComponentBoundEvent_ImpactResult2, struct FVector K2Node_ComponentBoundEvent_ImpactVelocity, int32 CallFunc_PostEventAtLocation_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, int32 CallFunc_PostEventAtLocation_ReturnValue3, float K2Node_Select_Default, AActor* CallFunc_GetOwner_ReturnValue4, struct FHitResult K2Node_ComponentBoundEvent_ImpactResult, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess5, uint8 CallFunc_GetThrowGrenadeMode_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, AActor* CallFunc_GetOwner_ReturnValue5, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_IsValid_ReturnValue3, ASTExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, struct FRotator CallFunc_GetCurRotation_ret, struct FRotator CallFunc_GetCurRotation_ret2, struct FVector CallFunc_Conv_RotatorToVector_ReturnValue, struct FVector CallFunc_Conv_RotatorToVector_ReturnValue2, struct FVector CallFunc_Normal_ReturnValue, struct FVector CallFunc_Normal_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector2D K2Node_Select2_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector CallFunc_K2_GetActorLocation_ReturnValue3, TArray<uint8> K2Node_MakeArray_Array, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector CallFunc_GetActorUpVector_ReturnValue, struct FHitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, FSkillCustomEvent K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, struct FVector CallFunc_BreakHitResult_Location2, struct FVector CallFunc_BreakHitResult_ImpactPoint2, struct FVector CallFunc_BreakHitResult_Normal2, struct FVector CallFunc_BreakHitResult_ImpactNormal2, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, AActor* CallFunc_BreakHitResult_HitActor2, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int32 CallFunc_BreakHitResult_HitItem2, int32 CallFunc_BreakHitResult_FaceIndex2, struct FVector CallFunc_BreakHitResult_TraceStart2, struct FVector CallFunc_BreakHitResult_TraceEnd2, struct FVector CallFunc_ProjectVectorOnToPlane_ReturnValue, struct FRotator CallFunc_MakeRotFromZ_ReturnValue, bool ___bool_Variable3, bool CallFunc_K2_SetActorRotation_ReturnValue, float K2Node_Select3_Default, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2);
  void GetCurRotation(struct FRotator ret, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, AActor* CallFunc_GetOwner_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, uint8 CallFunc_GetThrowGrenadeMode_ReturnValue, struct FRotator CallFunc_GetControlRotation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Add_FloatFloat_ReturnValue6, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue2);
  void GetRandomStartAngle(int32 ret, int32 CallFunc_RandomIntegerInRange_ReturnValue);
  void HandleLifeEnd(AActor* CallFunc_GetOwner_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);
  void HandleSkillEnd(int32 SkillID, enum UTSkillStopReason Reason);
  void HandleSkillStart(int32 SkillID);
  void InitFromSkill(AUAESkill* SkillOwner);
  void InitLifeSpan();
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void SkillEvent(uint8 SkillEventType);
  void StartFly(struct FVector Velocity, bool isThrowHigh);
  /* CL* */ void StartFlyMulticast(struct FVector InitVelocity, bool isThrowHigh);
  void TriggerCustomEvent(uint8 EventType);
  void TriggerEntryEvent(enum EUTSkillEntry EntryEvent);
  void TriggerEvent(int32 SkillID, uint8 EventType);
  void UserConstructionScript();
};

class ABP_Grenade_Burn_C: public ABP_Grenade_Base_C {
  /* offset=0x031c flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0320 flags=0x0008001440000204 */ UParticleSystemComponent* TrailParticleSystem;
  /* offset=0x0324 flags=0x0008001440000204 */ USphereComponent* SphereTrigger;
  /* offset=0x0328 flags=0x0008001440000204 */ UStaticMeshComponent* proj;
  /* offset=0x032c flags=0x0008001440000204 */ UParticleSystemComponent* BurningParticleSystem;
  /* offset=0x0330 flags=0x0008001440000204 */ USTExtraBuffApplierComponent* STExtraBuffApplier;
  /* offset=0x0334 flags=0x0008001040010205 */ UAkAudioEvent* ExplodeAkEvent;
  /* offset=0x0338 flags=0x0008001040010205 */ UParticleSystem* ExplodParticleSystem;
  /* offset=0x033c flags=0x0008001040010205 */ float LifeTimeFromFuzeToExplode;
  /* offset=0x0340 flags=0x0008001040010205 */ float LifeTimeAfterExplode;
  /* offset=0x0344 flags=0x0008001040010205 */ UAkAudioEvent* BurningAkEvent;
  /* offset=0x0348 flags=0x0000001040010205 */ bool HasThrowedOut?;
  /* offset=0x0349 flags=0x0000001040010205 */ bool HasExploded?;
  /* offset=0x034c flags=0x0008001040010205 */ float LifeTimeforEmittingFlame;
  /* offset=0x0350 flags=0x0008001040010205 */ float VoiceCheckDis;
  /* offset=0x0354 flags=0x0000001140010225 */ bool IsServerAlreadyExploded;

  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature(struct FHitResult ImpactResult);
  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_1_ActorComponentActivatedSignature__DelegateSignature(UActorComponent* Component, bool bReset);
  void ExecuteUbergraph_BP_Grenade_Burn(int32 EntryPoint, TArray<AActor*> ___object_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, UActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_Multiply_VectorInt_ReturnValue, TArray<uint8> K2Node_MakeArray_Array, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FHitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, struct FHitResult K2Node_ComponentBoundEvent_ImpactResult, struct FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_Subtract_FloatFloat_ReturnValue, int32 CallFunc_GetRandomStartAngle_ret, float CallFunc_Conv_IntToFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue);
  void ExplodeClientEffect(struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2);
  void ExplodeLocal();
  void GetHitSurfaceNormal();
  void InitLifeSpan();
  void OnRep_IsServerAlreadyExploded(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void UserConstructionScript();
};

class ABP_Grenade_Burn_Weapon_C: public ASTExtraWeapon {
  /* offset=0x0348 flags=0x0008001440000204 */ UWeaponAnimList_Grenade_C* WeaponAnimList_Grenade;
  /* offset=0x034c flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x0350 flags=0x0008001440000204 */ UWeaponEntity* WeaponEntity;
  /* offset=0x0354 flags=0x0008001440000204 */ UWeaponSpecificHandler* WeaponSpecificHandler;
  /* offset=0x0358 flags=0x0008001440000204 */ UWeaponStateDefault* WeaponStateDefault;
  /* offset=0x035c flags=0x0008001440000204 */ UWeaponStateManager* WeaponStateManager;

  void UserConstructionScript();
};

class ABP_Grenade_Shoulei_C: public ABP_Grenade_Base_C {
  /* offset=0x031c flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0320 flags=0x0008001440000204 */ UStaticMeshComponent* proj;
  /* offset=0x0324 flags=0x0008001040010205 */ int32 DamageRadiusInner;
  /* offset=0x0328 flags=0x0008001040010205 */ int32 DamageRadiusOuter;
  /* offset=0x032c flags=0x0008001040010205 */ float HealthDamageOuter;
  /* offset=0x0330 flags=0x0008001040010205 */ float HealthDamageInner;
  /* offset=0x0334 flags=0x0008001040010205 */ UAkAudioEvent* ExplodeAkEvent;
  /* offset=0x0338 flags=0x0008001040010205 */ UParticleSystem* ExplodParticleSystem;
  /* offset=0x033c flags=0x0008001040010205 */ float LifeTimeAfterFuze;
  /* offset=0x0340 flags=0x0008001040010205 */ int32 Momentum;
  /* offset=0x0344 flags=0x0008001040010205 */ float DamageFallOffParam;
  /* offset=0x0348 flags=0x0008001040010205 */ float VoiceCheckDis;
  /* offset=0x034c flags=0x0008001040010205 */ float AdditionalDamageForVehicle;

  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_1_ActorComponentActivatedSignature__DelegateSignature(UActorComponent* Component, bool bReset);
  void ExecuteUbergraph_BP_Grenade_Shoulei(int32 EntryPoint, TArray<AActor*> ___object_Variable, AController* CallFunc_GetInstigatorController_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, UActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_ApplyRadiusDamageSTEWithMomentum_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void ExplodeLocal();
  void InitLifeSpan();
  void UserConstructionScript();
};

class ABP_Grenade_Shoulei_Weapon_C: public ASTExtraWeapon {
  /* offset=0x0348 flags=0x0008001440000204 */ UWeaponAnimList_Grenade_C* WeaponAnimList_Grenade;
  /* offset=0x034c flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x0350 flags=0x0008001440000204 */ UWeaponEntity* WeaponEntity;
  /* offset=0x0354 flags=0x0008001440000204 */ UWeaponSpecificHandler* WeaponSpecificHandler;
  /* offset=0x0358 flags=0x0008001440000204 */ UWeaponStateDefault* WeaponStateDefault;
  /* offset=0x035c flags=0x0008001440000204 */ UWeaponStateManager* WeaponStateManager;

  void UserConstructionScript();
};

class ABP_Grenade_Smoke_C: public ABP_Grenade_Base_C {
  /* offset=0x031c flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0320 flags=0x0008001440000204 */ UStaticMeshComponent* proj;
  /* offset=0x0324 flags=0x0008001440000204 */ USceneComponent* RotationPivot;
  /* offset=0x0328 flags=0x0008001440000204 */ UParticleSystemComponent* Smoking;
  /* offset=0x032c flags=0x0008001040000200 */ float Timeline_0_NewTrack_0_45ECD5A740FAA62124360495191917AF;
  /* offset=0x0330 flags=0x0008001040000200 */ uint8 Timeline_0__Direction_45ECD5A740FAA62124360495191917AF;
  /* offset=0x0334 flags=0x0008001040000204 */ UTimelineComponent* Timeline;
  /* offset=0x0338 flags=0x0008001040010205 */ UAkAudioEvent* ExplodeAkEvent;
  /* offset=0x033c flags=0x0008001040010205 */ float LifeTimeAfterFly;
  /* offset=0x0340 flags=0x0008001040010205 */ float LifeTimeAfterSmoking;
  /* offset=0x0344 flags=0x0008001040010205 */ UAkAudioEvent* SmokingAkEvent;
  /* offset=0x0348 flags=0x0000001040010205 */ bool IsThrowedOut?;
  /* offset=0x034c flags=0x0008001040010205 */ float LifeTimeForEmittingSmoke;
  /* offset=0x0350 flags=0x0000001000010005 */ struct FTimerHandle _rotationTimer;
  /* offset=0x0358 flags=0x0008001040010205 */ float VoiceCheckDis;
  /* offset=0x035c flags=0x0000001140010225 */ bool IsServerAlreadyExploded;

  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_1_ActorComponentActivatedSignature__DelegateSignature(UActorComponent* Component, bool bReset);
  void CheckWhetherThrowedOut();
  void CustomEvent();
  void ExecuteUbergraph_BP_Grenade_Smoke(int32 EntryPoint, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, UActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, int32 CallFunc_GetRandomStartAngle_ret, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, struct FVector CallFunc_Multiply_VectorInt_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, TArray<uint8> K2Node_MakeArray_Array, bool CallFunc_IsDedicatedServer_ReturnValue, struct FVector CallFunc_RotateAngleAxis_ReturnValue, struct FRotator CallFunc_MakeRotFromZ_ReturnValue, struct FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult, AActor* CallFunc_GetOwner_ReturnValue, AActor* CallFunc_GetOwner_ReturnValue2, struct FVector CallFunc_GetActorRightVector_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array2, struct FHitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, struct FVector CallFunc_GetActorUpVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, bool ___bool_Has_Been_Initd_Variable, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int32 CallFunc_PostEvent_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool ___bool_IsClosed_Variable);
  void ExplodeLocal();
  void InitLifeSpan();
  void OnRep_IsServerAlreadyExploded(bool CallFunc_HasAuthority_ReturnValue);
  void RotateForEmitting();
  void Timeline_0__FinishedFunc();
  void Timeline_0__UpdateFunc();
  void UserConstructionScript();
};

class ABP_Grenade_Smoke_Weapon_C: public ASTExtraWeapon {
  /* offset=0x0348 flags=0x0008001440000204 */ UWeaponAnimList_Grenade_C* WeaponAnimList_Grenade;
  /* offset=0x034c flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x0350 flags=0x0008001440000204 */ UWeaponEntity* WeaponEntity;
  /* offset=0x0354 flags=0x0008001440000204 */ UWeaponSpecificHandler* WeaponSpecificHandler;
  /* offset=0x0358 flags=0x0008001440000204 */ UWeaponStateDefault* WeaponStateDefault;
  /* offset=0x035c flags=0x0008001440000204 */ UWeaponStateManager* WeaponStateManager;

  void UserConstructionScript();
};

class ABP_Grenade_Stun_C: public ABP_Grenade_Base_C {
  /* offset=0x031c flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0320 flags=0x0008001440000204 */ USphereComponent* SphereTrigger;
  /* offset=0x0324 flags=0x0008001440000204 */ UStaticMeshComponent* proj;
  /* offset=0x0328 flags=0x0008001440000204 */ USTExtraBuffApplierComponent* STExtraBuffApplier;
  /* offset=0x032c flags=0x0008001040010205 */ UAkAudioEvent* ExplodeAkEvent;
  /* offset=0x0330 flags=0x0008001040010205 */ UParticleSystem* ExplodParticleSystem;
  /* offset=0x0334 flags=0x0008001040010205 */ float LifeTimeFromFuzeToExplode;
  /* offset=0x0338 flags=0x0008001040010205 */ float VoiceCheckDis;

  void BndEvt__DelayFlyProjMovement_K2Node_ComponentBoundEvent_1_ActorComponentActivatedSignature__DelegateSignature(UActorComponent* Component, bool bReset);
  void ExecuteUbergraph_BP_Grenade_Stun(int32 EntryPoint, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, UActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, int32 CallFunc_GetRandomStartAngle_ret, float CallFunc_Conv_IntToFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);
  void ExplodeLocal();
  void InitLifeSpan();
  void UserConstructionScript();
};

class ABP_Grenade_Stun_Weapon_C: public ASTExtraWeapon {
  /* offset=0x0348 flags=0x0008001440000204 */ UWeaponAnimList_Grenade_C* WeaponAnimList_Grenade;
  /* offset=0x034c flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x0350 flags=0x0008001440000204 */ UWeaponEntity* WeaponEntity;
  /* offset=0x0354 flags=0x0008001440000204 */ UWeaponSpecificHandler* WeaponSpecificHandler;
  /* offset=0x0358 flags=0x0008001440000204 */ UWeaponStateDefault* WeaponStateDefault;
  /* offset=0x035c flags=0x0008001440000204 */ UWeaponStateManager* WeaponStateManager;

  void UserConstructionScript();
};

class ABP_MiniMapStandardPoint_C: public AMiniMapStandardPoint {
  /* offset=0x02b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ABP_PlayerCameraManager_C: public APlayerCameraManager {
};

class ABP_PlayerLobbyPawn_C: public ACharacter {
  /* offset=0x05a0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x05a4 flags=0x0008001440000204 */ UCharacterAvatarComp_BP_C* CharacterAvatarComp_BP;
  /* offset=0x05a8 flags=0x0008001040000205 */ int32 headid;
  /* offset=0x05ac flags=0x0008001040000205 */ int32 resID;
  /* offset=0x05b0 flags=0x0000001040010205 */ bool press;
  /* offset=0x05b4 flags=0x0008001040010205 */ float LocationX;
  /* offset=0x05b8 flags=0x0000001040010005 */ struct FRotator lastrotator;

  void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_3_ComponentOnInputTouchBeginSignature__DelegateSignature(uint8 FingerIndex, UPrimitiveComponent* TouchedComponent);
  void ExecuteUbergraph_BP_PlayerLobbyPawn(int32 EntryPoint, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, float K2Node_Event_DeltaSeconds, uint8 K2Node_ComponentBoundEvent_FingerIndex, UPrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent, APlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FRotator CallFunc_ComposeRotators_ReturnValue, struct FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult);
  void ReceiveTick(float DeltaSeconds);
  void UserConstructionScript();
};

class ABP_PlayerPawn_C: public ASTExtraPlayerCharacter {
  /* offset=0x1010 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x1014 flags=0x0008001440000204 */ UPlayerSecurityInfoCollector* PlayerSecurityInfoCollector;
  /* offset=0x1018 flags=0x0008001440000204 */ UFPPComponent_C* FPPComponent;
  /* offset=0x101c flags=0x0008001440000204 */ UParticleSystemComponent* ParticleSystem;
  /* offset=0x1020 flags=0x0008001440000204 */ UParticleSystemComponent* P_swim_bubbles_01;
  /* offset=0x1024 flags=0x0008001440000204 */ UExponentialHeightFogComponent* CameraFog2;
  /* offset=0x1028 flags=0x0008001440000204 */ UCameraComponent* CameraParachuteFreeFall;
  /* offset=0x102c flags=0x0008001440000204 */ USpringArmComponent* SpringArmParachuteFreeFall;
  /* offset=0x1030 flags=0x0008001440000204 */ UCameraComponent* CameraParachuteOpened;
  /* offset=0x1034 flags=0x0008001440000204 */ USpringArmComponent* SpringArmParachuteOpened;
  /* offset=0x1038 flags=0x0008001440000204 */ UCameraComponent* FirstPersonCamera;
  /* offset=0x103c flags=0x0008001440000204 */ UCameraComponent* ScopingCamera;
  /* offset=0x1040 flags=0x0008001440000204 */ USpringArmComponent* ScopingSpringArm;
  /* offset=0x1044 flags=0x0008001440000204 */ USpringArmComponent* FirstPersonSpringArm;
  /* offset=0x1048 flags=0x0008001440000204 */ UCapsuleComponent* HitBox_Prone;
  /* offset=0x104c flags=0x0008001440000204 */ UCapsuleComponent* HitBox_Stand;
  /* offset=0x1050 flags=0x0008001440000204 */ UStaticMeshComponent* WaterPlane;
  /* offset=0x1054 flags=0x0008001440000204 */ UBoxComponent* CameraBox;
  /* offset=0x1058 flags=0x0008001440000204 */ UCharacterAvatarComp_BP_C* CharacterAvatarComp_BP;
  /* offset=0x105c flags=0x0008001440000204 */ UVault_Controller_C* Vault_Controller;
  /* offset=0x1060 flags=0x0008001440000204 */ UBP_SwimController_C* BP_SwimController;
  /* offset=0x1064 flags=0x0008001440000204 */ UStaticMeshComponent* SM_plane_01;
  /* offset=0x1068 flags=0x0008001440000204 */ UBP_AutoAimingComponent_C* BP_AutoAimingComponent;
  /* offset=0x106c flags=0x0008001440000204 */ UCharacterWeaponManagerComponent* CharacterWeaponManager;
  /* offset=0x1070 flags=0x0008001440000204 */ UUAECharacterAnimListComponent* CharacterAnimList_Skill;
  /* offset=0x1074 flags=0x0008001440000204 */ UUAESkillManagerComponent* UAESkillManager;
  /* offset=0x1078 flags=0x0008001440000204 */ UCharacterAnimList_Base_C* CharacterAnimList_Base;
  /* offset=0x107c flags=0x0008001440000204 */ UPickupManagerComponent* PickupManager;
  /* offset=0x1080 flags=0x0008001440000204 */ USceneComponent* CameraRoot;
  /* offset=0x1084 flags=0x0008001440000204 */ UCustomSpringArmComponent* CustomSpringArm;
  /* offset=0x1088 flags=0x0008001440000204 */ UCameraSettingComponent_C* CameraSettingComponent;
  /* offset=0x108c flags=0x0008001440000204 */ UStaticMeshComponent* Scope;
  /* offset=0x1090 flags=0x0008001440000204 */ UCameraComponent* Camera;
  /* offset=0x1094 flags=0x0008001040000200 */ float ScopeInCameFOVTimeline_Alpha_1A10DBFD4937F494F658338A3610F3AB;
  /* offset=0x1098 flags=0x0008001040000200 */ uint8 ScopeInCameFOVTimeline__Direction_1A10DBFD4937F494F658338A3610F3AB;
  /* offset=0x109c flags=0x0008001040000204 */ UTimelineComponent* ScopeInCameFOVTimeline;
  /* offset=0x10a0 flags=0x0008001040000200 */ float ScopeInCamLocTimeline_Alpha_55CD602B4ED0C744E4C589B1795078CE;
  /* offset=0x10a4 flags=0x0008001040000200 */ uint8 ScopeInCamLocTimeline__Direction_55CD602B4ED0C744E4C589B1795078CE;
  /* offset=0x10a8 flags=0x0008001040000204 */ UTimelineComponent* ScopeInCamLocTimeline;
  /* offset=0x10ac flags=0x0008001040000200 */ float ScopeTimeline_Alpha_F1B21AD24F2C8F5257D775827669A899;
  /* offset=0x10b0 flags=0x0008001040000200 */ uint8 ScopeTimeline__Direction_F1B21AD24F2C8F5257D775827669A899;
  /* offset=0x10b4 flags=0x0008001040000204 */ UTimelineComponent* ScopeTimeline;
  /* offset=0x10b8 flags=0x0008001040000200 */ float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;
  /* offset=0x10bc flags=0x0008001040000200 */ uint8 LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;
  /* offset=0x10c0 flags=0x0008001040000204 */ UTimelineComponent* LerpAlpha;
  /* offset=0x10c4 flags=0x0008001040000200 */ float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;
  /* offset=0x10c8 flags=0x0008001040000200 */ uint8 TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;
  /* offset=0x10cc flags=0x0008001040000204 */ UTimelineComponent* TurnLerpAlpha;
  /* offset=0x10d0 flags=0x0008001040010205 */ UMaterialInstanceDynamic* DamageSphereDMI;
  /* offset=0x10d4 flags=0x0000001040010205 */ bool bCrouch;
  /* offset=0x10d5 flags=0x0000001040010205 */ bool isReloading;
  /* offset=0x10d8 flags=0x0008001040010205 */ float ReloadingCDMax;
  /* offset=0x10dc flags=0x0008001040010005 */ struct FVector LastInAirVelocityVector;
  /* offset=0x10e8 flags=0x0008001040010005 */ struct FVector VelocityVector;
  /* offset=0x10f4 flags=0x0008001040010205 */ float Speed;
  /* offset=0x10f8 flags=0x0000001040010205 */ bool Moving;
  /* offset=0x10fc flags=0x0000001040010005 */ struct FRotator LastVelocityRotation;
  /* offset=0x1108 flags=0x0000001040010005 */ struct FRotator TurnInPlaceRotation;
  /* offset=0x1114 flags=0x0000001040010005 */ struct FRotator TurnInPlaceStart;
  /* offset=0x1120 flags=0x0000001040010005 */ struct FRotator TurnInPlaceTarget;
  /* offset=0x112c flags=0x0000001040010205 */ bool TurningInPlace;
  /* offset=0x112d flags=0x0008001040010205 */ uint8 LocomotionState;
  /* offset=0x112e flags=0x0000001040010205 */ bool Jumped;
  /* offset=0x1130 flags=0x0008001040010205 */ float ProneCameraHeight;
  /* offset=0x1134 flags=0x0008001040010205 */ float CameraMoveSpeed;
  /* offset=0x1138 flags=0x0000001040010205 */ bool UseFirstPersonPerspective;
  /* offset=0x113c flags=0x0008001040010205 */ float MeleeAttackRange;
  /* offset=0x1140 flags=0x0008001040010005 */ struct FVector Melee Attack Location;
  /* offset=0x114c flags=0x0008001040010205 */ float MeleeAttackDamage;
  /* offset=0x1150 flags=0x0008001040010205 */ uint8 CurCameraMode;
  /* offset=0x1154 flags=0x0008000000010005 */ struct FSTR_CameraSetting StandCameraSetting;
  /* offset=0x1168 flags=0x0000001040010005 */ struct FRotator TerreneNormal;
  /* offset=0x1174 flags=0x0008001040010005 */ struct FVector Normal;
  /* offset=0x1180 flags=0x0008001040010a05 */ APickUpWrapperActor* PickUpTarget;
  /* offset=0x1184 flags=0x0000001040010205 */ bool bIsPicking;
  /* offset=0x1188 flags=0x0000100010010205 */ FEquipWeaponComplete EquipWeaponComplete;
  /* offset=0x1194 flags=0x0000100010010205 */ FUnequipWeaponComplete UnequipWeaponComplete;
  /* offset=0x11a0 flags=0x0008001040010205 */ float CrouchCameraHeight;
  /* offset=0x11a4 flags=0x0008001040010205 */ float PickupDelayTime;
  /* offset=0x11a8 flags=0x0008001040010205 */ float DefaultCapsuleRadius;
  /* offset=0x11ac flags=0x0008001040010205 */ UStaticMesh* DamageEffectMeshRef;
  /* offset=0x11b0 flags=0x0000001040010205 */ bool IsMoveForward?;
  /* offset=0x11b1 flags=0x0000001040010205 */ bool IsMoveRight?;
  /* offset=0x11b4 flags=0x0008001040010205 */ float ParachuteOpeningRoll;
  /* offset=0x11b8 flags=0x0008001040010205 */ float ParachuteOpeningPitch;
  /* offset=0x11bc flags=0x0008001040010205 */ float MoveForwardInputValue;
  /* offset=0x11c0 flags=0x0008001040010205 */ float MoveRightInputValue;
  /* offset=0x11c4 flags=0x0008001040010205 */ float DownSpeedLerpSpeed;
  /* offset=0x11c8 flags=0x0008001040010205 */ float HeightToGround;
  /* offset=0x11cc flags=0x0008001040010205 */ float PitchRotateSpeed;
  /* offset=0x11d0 flags=0x0008001040010205 */ float YawRotateSpeed;
  /* offset=0x11d4 flags=0x0008001040010205 */ float RollRotateSpeed;
  /* offset=0x11d8 flags=0x0008001040010205 */ USkeletalMeshComponent* ParachuteComponent;
  /* offset=0x11dc flags=0x0008001040010205 */ float SwimCameraHeight;
  /* offset=0x11e0 flags=0x0008001040010205 */ float ResetYawAngle;
  /* offset=0x11e4 flags=0x0008001040010205 */ float SwimTargetRoll;
  /* offset=0x11e8 flags=0x0008001040010205 */ float SwimUpRateFix;
  /* offset=0x11ec flags=0x0008001040010205 */ float SwimRotateSpeed;
  /* offset=0x11f0 flags=0x0000000000010205 */ TMap<uint8, FString> GrenadeToSlotIndexDict;
  /* offset=0x122c flags=0x0008001040010205 */ float RollAngleLimit;
  /* offset=0x1230 flags=0x0008001040010205 */ float PitchAngleLimit;
  /* offset=0x1234 flags=0x0008001040010005 */ struct FVector SpringArmOffset;
  /* offset=0x1240 flags=0x0000001040010205 */ bool VaultEnter;
  /* offset=0x1248 flags=0x0008001000010005 */ struct FItemDefineID putoffItem;
  /* offset=0x1260 flags=0x0000000000010205 */ TArray<struct FBattleItemAdditionalData> AdditionalData;
  /* offset=0x126c flags=0x0000001040010205 */ bool autoEquip;
  /* offset=0x1270 flags=0x0000000000010205 */ TArray<USpringArmComponent*> SpringArms;
  /* offset=0x127c flags=0x0000000000010205 */ TArray<UCameraComponent*> Cameras;
  /* offset=0x1288 flags=0x0008001040010205 */ UParticleSystemComponent* PS_CloudSlow;
  /* offset=0x128c flags=0x0008001040010205 */ UParticleSystemComponent* PS_CloudFast;
  /* offset=0x1290 flags=0x0008001040010205 */ USpringArmComponent* CurActiveSpringArm;
  /* offset=0x1298 flags=0x0000001000010005 */ struct FTimerHandle CamShakeTimerHandler;
  /* offset=0x12a0 flags=0x0000001040010205 */ bool UseTurniinPlace;
  /* offset=0x12a4 flags=0x0000000000010205 */ TMap<int32, FName> GrenadeIDToNameDict;
  /* offset=0x12e0 flags=0x0000000000010205 */ TArray<int32> GrenadeIDsOrder;
  /* offset=0x12ec flags=0x0008001040010205 */ float ElapseTime;

  void AimInterupted(AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void BPNotifyStartDying(AController* Killer, AActor* DamageCauser, struct FHitResult KillingHitInfo, struct FVector KillingHitImpulseDir, UClass<UDamageType>* KillingHitDamageType);
  void BPReceiveDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
  void BPResetCharacter();
  void CalculateParachuteFallingVelocity(float DownSpeedLerpSpeed, float DeltaTime, float ForwarInputValue, float RightInputValue, struct FVector TotoalVelocity, float LocalRightInputValue, float LocalForwardInputValue, bool LocalIsMoveRight?, bool LocalIsMoveForward?, struct FVector LocalDownVelocity, struct FVector LocalRightVelocity, struct FVector LocalForwardVelocity, struct FVector CallFunc_CalFreeFallVelocity_ReturnValue);
  void CalculateParachuteOpeningVelocity(float ForwarInput, float RightInput, float FrameDeltaTime, struct FVector TotalVelocity, struct FVector LocalRightVelocity, struct FVector LocalFrowardVelocity, float LocalRightInputValue, float LocalForwardInputValue, bool LocalIsMoveRight?, bool LocalIsMoveForward?, struct FVector CallFunc_CalParachuteOpenedVelocity_ReturnValue);
  void CheckAutoMove(bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsLocalControlOrView_ret, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ClampAngleTo180d(float InputAngle, float OutputAngle, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);
  void DoAutoReloadCurrentWeapon();
  void DoChangePlayerBehaviorMode(uint8 TargetMode, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);
  void DoMoveForward(float Rate);
  void DoMoveRight(float Rate);
  void DoPickUpTarget();
  void EquipWeaponComplete__DelegateSignature();
  void ExecuteUbergraph_BP_PlayerPawn(int32 EntryPoint, struct FKey K2Node_InputKeyEvent_Key4, struct FKey ___struct_Variable, struct FKey K2Node_InputKeyEvent_Key3, struct FKey K2Node_InputKeyEvent_Key2, struct FKey ___struct_Variable2, struct FKey K2Node_InputKeyEvent_Key, FOnReconnectNotifyDelegate K2Node_CreateDelegate_OutputDelegate, int32 ___int_Array_Index_Variable, struct FKey K2Node_InputKeyEvent_Key5, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool ___bool_IsClosed_Variable2, bool ___bool_Has_Been_Initd_Variable2, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, uint8 K2Node_Event_NewState, bool K2Node_SwitchEnum2_CmpSuccess, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue2, float CallFunc_GetWorldDeltaSeconds_ReturnValue3, float CallFunc_GetWorldDeltaSeconds_ReturnValue4, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, float K2Node_Event_rate2, float K2Node_Event_rate, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_GetLastServerMoveTime_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue2, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, struct FRotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, AController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, AController* CallFunc_GetController_ReturnValue3, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue4, AController* CallFunc_GetController_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4, int32 ___int_Array_Index_Variable2, bool CallFunc_IsLocallyControlled_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue5, bool CallFunc_IsLocallyControlled_ReturnValue6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsLocallyControlled_ReturnValue7, bool CallFunc_IsLocallyControlled_ReturnValue8, bool CallFunc_IsDedicatedServer_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, AController* K2Node_Event_Killer, AActor* K2Node_Event_DamageCauser2, struct FHitResult K2Node_Event_KillingHitInfo, struct FVector K2Node_Event_KillingHitImpulseDir, UClass<UDamageType>* K2Node_Event_KillingHitDamageType, float K2Node_Event_DeltaSeconds, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, uint8 K2Node_CustomEvent_Mode, bool K2Node_SwitchEnum3_CmpSuccess, struct FSTR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int32 CallFunc_PostEvent_ReturnValue, int32 CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue9, AController* CallFunc_GetController_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess5, bool K2Node_CustomEvent_bIsAvailable2, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_IsValid_ReturnValue8, struct FHitResult K2Node_Event_Hit, AController* CallFunc_GetController_ReturnValue6, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, uint8 K2Node_Event_LastState, uint8 K2Node_Event_CurState, uint8 CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, uint8 CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue2, FOnStartInitDelegate K2Node_CreateDelegate_OutputDelegate2, float K2Node_Event_DeltaTime, uint8 K2Node_Event_PrevMovementMode, uint8 K2Node_Event_NewMovementMode, uint8 K2Node_Event_PrevCustomMode, uint8 K2Node_Event_NewCustomMode, bool K2Node_SwitchEnum4_CmpSuccess, bool K2Node_SwitchEnum5_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue5, float K2Node_Event_Damage, UDamageType* K2Node_Event_DamageType, AController* K2Node_Event_InstigatedBy, AActor* K2Node_Event_DamageCauser, bool CallFunc_Not_PreBool_ReturnValue4, bool K2Node_CustomEvent_bIsAvailable, FOnAttachedToVehicleDelegate K2Node_CreateDelegate_OutputDelegate3, FOnDetachedFromVehicleDelegate K2Node_CreateDelegate_OutputDelegate4, AController* CallFunc_GetController_ReturnValue7, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess7, int32 CallFunc_PostEvent_ReturnValue3, int32 CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum6_CmpSuccess, AController* CallFunc_GetController_ReturnValue8, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess8, bool K2Node_SwitchEnum7_CmpSuccess, AController* CallFunc_GetController_ReturnValue9, int32 CallFunc_PostEvent_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess9, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bTeleport2, bool K2Node_Event_bTeleport, float K2Node_CustomEvent_Rate2, float K2Node_CustomEvent_Rate, bool CallFunc_IsLocalControlOrView_ret, UCameraComponent* CallFunc_GetControllerViewCamera_Camera, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_IsValid_ReturnValue9, UParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, AController* CallFunc_GetController_ReturnValue10, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_HasAuthority_ReturnValue, TArray<int32> CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess11, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess12, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, AWaterSwimObject_C* K2Node_CustomEvent_WaterObject2, AWaterSwimObject_C* K2Node_CustomEvent_WaterObject, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, struct FVector K2Node_Event_startPos2, AActor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, struct FVector K2Node_Event_hitpoint2, AActor* K2Node_Event_WindowActor, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, struct FVector K2Node_Event_startPos, AActor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, struct FVector K2Node_Event_hitpoint, AController* CallFunc_GetController_ReturnValue11, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess13, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate5, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, struct FKey K2Node_InputActionEvent_Key, FOnHasTombBoxesAvailableChanged K2Node_CreateDelegate_OutputDelegate6, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate7, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, struct FRotator K2Node_CustomEvent_TurnInPlaceStart, struct FRotator K2Node_CustomEvent_TurnInPlaceTarget, UCurveFloat* K2Node_CustomEvent_Curve, UAnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, struct FRotator CallFunc_RLerp_ReturnValue, FOnHasPickupPropsAvailableChanged K2Node_CreateDelegate_OutputDelegate8, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, UCustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, UCustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue2, struct FKey K2Node_InputKeyEvent_Key6);
  void FirstPerson();
  void FreeFallShakeCam(bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsActive_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  USpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue);
  void GetControllerViewCamera(UCameraComponent* Camera, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, AActor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, TArray<UCameraComponent*> CallFunc_GetComponentsByClass_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UCameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);
  FString GetGrenadeNameByGrenadeType(uint8 grenadeType, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  TArray<UActorComponent*> GetNonDedicatedComponents(TArray<UActorComponent*> Components, TArray<UActorComponent*> K2Node_MakeArray_Array, TArray<UActorComponent*> K2Node_MakeArray_Array2);
  TArray<UActorComponent*> GetNonSimulatedComponents(UActorComponent* Components, TArray<UActorComponent*> K2Node_MakeArray_Array);
  TArray<UActorComponent*> GetNonSimulatedComponents_NonTeammates(TArray<UActorComponent*> K2Node_MakeArray_Array);
  void GetWeapon(struct FVector NewParam, struct FRotator NewParam1, bool bHaveWeapon, struct FTransform CallFunc_GetSocketTransform_ReturnValue, struct FVector CallFunc_BreakTransform_Location, struct FRotator CallFunc_BreakTransform_Rotation, struct FVector CallFunc_BreakTransform_Scale);
  void HandleOnAttachedVehicle(ASTExtraVehicleBase* InVehicle);
  void HandleOnDetachedVehicle(bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);
  void HandleParachuteStateChanged(uint8 NewState);
  void InitialParachuteData();
  void InpActEvt_E_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_E_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_Q_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_Q_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_T_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_Vault_K2Node_InputActionEvent(struct FKey Key);
  void InpActEvt_Z_K2Node_InputKeyEvent(struct FKey Key);
  void IsLocalControlOrView(bool ret, bool CallFunc_IsDedicatedServer_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsViewTarget_ReturnValue);
  void K2_OnMovementModeChanged(uint8 PrevMovementMode, uint8 NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
  void K2_UpdateCustomMovement(float DeltaTime);
  void LerpAlpha__FinishedFunc();
  void LerpAlpha__UpdateFunc();
  void MoveInScope(bool bHasSetMesh);
  void MoveOutScope();
  void NotifyPickup(bool bIsAvailable);
  void NotifyTombBox(bool bIsAvailable);
  void O();
  void OnEquipWeapon();
  void OnInitGrenadeData();
  void OnLanded(struct FHitResult Hit);
  void OnNotifyHurt();
  void OnPoseStateChange(uint8 LastState, uint8 CurState);
  void OnPostSwitchCameraMode(uint8 Mode);
  void OnRep_AvatarConfig();
  void OnScopeIn(bool bTeleport);
  void OnScopeInterrupt(bool bTeleport);
  void OnScopeTempTransformFromFPP();
  void OnScopeTempTransformToFPP();
  void OnUnEquipWeapon();
  void ParachuteOnWater();
  void ParachutePlaySound(UAkAudioEvent* LocalAkEvent, UAkAudioEvent* RemoteAkEvent, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, UAkComponent* CallFunc_GetAkComponent_ReturnValue, int32 CallFunc_PostAkEvent_ReturnValue, int32 CallFunc_PostAkEvent_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);
  void PawnVaultAllBluePrint(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint);
  void PawnVaultServerBluePrint(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint, AActor* WindowActor);
  void Pickup(APickUpWrapperActor* NewParam);
  void PlayScopeInTimeline(float Rate);
  void PlayScopeOutTimeline(float Rate);
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);
  void ReloadEvent();
  void ResetBPCameraSetting();
  void ResetSwitchCrouchMoveable();
  void ResetSwitchingPose();
  void RotateMesh(struct FRotator NewParam, struct FRotator NewLocalVar, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FRotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);
  void ScopeInCamLocTimeline__FinishedFunc();
  void ScopeInCamLocTimeline__UpdateFunc();
  void ScopeInCameFOVTimeline__FinishedFunc();
  void ScopeInCameFOVTimeline__UpdateFunc();
  void ScopeInStop();
  void ScopeOut();
  void ScopeOutStop();
  void ScopeTimeline__FinishedFunc();
  void ScopeTimeline__UpdateFunc();
  void Scoping(bool NewParam);
  void SetAllCollisionEnabled(bool bEnable);
  void SetPitchViewAngle(float MinPitch, float MaxPitch, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);
  void SetSwitchCrouchMoveable(bool Enable, bool CallFunc_IsValid_ReturnValue);
  void SetSwitchingPose(bool IsSwitching, bool CallFunc_IsValid_ReturnValue);
  void ShowDebugArrow(USceneComponent* self2, struct FRotator InRot, struct FLinearColor Color, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue);
  void StartCamShake();
  void StopCamShake();
  void StopTurningInPlace();
  void SwitchCamera(struct FSTR_CameraSetting CameraSetting);
  void SwitchCameraEvent(uint8 Mode);
  void SwitchCameraToNormal();
  void SwitchCameraToParachuteFalling();
  void SwitchCameraToParachuteOpening();
  void SwitchCrouch(uint8 NewParam, uint8 PreState, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);
  void SwitchPerson(uint8 NewParam, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable2, uint8 CallFunc_Conv_IntToByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, AController* CallFunc_GetController_ReturnValue, int32 ___int_Array_Index_Variable2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, uint8 CallFunc_Conv_IntToByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, UCameraComponent* CallFunc_Array_Get_Item, USpringArmComponent* CallFunc_Array_Get_Item2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2);
  /* CL* */ void SyncWaterObject(AWaterSwimObject_C* WaterObject);
  /* SRV */ void SyncWaterObjectServer(AWaterSwimObject_C* WaterObject);
  void TestShowMesh(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, TArray<UMeshComponent*> CallFunc_Map_Values_Values, FString CallFunc_Conv_VectorToString_ReturnValue, UMeshComponent* CallFunc_Array_Get_Item, USkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2);
  void TickParachute();
  void TickParachuteFalling();
  void TickParachuteOpening();
  void TurnInPlace(struct FRotator TurnInPlaceStart, struct FRotator TurnInPlaceTarget, UCurveFloat* Curve, UAnimMontage* TurnAnimation);
  void TurnLerpAlpha__FinishedFunc();
  void TurnLerpAlpha__UpdateFunc();
  void UnequipWeaponComplete__DelegateSignature();
  void UpdateParachuteFallingVelocity(float DeltaTime, float ForwardInputValue, float RightInputValue, bool CallFunc_HasAuthority_ReturnValue, struct FVector CallFunc_CalculateParachuteFallingVelocity_TotoalVelocity, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FVector CallFunc_Divide_VectorFloat_ReturnValue, struct FVector CallFunc_Normal_ReturnValue, float CallFunc_VSize_ReturnValue);
  void UpdateParachuteOpeningVelocity(float FrameDeltaTime, float ForwardInput, float RightInput, bool CallFunc_HasAuthority_ReturnValue, struct FVector CallFunc_CalculateParachuteOpeningVelocity_TotalVelocity, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FVector CallFunc_Divide_VectorFloat_ReturnValue, struct FVector CallFunc_Normal_ReturnValue, float CallFunc_VSize_ReturnValue);
  void UpdatePoseCollision(uint8 PlayerState, uint8 PreState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue5, bool CallFunc_NotEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue5, struct FVector CallFunc_MakeVector_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue7, float CallFunc_Subtract_FloatFloat_ReturnValue8, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue9, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue10, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue3, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue5, float CallFunc_Add_FloatFloat_ReturnValue4, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult2, bool CallFunc_K2_SetActorLocation_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue5, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult3, bool CallFunc_K2_SetActorLocation_ReturnValue3, struct FVector CallFunc_MakeVector_ReturnValue7, float CallFunc_Subtract_FloatFloat_ReturnValue11, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult4, bool CallFunc_K2_SetActorLocation_ReturnValue4, struct FVector CallFunc_MakeVector_ReturnValue8, float CallFunc_Subtract_FloatFloat_ReturnValue12, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult5, bool CallFunc_K2_SetActorLocation_ReturnValue5, struct FVector CallFunc_MakeVector_ReturnValue9, struct FHitResult CallFunc_K2_SetActorLocation_SweepHitResult6, bool CallFunc_K2_SetActorLocation_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue7, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, struct FVector CallFunc_MakeVector_ReturnValue10, float CallFunc_Add_FloatFloat_ReturnValue8, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue9, float CallFunc_Add_FloatFloat_ReturnValue10, struct FVector CallFunc_MakeVector_ReturnValue11, float CallFunc_Add_FloatFloat_ReturnValue11, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult2, struct FVector CallFunc_MakeVector_ReturnValue12, float CallFunc_Add_FloatFloat_ReturnValue12, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult3, float CallFunc_Add_FloatFloat_ReturnValue13, struct FVector CallFunc_MakeVector_ReturnValue13, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult4, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult5, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult6, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult7);
  void UserConstructionScript(int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5, int32 CallFunc_Array_Add_ReturnValue6);
  void VaultFailPawnBluePrint(FString content);
  void isAutonomous(bool NewParam, bool CallFunc_HasAuthority_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, AController* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
};

class UBP_PlayerRifleBulletDamageType_C: public UDamageType {
};

class ABP_PlayerRifleBulletImpact_C: public ASTEShootWeaponBulletImpactEffect {
  /* offset=0x0688 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;
  /* offset=0x068c flags=0x0000000000010205 */ TArray<UTexture2D*> CrossHairRefTexture;

  void UserConstructionScript();
};

class ABP_PlayerRifleBullet_C: public ASTExtraShootWeaponBulletBase {
  /* offset=0x0358 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x035c flags=0x0008001440000204 */ UStaticMeshComponent* BulletMesh;

  void CustomEvent();
  void ExecuteUbergraph_BP_PlayerRifleBullet(int32 EntryPoint, FLaunchBulletDelegate K2Node_CreateDelegate_OutputDelegate, AActor* K2Node_Event_OtherActor);
  void ReceiveActorBeginOverlap(AActor* OtherActor);
  void ReceiveBeginPlay();
  void UserConstructionScript();
};

class UBP_PlayerRifleCameraShakeAim_C: public UCameraShake {
};

class UBP_PlayerRifleCameraShakeNear_C: public UCameraShake {
};

class UBP_PlayerRifleCameraShakeNormal_C: public UCameraShake {
};

class UBP_SAVEGAME_UIElemLayout_C: public USaveGame {
  /* offset=0x0020 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;
  /* offset=0x005c flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;
  /* offset=0x0098 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;
  /* offset=0x00d4 flags=0x0000001040010205 */ bool IsDataValid1;
  /* offset=0x00d5 flags=0x0000001040010205 */ bool IsDataValid2;
  /* offset=0x00d6 flags=0x0000001040010205 */ bool IsDataValid3;

  void GetLayoutDetailByType(uint8 ElemType, int32 LayoutIndex, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetail, bool IsFound, bool K2Node_SwitchInteger_CmpSuccess, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);
};

class ABP_STExtraPlayerController_C: public ASTExtraPlayerController {
  /* offset=0x0ea0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0ea4 flags=0x0008001440000204 */ UChatComponent_BP_C* ChatComponent_BP;
  /* offset=0x0ea8 flags=0x0008001440000204 */ UBP_CommonBtn_C* BP_CommonBtn;
  /* offset=0x0eac flags=0x0008001440000204 */ UBP_GameEventListener_C* BP_GameEventListener;
  /* offset=0x0eb0 flags=0x0008001440000204 */ UBP_VehicleUser_C* BP_VehicleUser;
  /* offset=0x0eb4 flags=0x0008001040000200 */ float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;
  /* offset=0x0eb8 flags=0x0008001040000200 */ uint8 GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;
  /* offset=0x0ebc flags=0x0008001040000204 */ UTimelineComponent* GrayToOne;
  /* offset=0x0ec0 flags=0x0008001040000200 */ float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;
  /* offset=0x0ec4 flags=0x0008001040000200 */ uint8 GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;
  /* offset=0x0ec8 flags=0x0008001040000204 */ UTimelineComponent* GrayToZero;
  /* offset=0x0ecc flags=0x0008001040010a05 */ APostProcessVolume* MainPostProcessVolume;
  /* offset=0x0ed0 flags=0x0008001040010205 */ UMainControlPanelTochButton_C* InputControlPanel;
  /* offset=0x0ed4 flags=0x0008001040010205 */ uint8 LastCameraMode;
  /* offset=0x0ed8 flags=0x0008001040000205 */ UMainBackpackPanel_C* BackpackPanel;
  /* offset=0x0edc flags=0x0008001040010a05 */ APawn* PrePlayerPawn;
  /* offset=0x0ee0 flags=0x0000001040000205 */ bool bInItemGenerator;
  /* offset=0x0ee4 flags=0x0008001040010205 */ float InItemGeneratorUIRefreshTime;
  /* offset=0x0ee8 flags=0x0008001040010205 */ float CurInItemGeneratorUIRefreshTime;
  /* offset=0x0eec flags=0x0008001040010205 */ UObject* WaitingUI;
  /* offset=0x0ef0 flags=0x0008001040010a05 */ UObject* SimulatePlane;
  /* offset=0x0ef4 flags=0x0008001040010225 */ float PlaneStartYaw;
  /* offset=0x0ef8 flags=0x0000100010010205 */ FReloadingCDStart ReloadingCDStart;
  /* offset=0x0f04 flags=0x0000100010010205 */ FReloadingCDEnd ReloadingCDEnd;
  /* offset=0x0f10 flags=0x0000001040010205 */ bool AlreadyAimed;
  /* offset=0x0f14 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* closedAimTarget;
  /* offset=0x0f18 flags=0x0000000000010a05 */ TArray<ASTExtraBaseCharacter*> CurAimTargets;
  /* offset=0x0f24 flags=0x0008001040010205 */ float CloseDistance;
  /* offset=0x0f28 flags=0x0008001040000205 */ uint8 AutoAimDrawType;
  /* offset=0x0f2c flags=0x0000100010010205 */ FAirborneLanded AirborneLanded;
  /* offset=0x0f38 flags=0x0008001040000205 */ float MotionRate_Yaw;
  /* offset=0x0f3c flags=0x0008001040000205 */ float MotionRate_Pitch;
  /* offset=0x0f40 flags=0x0008001040010205 */ float MotionAimRate_Pitch;
  /* offset=0x0f44 flags=0x0008001040010205 */ float MotionAimRate_Yaw;
  /* offset=0x0f48 flags=0x0008001040010205 */ float MotionRate_Pitch_Threshold;
  /* offset=0x0f4c flags=0x0008001040010205 */ float MotionRate_Yaw_Threshold;
  /* offset=0x0f50 flags=0x0008001040010205 */ float MotionTouchAimRate_Pitch;
  /* offset=0x0f54 flags=0x0008001040010205 */ float MotionTouchAimRate_Yaw;
  /* offset=0x0f58 flags=0x0008001040000205 */ float MotionTouchRate_Yaw;
  /* offset=0x0f5c flags=0x0008001040000205 */ float MotionTouchRate_Pitch;
  /* offset=0x0f60 flags=0x0000001040010205 */ bool bDefaultIsAutoAimEnabled;
  /* offset=0x0f61 flags=0x0000001040010205 */ bool DriveWithForwardAxis;
  /* offset=0x0f62 flags=0x0000001040010205 */ bool DriveWithRightAxis;
  /* offset=0x0f63 flags=0x0000001040010205 */ bool bInTombBoxGenerator;
  /* offset=0x0f64 flags=0x0000100010010205 */ FPlayerEnterWater PlayerEnterWater;
  /* offset=0x0f70 flags=0x0000100010010205 */ FPlayerLeaveWater PlayerLeaveWater;
  /* offset=0x0f7c flags=0x0000001040010205 */ bool bindWeapon;
  /* offset=0x0f7d flags=0x0000001040010205 */ bool bLandScapeOrientation;
  /* offset=0x0f80 flags=0x0008001040010205 */ float PitchReverce;
  /* offset=0x0f84 flags=0x0008001040010205 */ float Left;
  /* offset=0x0f88 flags=0x0008001040010205 */ float Right;
  /* offset=0x0f8c flags=0x0008001040010205 */ float LastTime;
  /* offset=0x0f90 flags=0x0000000000010205 */ TArray<struct FVector> MotionDataStack;
  /* offset=0x0f9c flags=0x0008001040010005 */ struct FVector CurMotionData;
  /* offset=0x0fa8 flags=0x0000100010010205 */ FBindEventToBackpackComponent BindEventToBackpackComponent;
  /* offset=0x0fb4 flags=0x0000100010010205 */ FVaultFailDS VaultFailDS;
  /* offset=0x0fc0 flags=0x0000000000010205 */ TMap<FString, struct FUIAdaptationStructure> AdaptationDict;
  /* offset=0x0ffc flags=0x0008000000010005 */ struct FUIAdaptationStructure CurDeviceAdaptationOffset;
  /* offset=0x1018 flags=0x0008000000010005 */ struct FUIAdaptationStructure CurDeviceAdaptationData;
  /* offset=0x1034 flags=0x0000001040010205 */ bool bIsJoyStickShow;
  /* offset=0x1035 flags=0x0000001040010205 */ bool bIsInitSensibility;

  void AirborneLanded__DelegateSignature();
  void BindEventToBackpackComponent__DelegateSignature();
  void BindOrUnBindJoyStickSprint(bool IsBind, APawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, FOnJoyStickInteruptDelegate K2Node_CreateDelegate_OutputDelegate);
  /* SRV */ void ChangeToFemale();
  /* SRV */ void ChangeToMale();
  /* CL  */ void ClientAfterLand();
  /* CL  */ void ClientPreStartBattle(int32 PlayerNum);
  void CreateRank(int32 Kills, int32 Rank);
  void DebugNotDrawGuideLine(bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3);
  void DisableAimIfUnEquipWeapon(uint8 WeaponType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void DoInitUI(FOnRank K2Node_CreateDelegate_OutputDelegate, AHUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_IsLocalPlayerController_ReturnValue, ASurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess);
  void DoUITouchMove(struct FVector Loc);
  void EnableAimIfEquipRifile(uint8 WeaponType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void ExecuteUbergraph_BP_STExtraPlayerController(int32 EntryPoint, uint8 ___byte_Variable, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate3, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate4, struct FTransform ___struct_Variable, UAutoRunTest* CallFunc_AddComponent_ReturnValue, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate5, struct FKey K2Node_InputKeyEvent_Key2, struct FKey K2Node_InputKeyEvent_Key, FOnPlayerPutDownActorDelegate K2Node_CreateDelegate_OutputDelegate6, FOnSwitchCameraModeStartDelegate K2Node_CreateDelegate_OutputDelegate7, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, uint8 K2Node_CustomEvent_CameraMode, bool CallFunc_IsValid_ReturnValue2, APawn* CallFunc_K2_GetPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ASTExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, AActor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, int32 K2Node_CustomEvent_PlayerNum, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, TArray<ABP_PlayerPawn_C*> CallFunc_GetAllActorsOfClass_OutActors, int32 CallFunc_Array_Length_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue2, AHUD* CallFunc_GetHUD_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess3, ASurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess4, uint8 K2Node_Event_Type, bool K2Node_SwitchEnum_CmpSuccess, int32 ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue3, ABP_PlayerPawn_C* CallFunc_Array_Get_Item, bool CallFunc_IsLocalPlayerController_ReturnValue, uint8 K2Node_CustomEvent_Slot, uint8 ___byte_Variable2, float CallFunc_GetWorldDeltaSeconds_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue3, FOnReleaseFireBtnDelegate K2Node_CreateDelegate_OutputDelegate8, bool CallFunc_IsValid_ReturnValue4, float CallFunc_GetWorldDeltaSeconds_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float K2Node_Select_Default, bool K2Node_CustomEvent_NewParam, float K2Node_Select2_Default, bool CallFunc_IsValid_ReturnValue5, bool K2Node_Event_bIsSprint, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, float K2Node_InputAxisEvent_AxisValue2, float K2Node_InputAxisEvent_AxisValue, APawn* CallFunc_K2_GetPawn_ReturnValue4, TArray<UUAEUserWidget*> K2Node_Event_panels, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, int32 CallFunc_Array_Length_ReturnValue2, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue5, APawn* CallFunc_K2_GetPawn_ReturnValue6, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess6, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn5, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess8, int32 K2Node_CustomEvent_IntValue, uint8 ___byte_Variable3, float K2Node_Select3_Default, float CallFunc_SelectFloat_ReturnValue, APawn* CallFunc_GetPlayerPawn_ReturnValue, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue, APawn* CallFunc_GetPlayerPawn_ReturnValue2, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue2, struct FVector K2Node_Event_Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, uint8 ___byte_Variable4, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, float K2Node_Select4_Default, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_SelectFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue4, int32 K2Node_Event_fingerIndex, float CallFunc_Subtract_FloatFloat_ReturnValue3, uint8 CallFunc_Conv_IntToByte_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, uint8 CallFunc_GetValidValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue, FOnRemoveMainSlot K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FRotator CallFunc_GetSensibilityRate_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, FOnGameStartDelegate K2Node_CreateDelegate_OutputDelegate10, int32 ___int_Array_Index_Variable2, UUAEUserWidget* CallFunc_Array_Get_Item2, UMainControlPanelTochButton_C* K2Node_DynamicCast_AsMain_Control_Panel_Toch_Button, bool K2Node_DynamicCast_bSuccess9, UGameBackendHUD* CallFunc_GetInstance_ReturnValue2, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, FUserSettingsDelegate K2Node_CreateDelegate_OutputDelegate11, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate12, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate13, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate14, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue4, FOnShowAutoSprintButton K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_NotEqual_ByteByte_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, FOnUseInventoryItemDelegate K2Node_CreateDelegate_OutputDelegate16, float CallFunc_SelectFloat_ReturnValue3, int32 K2Node_Event_member, int32 K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue7, bool CallFunc_IsValid_ReturnValue8, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn6, bool K2Node_DynamicCast_bSuccess10, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue5, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_GetUseMotionControlLog_ReturnValue, bool CallFunc_GetUseMotionControlEnable_ReturnValue2, FString CallFunc_Conv_BoolToString_ReturnValue, uint8 K2Node_Event_WeaponPropSlot, struct FItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_IsValid_ReturnValue10, int32 ___int_Loop_Counter_Variable2, bool CallFunc_IsValid_ReturnValue11, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, struct FVector K2Node_CustomEvent_AxisValue2, FString CallFunc_GetPlatformName_ReturnValue, struct FVector K2Node_InputVectorAxisEvent_AxisValue, bool K2Node_SwitchString_CmpSuccess, FOnEquipWeaponDelegate K2Node_CreateDelegate_OutputDelegate17, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Multiply_FloatFloat_ReturnValue6, float CallFunc_Multiply_FloatFloat_ReturnValue7, float CallFunc_Multiply_FloatFloat_ReturnValue8, float CallFunc_Multiply_FloatFloat_ReturnValue9, float CallFunc_Multiply_FloatFloat_ReturnValue10, float CallFunc_Multiply_FloatFloat_ReturnValue11, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, struct FRotator CallFunc_GetSensibilityRate_ReturnValue2, FString CallFunc_Conv_RotatorToString_ReturnValue, struct FVector K2Node_CustomEvent_AxisValue, FString CallFunc_Concat_StrStr_ReturnValue6, APawn* CallFunc_K2_GetPawn_ReturnValue8, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn7, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsValid_ReturnValue12, bool CallFunc_IsValid_ReturnValue13);
  void GameStart();
  void GetStickLeftSize(struct FVector2D Size, struct FVector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void GrayToOne__FinishedFunc();
  void GrayToOne__UpdateFunc();
  void GrayToZero__FinishedFunc();
  void GrayToZero__UpdateFunc();
  void HandleJumpBtnPressEvent();
  void HandleStartBattle(int32 PlayerNum);
  void InitJoyStickAfterActivation();
  void InitOprate();
  void InitWeather(TArray<AGlobalConfigActor*> CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, AGlobalConfigActor* CallFunc_Array_Get_Item);
  void InpActEvt_NumPadEight_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_NumPadNine_K2Node_InputKeyEvent(struct FKey Key);
  void InpAxisEvt_MoveForward_K2Node_InputAxisEvent(float AxisValue);
  void InpAxisEvt_MoveRight_K2Node_InputAxisEvent(float AxisValue);
  void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(struct FVector AxisValue);
  void IsNeedAdaptation(bool IsNeed, int32 CallFunc_Map_Length_ReturnValue, int32 CallFunc_Map_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_Map_Length_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_GetDeviceName_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Contains_ReturnValue2, struct FUIAdaptationStructure CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, struct FUIAdaptationStructure CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10);
  void JoystickTriggerSprint(bool bIsSprint);
  void Land();
  void MakeFireModeEffect(struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_GetStickLeftSize_size, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetStickLeftSize_size2, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_GetUIElementSetting_FireMode, UBP_SAVEGAME_UIElemLayout_C* CallFunc_GetUIElementSetting_UIElemSaveGame, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail, bool CallFunc_GetLayoutDetailByType_IsFound, int32 CallFunc_GetUIElementSetting_FireMode2, UBP_SAVEGAME_UIElemLayout_C* CallFunc_GetUIElementSetting_UIElemSaveGame2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail2, bool CallFunc_GetLayoutDetailByType_IsFound2);
  void MemberVoice(int32 member, int32 status);
  void MotionControlAndroid(struct FVector AxisValue);
  void MotionControlAndroidTick();
  void MotionControliOS(struct FVector AxisValue);
  void OffPlane();
  void OnFiremodeChange(int32 IntValue);
  void OnLandOnGroundAfterJumpPlaneEnd();
  void OnPlane();
  void OnPlayerPutDownActorHandle(ASTExtraBaseCharacter* TargetPlayer, AActor* TargetActor);
  void OnRep_bInCar();
  void OnSpectatorCameraChange(bool bDie);
  void OnStopFireEventHandle();
  void OnSwitchCameraSatrtHandle(uint8 CameraMode);
  void OnSwitchWeaponHandle();
  void OnUseInventoryitemHandle();
  void OnWeaponEquipAttachment(uint8 WeaponPropSlot, struct FItemDefineID DefineID, bool bEquip);
  void OpenPara();
  void PlayerEnterWater__DelegateSignature();
  void PlayerLeaveWater__DelegateSignature();
  void PressFire(int32 FingerIndex);
  void PressGrenade(bool isThrow);
  void ReadAdaptationTable(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FUIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);
  void ReadConfigAutoAim(bool NewParam, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void ReadConfigCrossHairColor(int32 NewParam, int32 ___int_Variable, struct FLinearColor ___struct_Variable, struct FLinearColor ___struct_Variable2, struct FLinearColor ___struct_Variable3, struct FLinearColor ___struct_Variable4, struct FLinearColor ___struct_Variable5, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, struct FLinearColor K2Node_Select_Default);
  void ReadConfigFromHUD(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, struct FSensibilityMode K2Node_MakeStruct_SensibilityMode, struct FSensibilityMode K2Node_MakeStruct_SensibilityMode2, struct FSensibilityMode K2Node_MakeStruct_SensibilityMode3, struct FSensibilityConfig K2Node_MakeStruct_SensibilityConfig);
  void ReadConfigMotionControl(int32 NewParam, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void ReceiveBackpackComponent();
  void ReceiveBeginPlay();
  void ReceiveClientRestart();
  void ReceiveTick(float DeltaSeconds);
  void RefreshBackPackWeapon(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void RefreshTopMostUIPanel(uint8 Type);
  void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);
  void RefreshWeaponPanel(bool CallFunc_IsValid_ReturnValue);
  void ReloadingCDEnd__DelegateSignature();
  void ReloadingCDStart__DelegateSignature(float CD);
  void RemoveWeaponAim(uint8 Slot);
  void ResetMissingUIUpdate();
  /* SRV */ void ServerAfterLand();
  /* SRV */ void ServerStartBattle();
  void SetDeathGrayLerpValue(float Lerp);
  void SetMotionParam(float GravityX, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, struct FVector CallFunc_GetInputMotionState_Tilt, struct FVector CallFunc_GetInputMotionState_RotationRate, struct FVector CallFunc_GetInputMotionState_Gravity, struct FVector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);
  void SetMoveableAirborne(bool NewParam);
  void SetPanels(TArray<UUAEUserWidget*> panels);
  void SetPostProcessVolume(TArray<AActor*> CallFunc_GetActorsByTag_Targets, int32 CallFunc_Array_Length_ReturnValue, AActor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, APostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);
  void SetTouchInputEnabled(bool bEnabled);
  void ShowAutoSprintBtn(bool visible, struct FVector2D showPos_, bool inside, struct FVector iPhoneXWidgetOffset, struct FVector2D touchPos, bool CallFunc_IsVisible_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Contains_ReturnValue);
  void ShowBackpackIconSplash(bool bShow);
  void ShowBackpackTombBox(bool Show);
  void ShowFightingUI(bool CallFunc_IsValid_ReturnValue);
  void ShowFireBtn(bool bShow);
  void ShowMainBackpackPanel(bool bEnabled, bool CallFunc_IsValid_ReturnValue, UMainBackpackPanel_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void ShowMainInputControl(bool bShow, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsInViewport_ReturnValue);
  void ShowTouchInterface(bool bShow, struct FVector iPhoneXWidgetOffset, struct FVector2D iPhoneXJoystickCenter, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, UBP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSG_UIElemSaveGame, struct FVector2D CallFunc_GetViewportSize_ReturnValue, bool CallFunc_IsValid_ReturnValue2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail, bool CallFunc_GetLayoutDetailByType_IsFound, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, bool CallFunc_IsNeedAdaptation_IsNeed, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_IsNeedAdaptation_IsNeed2, bool CallFunc_IsNeedAdaptation_IsNeed3, struct FVector2D CallFunc_GetJoyStickCenter_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_GetViewportScale_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, struct FVector2D CallFunc_GetViewportSize_ReturnValue2, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue2, float CallFunc_BreakVector2D_X5, float CallFunc_BreakVector2D_Y5, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, float CallFunc_BreakVector2D_X6, float CallFunc_BreakVector2D_Y6, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue4);
  void SwitchAimMode(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void UpdateBackpackPanel(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue);
  void UpdateInputPanel(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void UserConstructionScript();
  void VaultFailDS__DelegateSignature();
};

class ABP_STExtraWheeledVehicle_C: public ASTExtraWheeledVehicle {
  /* offset=0x04f0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x04f4 flags=0x0008001440000204 */ UParticleSystemComponent* PSCExhaust;
  /* offset=0x04f8 flags=0x0008001440000204 */ UBoxComponent* WaterColiBox;
  /* offset=0x04fc flags=0x0008001440000204 */ UExponentialHeightFogComponent* UnderWaterFog;
  /* offset=0x0500 flags=0x0008001440000204 */ UStaticMeshComponent* WaterPlane;
  /* offset=0x0504 flags=0x0008001440000204 */ UCameraComponent* Camera;
  /* offset=0x0508 flags=0x0008001440000204 */ UVehicleSpringArmComponent* VehicleSpringArm;
  /* offset=0x050c flags=0x0008001440000204 */ UParticleSystemComponent* PSCFire;
  /* offset=0x0510 flags=0x0008001440000204 */ UParticleSystemComponent* PSCSmoke;
  /* offset=0x0514 flags=0x0000001040010205 */ bool IsPlayingEngineAk;
  /* offset=0x0518 flags=0x0008001040010205 */ UMaterialInstanceDynamic* DMI;
  /* offset=0x051c flags=0x0008001040000205 */ UMaterialInstance* VehicleMaterial;
  /* offset=0x0520 flags=0x0008001040010205 */ FName TailLightParamName;

  void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void ClientSetWaterBox(bool CanOverlap, bool CallFunc_IsDedicatedServer_ReturnValue);
  void CreateDMI(UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);
  void ExecuteUbergraph_BP_STExtraWheeledVehicle(int32 EntryPoint, ASTExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum ESTExtraVehicleSeatType K2Node_ComponentBoundEvent_SeatType, int32 K2Node_ComponentBoundEvent_SeatIdx, float K2Node_Event_LightValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FVehicleHealthStateChangedDelegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsDedicatedServer_ReturnValue2, float CallFunc_GetEngineRotationSpeed_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void OnClientVehicleHealthStateChanged(enum ESTExtraVehicleHealthState VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsActive_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);
  void OnSetTailLightValue(float LightValue);
  void OnUpdateEffects();
  void ReceiveBeginPlay();
  void UpdateWaterEffect(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, TArray<AWaterSwimObject_C*> CallFunc_GetAllActorsOfClass_OutActors, AActor* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, AWaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, TArray<AActor*> CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_IsVisible_ReturnValue, AActor* CallFunc_Array_Get_Item2, AWaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object2, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_Array_Length_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue);
  void UserConstructionScript();
};

class ABP_ShootWeaponBase_C: public ASTExtraShootWeapon {
  /* offset=0x0560 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0564 flags=0x0008001440000204 */ UCameraComponent* Camera;
  /* offset=0x0568 flags=0x0008001440000204 */ USpringArmComponent* SpringArm;
  /* offset=0x056c flags=0x0008001440000204 */ UWeaponSpecificHandler* WeaponSpecificHandler;
  /* offset=0x0570 flags=0x0008001440000204 */ UArrowComponent* Arrow;
  /* offset=0x0574 flags=0x0008001440000204 */ UBulletHitInfoUploadComponent* BulletHitInfoUpload;
  /* offset=0x0578 flags=0x0008001440000204 */ UStaticMeshComponent* WEP_M16A4_ST;
  /* offset=0x057c flags=0x0008001440000204 */ UCrossHairComponent* Crosshair;
  /* offset=0x0580 flags=0x0008001440000204 */ UShootWeaponEntity* ShootWeaponEntity;
  /* offset=0x0584 flags=0x0008001440000204 */ UWeaponStateDefault* WeaponStateDefault;
  /* offset=0x0588 flags=0x0008001440000204 */ UNoBulletWeaponState* NoBulletWeaponState;
  /* offset=0x058c flags=0x0008001440000204 */ UFireWeaponState* FireWeaponState;
  /* offset=0x0590 flags=0x0008001440000204 */ UReloadWeaponState* ReloadWeaponState;
  /* offset=0x0594 flags=0x0008001440000204 */ UIdleWeaponState* IdleWeaponState;
  /* offset=0x0598 flags=0x0008001440000204 */ UInactiveWeaponState* InactiveWeaponState;
  /* offset=0x059c flags=0x0008001440000204 */ UShootWeaponStateManager* ShootWeaponStateManager;
  /* offset=0x05a0 flags=0x0008001440000204 */ UShootWeaponEffectComponent* ShootWeaponEffect;
  /* offset=0x05a4 flags=0x0008001440000204 */ UBulletTrackComponent* BulletTrack;
  /* offset=0x05a8 flags=0x0008001440000204 */ USTEShootWeaponProjectComponent* STEShootWeaponProject;
  /* offset=0x05ac flags=0x0000001040000205 */ bool bUseIdleAnim;
  /* offset=0x05b0 flags=0x0008001040010205 */ float FOV;
  /* offset=0x05b4 flags=0x0008001040010205 */ UMeshComponent* PalyerMagRef;
  /* offset=0x05b8 flags=0x0008001040010205 */ UMeshComponent* WeaponMagRef;
  /* offset=0x05bc flags=0x0008001040000205 */ float normalShotVoiceDis;
  /* offset=0x05c0 flags=0x0008001040000205 */ float SlienceShotVoiceDis;

  void BP_OnWeaponReloadEnd();
  void BP_OnWeaponReloadStart(FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetReloadTimeFromEntity_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate2, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_FMax_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue2);
  void BP_PawnAttachMesh(UMeshComponent* PlayerMesh, APawn* CallFunc_GetOwnerPawn_ReturnValue, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue);
  void BeginRegReloadEvent(FOnWeaponReloadEndDelegage K2Node_CreateDelegate_OutputDelegate, FOnWeaponReloadStartDelegate K2Node_CreateDelegate_OutputDelegate2);
  void ExecuteUbergraph_BP_ShootWeaponBase(int32 EntryPoint, UMeshComponent* CallFunc_GetChildMeshComp_ReturnValue, UMeshComponent* CallFunc_GetChildMeshComp_ReturnValue2, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  struct FTransform GetMuzzleTransform(struct FTransform CallFunc_K2_GetComponentToWorld_ReturnValue);
  struct FTransform GetRelativeMuzzleTransform(struct FTransform CallFunc_GetRelativeTransform_ReturnValue);
  void OnWeaponMagIn(TArray<UMeshComponent*> CallFunc_GetComponentsByTag_ReturnValue, UMeshComponent* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void OnWeaponMagOut(uint8 CallFunc_GetCurrentFreshWeaponStateType_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UMeshComponent* CallFunc_BP_PawnAttachMesh_PlayerMesh, bool CallFunc_K2_AttachToComponent_ReturnValue);
  void PlayLocalShellDropFX();
  void ReceiveBeginPlay();
  void ResetCamera(UMeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);
  void UserConstructionScript(bool CallFunc_K2_AttachToComponent_ReturnValue);
};

class ABP_StextraBoatBase_C: public ASTExtraFloatingVehicle {
  /* offset=0x0480 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0484 flags=0x0008001440000204 */ UParticleSystemComponent* PSCFire;
  /* offset=0x0488 flags=0x0008001440000204 */ UParticleSystemComponent* PSCSmoke;
  /* offset=0x048c flags=0x0008001440000204 */ UParticleSystemComponent* PS_Water;
  /* offset=0x0490 flags=0x0008001440000204 */ UBoxComponent* WaterColiBox;
  /* offset=0x0494 flags=0x0008001440000204 */ UExponentialHeightFogComponent* UnderWaterFog;
  /* offset=0x0498 flags=0x0008001440000204 */ UStaticMeshComponent* WaterPlane;
  /* offset=0x049c flags=0x0008001440000204 */ UCameraComponent* Camera;
  /* offset=0x04a0 flags=0x0008001440000204 */ UVehicleSpringArmComponent* VehicleSpringArm;

  void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void ClientSetWaterBox(bool CanOverlap, bool CallFunc_IsDedicatedServer_ReturnValue);
  void ExecuteUbergraph_BP_StextraBoatBase(int32 EntryPoint, ASTExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum ESTExtraVehicleSeatType K2Node_ComponentBoundEvent_SeatType, int32 K2Node_ComponentBoundEvent_SeatIdx, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, FVehicleHealthStateChangedDelegate K2Node_CreateDelegate_OutputDelegate);
  void OnClientVehicleHealthStateChanged(enum ESTExtraVehicleHealthState VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsActive_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);
  void OnUpdateEffects();
  void ReceiveBeginPlay();
  void UpdateEffects(float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void UpdateWaterEffect(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, TArray<AWaterSwimObject_C*> CallFunc_GetAllActorsOfClass_OutActors, AActor* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, AWaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, TArray<AActor*> CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_IsVisible_ReturnValue, AActor* CallFunc_Array_Get_Item2, AWaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object2, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_Array_Length_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue);
  void UserConstructionScript();
};

class UBP_SwimController_C: public UActorComponent {
  /* offset=0x00b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00b4 flags=0x0008001040010a05 */ ABP_PlayerPawn_C* PlayerPawn;
  /* offset=0x00b8 flags=0x0008001040010205 */ float NowSwimRoll;
  /* offset=0x00bc flags=0x0008001040010205 */ float NowSwimUpInput;
  /* offset=0x00c0 flags=0x0008001040010205 */ float DeltaTime;
  /* offset=0x00c4 flags=0x0008001040010205 */ float ForwardValue;
  /* offset=0x00c8 flags=0x0008001040010205 */ float RotateSeppd;
  /* offset=0x00cc flags=0x0000001040010205 */ bool isMoving;
  /* offset=0x00d0 flags=0x0008001040010205 */ float SwimCameraHeight;
  /* offset=0x00d4 flags=0x0008001040010a05 */ AWaterSwimObject_C* WaterObject;
  /* offset=0x00d8 flags=0x0008001040010205 */ float WaterHeight;
  /* offset=0x00dc flags=0x0008001040010205 */ float playerHeight;
  /* offset=0x00e0 flags=0x0008001040010205 */ float playerWaterOffset;
  /* offset=0x00e4 flags=0x0008001040010205 */ float CrouchHeight;
  /* offset=0x00e8 flags=0x0008001040010205 */ float StandHeight;
  /* offset=0x00ec flags=0x0008001040010205 */ float SwimHeight;
  /* offset=0x00f0 flags=0x0008001040010205 */ float NowBreathtime;
  /* offset=0x00f4 flags=0x0008001040010205 */ float BreathVauleChangeTime;
  /* offset=0x00f8 flags=0x0008001040010205 */ float OpBreathVauleChangeoffset;
  /* offset=0x00fc flags=0x0008001040010205 */ float BreathVauleChangeoffset;
  /* offset=0x0100 flags=0x0008001040010205 */ float BreathNowRate;
  /* offset=0x0104 flags=0x0000001040010205 */ bool playunderVoice;
  /* offset=0x0108 flags=0x0008001040010205 */ float nowoffset;
  /* offset=0x010c flags=0x0000001040010205 */ bool IsInWater;
  /* offset=0x0110 flags=0x0008001040010205 */ float movespeedScale;
  /* offset=0x0114 flags=0x0008001040010205 */ uint8 WeaponSlot;
  /* offset=0x0115 flags=0x0000001040010205 */ bool NewVar;
  /* offset=0x0118 flags=0x0008001040010205 */ float StateCheckTime;
  /* offset=0x011c flags=0x0008001040010205 */ float rotateX;
  /* offset=0x0120 flags=0x0008001040010205 */ float AITickInterval;
  /* offset=0x0124 flags=0x0008001040010005 */ struct FVector NewVar;
  /* offset=0x0130 flags=0x0000000000010a05 */ TArray<AWaterSwimObject_C*> waterList;
  /* offset=0x013c flags=0x0008001040010205 */ float cameraUpdateTime;

  void AddOutOfBreathBuffOnce();
  void CheckSwimState(float DeltaTime);
  void DSUpdate(float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);
  void EnterNearDeadDear(bool bparam);
  void EnterSwimState(ABP_PlayerPawn_C* PlayerPawn, bool CallFunc_EnterState_ReturnValue, bool CallFunc_IsValid_ReturnValue, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsMainPlayer_result, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue, AController* CallFunc_GetController_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, UCameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, AWaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess4, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult);
  void ExecuteUbergraph_BP_SwimController(int32 EntryPoint, float K2Node_Event_DeltaSeconds, AActor* CallFunc_GetOwner_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, AController* CallFunc_GetController_ReturnValue, int32 CallFunc_AddBuff_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FIsEnterNearDeathDelegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Has_Been_Initd_Variable, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool ___bool_IsClosed_Variable, AWaterSwimObject_C* K2Node_CustomEvent_water, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, TArray<AExponentialHeightFog*> CallFunc_GetAllActorsOfClass_OutActors, AExponentialHeightFog* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue2, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);
  void GetAllWaterList(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<AWaterSwimObject_C*> CallFunc_GetAllActorsOfClass_OutActors, AWaterSwimObject_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void IsInbeingDead(bool Result, struct FAnimParamList CallFunc_GetPlayerAnimParam_ReturnValue);
  void IsMainPlayer(bool Result, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void LeaveSwimState(ABP_PlayerPawn_C* PlayerPawn, bool CallFunc_IsValid_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue2, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2);
  void RecConnected(bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void SetEnterSwim(bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue2, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2);
  void SetLeaveSwim(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);
  void SetSwimStatePostion();
  /* SRV */ void SetWalking();
  /* CL* */ void SetWater(AWaterSwimObject_C* Water);
  void SetWaterUpHeight(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void SwimSprint(bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void SyncWaterObject(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, AWaterSwimObject_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsOverlappingActor_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void UpdateBreath(float CacheBreathAmount, bool CallFunc_LessEqual_FloatFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue4, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue3, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue4, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void UpdateCameraState(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsOnVehicle_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<AExponentialHeightFog*> CallFunc_GetAllActorsOfClass_OutActors, AExponentialHeightFog* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsVisible_ReturnValue2, bool CallFunc_IsOverlappingComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void UpdateHitBox(bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_VSize_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeLocation_SweepHitResult2, bool CallFunc_BooleanAND_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_BooleanAND_ReturnValue2, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2);
  void UpdateMove(float CallFunc_Multiply_FloatFloat_ReturnValue, struct FAnimParamList CallFunc_GetPlayerAnimParam_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Abs_ReturnValue3, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue5, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_IsInbeingDead_result, float CallFunc_FInterpTo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue4);
  void UpdatePlayerState(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_Subtract_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue4, bool CallFunc_IsLocallyControlled_ReturnValue2, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue4, int32 CallFunc_PostEventAtLocation_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, struct FVector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue5, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue6, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_Subtract_FloatFloat_ReturnValue5, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue6, bool CallFunc_IsValid_ReturnValue);
  void UpdateStateCheckClient(ASTExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void UpdateStateCheckDs(ASTExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, APhysicsVolume* CallFunc_GetPhysicsVolume_ReturnValue);
  void UpdateSwimCollisionHeight(bool CallFunc_IsInbeingDead_result);
  void UpdateWaterObject(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, AWaterSwimObject_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsOverlappingComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
};

class UBP_VehicleUser_C: public UVehicleUserComponent {
  /* offset=0x0100 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0104 flags=0x0000001040010205 */ bool AxisMoveForwardFreezed;
  /* offset=0x0105 flags=0x0000001040010205 */ bool AxisMoveRightFreezed;

  void EnterVehicle(bool IsDriver);
  void ExecuteUbergraph_BP_VehicleUser(int32 EntryPoint, enum ESTExtraVehicleSeatType K2Node_Event_SeatType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel2, enum ESTExtraVehicleSeatType K2Node_Event_SeatType, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel3, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool K2Node_SwitchEnum2_CmpSuccess, FVehicleHPChangedDelegate K2Node_CreateDelegate_OutputDelegate, UVehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, UVehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FVehicleFuelChangedDelegate K2Node_CreateDelegate_OutputDelegate2, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel4, float K2Node_Event_RawSpeed, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel5, UVehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, UVehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, ABP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UBasicSkillsMenu_BP_C* CallFunc_GetBasicSkillMenu_VehicleControlPanel, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsSeatAvailable_ReturnValue, bool CallFunc_IsSeatAvailable_ReturnValue2, UBasicSkillsMenu_BP_C* CallFunc_GetBasicSkillMenu_VehicleControlPanel2, bool CallFunc_IsValid_ReturnValue8, FVehicleWheelsHPChangedDelegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_IsValid_ReturnValue9, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess2, UBasicSkillsMenu_BP_C* CallFunc_GetBasicSkillMenu_VehicleControlPanel3, bool CallFunc_IsValid_ReturnValue10, ABP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base, bool K2Node_DynamicCast_bSuccess3, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsValid_ReturnValue11, bool CallFunc_IsValid_ReturnValue12, ABP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base2, bool K2Node_DynamicCast_bSuccess5, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle3, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, ABP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base3, bool K2Node_DynamicCast_bSuccess7, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle4, bool K2Node_DynamicCast_bSuccess8, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_IsValid_ReturnValue16, FUpdateSeatGUIDelegate K2Node_CreateDelegate_OutputDelegate4);
  void ExitVehicle();
  void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);
  void GetBasicSkillMenu(UBasicSkillsMenu_BP_C* VehicleControlPanel, ABP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void GetPlayerController(ABP_STExtraPlayerController_C* PlayerController, AActor* CallFunc_GetOwner_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void GetVehicleControlPanel(UVehileControlPanel_C* VehicleControlPanel, ABP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);
  void OnChangeVehicleSeatCompleted(enum ESTExtraVehicleSeatType SeatType);
  void OnCurrrentClosestVehicleChanged();
  void OnEnterVehicleCompleted(enum ESTExtraVehicleSeatType SeatType);
  void OnExitVehicleCompleted();
  void OnInputAxisMoveForward(float Rate, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel);
  void OnInputAxisMoveRight(float Rate, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel, float CallFunc_FixGoStraight_OutMoveRightRate, bool CallFunc_IsValid_ReturnValue);
  void OnUpdateSeatGUI(UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel, bool CallFunc_IsValid_ReturnValue, UVehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue);
  void OnUpdateVehicleSpeedGUI(float RawSpeed);
  void OnVehicleFuelChanged(float Fuel, float FuelMax, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel);
  void OnVehicleHPChanged(float HP, float HPMax, UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel);
  void OnVehicleWheelsHPChanged(UVehileControlPanel_C* CallFunc_GetVehicleControlPanel_VehicleControlPanel);
  void ReceiveBeginPlay();
  void StopPlayerAutoSprint(ABP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);
};

class UBP_VoiceCheck_C: public UActorComponent {
  /* offset=0x00b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00b4 flags=0x0000000000010205 */ TArray<struct FBP_VoiceCheckData> checkDataList;
  /* offset=0x00c0 flags=0x0000100010010205 */ FShowTrigerVoiceIcon ShowTrigerVoiceIcon;
  /* offset=0x00cc flags=0x0008001040010205 */ UBP_VoiceDataObject_C* playerMoveCheck;
  /* offset=0x00d0 flags=0x0008001040010205 */ UBP_VoiceDataObject_C* VehicleMoveChek;
  /* offset=0x00d4 flags=0x0008001040010205 */ UBP_VoiceDataObject_C* weaponCheck;
  /* offset=0x00d8 flags=0x0000001040010205 */ bool isRainDay;
  /* offset=0x00dc flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* PlayerController;
  /* offset=0x00e0 flags=0x0000000000010205 */ TArray<struct FBP_VoiceCheckWeatherConfig> weatherConfigList;
  /* offset=0x00ec flags=0x0008000000010005 */ struct FBP_VoiceCheckWeatherConfig nowWeatherConfig;
  /* offset=0x00fc flags=0x0008001040010205 */ uint8 nowWeatherType;
  /* offset=0x0100 flags=0x0008001040010205 */ float normalScaleDis;
  /* offset=0x0104 flags=0x0008001040010a05 */ ASTExtraGameStateBase* GameState;
  /* offset=0x0108 flags=0x0008001040010205 */ uint8 WeatherType;

  void ExecuteUbergraph_BP_VoiceCheck(int32 EntryPoint, int32 ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, AActor* CallFunc_GetOwner_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalController_ReturnValue, FOnCharacterCheckVoiceTriggerDelegate K2Node_CreateDelegate_OutputDelegate, uint8 K2Node_CustomEvent_weatherType, bool CallFunc_IsVoiceCheckEnable_result, struct FBP_VoiceCheckWeatherConfig CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, uint8 CallFunc_GetWeatherType_WeatherType);
  void GetCheckData(uint8 checkType, struct FBP_VoiceCheckData Result, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_VoiceCheckData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void GetWeatherType(uint8 WeatherType, UBP_WeatherConfig_C* WeatherConfig, bool CallFunc_IsValid_ReturnValue, TArray<ABP_GlobalConfig_C*> CallFunc_GetAllActorsOfClass_OutActors, ABP_GlobalConfig_C* CallFunc_Array_Get_Item, UBP_WeatherConfig_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void InitCheckMap(UBP_VoiceDataObject_C* nowDataObject, UBP_VoiceDataObject_C* CallFunc_InitCheckObjectByType_NewParam1, UBP_VoiceDataObject_C* CallFunc_InitCheckObjectByType_NewParam12, UBP_VoiceDataObject_C* CallFunc_InitCheckObjectByType_NewParam13);
  void InitCheckObjectByType(uint8 NewParam, UBP_VoiceDataObject_C* NewParam1, uint8 nowType, UBP_VoiceDataObject_C* nowDataObject, struct FBP_VoiceCheckData CallFunc_GetCheckData_Result, UBP_VoiceDataObject_C* CallFunc_SpawnObject_ReturnValue);
  void IsVoiceCheckEnable(bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue3);
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  /* CL* */ void SetAllWeatherType(uint8 WeatherType);
  void ShowTrigerVoiceIcon__DelegateSignature(UBP_VoiceDataSubObject_C* nowSubObject);
  void TrigerVoiceCheck(AActor* nowActor, float checkDis, float realDis, float nowCheckDis, float nowScale, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_IsVoiceCheckEnable_result, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue);
  void UpdateRainDay();
};

class UBP_VoiceDataObject_C: public UObject {
  /* offset=0x0020 flags=0x0008000000010005 */ struct FBP_VoiceCheckData Data;
  /* offset=0x0044 flags=0x0008001040010205 */ float nowdis;
  /* offset=0x0048 flags=0x0008001040010205 */ float nowCheckCd;
  /* offset=0x004c flags=0x0008001040010205 */ uint8 nowType;
  /* offset=0x0050 flags=0x0008001040010205 */ UBP_VoiceCheck_C* VoiceCheck;
  /* offset=0x0054 flags=0x0008001040010205 */ float MaxCheckDis;
  /* offset=0x0058 flags=0x0008001040010205 */ float showTime;
  /* offset=0x005c flags=0x0008001040010205 */ float showScale;
  /* offset=0x0060 flags=0x0000000000010205 */ TArray<UBP_VoiceDataSubObject_C*> subcheckList;
  /* offset=0x006c flags=0x0008001040010205 */ int32 MaxCheckNum;
  /* offset=0x0070 flags=0x0008001040010205 */ float MaxCheckCD;
  /* offset=0x0074 flags=0x0000001040010205 */ bool IsRefresh;
  /* offset=0x0078 flags=0x0008001040010205 */ UBP_VoiceDataSubObject_C* TriggerSubObject;
  /* offset=0x007c flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* PlayerController;

  void InitSubList(UBP_VoiceDataSubObject_C* nowSubObject, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBP_VoiceDataSubObject_C* CallFunc_SpawnObject_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, UBP_VoiceDataSubObject_C* CallFunc_SpawnObject_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);
  void SetCheckData(int32 Index, struct FVector postion, float CheckLength, ASTExtraBaseCharacter* nowPlayer, ASTExtraShootWeapon* nowWeapon, ASTExtraVehicleBase* nowVehicle, float nowScale, UBP_VoiceDataSubObject_C* subObject, APawn* CallFunc_K2_GetPawn_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UBP_VoiceDataSubObject_C* CallFunc_Array_Get_Item);
  void SetSubObjectData(float nowScale, struct FVector nowPos, UBP_VoiceDataSubObject_C* subObject, float MaxCheckLength, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
  void UpdateCheck(float DeltaTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void UpdateCheckPlayeCheck(int32 subIndex, float nowLength, ABP_PlayerPawn_C* nowCharacter, int32 ___int_Array_Index_Variable, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, ASTExtraBaseCharacter* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, UBP_VoiceDataSubObject_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void UpdateChekcVehicleMove(int32 subIndex, int32 ___int_Array_Index_Variable, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, ASTExtraVehicleBase* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, UBP_VoiceDataSubObject_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void UpdateWaeponCheck(ASTExtraShootWeapon* nowWeapon, int32 subIndex, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, ASTExtraShootWeapon* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, UBP_VoiceDataSubObject_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UBP_VoiceDataSubObject_C: public UObject {
  /* offset=0x0020 flags=0x0000001040010205 */ bool isShow;
  /* offset=0x0024 flags=0x0008001040010205 */ float ShowCD;
  /* offset=0x0028 flags=0x0008001040010205 */ uint8 checkType;
  /* offset=0x002c flags=0x0008001040010005 */ struct FVector worldPos;
  /* offset=0x0038 flags=0x0008001040010205 */ float minShowScale;
  /* offset=0x003c flags=0x0008001040010205 */ float maxShowScale;
  /* offset=0x0040 flags=0x0008001040010205 */ float MaxCheckLength;
  /* offset=0x0044 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* nowPlayer;
  /* offset=0x0048 flags=0x0008001040010a05 */ ASTExtraShootWeapon* noweapon;
  /* offset=0x004c flags=0x0008001040010a05 */ ASTExtraVehicleBase* Vehicle;
};

class UBP_VoiceUIObject_C: public UObject {
  /* offset=0x0020 flags=0x0008001040010205 */ uint8 ShowType;
  /* offset=0x0024 flags=0x0008001040010205 */ float ShowTimeLeave;
  /* offset=0x0028 flags=0x0008001040010005 */ struct FVector worldPos;
  /* offset=0x0034 flags=0x0008001040010205 */ int32 nowIndex;
  /* offset=0x0038 flags=0x0008001040010205 */ float minScale;
  /* offset=0x003c flags=0x0008001040010205 */ float MaxScale;
  /* offset=0x0040 flags=0x0008001040010205 */ float MaxCheckLength;
  /* offset=0x0044 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* nowPlayer;
  /* offset=0x0048 flags=0x0008001040010a05 */ ASTExtraShootWeapon* Weapon;
  /* offset=0x004c flags=0x0008001040010a05 */ ASTExtraVehicleBase* Vehicle;
  /* offset=0x0050 flags=0x0008001040010205 */ float nowshowScale;
  /* offset=0x0054 flags=0x0008001040010205 */ UImage* middleImage;
  /* offset=0x0058 flags=0x0008001040010205 */ int32 nowZorder;
  /* offset=0x005c flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* PlayerController;
  /* offset=0x0060 flags=0x0008001040010205 */ float normalScaleDis;
  /* offset=0x0064 flags=0x0008001040010205 */ float MinScaleIDs;

  void GetNowOwnPlayer(ASTExtraBaseCharacter* Player, APawn* CallFunc_GetOwnerPawn_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void GetPosIndex(int32 Index, float NewLocalVar, int32 nowAngle, APawn* CallFunc_K2_GetPawn_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FVector CallFunc_Normal_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MakeVector_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, struct FVector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue2);
  void HideAll(bool CallFunc_IsVisible_ReturnValue);
  void UpdateState(float detaTime, bool isShow, float nowScale, bool isNowShow, bool CallFunc_IsValid_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int32 CallFunc_GetPosIndex_Index, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
};

class UBP_WeatherConfig_C: public UWeatherConfigComponent {
  /* offset=0x00e0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00e4 flags=0x0000001040010205 */ bool bLoadedWeatherConfig;

  void AddWeatherLevelInfo(uint8 WeatherType, FString LevelName, int32 Weight, struct FWeatherLevelInfo K2Node_MakeStruct_WeatherLevelInfo, bool CallFunc_NotEqual_StrStr_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void BlueprintLoadStreamLevel();
  void BlueprintUnloadStreamLevel();
  void DelaySyncWeatherLevelInfo();
  void ExecuteUbergraph_BP_WeatherConfig(int32 EntryPoint, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue2);
  void IsMatchLevelName(FString LevelName, bool bMatch, FString CallFunc_GetCurrentLevelName_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue);
  void LoadWeatherConfig();
  void LoadWeatherConfigOnce(FGameModeDelegate K2Node_CreateDelegate_OutputDelegate, AActor* CallFunc_GetOwner_ReturnValue, FOnEnterBornIsland K2Node_CreateDelegate_OutputDelegate2, AGameModeBase* CallFunc_GetGameMode_ReturnValue, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, ABattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, struct FWeatherLevelInfo CallFunc_GetWeatherLevelInfo_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, AActor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue);
  void LoadWeatherLevelInfos(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Map_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsMatchLevelName_bMatch);
  void ReceiveBeginPlay();
  void SetWeatherLevelInfos(struct FBP_STRUCT_Map_type config, FString LevelName);
};

class ABP_radiation_C: public ARadiationCircle {
  /* offset=0x02d0 flags=0x0008001440000204 */ UStaticMeshComponent* Cylinder_Base;
  /* offset=0x02d4 flags=0x0008001440000204 */ UStaticMeshComponent* Cylinder;
  /* offset=0x02d8 flags=0x0008001440000204 */ USceneComponent* Scene;

  void UserConstructionScript(float OriginalRadius);
};

class UBTAuxiliaryNode: public UBTNode {
};

class UBTCompositeNode: public UBTNode {
  /* offset=0x003c flags=0x0010000000000200 */ TArray<struct FBTCompositeChild> Children;
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<UBTService*> Services;
};

class UBTComposite_Selector: public UBTCompositeNode {
};

class UBTComposite_Sequence: public UBTCompositeNode {
};

class UBTComposite_SimpleParallel: public UBTCompositeNode {
  /* offset=0x00a3 flags=0x0018001040000a01 */ uint8 FinishMode;
};

class UBTDecorator: public UBTAuxiliaryNode {
  /* offset=0x003c flags=0x0048001000000001 */ uint8 bInverseCondition:1;
  /* offset=0x003d flags=0x0028081040000201 */ uint8 FlowAbortMode;
};

class UBTDecorator_Blackboard: public UBTDecorator_BlackboardBase {
  /* offset=0x0060 flags=0x0028081040000201 */ int32 IntValue;
  /* offset=0x0064 flags=0x0028081040000201 */ float FloatValue;
  /* offset=0x0068 flags=0x0028080000000201 */ FString StringValue;
  /* offset=0x0074 flags=0x0028080000000200 */ FString CachedDescription;
  /* offset=0x0080 flags=0x0028081040000200 */ uint8 operationType;
  /* offset=0x0081 flags=0x0028081040000201 */ uint8 NotifyObserver;
};

class UBTDecorator_BlackboardBase: public UBTDecorator {
  /* offset=0x0040 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKey;
};

class UBTDecorator_BlueprintBase: public UBTDecorator {
  /* offset=0x0040 flags=0x0028081040002200 */ AAIController* AIOwner;
  /* offset=0x0044 flags=0x0028081040002200 */ AActor* ActorOwner;
  /* offset=0x0048 flags=0x0020080000000200 */ TArray<FName> ObservedKeyNames;
  /* offset=0x0060 flags=0x0028081000000801 */ uint8 bShowPropertyDetails:1;
  /* offset=0x0060 flags=0x00280c1000010001 */ uint8 bCheckConditionOnlyBlackBoardChanges:1;
  /* offset=0x0060 flags=0x0028081000000000 */ uint8 bIsObservingBB:1;

  bool IsDecoratorExecutionActive();
  bool IsDecoratorObserverActive();
  bool PerformConditionCheck(AActor* OwnerActor);
  bool PerformConditionCheckAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveExecutionFinish(AActor* OwnerActor, uint8 NodeResult);
  void ReceiveExecutionFinishAI(AAIController* OwnerController, APawn* ControlledPawn, uint8 NodeResult);
  void ReceiveExecutionStart(AActor* OwnerActor);
  void ReceiveExecutionStartAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveObserverActivated(AActor* OwnerActor);
  void ReceiveObserverActivatedAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveObserverDeactivated(AActor* OwnerActor);
  void ReceiveObserverDeactivatedAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveTick(AActor* OwnerActor, float DeltaSeconds);
  void ReceiveTickAI(AAIController* OwnerController, APawn* ControlledPawn, float DeltaSeconds);
};

class UBTDecorator_CheckGameplayTagsOnActor: public UBTDecorator {
  /* offset=0x0040 flags=0x0020080000000001 */ struct FBlackboardKeySelector ActorToCheck;
  /* offset=0x0060 flags=0x0028081040000201 */ enum EGameplayContainerMatchType TagsToMatch;
  /* offset=0x0064 flags=0x0020080000000001 */ struct FGameplayTagContainer GameplayTags;
  /* offset=0x007c flags=0x0028080000000200 */ FString CachedDescription;
};

class UBTDecorator_CompareBBEntries: public UBTDecorator {
  /* offset=0x003e flags=0x0028081040000201 */ uint8 Operator;
  /* offset=0x0040 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKeyA;
  /* offset=0x0060 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKeyB;
};

class UBTDecorator_ConditionalLoop: public UBTDecorator_Blackboard {
};

class UBTDecorator_ConeCheck: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ float ConeHalfAngle;
  /* offset=0x0048 flags=0x0010000000000001 */ struct FBlackboardKeySelector ConeOrigin;
  /* offset=0x0068 flags=0x0010000000000001 */ struct FBlackboardKeySelector ConeDirection;
  /* offset=0x0088 flags=0x0010000000000001 */ struct FBlackboardKeySelector Observed;
};

class UBTDecorator_Cooldown: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ float CoolDownTime;
};

class UBTDecorator_DoesPathExist: public UBTDecorator {
  /* offset=0x0040 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKeyA;
  /* offset=0x0060 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKeyB;
  /* offset=0x0080 flags=0x0018001000000000 */ uint8 bUseSelf:1;
  /* offset=0x0081 flags=0x0018001040000201 */ uint8 PathQueryType;
  /* offset=0x0084 flags=0x001c001040000201 */ UClass<UNavigationQueryFilter>* FilterClass;
};

class UBTDecorator_ForceSuccess: public UBTDecorator {
};

class UBTDecorator_IsAtLocation: public UBTDecorator_BlackboardBase {
  /* offset=0x0060 flags=0x0018001040000201 */ float AcceptableRadius;
  /* offset=0x0068 flags=0x0010008000000001 */ struct FAIDataProviderFloatValue ParametrizedAcceptableRadius;
  /* offset=0x0088 flags=0x0018001040000201 */ enum FAIDistanceType GeometricDistanceType;
  /* offset=0x0089 flags=0x0018001000000000 */ uint8 bUseParametrizedRadius:1;
  /* offset=0x0089 flags=0x0018001000000001 */ uint8 bUseNavAgentGoalLocation:1;
  /* offset=0x0089 flags=0x0018001000000001 */ uint8 bPathFindingBasedTest:1;
};

class UBTDecorator_IsBBEntryOfClass: public UBTDecorator_BlackboardBase {
  /* offset=0x0060 flags=0x002c081040000201 */ UClass<UObject>* TestClass;
};

class UBTDecorator_KeepInCone: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ float ConeHalfAngle;
  /* offset=0x0048 flags=0x0010000000000001 */ struct FBlackboardKeySelector ConeOrigin;
  /* offset=0x0068 flags=0x0010000000000001 */ struct FBlackboardKeySelector Observed;
  /* offset=0x0088 flags=0x0018001000000000 */ uint8 bUseSelfAsOrigin:1;
  /* offset=0x0088 flags=0x0018001000000000 */ uint8 bUseSelfAsObserved:1;
};

class UBTDecorator_Loop: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ int32 NumLoops;
  /* offset=0x0044 flags=0x0018001040000201 */ bool bInfiniteLoop;
  /* offset=0x0048 flags=0x0018001040000201 */ float InfiniteLoopTimeoutTime;
};

class UBTDecorator_ReachedMoveGoal: public UBTDecorator {
};

class UBTDecorator_SatisfyAttkDist: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ float AttackDist;
};

class UBTDecorator_SetTagCooldown: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001000000001 */ struct FGameplayTag CooldownTag;
  /* offset=0x0048 flags=0x0018001040000201 */ float CooldownDuration;
  /* offset=0x004c flags=0x0018001040000201 */ bool bAddToExistingDuration;
};

class UBTDecorator_TagCooldown: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001000000001 */ struct FGameplayTag CooldownTag;
  /* offset=0x0048 flags=0x0018001040000201 */ float CooldownDuration;
  /* offset=0x004c flags=0x0018001040000201 */ bool bAddToExistingDuration;
  /* offset=0x004d flags=0x0018001040000201 */ bool bActivatesCooldown;
};

class UBTDecorator_TimeLimit: public UBTDecorator {
  /* offset=0x0040 flags=0x0018001040000201 */ float TimeLimit;
};

class UBTFunctionLibrary: public UBlueprintFunctionLibrary {
  void ClearBlackboardValue(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  void ClearBlackboardValueAsVector(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  AActor* GetBlackboardValueAsActor(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  bool GetBlackboardValueAsBool(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  UClass<UObject>* GetBlackboardValueAsClass(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  uint8 GetBlackboardValueAsEnum(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  float GetBlackboardValueAsFloat(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  int32 GetBlackboardValueAsInt(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  FName GetBlackboardValueAsName(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  UObject* GetBlackboardValueAsObject(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  struct FRotator GetBlackboardValueAsRotator(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  FString GetBlackboardValueAsString(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  struct FVector GetBlackboardValueAsVector(UBTNode* NodeOwner, struct FBlackboardKeySelector Key);
  UBehaviorTreeComponent* GetOwnerComponent(UBTNode* NodeOwner);
  UBlackboardComponent* GetOwnersBlackboard(UBTNode* NodeOwner);
  void SetBlackboardValueAsBool(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, bool Value);
  void SetBlackboardValueAsClass(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, UClass<UObject>* Value);
  void SetBlackboardValueAsEnum(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, uint8 Value);
  void SetBlackboardValueAsFloat(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, float Value);
  void SetBlackboardValueAsInt(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, int32 Value);
  void SetBlackboardValueAsName(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, FName Value);
  void SetBlackboardValueAsObject(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, UObject* Value);
  void SetBlackboardValueAsRotator(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, struct FRotator Value);
  void SetBlackboardValueAsString(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, FString Value);
  void SetBlackboardValueAsVector(UBTNode* NodeOwner, struct FBlackboardKeySelector Key, struct FVector Value);
  void StartUsingExternalEvent(UBTNode* NodeOwner, AActor* OwningActor);
  void StopUsingExternalEvent(UBTNode* NodeOwner);
};

class UBTNode: public UObject {
  /* offset=0x0020 flags=0x0018000000000201 */ FString NodeName;
  /* offset=0x002c flags=0x0048001040000200 */ UBehaviorTree* TreeAsset;
  /* offset=0x0030 flags=0x0048001040000200 */ UBTCompositeNode* ParentNode;
};

class UBTService: public UBTAuxiliaryNode {
  /* offset=0x003c flags=0x0028081040000201 */ float Interval;
  /* offset=0x0040 flags=0x0028081040000201 */ float RandomDeviation;
  /* offset=0x0044 flags=0x00280c1000000001 */ uint8 bCallTickOnSearchStart:1;
  /* offset=0x0044 flags=0x00280c1000000001 */ uint8 bRestartTimerOnEachActivation:1;
};

class UBTService_BlackboardBase: public UBTService {
  /* offset=0x0048 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKey;
};

class UBTService_BlueprintBase: public UBTService {
  /* offset=0x0048 flags=0x0028081040002200 */ AAIController* AIOwner;
  /* offset=0x004c flags=0x0028081040002200 */ AActor* ActorOwner;
  /* offset=0x005c flags=0x0028081000000801 */ uint8 bShowPropertyDetails:1;
  /* offset=0x005c flags=0x0028081000000801 */ uint8 bShowEventDetails:1;

  bool IsServiceActive();
  void ReceiveActivation(AActor* OwnerActor);
  void ReceiveActivationAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveDeactivation(AActor* OwnerActor);
  void ReceiveDeactivationAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveSearchStart(AActor* OwnerActor);
  void ReceiveSearchStartAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveTick(AActor* OwnerActor, float DeltaSeconds);
  void ReceiveTickAI(AAIController* OwnerController, APawn* ControlledPawn, float DeltaSeconds);
};

class UBTService_Cruising: public UBTService {
  /* offset=0x0048 flags=0x0018001040000201 */ float CheckNoPlayerRadiusSquare;
  /* offset=0x004c flags=0x0010000000000201 */ TArray<struct FAIEquipSpawnGroup> RandomSpawnEquipGroupSet;
};

class UBTService_DefaultFocus: public UBTService_BlackboardBase {
  /* offset=0x0068 flags=0x0028081040000200 */ uint8 FocusPriority;
};

class UBTService_RunEQS: public UBTService_BlackboardBase {
  /* offset=0x0068 flags=0x0020080000000001 */ struct FEQSParametrizedQueryExecutionRequest EQSRequest;
};

class UBTService_SensedEnemy: public UBTService {
  /* offset=0x0048 flags=0x0018001040000201 */ float SensedRadius;
  /* offset=0x004c flags=0x0018001040000201 */ float EquipWeaponSensedRadius;
};

class UBTService_Shooting: public UBTService {
  /* offset=0x0048 flags=0x0018001040000201 */ float BulletRandomRadius;
  /* offset=0x004c flags=0x0018001040000201 */ float DeviationScale;
};

class UBTTaskNode: public UBTNode {
  /* offset=0x003c flags=0x0010000000000200 */ TArray<UBTService*> Services;
  /* offset=0x0048 flags=0x0028081000000001 */ uint8 bIgnoreRestartSelf:1;
};

class UBTTaskNode_EquipItemDirectly: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ float CheckNoPlayerRadiusSquare;
  /* offset=0x0050 flags=0x0010000000000201 */ TArray<struct FAIEquipSpawnGroup> RandomSpawnEquipGroupSet;
};

class UBTTaskNode_EquipOrUnWeapon: public UBTTaskNode {
  /* offset=0x0049 flags=0x0018001040000201 */ bool Equip;
  /* offset=0x004a flags=0x0018001040000201 */ bool FailedWhenEquipSuccess;
};

class UBTTaskNode_FindPosByTarget: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0018001040000201 */ float SearchRadius;
  /* offset=0x0074 flags=0x0018001040000201 */ bool bUseNav;
};

class UBTTaskNode_ForceSuccess: public UBTTaskNode {
};

class UBTTaskNode_MeleeAttack: public UBTTaskNode {
};

class UBTTaskNode_NewParachuteJump: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ float RandomStartJumpTime;
  /* offset=0x0050 flags=0x0018001040000201 */ float RandomEndJumpTime;
  /* offset=0x0054 flags=0x0018001040000201 */ float JumpRadius;
  /* offset=0x0058 flags=0x0018001040000201 */ float JumpHeight;
  /* offset=0x005c flags=0x0018001040000201 */ float RandomAccelerateStart;
  /* offset=0x0060 flags=0x0018001040000201 */ float RandomAccelerateEnd;
  /* offset=0x0064 flags=0x0018001040000201 */ float OpenParachuteHeight;
  /* offset=0x0068 flags=0x0018001040000201 */ float CheckOpenParachuteFreq;
  /* offset=0x006c flags=0x0018001040000201 */ float CloseParachuteHeight;
  /* offset=0x0070 flags=0x0018001040000201 */ float CheckCloseParachuteFreq;
};

class UBTTaskNode_ParachuteJump: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ float TimeLimit;
  /* offset=0x0050 flags=0x0018001040000201 */ float RandomRadius;
  /* offset=0x0054 flags=0x0018001040000201 */ float JumpStartTime;
  /* offset=0x0058 flags=0x0018001040000201 */ float JumpEndTime;
};

class UBTTaskNode_StopShooting: public UBTTaskNode {
};

class UBTTask_BlackboardBase: public UBTTaskNode {
  /* offset=0x0050 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKey;
};

class UBTTask_BlueprintBase: public UBTTaskNode {
  /* offset=0x004c flags=0x0028081040002200 */ AAIController* AIOwner;
  /* offset=0x0050 flags=0x0028081040002200 */ AActor* ActorOwner;
  /* offset=0x0064 flags=0x0028081000000801 */ uint8 bShowPropertyDetails:1;

  void FinishAbort();
  void FinishExecute(bool bSuccess);
  bool IsTaskAborting();
  bool IsTaskExecuting();
  void ReceiveAbort(AActor* OwnerActor);
  void ReceiveAbortAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveExecute(AActor* OwnerActor);
  void ReceiveExecuteAI(AAIController* OwnerController, APawn* ControlledPawn);
  void ReceiveTick(AActor* OwnerActor, float DeltaSeconds);
  void ReceiveTickAI(AAIController* OwnerController, APawn* ControlledPawn, float DeltaSeconds);
  void SetFinishOnMessage(FName MessageName);
  void SetFinishOnMessageWithId(FName MessageName, int32 RequestID);
};

class UBTTask_FindAndPickItem: public UBTTask_MagicMove {
};

class UBTTask_FindAndPickupEquip: public UBTTask_MoveTo {
};

class UBTTask_GameplayTaskBase: public UBTTaskNode {
  /* offset=0x0049 flags=0x00280c1000000001 */ uint8 bWaitForGameplayTask:1;
};

class UBTTask_MagicMove: public UBTTask_MoveTo {
  /* offset=0x0080 flags=0x0018001040000201 */ float AcceptRadius;
  /* offset=0x0084 flags=0x0018001040000201 */ float GenerateNavRadius;
  /* offset=0x0088 flags=0x0018001040000201 */ float TimeLimit;
  /* offset=0x008c flags=0x0018001040000201 */ bool ForceSuccess;
  /* offset=0x008d flags=0x0018001040000201 */ bool MoveWithOutPathFinding;
};

class UBTTask_MakeNoise: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ float Loudnes;
};

class UBTTask_ModifyBlackboardData: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0018001040000201 */ enum EModifyBlackboardDataValueType ValueType;
  /* offset=0x0074 flags=0x0018000000000201 */ FString SetValue;
};

class UBTTask_MoveDirectlyToward: public UBTTask_MoveTo {
  /* offset=0x007e flags=0x0018001000000000 */ uint8 bDisablePathUpdateOnGoalLocationChange:1;
  /* offset=0x007e flags=0x0018001000000000 */ uint8 bProjectVectorGoalToNavigation:1;
  /* offset=0x007e flags=0x0048001000000000 */ uint8 bUpdatedDeprecatedProperties:1;
};

class UBTTask_MoveTo: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0018001040004201 */ float AcceptableRadius;
  /* offset=0x0074 flags=0x001c001040000201 */ UClass<UNavigationQueryFilter>* FilterClass;
  /* offset=0x0078 flags=0x0018041040000201 */ float ObservedBlackboardValueTolerance;
  /* offset=0x007c flags=0x0018001000000000 */ uint8 bObserveBlackboardValue:1;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bAllowStrafe:1;
  /* offset=0x007c flags=0x0018041000000001 */ uint8 bAllowPartialPath:1;
  /* offset=0x007c flags=0x0018041000000001 */ uint8 bTrackMovingGoal:1;
  /* offset=0x007c flags=0x0018041000000001 */ uint8 bProjectGoalLocation:1;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bReachTestIncludesAgentRadius:1;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bReachTestIncludesGoalRadius:1;
  /* offset=0x007c flags=0x0018001000020801 */ uint8 bStopOnOverlap:1;
  /* offset=0x007d flags=0x0018001000000000 */ uint8 bStopOnOverlapNeedsUpdate:1;
};

class UBTTask_MoveToSafeArea: public UBTTask_MagicMove {
  /* offset=0x0090 flags=0x0018001040000201 */ float RadiusScale;
  /* offset=0x0094 flags=0x0018001040000201 */ float NoCirlceRadius;
};

class UBTTask_PawnActionBase: public UBTTaskNode {
};

class UBTTask_PlayAnimation: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ UAnimationAsset* AnimationToPlay;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bLooping:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bNonBlocking:1;
  /* offset=0x0054 flags=0x0018001040080208 */ UBehaviorTreeComponent* MyOwnerComp;
  /* offset=0x0058 flags=0x0018001040080208 */ USkeletalMeshComponent* CachedSkelMesh;
};

class UBTTask_PlaySound: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ USoundCue* SoundToPlay;
};

class UBTTask_PushPawnAction: public UBTTask_PawnActionBase {
  /* offset=0x004c flags=0x002a081040080209 */ UPawnAction* Action;
};

class UBTTask_RotateToFaceBBEntry: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0028081040004201 */ float Precision;
};

class UBTTask_RunBehavior: public UBTTaskNode {
  /* offset=0x004c flags=0x0028081040000201 */ UBehaviorTree* BehaviorAsset;
};

class UBTTask_RunBehaviorDynamic: public UBTTaskNode {
  /* offset=0x0050 flags=0x0028081000000001 */ struct FGameplayTag InjectionTag;
  /* offset=0x0058 flags=0x0028081040000201 */ UBehaviorTree* DefaultBehaviorAsset;
  /* offset=0x005c flags=0x0028081040000200 */ UBehaviorTree* BehaviorAsset;
};

class UBTTask_RunEQSQuery: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0018001040020201 */ UEnvQuery* QueryTemplate;
  /* offset=0x0074 flags=0x0010000000020201 */ TArray<struct FEnvNamedValue> QueryParams;
  /* offset=0x0080 flags=0x0010000000020201 */ TArray<struct FAIDynamicParam> QueryConfig;
  /* offset=0x008c flags=0x0018001040020201 */ uint8 RunMode;
  /* offset=0x0090 flags=0x0010000000020001 */ struct FBlackboardKeySelector EQSQueryBlackboardKey;
  /* offset=0x00b0 flags=0x0018001040000201 */ bool bUseBBKey;
  /* offset=0x00b8 flags=0x0010000000000001 */ struct FEQSParametrizedQueryExecutionRequest EQSRequest;
};

class UBTTask_SetTagCooldown: public UBTTaskNode {
  /* offset=0x0050 flags=0x0018001000000001 */ struct FGameplayTag CooldownTag;
  /* offset=0x0058 flags=0x0018001040000201 */ bool bAddToExistingDuration;
  /* offset=0x005c flags=0x0018001040000201 */ float CooldownDuration;
};

class UBTTask_TeleportToSpecLoc: public UBTTask_BlackboardBase {
  /* offset=0x0070 flags=0x0018001040000201 */ float RangeMin;
  /* offset=0x0074 flags=0x0018001040000201 */ float RangeMax;
  /* offset=0x0078 flags=0x0018001040000201 */ bool OnlyTeleportToLand;
  /* offset=0x007c flags=0x0018001040000201 */ float OriginCheckSquare;
  /* offset=0x0080 flags=0x0018001040000201 */ float DestCheckSquare;
  /* offset=0x0084 flags=0x0018001040000201 */ float TraceHeight;
  /* offset=0x0088 flags=0x0018001040000201 */ bool bForceSuccess;
};

class UBTTask_Wait: public UBTTaskNode {
  /* offset=0x004c flags=0x0018001040000201 */ float WaitTime;
  /* offset=0x0050 flags=0x0018001040000201 */ float RandomDeviation;
};

class UBTTask_WaitBlackboardTime: public UBTTask_Wait {
  /* offset=0x0058 flags=0x0020080000000001 */ struct FBlackboardKeySelector BlackboardKey;
};

class UBackPackArmorSlot_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Shield;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_EquipIcon;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image_EquipIconSlotBG;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Damage;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x01cc flags=0x000a0010c008020c */ UTextBlock* TextBlock_ShieldNum;
  /* offset=0x01d0 flags=0x0008001040000205 */ uint8 ClothArmorType;
  /* offset=0x01d8 flags=0x0000000000010005 */ struct FBattleItemData ItemData;
  /* offset=0x0258 flags=0x0000001040010205 */ bool IsDataNull;
  /* offset=0x025c flags=0x0008001040010205 */ float TimeRecorder;
  /* offset=0x0260 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x026c flags=0x0000100010010205 */ FItemBeDragCancelled ItemBeDragCancelled;
  /* offset=0x0278 flags=0x0000001040010205 */ bool IsDetectDrag;

  void Construct();
  void ExecuteUbergraph_BackPackArmorSlot_BP(int32 EntryPoint, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Add_FloatFloat_ReturnValue, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation);
  void GetArmorHP(int32 CrtHP, int32 MaxHP, int32 ArmorMaxHP, int32 ArmorCrtHP, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UBattleItemHandle_AvatarBP_C* CallFunc_GetVolAvatarConfigByResID_config, bool CallFunc_BooleanAND_ReturnValue, struct FBattleItemAdditionalData CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_NameName_ReturnValue, int32 CallFunc_FTrunc_ReturnValue);
  FText GetDefaultImage(bool K2Node_SwitchEnum_CmpSuccess);
  FText GetNameByClothArmorType(bool K2Node_SwitchEnum_CmpSuccess);
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrigin);
  void ItemBeDragCancelled__DelegateSignature();
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue2, struct FEventReply CallFunc_CaptureMouse_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue2, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);
  void SetArmorHP(int32 HPCrt, int32 HPMax, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void SetArmorName(bool ShowDefault, FText CallFunc_GetDefaultImage_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UPaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);
  void Show(struct FBattleItemData ItemData, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, struct FSlateBrush K2Node_MakeStruct_SlateBrush);
  void ShowArmor(int32 ArmorHP_Max, int32 ArmorHP_Crt, int32 CallFunc_GetArmorHP_CrtHP, int32 CallFunc_GetArmorHP_MaxHP, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void ShowNull();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
};

class UBackPackBigItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCheckBox* CheckBox_BatchSelection;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_ItemBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0240 flags=0x000a0010c008020c */ UMultiLineEditableText* ItemContent1;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* ItemContent2;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemNum;
  /* offset=0x0250 flags=0x0000000000010005 */ struct FBattleItemData ItemDataStructure;
  /* offset=0x02d0 flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x02d4 flags=0x0000100010010205 */ FItemBeClicked ItemBeClicked;
  /* offset=0x02e0 flags=0x0000001040010205 */ bool IsSelected;

  void BndEvt__Button_ClickItem_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void ChangeState(bool IsSelect);
  void ExecuteUbergraph_BackPackBigItem_BP(int32 EntryPoint, bool CallFunc_Not_PreBool_ReturnValue);
  enum ECheckBoxState Get_CheckBox_BatchSelection_CheckedState();
  void InitData(struct FBattleItemData ItemData, int32 Count, FText CallFunc_Conv_IntToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ItemBeClicked__DelegateSignature(struct FBattleItemData MyData, bool IsSelected);
};

class UBackPackClothSlot_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_ClothingItemIcon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_ClothingSlotBG;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Damage;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x01c8 flags=0x0008001040000205 */ uint8 ClothArmorType;
  /* offset=0x01d0 flags=0x0000000000010005 */ struct FBattleItemData ItemData;
  /* offset=0x0250 flags=0x0000001040010205 */ bool IsDataNull;
  /* offset=0x0254 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x0260 flags=0x0000100010010205 */ FItemBeDragCancelled ItemBeDragCancelled;
  /* offset=0x026c flags=0x0000001040010205 */ bool IsDetectDrag;

  void Construct();
  void ExecuteUbergraph_BackPackClothSlot_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation);
  FText GetNameByClothArmorType(bool K2Node_SwitchEnum_CmpSuccess);
  void GetSmallIcon(int32 ItemID, bool IsFound, FString ItemSmallIcon, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrigin);
  void ItemBeDragCancelled__DelegateSignature();
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue2, struct FEventReply CallFunc_CaptureMouse_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue2, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);
  void Show(struct FBattleItemData ItemData, struct FVector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_GetSmallIcon_IsFound, FString CallFunc_GetSmallIcon_ItemSmallIcon, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, struct FSlateBrush K2Node_MakeStruct_SlateBrush);
  void ShowNull(FText CallFunc_getImageByType_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UPaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);
  FText getImageByType(bool K2Node_SwitchEnum_CmpSuccess);
};

class UBackPackDragDropOpt_BP_C: public UDragDropOperation {
  /* offset=0x0060 flags=0x0001000000000005 */ struct FBattleItemData ItemData;
  /* offset=0x00e0 flags=0x0009001040000205 */ uint8 ItemFrom;
};

class UBackPackDragWidget_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* Image;

  void SetPic(struct FSlateBrush InBrush);
};

class UBackPackFunctionLibrary_BP_C: public UBlueprintFunctionLibrary {
  void GetBattleItemByDefineID(struct FItemDefineID DefineID, UUserWidget* Widget, UObject* __WorldContext, struct FBattleItemData BattleItemData, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, int32 ___int_Array_Index_Variable, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetAllItemsInBackpack_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsSameInstance_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void GetVolAvatarConfigByResID(int32 resID, UObject* Outer, UObject* __WorldContext, UBattleItemHandle_AvatarBP_C* config, UUAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBattleItemHandle_AvatarBP_C>* K2Node_ClassDynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_ClassDynamicCast_bSuccess, UBattleItemHandle_AvatarBP_C* CallFunc_SpawnObject_ReturnValue);
  void GetWeaponAttachConfigByResID(int32 resID, UObject* Outer, UObject* __WorldContext, struct FWeaponAttachmentConfig config, UUAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBackpackWeaponAttachHandle>* K2Node_ClassDynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_ClassDynamicCast_bSuccess, UBackpackWeaponAttachHandle* CallFunc_SpawnObject_ReturnValue);
  void GetWeaponAttachPosByResID(int32 resID, UUAEUserWidget* Widget, UObject* __WorldContext, enum EWeaponAttachmentSocketType socket, ASTExtraPlayerController* CallFunc_GetOwningPlayerNoDefault_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket);
  void GetWeaponHandleByBPID(int32 BPID, UObject* Outer, UObject* __WorldContext, UBattleItemHandle_MainWeapon_C* Handle, UUAELoadedClassManager* CallFunc_Get_ReturnValue, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBattleItemHandle_MainWeapon_C>* K2Node_ClassDynamicCast_AsBattle_Item_Handle_Main_Weapon, bool K2Node_ClassDynamicCast_bSuccess, UBattleItemHandle_MainWeapon_C* CallFunc_SpawnObject_ReturnValue);
  void GetWeaponHandleByResID(int32 resID, UObject* Outer, UObject* __WorldContext, UBattleItemHandle_MainWeapon_C* Handle, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UBattleItemHandle_MainWeapon_C* CallFunc_GetWeaponHandleByBPID_handle);
  void GetWeaponSupportAttachResID(int32 WeaponID, UUAEUserWidget* Widget, UObject* __WorldContext, TArray<int32> attachID, ASTExtraPlayerController* CallFunc_GetOwningPlayerNoDefault_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, TArray<int32> CallFunc_GetWeaponSupportAttachResID_attachID);
  void GetWeaponSupportSocket(int32 WeaponID, UUAEUserWidget* Widget, UObject* __WorldContext, TArray<enum EWeaponAttachmentSocketType> socketList, ASTExtraPlayerController* CallFunc_GetOwningPlayerNoDefault_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, TArray<enum EWeaponAttachmentSocketType> CallFunc_GetWeaponSupportSocket_socketList);
  void IsAttach(struct FItemDefineID DefineID, UObject* __WorldContext, bool IsAttach, int32 CallFunc_getItemTypeByDefineID_itemType, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void IsBullet(struct FItemDefineID DefineID, UObject* __WorldContext, bool IsBullet, int32 CallFunc_getItemTypeByDefineID_itemType, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void IsGun(struct FItemDefineID DefineID, UObject* __WorldContext, bool IsGun, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void IsGunSupportAttachByDefine(struct FItemDefineID gunDefine, struct FItemDefineID attachDefine, UUAEUserWidget* Widget, UObject* __WorldContext, bool support, struct FItemDefineID AttachDefineID, struct FItemDefineID GunDefineID, int32 AttachBPID, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_getBPIDbyDefineID_BPID, UBattleItemHandle_MainWeapon_C* CallFunc_GetWeaponHandleByResID_handle, struct FWeaponAttachmentSlot CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void IsGunSupportAttachByDefineID(struct FItemDefineID gunDefine, struct FItemDefineID attachDefine, UUAEUserWidget* Widget, UObject* __WorldContext, bool support, ASTExtraPlayerController* CallFunc_GetOwningPlayerNoDefault_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGunSupportAttachByDefine_support);
  void IsGunSupportAttachByRes(int32 gunResID, int32 attachResID, UUAEUserWidget* Widget, UObject* __WorldContext, bool support, int32 AttachBPID, int32 ___int_Array_Index_Variable, int32 CallFunc_getBPIDbyResID_BPID, UBattleItemHandle_MainWeapon_C* CallFunc_GetWeaponHandleByResID_handle, int32 ___int_Loop_Counter_Variable, struct FWeaponAttachmentSlot CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void IsGunSupportAttachByResID(int32 gunResID, int32 attachResID, UUAEUserWidget* Widget, UObject* __WorldContext, bool support, ASTExtraPlayerController* CallFunc_GetOwningPlayerNoDefault_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGunSupportAttachByRes_support);
  void IsGunSupportBullet(ASTExtraWeapon* Weapon, struct FItemDefineID bulletDefineID, UObject* __WorldContext, bool isSupport, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, struct FItemDefineID CallFunc_GetBulletTypeFromEntity_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void getBPIDbyDefineID(struct FItemDefineID DefineID, UObject* __WorldContext, int32 BPID, int32 CallFunc_getBPIDbyResID_BPID);
  void getBPIDbyResID(int32 resID, UObject* __WorldContext, int32 BPID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void getItemTypeByDefineID(struct FItemDefineID DefineID, UObject* __WorldContext, int32 ItemType, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
};

class UBackPackItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBorder* Border_DiscardBtnName01;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_EquipBtnName;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_Drop;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_DropAll;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_DropPartly;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_Equip;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_Use;
  /* offset=0x0250 flags=0x000a0010c008020c */ UGridPanel* GridPanel_DropPartlyDisableState;
  /* offset=0x0254 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_Throw;
  /* offset=0x0258 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_WeaponFit;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_CanEquippedIconBG;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image_CanEquippedItemBG;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image_DragItemStatus;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Image_ItemBG;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* Image_ItemIconBG;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* Image_ItemSelectFG;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* Image_Useless;
  /* offset=0x027c flags=0x000a0010c008020c */ UMultiLineEditableText* ItemContent1;
  /* offset=0x0280 flags=0x000a0010c008020c */ UTextBlock* ItemContent2;
  /* offset=0x0284 flags=0x000a0010c008020c */ UTextBlock* TextBlock_DiscardBtnName01;
  /* offset=0x0288 flags=0x000a0010c008020c */ UTextBlock* TextBlock_DiscardBtnName02;
  /* offset=0x028c flags=0x000a0010c008020c */ UTextBlock* TextBlock_EquipBtnName;
  /* offset=0x0290 flags=0x000a0010c008020c */ UTextBlock* TextBlock_EquipBtnName02;
  /* offset=0x0294 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemNum;
  /* offset=0x0298 flags=0x000a0010c008020c */ UTextBlock* TextBlock_UseBtn02;
  /* offset=0x029c flags=0x000a0010c008020c */ UGridPanel* UnableToEquip;
  /* offset=0x02a0 flags=0x0000000000010005 */ struct FBattleItemData ItemData;
  /* offset=0x0320 flags=0x0000001040010205 */ bool bIsHandleBtnsShow;
  /* offset=0x0324 flags=0x0000100010010205 */ FHandleBtnsStateChange HandleBtnsStateChange;
  /* offset=0x0330 flags=0x0000100010010205 */ FItemBeDropped ItemBeDropped;
  /* offset=0x033c flags=0x0000001040010205 */ bool bIsUseless;
  /* offset=0x0340 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x034c flags=0x0000001040010205 */ bool bHasStartTouchIn;
  /* offset=0x0350 flags=0x0000100010010205 */ FItemBeDragCancelled ItemBeDragCancelled;

  void BndEvt__Button_DropAll_K2Node_ComponentBoundEvent_39_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Drop_K2Node_ComponentBoundEvent_76_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Equip_K2Node_ComponentBoundEvent_298_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_ThrowPart_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Use_K2Node_ComponentBoundEvent_270_OnButtonClickedEvent__DelegateSignature();
  void CanGunAddAttachment(struct FItemDefineID gunID_, struct FItemDefineID attachID_, bool opyEmpty, bool canAdd, bool OcupyEmpty, enum EWeaponAttachmentSocketType AttachPos, int32 AttachBPID, bool IsValid, struct FItemDefineID GunDefineID, struct FItemDefineID AttachDefineID, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Array_Index_Variable3, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket, int32 CallFunc_getBPIDbyDefineID_BPID_, int32 ___int_Loop_Counter_Variable3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsSameInstance_ReturnValue, struct FItemAssociation CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket2, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, TArray<int32> CallFunc_GetWeaponSupportAttachResID_attachID, int32 CallFunc_Array_Length_ReturnValue3, int32 CallFunc_Array_Get_Item3, bool CallFunc_Less_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void DropAllItem(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_ShouldDropBagItem_ReturnValue);
  void EquipItem(struct FItemDefineID CallFunc_FindWeapon_defineID, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void ExecuteUbergraph_BackPackItem_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_MouseEvent, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation);
  void FindWeapon(struct FItemDefineID DefineID, TArray<uint8> SlotWeaponTypeList, struct FItemDefineID currUsingGunID, UWeaponManagerComponent* weaponManager, int32 ___int_Array_Index_Variable, uint8 CallFunc_Array_Get_Item, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, int32 CallFunc_Array_Length_ReturnValue2, int32 ___int_Loop_Counter_Variable, bool CallFunc_CanGunAddAttachment_canAdd, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, TArray<uint8> K2Node_MakeArray_Array, int32 ___int_Array_Index_Variable2, uint8 CallFunc_Array_Get_Item2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_CanGunAddAttachment_canAdd2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue2, bool CallFunc_CanGunAddAttachment_canAdd3, bool CallFunc_CanGunAddAttachment_canAdd4, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsGun_isGun_, int32 ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2);
  enum ESlateVisibility Get_Image_ItemSelectFG_Visibility();
  void HandleBtnsStateChange__DelegateSignature(UBackPackItem_BP_C* ItemBP, bool IsClicked);
  void HandleItemClick();
  void IsGun(struct FItemDefineID defineID_, bool isGun_, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrigin);
  void ItemBeDragCancelled__DelegateSignature();
  void ItemBeDropped__DelegateSignature(struct FBattleItemData ItemData, bool IsForceDrop);
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue);
  void RefreshIcon(UObject* Icon, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ResetHandleBtns();
  void ShowHandleBtns(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, UBP_VehicleUser_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess);
  void UpdateItemData(struct FBattleItemData ItemData, bool IsUseless, FString SmallIconPrefix, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void UseItem(struct FItemDefineID K2Node_MakeStruct_ItemDefineID, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void getBPIDbyDefineID(struct FItemDefineID itemDefineID_, int32 BPID_, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
};

class UBackPackPickUpPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UMainBackPackPanel_BP_C* MainBackPackPanel_BP;
  /* offset=0x0238 flags=0x000a0010c008020c */ UPickUpListPanel_BP_C* PickUpListPanel_BP;
  /* offset=0x023c flags=0x0000001040010205 */ bool NewVar;
  /* offset=0x0240 flags=0x0000000000010205 */ TMap<int32, enum EWeaponAttachmentSocketType> WeaponAttachPos;

  void AddToWeaponAttachPos(int32 attachID, enum EWeaponAttachmentSocketType socket, enum EWeaponAttachmentSocketType CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void AdjustPos(bool Show);
  void ExecuteUbergraph_BackPackPickUpPanel_BP(int32 EntryPoint, FCloseBackPack K2Node_CreateDelegate_OutputDelegate, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, int32 CallFunc_PostEvent_ReturnValue);
  void GetWeaponAttachPosByResID(int32 resID, enum EWeaponAttachmentSocketType socket, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Map_Length_ReturnValue, enum EWeaponAttachmentSocketType CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_WeaponAttachments_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void GetWeaponSupportAttachResID(int32 WeaponID, TArray<int32> attachID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_WeaponAttachments_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, TArray<int32> K2Node_MakeArray_Array);
  void GetWeaponSupportSocket(int32 WeaponID, TArray<enum EWeaponAttachmentSocketType> socketList, TArray<enum EWeaponAttachmentSocketType> List, enum EWeaponAttachmentSocketType ___byte_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, enum EWeaponAttachmentSocketType ___byte_Variable2, struct FBP_STRUCT_WeaponAttachments_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, enum EWeaponAttachmentSocketType ___byte_Variable3, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue5, enum EWeaponAttachmentSocketType ___byte_Variable4, enum EWeaponAttachmentSocketType ___byte_Variable5, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5);
  void IsGunSupportAttachByDefine(struct FItemDefineID gunDefine, struct FItemDefineID attachDefine, bool support, bool CallFunc_IsGunSupportAttachByRes_support);
  void IsGunSupportAttachByRes(int32 gunResID, int32 attachResID, bool support, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_WeaponAttachments_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue8, bool CallFunc_EqualEqual_IntInt_ReturnValue9, bool CallFunc_EqualEqual_IntInt_ReturnValue10, bool CallFunc_EqualEqual_IntInt_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue12, bool CallFunc_EqualEqual_IntInt_ReturnValue13, bool CallFunc_EqualEqual_IntInt_ReturnValue14, bool CallFunc_EqualEqual_IntInt_ReturnValue15, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue7, bool CallFunc_BooleanOR_ReturnValue8, bool CallFunc_BooleanOR_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue11, bool CallFunc_BooleanOR_ReturnValue12, bool CallFunc_BooleanOR_ReturnValue13, bool CallFunc_BooleanOR_ReturnValue14);
  void OnCloseBackPack();
  void ReceivedInitWidget();
  void Show/HideBackpackPanel(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, int32 CallFunc_PostEvent_ReturnValue, int32 CallFunc_PostEvent_ReturnValue2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
};

class UBackendHUD: public UObject {
  /* offset=0x001c flags=0x0048001040000200 */ UEngine* Engine;
  /* offset=0x0020 flags=0x0048000000004200 */ FString BackendUtilsClassName;
  /* offset=0x002c flags=0x0048001040000200 */ UBackendUtils* Utils;

  UFrontendHUD* GetFrontendHUD(int32 FrontendHUDIndex);
};

class UBackendUtils: public UObject {
  /* offset=0x001c flags=0x0048001040000200 */ UBackendHUD* OwningBackendHUD;
};

class UBackgroundBlur: public UContentWidget {
  /* offset=0x00d8 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x00e8 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x00e9 flags=0x0018001040000215 */ uint8 VerticalAlignment;
  /* offset=0x00ea flags=0x0018001040000215 */ bool bApplyAlphaToBlur;
  /* offset=0x00ec flags=0x0018001040000215 */ float BlurStrength;
  /* offset=0x00f0 flags=0x0018001040000200 */ bool bOverrideAutoRadiusCalculation;
  /* offset=0x00f4 flags=0x0018041040000215 */ int32 BlurRadius;
  /* offset=0x00f8 flags=0x0010000000000015 */ struct FSlateBrush LowQualityFallbackBrush;

  void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);
  void SetBlurRadius(int32 InBlurRadius);
  void SetBlurStrength(float InStrength);
  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetLowQualityFallbackBrush(struct FSlateBrush InBrush);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UBackgroundBlurSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0020081000000001 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0028081040000201 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0028081040000201 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UBackpackAvatarHandle: public UBattleItemHandleBase {
  /* offset=0x009b flags=0x0018001040000205 */ enum EAvatarSlotType slotID;
  /* offset=0x00a0 flags=0x0010000000000005 */ struct FMeshPackage meshPack;
  /* offset=0x01f8 flags=0x001800104008020c */ UBackpackComponent* pBackpackComp;
  /* offset=0x01fc flags=0x0018001040000205 */ int32 itemCapacity;
  /* offset=0x0200 flags=0x0018001040000205 */ int32 Durability;
  /* offset=0x020c flags=0x0010000000010015 */ struct FBodyAttachmentConfig BodyAttachmentConfig;

  bool CheckCanPickUp(UCharacterAvatarComponent* avatarComp, int32 nowCapcity);
  UBackpackComponent* GetBackpackComponent();
  bool HandleDisuse(enum EBattleItemDisuseReason Reason);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason);
  void OnCharacterAttrChangedWithDetailEvent(AActor* Owner, FString AttrName, float deltaVal, float resultVal);
};

class UBackpackBlueprintUtils: public UObject {
  /* offset=0x00b4 flags=0x0020088000000200 */ TArray<struct FCreateBattleItemHandleAsyncRequest> PendingAsyncRequests;

  void AddCharacterVirtualItemToBackpack(UBackpackComponent* BackpackComp, ASTExtraBaseCharacter* Character);
  struct FBattleItemData ConstructBattleItemDataByDefineID(struct FItemDefineID DefineID);
  struct FBattleItemData ConstructBattleItemDataByItemTableID(int32 ItemTableID);
  UBattleItemHandleBase* CreateBattleItemHandle(struct FItemDefineID DefineID, UObject* Outer);
  void GenerateItemDefineIDByItemTableID(int32 ItemTableID, int32 Type, int32 TypeSpecificID);
  struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(struct FItemDefineID DefineID);
  FString GetBattleItemHandlePath(struct FItemDefineID DefineID);
  struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(struct FItemDefineID DefineID);
  UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(UBackpackComponent* BackpackComp);
  struct FBattleItemData GetCharacterVirtualItemInBackpack(UBackpackComponent* BackpackComp);
  int32 GetItemSubTypeID(int32 SpecificID);
  FString GetRawBattleTextByRawTextID(int32 ID);
  FString GetRawBattleTextByType(enum EBattleTextType Type);
  bool IsVirtualItemData(struct FBattleItemData ItemData);
};

class UBackpackBlueprintUtils_BP_C: public UBackpackBlueprintUtils {
  /* offset=0x00c0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00c4 flags=0x0000000000010205 */ TArray<struct FBattleItemAdditionalData> EmptyAdditionalData;
  /* offset=0x00d0 flags=0x0000000000010205 */ TMap<FName, struct FItemAssociation> EmptyAssociationMap;
  /* offset=0x010c flags=0x0000000000010205 */ TArray<struct FItemAssociation> EmptyAssociationArray;
  /* offset=0x0118 flags=0x0008001040010205 */ int32 CharacterVirtualItem_Type;
  /* offset=0x011c flags=0x0008001040010205 */ int32 CharacterVirtualItem_TypeSpecificID;

  void AddCharacterVirtualItemToBackpack(UBackpackComponent* BackpackComp, ASTExtraBaseCharacter* Character);
  struct FBattleItemData ConstructBattleItemDataByDefineID(struct FItemDefineID DefineID, struct FBattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, struct FBattleItemData K2Node_MakeStruct_BattleItemData);
  struct FBattleItemData ConstructBattleItemDataByItemTableID(int32 ItemTableID, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, struct FBattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, struct FBattleItemData K2Node_MakeStruct_BattleItemData);
  UBattleItemHandleBase* CreateBattleItemHandle(struct FItemDefineID DefineID, UObject* Outer, UBattleItemHandleBase* Handle, UBattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, struct FBattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, UBattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void CreateBattleItemHandle_Character(UObject* Outer, UBattleItemHandleBase* BattleItemHandle, UBattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);
  void CreateBattleItemHandle_Default(int32 Type, int32 ID, UObject* Outer, UBattleItemHandleBase* BattleItemHandle, UUAELoadedClassManager* CallFunc_Get_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, FString CallFunc_GetBPTableName_BPTableName, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBattleItemHandleBase>* K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, UBattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);
  void ExecuteUbergraph_BackpackBlueprintUtils_BP(int32 EntryPoint, UBackpackComponent* K2Node_Event_BackpackComp, ASTExtraBaseCharacter* K2Node_Event_Character, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, struct FItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, struct FBattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, bool CallFunc_PickupItem_ReturnValue);
  void GenerateItemDefineIDByItemTableID(int32 ItemTableID, int32 Type, int32 TypeSpecificID, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow);
  void GetBPTableName(int32 Type, int32 TypeSpecificID, FString BPTableName, int32 CallFunc_Divide_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void GetBattleItemFeatureData(struct FItemDefineID DefineID, struct FBattleItemFeatureData FeatureData, struct FBattleItemFeatureData BattleItemFeatureData, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);
  struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(struct FItemDefineID DefineID, struct FBattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);
  FString GetBattleItemHandlePath(struct FItemDefineID DefineID, UUAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_BPTableName, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, FString CallFunc_GetPath_ReturnValue);
  struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(struct FItemDefineID DefineID, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, struct FBattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);
  UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(UBackpackComponent* BackpackComp, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, UInterface<UItemContainerInterface>* CallFunc_GetItemHandleListByDefineID_self_CastInput, TArray<UItemHandleBase*> CallFunc_GetItemHandleListByDefineID_ReturnValue, UItemHandleBase* CallFunc_Array_Get_Item, UBattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);
  struct FBattleItemData GetCharacterVirtualItemInBackpack(UBackpackComponent* BackpackComp, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, TArray<struct FBattleItemData> CallFunc_GetItemListByDefineID_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item);
  int32 GetItemSubTypeID(int32 SpecificID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void GetItemTableRowByItemTableID(int32 ID, struct FBP_STRUCT_Item_type ItemTableRow, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  FString GetRawBattleTextByRawTextID(int32 ID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  FString GetRawBattleTextByType(enum EBattleTextType Type, FName RowName, bool K2Node_SwitchEnum_CmpSuccess, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  bool IsVirtualItemData(struct FBattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);
};

class UBackpackComponent: public UActorComponent {
  /* offset=0x00b4 flags=0x0010000010080214 */ FItemListUpdatedDelegate ItemListUpdatedDelegate;
  /* offset=0x00c0 flags=0x0010000010080214 */ FItemListUpdatedDelegate CapacityUpdatedDelegate;
  /* offset=0x00cc flags=0x0010000010080214 */ FItemOperationDelegate ItemOperationDelegate;
  /* offset=0x00d8 flags=0x0010000010080214 */ FItemOperationFailedDelegate ItemOperationFailedDelegate;
  /* offset=0x00e4 flags=0x0020080000080214 */ FItemUpdatedDelegate ItemUpdatedDelegate;
  /* offset=0x00f0 flags=0x0020080000080214 */ FItemRemovedDelegate ItemRemovedDelegate;
  /* offset=0x00fc flags=0x0020080100000220 */ TArray<struct FBattleItemData> ItemList;
  /* offset=0x0108 flags=0x0040000000000200 */ TArray<UItemHandleBase*> ItemHandleList;
  /* offset=0x0114 flags=0x0040000000000200 */ TMap<struct FItemDefineID, UItemHandleBase*> ItemHandleMap;
  /* offset=0x0150 flags=0x0028081140010225 */ float Capacity;
  /* offset=0x0154 flags=0x0028081040000204 */ float OccupiedCapacity;

  bool AddItemHandle(struct FItemDefineID DefineID, UItemHandleBase* ItemHandle);
  int32 CheckCapacityForItem(struct FItemDefineID DefineID, int32 Count);
  /* CL  */ void ClientBroadcastItemOperationDelegate(struct FItemDefineID DefineID, enum EBattleItemOperationType operationType, uint8 Reason);
  /* CL  */ void ClientBroadcastItemOperationFailedDelegate(struct FItemDefineID DefineID, enum EBattleItemOperationType operationType, enum EBattleItemOperationFailedReason FailedReason);
  int32 ConsumeItem(struct FItemDefineID DefineID, int32 Count);
  UItemHandleBase* CreateItemHandle(struct FItemDefineID DefineID);
  UBattleItemHandleBase* CreateItemHandleInternal(struct FItemDefineID DefineID);
  bool DisuseItem(struct FItemDefineID DefineID, enum EBattleItemDisuseReason Reason);
  bool DropItem(struct FItemDefineID DefineID, int32 Count, enum EBattleItemDropReason Reason);
  void EquipItem(struct FItemDefineID DefineID);
  void ForceNetUpdate();
  TArray<struct FBattleItemData> GetAllItemList();
  struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(struct FItemDefineID DefineID);
  struct FBattleItemData GetItemByDefineID(struct FItemDefineID DefineID);
  TArray<UItemHandleBase*> GetItemHandleList();
  TMap<struct FItemDefineID, UItemHandleBase*> GetItemHandleMap();
  TArray<struct FBattleItemData> GetItemListByDefineID(struct FItemDefineID DefineID);
  UWorld* GetWorld_BP();
  void ModifyItemHandleCount(UItemHandleBase* ItemHandle, int32 Count);
  void ModifyItemHandleEquippingState(UItemHandleBase* ItemHandle, bool bEquipping);
  UBattleItemHandleBase* NewItemHandle(struct FItemDefineID DefineID);
  void NotifyCapacityUpdated();
  void NotifyItemListUpdated();
  void NotifyItemRemoved(struct FItemDefineID DefineID);
  void NotifyItemUpdated(struct FItemDefineID DefineID);
  void OnRep_Capacity();
  void OnRep_ItemList();
  bool PickupItem(struct FItemDefineID DefineID, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason);
  void ReceiveCapacity();
  void ReceiveItemList();
  bool RemoveItemHandle(struct FItemDefineID DefineID);
  int32 ReturnItem(struct FItemDefineID DefineID, int32 Count, bool bCallHandlePickup);
  bool SwapItem(struct FItemDefineID DefineID1, struct FItemDefineID DefineID2);
  int32 TakeItem(struct FItemDefineID DefineID, int32 Count, bool bCallHandleDrop);
  void TryMergeItemHandles(struct FItemDefineID DefineID);
  void UnequipItem(struct FItemDefineID DefineID);
  float UpdateCapacity();
  float UpdateOccupiedCapacity();
  bool UseItem(struct FItemDefineID DefineID, struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason);
};

class UBackpackUtils: public UBlueprintFunctionLibrary {
  void AddCharacterVirtualItemHandleToBackpack(UBackpackComponent* BackpackComp, ASTExtraBaseCharacter* Character);
  bool CheckCapacityForSwapOrDrop(UBackpackComponent* BackpackComp, int32 OldCapacity, int32 NewCapacity);
  struct FBattleItemData ConstructBattleItemDataByDefineID(struct FItemDefineID DefineID);
  struct FBattleItemData ConstructBattleItemDataByItemTableID(int32 ItemTableID);
  UBattleItemHandleBase* CreateBattleItemHandle(struct FItemDefineID DefineID, UObject* Outer);
  void CreateBattleItemHandleAsync(struct FItemDefineID DefineID, UObject* Outer, FCreateBattleItemHandleAsyncDelegate Delegate);
  TArray<struct FPickUpWrapperItem> ExtractPickupWrapperItems(UBackpackComponent* BackpackComp);
  void ForceDropNonClothing(UBackpackComponent* BackpackComp);
  struct FItemDefineID GenerateItemDefineIDByItemTableIDWithRandomInstanceID(int32 ItemTableID);
  struct FItemDefineID GenerateItemDefineIDWithRandomInstanceID(int32 Type, int32 TypeSpecificID);
  uint64 GenerateRandomInstanceID();
  TArray<struct FBattleItemData> GetAllItemsInBackpack(UBackpackComponent* BackpackComp, bool bIncludeVirtualItems);
  void GetAttackTipDataByDamageEventType(int32 DamageType, int32 SubType, FString OutAttackName, FString OutAttackActionName);
  struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(struct FItemDefineID DefineID);
  struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(struct FItemDefineID DefineID);
  UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(UBackpackComponent* BackpackComp);
  struct FBattleItemData GetCharacterVirtualItemInBackpack(UBackpackComponent* BackpackComp);
  TArray<struct FBattleItemData> GetClothingAndArmorInBackpack(UBackpackComponent* BackpackComp);
  TArray<struct FBattleItemData> GetConsumablesInBackpack(UBackpackComponent* BackpackComp);
  int32 GetItemCountByDefineID(UBackpackComponent* BackpackComp, struct FItemDefineID DefineID, bool bOnlyInstance);
  FString GetRawBattleTextByRawTextID(int32 ID);
  FString GetRawBattleTextByType(enum EBattleTextType Type);
  TArray<UBattleItemHandleBase*> GetWeaponAttachmentHandles(UBackpackComponent* BackpackComp);
  TArray<struct FBattleItemData> GetWeaponAttachmentsInBackpack(UBackpackComponent* BackpackComp);
  TArray<struct FBattleItemData> GetWeaponsInBackpack(UBackpackComponent* BackpackComp);
  bool IsCharacterVirtualItem(UBackpackComponent* BackpackComp, struct FItemDefineID DefineID);
  bool IsSameInstance(struct FItemDefineID DefineID1, struct FItemDefineID DefineID2);
  bool IsSameItem(struct FItemDefineID DefineID1, struct FItemDefineID DefineID2);
  void PickupFromGround(UBackpackComponent* BackpackComp, APickUpWrapperActor* Source, struct FBattleItemUseTarget AutoEquipTarget, bool bForceAutoEquip);
  int32 ReturnIteratively(UBackpackComponent* BackpackComp, struct FItemDefineID DefineID, int32 Count, bool bCallHandlePickup);
  TArray<struct FBattleItemSortingInfo> SortBattleItemList(TArray<struct FBattleItemSortingInfo> ItemList);
  TArray<struct FBattleSearchBoxSortingInfo> SortBattleSearchBoxList(TArray<struct FBattleSearchBoxSortingInfo> BoxList);
  TArray<struct FBattleSearchItemSortingInfo> SortBattleSearchItemList(TArray<struct FBattleSearchItemSortingInfo> ItemList);
};

class UBackpackWeaponAttachHandle: public UBattleItemHandleBase {
  /* offset=0x00a0 flags=0x0010000000010015 */ struct FWeaponAttachmentConfig WeaponAttachmentConfig;
  /* offset=0x0130 flags=0x001800104008021c */ UBackpackComponent* BackpackComp;

  bool EquipOrUnEuipAttachment(ASTExtraShootWeapon* InWeapon, bool IsEquip);
  void ReturnWeaponAdditionalBulletsToBackpack(ASTExtraShootWeapon* Weapon, int32 BulletNum);
};

class ABaseAIController: public AAIController {
  /* offset=0x0344 flags=0x0018001040010201 */ float DamageScale;
  /* offset=0x0348 flags=0x0020080000010201 */ TArray<UBehaviorTree*> BehaviorTree;
  /* offset=0x035c flags=0x0028081040080208 */ UBackpackComponent* BackpackComponent;
};

class UBaseCharacterEffectCom: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040010201 */ UParticleSystem* DeathFX;
  /* offset=0x00b0 flags=0x0048001040000200 */ ASTExtraBaseCharacter* OwningCharacter;

  void HandleOwnerDeath(ASTExtraBaseCharacter* DeadCharacter, AController* Killer, AActor* DamageCauser, struct FHitResult KillingHitInfo, struct FVector KillingHitImpulseDir, UClass<UDamageType>* KillingHitDamageType);
};

class UBaseCharacterPickupProxy: public UPickupProxy {
  /* offset=0x0020 flags=0x0018001040000200 */ ASTExtraBaseCharacter* ProxyOwnerCharacter;
};

class UBaseGeneratorComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0020088000000200 */ TMap<uint8, struct FGroupSpotComponentArray> AllGroupSpots;
  /* offset=0x00e8 flags=0x0020088000000208 */ TArray<USpotSceneComponent*> AllSpotsToTick;
  /* offset=0x00f4 flags=0x0028081040000205 */ int32 GenerateSpotCountPerTick;

  void GenerateSpotOnTick();
  void GenerateSpots();
  void RegisterGroupSpotComponent(UGroupSpotSceneComponent* GroupSpotComponent);
  void RegisterSpotComponentToTick(USpotSceneComponent* SpotComponent);
};

class UBaseMediaSource: public UMediaSource {
  /* offset=0x0020 flags=0x0048001040002200 */ FName PlayerName;
};

class UBasicOverlays: public UOverlays {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FOverlayItem> Overlays;
};

class UBasicSkillsMenu_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBorder* Border_Door;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_DriveAndGetIn;
  /* offset=0x023c flags=0x000a0010c008020c */ UBorder* Border_Save;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* BtnDriverEnter;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* BtnPassengerEnter;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* BtnRescue;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_OpenAndCloseDoor;
  /* offset=0x0250 flags=0x000a0010c008020c */ UVerticalBox* DriveAndGetInBox;
  /* offset=0x0254 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Door;
  /* offset=0x0258 flags=0x000a0010c008020c */ UGridPanel* GridPanel_DriveAndGetIn;
  /* offset=0x025c flags=0x000a0010c008020c */ UGridPanel* GridPanel_Rescue;
  /* offset=0x0260 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Save;
  /* offset=0x0264 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_CloseDoor;
  /* offset=0x0268 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_OpenDoor;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock_;
  /* offset=0x0270 flags=0x0008001040010205 */ uint8 CommonBtnType;
  /* offset=0x0274 flags=0x0000100010010205 */ FED_CommonBtn ED_CommonBtn;

  void BndEvt__BtnDriverEnter_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BtnPassengerEnter_K2Node_ComponentBoundEvent_31_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BtnRescue_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OpenAndCloseDoor_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();
  void Construct();
  void Destruct();
  void ED_CommonBtn__DelegateSignature(uint8 Type);
  void ExecuteUbergraph_BasicSkillsMenu_BP(int32 EntryPoint, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail, bool CallFunc_GetLayoutDetailByType_IsFound, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail2, bool CallFunc_GetLayoutDetailByType_IsFound2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail3, bool CallFunc_GetLayoutDetailByType_IsFound3, bool CallFunc_IsValid_ReturnValue, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue2, FOnCharacterCanRescueChangeDelegate K2Node_CreateDelegate_OutputDelegate, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_PlayerConfirmToRescue_ReturnValue);
  void HideDoorBtnPanel();
  void HideEnterVehicleButtons();
  void OnCanRescueOtherEvent(ACharacter* HelpWho, ACharacter* Owner, bool IsTurnInto, AController* CallFunc_GetController_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetSettingControlUI();
  void ShowDoorBtnPanel();
  void ShowEnterVehicleButtons(bool HasDriversSeat, bool HasPsgersSeat);
  void UpdateDoorBtn(uint8 Type, bool K2Node_SwitchEnum_CmpSuccess);
};

class UBattleItemHandleBase: public UItemHandleBase {
  /* offset=0x0084 flags=0x0018001040000204 */ bool bEquipping;
  /* offset=0x0088 flags=0x0010000000000204 */ TArray<struct FBattleItemAdditionalData> AdditionalData;
  /* offset=0x0094 flags=0x0018001040000204 */ float UnitWeight;
  /* offset=0x0098 flags=0x0018001040000204 */ bool bEquippable;
  /* offset=0x0099 flags=0x0018001040000204 */ bool bConsumable;
  /* offset=0x009a flags=0x0018001040000204 */ bool bAutoEquipAndDrop;

  struct FBattleItemData ExtractItemData();
  UWorld* GetWorldInternal();
  bool HandleDisuse(enum EBattleItemDisuseReason Reason);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason);
};

class UBattleItemHandleBase_BP_C: public UBattleItemHandleBase {
  /* offset=0x00a0 flags=0x0008001040010a05 */ ASTExtraPlayerController* OwningPlayerController;
  /* offset=0x00a4 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* OwningCharacter;
  /* offset=0x00a8 flags=0x0008001040010205 */ UBackpackComponent* OwningBackpackComponent;
  /* offset=0x00b0 flags=0x0000001040010005 */ struct FTransform WrapperPutdownTrans;
  /* offset=0x00e0 flags=0x0000001040010005 */ struct FTransform SourceWrapperTrans;
  /* offset=0x0110 flags=0x0008001040010a05 */ ABaseAIController* OwningAIController;

  struct FBattleItemData ExtractItemData(TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, TArray<struct FItemAssociation> CallFunc_Map_Values_Values, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FBattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, struct FBattleItemData K2Node_SetFieldsInStruct_StructOut);
  UWorld* GetWorldInternal(UWorld* CallFunc_GetWorld_BP_ReturnValue);
  bool HandleDisuse(enum EBattleItemDisuseReason Reason);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason, bool CallFunc_HandleDrop_ReturnValue);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason, bool CallFunc_HandlePickup_ReturnValue, UBackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, AActor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, struct FTransform CallFunc_GetTransform_ReturnValue, UBackpackComponent* K2Node_DynamicCast_AsBackpack_Component2, bool K2Node_DynamicCast_bSuccess3, UObject* CallFunc_GetOwningObject_ReturnValue, ABaseAIController* K2Node_DynamicCast_AsBase_AIController, bool K2Node_DynamicCast_bSuccess4, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, APawn* CallFunc_K2_GetPawn_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue2, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess6, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess7);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason);
  void SpawnWrapperOnGround(UClass<APickUpWrapperActor>* WrapperClass, bool bUseRandomLoc, APickUpWrapperActor* TargetWrapper, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, UPickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, struct FVector CallFunc_GetRandomPutDownLocation_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);
};

class UBattleItemHandle_AvatarBP_C: public UBackpackAvatarHandle {
  /* offset=0x0230 flags=0x0008001040000a05 */ ASTExtraPlayerController* OwningPlayerController;
  /* offset=0x0234 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* OwningCharacter;
  /* offset=0x0238 flags=0x0008001040010205 */ UBackpackComponent* OwningBackpackComponent;
  /* offset=0x0240 flags=0x0000001040010005 */ struct FTransform SourceWrapperTrans;
  /* offset=0x0270 flags=0x0000001040010005 */ struct FTransform WrapperPutdownTrans;
  /* offset=0x02a0 flags=0x0008001040010205 */ UClass<APickUpWrapperActor>* WrapperClass;
  /* offset=0x02a4 flags=0x0008001040010205 */ UBattleItemHandleBase* CharacterItemHandle;

  struct FBattleItemData ExtractItemData(TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, TArray<struct FItemAssociation> CallFunc_Map_Values_Values, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FBattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, struct FBattleItemData K2Node_SetFieldsInStruct_StructOut);
  UWorld* GetWorldInternal(UWorld* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  bool HandleDisuse(enum EBattleItemDisuseReason Reason, bool CallFunc_HandleDisuse_ReturnValue);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason, bool CallFunc_HandlePickup_ReturnValue, UBattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, UBackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, AActor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, struct FTransform CallFunc_GetTransform_ReturnValue, UObject* CallFunc_GetOwningObject_ReturnValue, AController* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, APawn* CallFunc_K2_GetPawn_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason, bool CallFunc_HandleUse_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue2, struct FItemAssociation K2Node_MakeStruct_ItemAssociation, struct FItemDefineID CallFunc_GetDefineID_ReturnValue3, struct FItemAssociation K2Node_MakeStruct_ItemAssociation2);
  void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);
  void SpawnWrapperOnGround(UClass<APickUpWrapperActor>* WrapperClass, bool bUseRandomLoc, bool CallFunc_IsValid_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, UPickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, struct FVector CallFunc_GetRandomPutDownLocation_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);
};

class UBattleItemHandle_HeadBP_C: public UBattleItemHandle_AvatarBP_C {
  /* offset=0x02a8 flags=0x0000000000010205 */ TArray<int32> BodyResIDList;
};

class UBattleItemHandle_MainWeapon_C: public UBattleItemHandleBase_BP_C {
  /* offset=0x0114 flags=0x0008001040010205 */ UWeaponManagerComponent* weaponManager;
  /* offset=0x0118 flags=0x0008001040010205 */ FName socket;
  /* offset=0x0120 flags=0x0008001040010205 */ UBattleItemHandleBase* CharacterItemHandle;
  /* offset=0x0124 flags=0x0008001040010215 */ UClass<ASTExtraWeapon>* WeaponClass;
  /* offset=0x0128 flags=0x0000000000000205 */ TArray<struct FWeaponAttachmentSlot> AvailableWeaponAttachment;
  /* offset=0x0134 flags=0x0008001040010a05 */ ASTExtraWeapon* TargetWeaponActor;
  /* offset=0x0138 flags=0x0008001040010205 */ FName MainLogicSlot1Name;
  /* offset=0x0140 flags=0x0008001040010205 */ FName MainLogicSlot2Name;
  /* offset=0x0148 flags=0x0008001040010205 */ UClass<APickUpWrapperActor>* WrapperClass;
  /* offset=0x014c flags=0x0000000000000205 */ TMap<enum EWeaponAttachmentSocketType, bool> WeaponAttachmentSockTypeList;
  /* offset=0x0188 flags=0x0008001040010205 */ UClass<APickUpWrapperActor>* BulletWrapperClass;
  /* offset=0x018c flags=0x0000000000000205 */ TMap<enum EWeaponAttachmentSocketType, UBattleItemHandle_WeapAttachment_C*> EquipedWeapAttachments;
  /* offset=0x01c8 flags=0x0000001040010205 */ bool bResetInitBulletInBullet;

  void AutoEquipAttachments(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UBattleItemHandleBase*> CallFunc_GetWeaponAttachmentHandles_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, UBattleItemHandleBase* CallFunc_Array_Get_Item, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, UBackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_UseItem_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied);
  void CreateWrapperOnGround(bool CallFunc_IsValid_ReturnValue, UPickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, struct FVector CallFunc_GetRandomPutDownLocation_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue);
  void GetAvailableInstantLogicSocketName(FName ret, bool bNeedPutDownOldWeapon, bool bAutoUse, ASTExtraWeapon* CallFunc_GetInventoryWeaponByLogicSocket_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetCurrentUsingLogicSocket_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByLogicSocket_ReturnValue2, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, FName CallFunc_GetCurrentUsingLogicSocketOnServer_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue2, struct FItemAssociation CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FItemAssociation CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FName CallFunc_GetCurrentUsingLogicSocketOnServer_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3);
  void GetAvailableTargetLogicSocketName(FName TargetSocket, FName ret, bool bNeedPutDownOldWeapon, bool bAutoUse, FName InputSocket, FName CallFunc_GetCurrentUsingLogicSocketOnServer_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, FName CallFunc_GetCurrentUsingLogicSocketOnServer_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, struct FItemAssociation CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  bool HandleDisuse(enum EBattleItemDisuseReason Reason, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_HandleDisuse_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue, APickUpWrapperActor* CallFunc_SpawnWrapperOnGround_TargetWrapper);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason, bool CallFunc_HandlePickup_ReturnValue, APickUpWrapperActor* K2Node_DynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_DynamicCast_bSuccess, UBattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason, TArray<UBattleItemHandle_WeapAttachment_C*> OldWeaponAttachmentHandles, bool bAutoUse, bool bNeedPutDownOldWeapon, FName TargetSocket, int32 ___int_Loop_Counter_Variable, bool CallFunc_HandleUse_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FName CallFunc_GetAvailableTargetLogicSocketName_Ret, bool CallFunc_GetAvailableTargetLogicSocketName_bNeedPutDownOldWeapon, bool CallFunc_GetAvailableTargetLogicSocketName_bAutoUse, bool CallFunc_EqualEqual_NameName_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, bool CallFunc_HasState_ReturnValue, UBattleItemHandle_WeapAttachment_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, struct FItemDefineID CallFunc_GetDefineID_ReturnValue2, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, bool CallFunc_UseItem_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, struct FItemDefineID CallFunc_GetDefineID_ReturnValue3, struct FItemAssociation K2Node_MakeStruct_ItemAssociation, FName CallFunc_GetAvailableInstantLogicSocketName_Ret, bool CallFunc_GetAvailableInstantLogicSocketName_bNeedPutDownOldWeapon, bool CallFunc_GetAvailableInstantLogicSocketName_bAutoUse, struct FItemDefineID CallFunc_GetDefineID_ReturnValue4, ASTExtraWeapon* CallFunc_SpawnAndBackpackWeaponOnServer_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue5, bool CallFunc_IsValid_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRow_Item, int32 ___int_Loop_Counter_Variable2, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FItemAssociation CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, struct FItemDefineID CallFunc_GetDefineID_ReturnValue6, struct FItemAssociation K2Node_MakeStruct_ItemAssociation2, UInterface<UItemContainerInterface>* CallFunc_GetItemHandleByDefineID_self_CastInput, UItemHandleBase* CallFunc_GetItemHandleByDefineID_ReturnValue, bool CallFunc_DisuseItem_ReturnValue, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue2, TArray<FName> CallFunc_Map_Keys_Keys, FName CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, struct FItemAssociation CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, UInterface<UItemContainerInterface>* CallFunc_GetItemHandleByDefineID_self2_CastInput, UItemHandleBase* CallFunc_GetItemHandleByDefineID_ReturnValue2, UBattleItemHandle_WeapAttachment_C* K2Node_DynamicCast_AsBattle_Item_Handle_Weap_Attachment, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Add_ReturnValue);
  void JudgeHasTargetAttachmentSlot(int32 TypeSpecificID, enum EWeaponAttachmentSocketType AttachType, bool CanEquip, bool HasOcupied, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FWeaponAttachmentSlot CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void LocalHandleDisuse(enum EBattleItemDisuseReason Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DestroyWeaponOnServer_ReturnValue);
  void ReturnBullets(int32 Count, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, APickUpWrapperActor* CallFunc_SpawnWrapperOnGround_TargetWrapper, int32 CallFunc_Subtract_IntInt_ReturnValue, UShootWeaponEntity* K2Node_DynamicCast_AsShoot_Weapon_Entity, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, int32 CallFunc_ReturnIteratively_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);
  void UpdateEquipedAttach(enum EWeaponAttachmentSocketType WeapAttachSockType, UBattleItemHandle_WeapAttachment_C* WeapAttachItemHandle, bool IsEquip, bool CallFunc_Map_Remove_ReturnValue);
};

class UBattleItemHandle_VirtualCharacter_C: public UBattleItemHandle_VirtualItem_C {
  struct FBattleItemData ExtractItemData(TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, TArray<struct FItemAssociation> CallFunc_Map_Values_Values, struct FBattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, struct FBattleItemData K2Node_SetFieldsInStruct_StructOut);
};

class UBattleItemHandle_VirtualItem_C: public UBattleItemHandleBase {
};

class UBattleItemHandle_WeapAttachment_C: public UBackpackWeaponAttachHandle {
  /* offset=0x0140 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0144 flags=0x0008001040010a05 */ ASTExtraShootWeapon* Weapon;
  /* offset=0x0148 flags=0x0008001040010205 */ UClass<APickUpWrapperActor>* WrapperClass;
  /* offset=0x014c flags=0x0008001040010205 */ UBackpackComponent* OwningBackpackComponent;
  /* offset=0x0150 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* OwningCharacter;
  /* offset=0x0154 flags=0x0008001040010205 */ UBattleItemHandle_MainWeapon_C* CachedWeaponHandle;

  void CanSwap(UBackpackWeaponAttachHandle* SpecificID, bool Can, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied);
  void CreateWrapperOnGround(int32 Count, bool CallFunc_IsValid_ReturnValue, UPickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, struct FVector CallFunc_GetRandomPutDownLocation_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, APickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue);
  void ExecuteUbergraph_BattleItemHandle_WeapAttachment(int32 EntryPoint, ASTExtraShootWeapon* K2Node_Event_Weapon, int32 K2Node_Event_BulletNum, UItemHandleBase* CallFunc_GetBackpackItemHandle_ReturnValue, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon, bool K2Node_DynamicCast_bSuccess);
  struct FBattleItemData ExtractItemData(TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, TArray<struct FItemAssociation> CallFunc_Map_Values_Values, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FBattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, struct FBattleItemData K2Node_SetFieldsInStruct_StructOut);
  void FilterWeaponItemHandle(UBattleItemHandleBase_BP_C* InputItemHandle, bool IsPickupDirectlyEquip, struct FBattleItemUseTarget Target, bool HasTarget, UBattleItemHandle_MainWeapon_C* TargetWeaponHandle, ASTExtraWeapon* WeaponActor, UBattleItemHandle_WeapAttachment_C* CacheSwapAttachment, struct FBattleItemUseTarget TInvalidBattleItemTarget, ASTExtraWeapon* TInvalidWeaponActor, UBattleItemHandle_MainWeapon_C* TInvalidWeaponItemHandle, UBattleItemHandle_MainWeapon_C* TWeaponItemHandle, bool CallFunc_IsValid_ReturnValue, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon, bool K2Node_DynamicCast_bSuccess, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue2, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, struct FItemDefineID CallFunc_GetDefineID_ReturnValue3, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UItemHandleBase* CallFunc_GetBackpackItemHandle_ReturnValue, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied, struct FItemDefineID CallFunc_GetDefineID_ReturnValue4, struct FItemDefineID CallFunc_GetDefineID_ReturnValue5, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue3, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, UItemHandleBase* CallFunc_GetBackpackItemHandle_ReturnValue2, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon3, bool K2Node_DynamicCast_bSuccess3, UItemHandleBase* CallFunc_GetBackpackItemHandle_ReturnValue3, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon4, bool K2Node_DynamicCast_bSuccess4, struct FItemDefineID CallFunc_GetDefineID_ReturnValue6, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget2, struct FItemDefineID CallFunc_GetDefineID_ReturnValue7, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget3, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip2, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied2, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip3, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied3, struct FItemDefineID CallFunc_GetDefineID_ReturnValue8, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget4, struct FItemDefineID CallFunc_GetDefineID_ReturnValue9, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget5, UBattleItemHandle_WeapAttachment_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue10, struct FItemDefineID CallFunc_GetDefineID_ReturnValue11, bool CallFunc_SwapItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue4, bool CallFunc_CanSwap_Can, FName CallFunc_Conv_StringToName_ReturnValue4, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow4, bool CallFunc_GetDataTableRowFromName_ReturnValue4, struct FItemDefineID CallFunc_GetDefineID_ReturnValue12, bool CallFunc_DisuseItem_ReturnValue, bool CallFunc_JudgeHasTargetAttachmentSlot_CanEquip4, bool CallFunc_JudgeHasTargetAttachmentSlot_HasOcupied4);
  UWorld* GetWorldInternal(UWorld* CallFunc_GetWorld_BP_ReturnValue);
  bool HandleDisuse(enum EBattleItemDisuseReason Reason, FName ___name_Variable, bool CallFunc_HandleDisuse_ReturnValue, bool ___bool_Variable, TMap<FName, struct FItemAssociation> CallFunc_GetAssociationMap_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EquipOrUnEuipAttachment_ReturnValue);
  bool HandleDrop(int32 InCount, enum EBattleItemDropReason Reason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);
  bool HandlePickup(UInterface<UItemContainerInterface>* ItemContainer, struct FBattleItemPickupInfo PickupInfo, enum EBattleItemPickupReason Reason, bool CallFunc_HandlePickup_ReturnValue, UObject* CallFunc_GetOwningObject_ReturnValue, UBackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, AController* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess2, APawn* CallFunc_K2_GetPawn_ReturnValue, struct FBattleItemUseTarget CallFunc_FilterWeaponItemHandle_Target, bool CallFunc_FilterWeaponItemHandle_HasTarget, UBattleItemHandle_MainWeapon_C* CallFunc_FilterWeaponItemHandle_TargetWeaponHandle, ASTExtraWeapon* CallFunc_FilterWeaponItemHandle_WeaponActor, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess3);
  bool HandleUse(struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason, bool LocalIsEquipDirectly, UBattleItemHandleBase_BP_C* LocalCachedItemHandle, bool ___bool_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleUse_ReturnValue, bool ___bool_Variable2, bool CallFunc_EquipOrUnEuipAttachment_ReturnValue, bool CallFunc_EquipOrUnEuipAttachment_ReturnValue2, struct FBattleItemUseTarget CallFunc_FilterWeaponItemHandle_Target, bool CallFunc_FilterWeaponItemHandle_HasTarget, UBattleItemHandle_MainWeapon_C* CallFunc_FilterWeaponItemHandle_TargetWeaponHandle, ASTExtraWeapon* CallFunc_FilterWeaponItemHandle_WeaponActor, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HandleUse_ReturnValue2, UInterface<UItemContainerInterface>* CallFunc_GetItemHandleByDefineID_self_CastInput, UItemHandleBase* CallFunc_GetItemHandleByDefineID_ReturnValue, UBattleItemHandleBase_BP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Base_BP, bool K2Node_DynamicCast_bSuccess2, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, UBattleItemHandle_MainWeapon_C* K2Node_DynamicCast_AsBattle_Item_Handle_Main_Weapon, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_DisuseItem_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess4, UInterface<UItemContainerInterface>* CallFunc_GetItemHandleByDefineID_self2_CastInput, UItemHandleBase* CallFunc_GetItemHandleByDefineID_ReturnValue2, UBattleItemHandleBase_BP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Base_BP2, bool K2Node_DynamicCast_bSuccess5);
  void ReturnWeaponAdditionalBulletsToBackpack(ASTExtraShootWeapon* Weapon, int32 BulletNum);
};

class ABattleRoyalTrainingGameMode: public ABattleRoyaleGameMode {
  void PlayerLost();
};

class ABattleRoyaleGameMode: public AUAEGameMode {
  /* offset=0x0a2c flags=0x0010000010080200 */ FGameModeDelegate OnGameModeEnterFlying;
  /* offset=0x0a38 flags=0x0010000010080200 */ FGameModeDelegate OnGameModeExitFlying;
  /* offset=0x0a44 flags=0x0018001040000215 */ float Radius1;
  /* offset=0x0a48 flags=0x0018001040000215 */ float Radius2;
  /* offset=0x0a4c flags=0x0018001040000215 */ float Radius3;
  /* offset=0x0a50 flags=0x0018001040000015 */ struct FVector MapCenter;
  /* offset=0x0a5c flags=0x0018001040000215 */ float PlaneSpeed;
  /* offset=0x0a60 flags=0x0018001040000215 */ float PlaneHeight;
  /* offset=0x0a64 flags=0x0018001040000215 */ float CanOpenParachuteHeight;
  /* offset=0x0a68 flags=0x0018001040000215 */ float ForceOpenParachuteHeight;
  /* offset=0x0a6c flags=0x0018001040000215 */ float CloseParachuteHeight;
  /* offset=0x0a7c flags=0x0018001040000215 */ enum EGameModeType GameModeType;
  /* offset=0x0a80 flags=0x0018001040000215 */ int32 StartReadyCountDownPlayerNum;
  /* offset=0x0a84 flags=0x0018001040000215 */ int32 PlayerNumPerTeam;
  /* offset=0x0aa0 flags=0x001c001040000201 */ UClass<AAIController>* AIControllerClass;
  /* offset=0x0ab0 flags=0x0028081040000201 */ UGameModeDataAsset* GameModeDataAsset;
  /* offset=0x0ab4 flags=0x0028081040000200 */ AActor* PlanePawn;
  /* offset=0x0ab8 flags=0x0028081040000200 */ bool bCanJump;
  /* offset=0x0ab9 flags=0x0028081040000200 */ bool bInitGlobalConfig;
  /* offset=0x0abc flags=0x0028081040080208 */ UGameModeState* CurrentState;
  /* offset=0x0ac0 flags=0x002a081040080209 */ UGameModeState* GameModeStateActive;
  /* offset=0x0ac4 flags=0x002a081040080209 */ UGameModeState* GameModeStateReady;
  /* offset=0x0ac8 flags=0x002a081040080209 */ UGameModeState* GameModeStateFlying;
  /* offset=0x0acc flags=0x002a081040080209 */ UGameModeState* GameModeStateFighting;
  /* offset=0x0ad0 flags=0x002a081040080209 */ UGameModeState* GameModeStateFinished;
  /* offset=0x0b14 flags=0x0018001040080209 */ UAIActingComponent* AIActingComp;

  AActor* GetPlane();
  void SetPlane(AActor* Plane);
  void SpawnAI(int32 Num);
};

class ABattleRoyaleGameModeTeam: public ABattleRoyaleGameMode {
};

class UBehaviorTree: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UBTCompositeNode* RootNode;
  /* offset=0x0020 flags=0x0018001040000200 */ UBlackboardData* BlackboardAsset;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<UBTDecorator*> RootDecorators;
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<struct FBTDecoratorLogic> RootDecoratorOps;
};

class UBehaviorTreeComponent: public UBrainComponent {
  /* offset=0x0100 flags=0x0020080000002200 */ TArray<UBTNode*> NodeInstances;

  void AddCooldownTagDuration(struct FGameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);
  float GetTagCooldownEndTime(struct FGameplayTag CooldownTag);
  void SetDynamicSubtree(struct FGameplayTag InjectTag, UBehaviorTree* BehaviorAsset);
};

class UBehaviorTreeManager: public UObject {
  /* offset=0x001c flags=0x0018001040004200 */ int32 MaxDebuggerSteps;
  /* offset=0x0020 flags=0x0020080000000200 */ TArray<struct FBehaviorTreeTemplateInfo> LoadedTemplates;
  /* offset=0x002c flags=0x0020088000000208 */ TArray<UBehaviorTreeComponent*> ActiveComponents;
};

class UBehaviorTreeTypes: public UObject {
};

class UBigTreasureChest_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UWrapBox* AbsoluteWrapBox;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* RandomTitle;
  /* offset=0x0240 flags=0x000a0010c008020c */ UWrapBox* RandomWrapBox;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x0248 flags=0x0008001040010a05 */ Abp_noticebox_panel_C* MySelf;
};

class UBillboardComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000205 */ UTexture2D* Sprite;
  /* offset=0x05c4 flags=0x0018001000000005 */ uint8 bIsScreenSizeScaled:1;
  /* offset=0x05c8 flags=0x0018001040000205 */ float ScreenSize;
  /* offset=0x05cc flags=0x0018001040000205 */ float U;
  /* offset=0x05d0 flags=0x0018001040000205 */ float UL;
  /* offset=0x05d4 flags=0x0018001040000205 */ float V;
  /* offset=0x05d8 flags=0x0018001040000205 */ float VL;

  void SetSprite(UTexture2D* NewSprite);
  void SetSpriteAndUV(UTexture2D* NewSprite, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
  void SetUV(int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
};

class UBlackboardComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040082208 */ UBrainComponent* BrainComp;
  /* offset=0x00b0 flags=0x0028081040002200 */ UBlackboardData* BlackboardAsset;
  /* offset=0x00cc flags=0x0020080000002200 */ TArray<UBlackboardKeyType*> KeyInstances;

  void ClearValue(FName KeyName);
  bool GetLocationFromEntry(FName KeyName, struct FVector ResultLocation);
  bool GetRotationFromEntry(FName KeyName, struct FRotator ResultRotation);
  bool GetValueAsBool(FName KeyName);
  UClass<UObject>* GetValueAsClass(FName KeyName);
  uint8 GetValueAsEnum(FName KeyName);
  float GetValueAsFloat(FName KeyName);
  int32 GetValueAsInt(FName KeyName);
  FName GetValueAsName(FName KeyName);
  UObject* GetValueAsObject(FName KeyName);
  struct FRotator GetValueAsRotator(FName KeyName);
  FString GetValueAsString(FName KeyName);
  struct FVector GetValueAsVector(FName KeyName);
  bool IsVectorValueSet(FName KeyName);
  void SetValueAsBool(FName KeyName, bool BoolValue);
  void SetValueAsClass(FName KeyName, UClass<UObject>* ClassValue);
  void SetValueAsEnum(FName KeyName, uint8 EnumValue);
  void SetValueAsFloat(FName KeyName, float FloatValue);
  void SetValueAsInt(FName KeyName, int32 IntValue);
  void SetValueAsName(FName KeyName, FName NameValue);
  void SetValueAsObject(FName KeyName, UObject* ObjectValue);
  void SetValueAsRotator(FName KeyName, struct FRotator VectorValue);
  void SetValueAsString(FName KeyName, FString StringValue);
  void SetValueAsVector(FName KeyName, struct FVector VectorValue);
};

class UBlackboardData: public UDataAsset {
  /* offset=0x0020 flags=0x0018001040000201 */ UBlackboardData* Parent;
  /* offset=0x0024 flags=0x0010008000000201 */ TArray<struct FBlackboardEntry> Keys;
  /* offset=0x0030 flags=0x0048001000000000 */ uint8 bHasSynchronizedKeys:1;
};

class UBlackboardKeyType: public UObject {
};

class UBlackboardKeyType_Bool: public UBlackboardKeyType {
};

class UBlackboardKeyType_Class: public UBlackboardKeyType {
  /* offset=0x0020 flags=0x0018001040010201 */ UClass<UObject>* BaseClass;
};

class UBlackboardKeyType_Enum: public UBlackboardKeyType {
  /* offset=0x0020 flags=0x0018001040010201 */ UEnum* EnumType;
  /* offset=0x0024 flags=0x0018000000010201 */ FString EnumName;
  /* offset=0x0030 flags=0x0018001000030001 */ uint8 bIsEnumNameValid:1;
};

class UBlackboardKeyType_Float: public UBlackboardKeyType {
};

class UBlackboardKeyType_Int: public UBlackboardKeyType {
};

class UBlackboardKeyType_Name: public UBlackboardKeyType {
};

class UBlackboardKeyType_NativeEnum: public UBlackboardKeyType {
  /* offset=0x0020 flags=0x0018000000010201 */ FString EnumName;
  /* offset=0x002c flags=0x0018001040000200 */ UEnum* EnumType;
};

class UBlackboardKeyType_Object: public UBlackboardKeyType {
  /* offset=0x0020 flags=0x0018001040010201 */ UClass<UObject>* BaseClass;
};

class UBlackboardKeyType_Rotator: public UBlackboardKeyType {
};

class UBlackboardKeyType_String: public UBlackboardKeyType {
  /* offset=0x0020 flags=0x0018000000000200 */ FString StringValue;
};

class UBlackboardKeyType_Vector: public UBlackboardKeyType {
};

class UBlendProfile: public UObject {
  /* offset=0x0020 flags=0x0018001040000200 */ USkeleton* OwningSkeleton;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<struct FBlendProfileBoneEntry> ProfileEntries;
};

class UBlendSpace: public UBlendSpaceBase {
  /* offset=0x00f8 flags=0x0028081040000201 */ uint8 AxisToScaleAnimation;
};

class UBlendSpace1D: public UBlendSpaceBase {
  /* offset=0x00f8 flags=0x0018001040000200 */ bool bScaleAnimation;
};

class UBlendSpaceBase: public UAnimationAsset {
  /* offset=0x0060 flags=0x0018001040000200 */ bool bRotationBlendInMeshSpace;
  /* offset=0x0064 flags=0x0018001040002200 */ float AnimLength;
  /* offset=0x0068 flags=0x0010001000000001 */ struct FInterpolationParameter InterpolationParam;
  /* offset=0x0080 flags=0x0018001040000201 */ float TargetWeightInterpolationSpeedPerSec;
  /* offset=0x0084 flags=0x0018001040000201 */ uint8 NotifyTriggerMode;
  /* offset=0x0088 flags=0x0020080000000201 */ TArray<struct FPerBoneInterpolation> PerBoneBlend;
  /* offset=0x0094 flags=0x0028081040000200 */ int32 SampleIndexWithMarkers;
  /* offset=0x0098 flags=0x0020080000000201 */ TArray<struct FBlendSample> SampleData;
  /* offset=0x00a4 flags=0x0020080000000200 */ TArray<struct FEditorElement> GridSamples;
  /* offset=0x00b0 flags=0x0020080000000001 */ struct FBlendParameter BlendParameters;
};

class UBlendableInterface: public UInterface {
};

class ABlockingVolume: public AVolume {
};

class UBlueprint: public UBlueprintCore {
  /* offset=0x0038 flags=0x0018001000004000 */ uint8 bRecompileOnLoad:1;
  /* offset=0x003c flags=0x001c011040000200 */ UClass<UObject>* ParentClass;
  /* offset=0x0040 flags=0x0018001040002200 */ UObject* PRIVATE_InnermostPreviousCDO;
  /* offset=0x0044 flags=0x0018001000002000 */ uint8 bHasBeenRegenerated:1;
  /* offset=0x0044 flags=0x0018001000002000 */ uint8 bIsRegeneratingOnLoad:1;
  /* offset=0x0048 flags=0x0018001040000200 */ USimpleConstructionScript* SimpleConstructionScript;
  /* offset=0x004c flags=0x0010008000000208 */ TArray<UActorComponent*> ComponentTemplates;
  /* offset=0x0058 flags=0x0010000000000200 */ TArray<UTimelineTemplate*> Timelines;
  /* offset=0x0064 flags=0x0018001040000200 */ UInheritableComponentHandler* InheritableComponentHandler;
  /* offset=0x0068 flags=0x0018011040000200 */ uint8 BlueprintType;
  /* offset=0x006c flags=0x0018001040000200 */ int32 BlueprintSystemVersion;
  /* offset=0x0150 flags=0x0048001060000200 */ bool bNativize;
};

class UBlueprintAsyncActionBase: public UObject {
  void Activate();
};

class UBlueprintCore: public UObject {
  /* offset=0x001c flags=0x001c001440002200 */ UClass<UObject>* SkeletonGeneratedClass;
  /* offset=0x0020 flags=0x001c001440000200 */ UClass<UObject>* GeneratedClass;
  /* offset=0x0024 flags=0x0018001040000200 */ bool bLegacyNeedToPurgeSkelRefs;
  /* offset=0x0025 flags=0x0048001040000200 */ bool bLegacyGeneratedClassIsAuthoritative;
  /* offset=0x0028 flags=0x0048001040000000 */ struct FGuid BlueprintGuid;
};

class UBlueprintFunctionLibrary: public UObject {
};

class UBlueprintGameplayTagLibrary: public UBlueprintFunctionLibrary {
  void AddGameplayTag(struct FGameplayTagContainer TagContainer, struct FGameplayTag Tag);
  void AppendGameplayTagContainers(struct FGameplayTagContainer InOutTagContainer, struct FGameplayTagContainer InTagContainer);
  void BreakGameplayTagContainer(struct FGameplayTagContainer GameplayTagContainer, TArray<struct FGameplayTag> GameplayTags);
  bool DoesContainerMatchTagQuery(struct FGameplayTagContainer TagContainer, struct FGameplayTagQuery TagQuery);
  bool DoesTagAssetInterfaceHaveTag(UInterface<UGameplayTagAssetInterface>* TagContainerInterface, struct FGameplayTag Tag);
  bool EqualEqual_GameplayTag(struct FGameplayTag A, struct FGameplayTag B);
  bool EqualEqual_GameplayTagContainer(struct FGameplayTagContainer A, struct FGameplayTagContainer B);
  void GetAllActorsOfClassMatchingTagQuery(UObject* WorldContextObject, UClass<AActor>* ActorClass, struct FGameplayTagQuery GameplayTagQuery, TArray<AActor*> OutActors);
  FString GetDebugStringFromGameplayTag(struct FGameplayTag GameplayTag);
  FString GetDebugStringFromGameplayTagContainer(struct FGameplayTagContainer TagContainer);
  int32 GetNumGameplayTagsInContainer(struct FGameplayTagContainer TagContainer);
  FName GetTagName(struct FGameplayTag GameplayTag);
  bool HasAllMatchingGameplayTags(UInterface<UGameplayTagAssetInterface>* TagContainerInterface, struct FGameplayTagContainer OtherContainer);
  bool HasAllTags(struct FGameplayTagContainer TagContainer, struct FGameplayTagContainer OtherContainer, bool bExactMatch);
  bool HasAnyTags(struct FGameplayTagContainer TagContainer, struct FGameplayTagContainer OtherContainer, bool bExactMatch);
  bool HasTag(struct FGameplayTagContainer TagContainer, struct FGameplayTag Tag, bool bExactMatch);
  bool IsGameplayTagValid(struct FGameplayTag GameplayTag);
  struct FGameplayTagContainer MakeGameplayTagContainerFromArray(TArray<struct FGameplayTag> GameplayTags);
  struct FGameplayTagContainer MakeGameplayTagContainerFromTag(struct FGameplayTag SingleTag);
  struct FGameplayTagQuery MakeGameplayTagQuery(struct FGameplayTagQuery TagQuery);
  struct FGameplayTag MakeLiteralGameplayTag(struct FGameplayTag Value);
  struct FGameplayTagContainer MakeLiteralGameplayTagContainer(struct FGameplayTagContainer Value);
  bool MatchesAnyTags(struct FGameplayTag TagOne, struct FGameplayTagContainer OtherContainer, bool bExactMatch);
  bool MatchesTag(struct FGameplayTag TagOne, struct FGameplayTag TagTwo, bool bExactMatch);
  bool NotEqual_GameplayTag(struct FGameplayTag A, struct FGameplayTag B);
  bool NotEqual_GameplayTagContainer(struct FGameplayTagContainer A, struct FGameplayTagContainer B);
  bool NotEqual_TagContainerTagContainer(struct FGameplayTagContainer A, FString B);
  bool NotEqual_TagTag(struct FGameplayTag A, FString B);
  bool RemoveGameplayTag(struct FGameplayTagContainer TagContainer, struct FGameplayTag Tag);
};

class UBlueprintGeneratedClass: public UClass {
  /* offset=0x014c flags=0x0018011040000200 */ int32 NumReplicatedProperties;
  /* offset=0x0150 flags=0x0018001000000000 */ uint8 bHasNativizedParent:1;
  /* offset=0x0154 flags=0x0010000000000200 */ TArray<UDynamicBlueprintBinding*> DynamicBindingObjects;
  /* offset=0x0160 flags=0x0010008000000208 */ TArray<UActorComponent*> ComponentTemplates;
  /* offset=0x016c flags=0x0010000000000200 */ TArray<UTimelineTemplate*> Timelines;
  /* offset=0x0178 flags=0x0018001040000200 */ USimpleConstructionScript* SimpleConstructionScript;
  /* offset=0x017c flags=0x0018001040000200 */ UInheritableComponentHandler* InheritableComponentHandler;
  /* offset=0x0180 flags=0x0018001040000200 */ UStructProperty* UberGraphFramePointerProperty;
  /* offset=0x0184 flags=0x0018001040000200 */ UFunction* UberGraphFunction;
  /* offset=0x0188 flags=0x0010000000000200 */ TMap<FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;
};

class UBlueprintMapLibrary: public UBlueprintFunctionLibrary {
  void Map_Add(TMap<int32, int32> TargetMap, int32 Key, int32 Value);
  void Map_Clear(TMap<int32, int32> TargetMap);
  bool Map_Contains(TMap<int32, int32> TargetMap, int32 Key);
  bool Map_Find(TMap<int32, int32> TargetMap, int32 Key, int32 Value);
  void Map_Keys(TMap<int32, int32> TargetMap, TArray<int32> Keys);
  int32 Map_Length(TMap<int32, int32> TargetMap);
  bool Map_Remove(TMap<int32, int32> TargetMap, int32 Key);
  void Map_Values(TMap<int32, int32> TargetMap, TArray<int32> Values);
  void SetMapPropertyByName(UObject* Object, FName PropertyName, TMap<int32, int32> Value);
};

class UBlueprintPlatformLibrary: public UBlueprintFunctionLibrary {
  void CancelLocalNotification(FString ActivationEvent);
  void ClearAllLocalNotifications();
  void GetLaunchNotification(bool NotificationLaunchedApp, FString ActivationEvent, int32 FireDate);
  void ScheduleLocalNotificationAtTime(struct FDateTime FireDateTime, bool LocalTime, FText Title, FText Body, FText Action, FString ActivationEvent);
  void ScheduleLocalNotificationBadgeAtTime(struct FDateTime FireDateTime, bool LocalTime, FString ActivationEvent);
  void ScheduleLocalNotificationBadgeFromNow(int32 inSecondsFromNow, FString ActivationEvent);
  void ScheduleLocalNotificationFromNow(int32 inSecondsFromNow, FText Title, FText Body, FText Action, FString ActivationEvent);
};

class UBlueprintSetLibrary: public UBlueprintFunctionLibrary {
  void SetSetPropertyByName(UObject* Object, FName PropertyName, TSet<int32> Value);
  void Set_Add(TSet<int32> TargetSet, int32 NewItem);
  void Set_AddItems(TSet<int32> TargetSet, TArray<int32> NewItems);
  void Set_Clear(TSet<int32> TargetSet);
  bool Set_Contains(TSet<int32> TargetSet, int32 ItemToFind);
  void Set_Difference(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
  void Set_Intersection(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
  int32 Set_Length(TSet<int32> TargetSet);
  bool Set_Remove(TSet<int32> TargetSet, int32 Item);
  void Set_RemoveItems(TSet<int32> TargetSet, TArray<int32> Items);
  void Set_ToArray(TSet<int32> A, TArray<int32> Result);
  void Set_Union(TSet<int32> A, TSet<int32> B, TSet<int32> Result);
};

class UBmpImageCaptureSettings: public UMovieSceneCaptureProtocolSettings {
};

class UBodySetup: public UObject {
  /* offset=0x001c flags=0x0010000000000001 */ struct FKAggregateGeom AggGeom;
  /* offset=0x0050 flags=0x0018001040020201 */ FName BoneName;
  /* offset=0x0058 flags=0x0018001040000201 */ uint8 PhysicsType;
  /* offset=0x0059 flags=0x0018001020000000 */ uint8 bAlwaysFullAnimWeight:1;
  /* offset=0x0059 flags=0x0018001000000001 */ uint8 bConsiderForBounds:1;
  /* offset=0x0059 flags=0x0018001000002000 */ uint8 bMeshCollideAll:1;
  /* offset=0x0059 flags=0x0018001000000001 */ uint8 bDoubleSidedGeometry:1;
  /* offset=0x0059 flags=0x0018001000000000 */ uint8 bGenerateNonMirroredCollision:1;
  /* offset=0x0059 flags=0x0018001000000000 */ uint8 bSharedCookedData:1;
  /* offset=0x0059 flags=0x0018001000000000 */ uint8 bGenerateMirroredCollision:1;
  /* offset=0x005c flags=0x0018001040000201 */ UPhysicalMaterial* PhysMaterial;
  /* offset=0x0060 flags=0x0018001040000201 */ uint8 CollisionReponse;
  /* offset=0x0061 flags=0x0018001040000201 */ uint8 CollisionTraceFlag;
  /* offset=0x0070 flags=0x0010000000000001 */ struct FBodyInstance DefaultInstance;
  /* offset=0x0260 flags=0x0010041040000001 */ struct FWalkableSlopeOverride WalkableSlopeOverride;
  /* offset=0x0270 flags=0x0018001060000200 */ float BuildScale;
  /* offset=0x0274 flags=0x0018001040000000 */ struct FVector BuildScale3D;
};

class UBoneMaskFilter: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FInputBlendPose> BlendPoses;
};

class UBookMark: public UObject {
  /* offset=0x001c flags=0x0018001040000001 */ struct FVector Location;
  /* offset=0x0028 flags=0x0010001040000001 */ struct FRotator Rotation;
  /* offset=0x0034 flags=0x0010000000000201 */ TArray<FString> HiddenLevels;
};

class UBookMark2D: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ float Zoom2D;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FIntPoint Location;
};

class UBoolBinding: public UPropertyBinding {
  bool GetValue();
};

class UBoolProperty: public UProperty {
};

class UBorder: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x00d6 flags=0x0018001040000215 */ uint8 VerticalAlignment;
  /* offset=0x00d7 flags=0x0018041000000015 */ uint8 bShowEffectWhenDisabled:1;
  /* offset=0x00d8 flags=0x0018001040000015 */ struct FLinearColor ContentColorAndOpacity;
  /* offset=0x00e8 flags=0x0010001000080200 */ FGetLinearColor ContentColorAndOpacityDelegate;
  /* offset=0x00f8 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0108 flags=0x0010000000000015 */ struct FSlateBrush Background;
  /* offset=0x0170 flags=0x0010001000080200 */ FGetSlateBrush BackgroundDelegate;
  /* offset=0x0180 flags=0x0018001040000015 */ struct FLinearColor BrushColor;
  /* offset=0x0190 flags=0x0010001000080200 */ FGetLinearColor BrushColorDelegate;
  /* offset=0x01a0 flags=0x0018001040000015 */ struct FVector2D DesiredSizeScale;
  /* offset=0x01a8 flags=0x0010001000080201 */ FOnPointerEvent OnMouseButtonDownEvent;
  /* offset=0x01b8 flags=0x0010001000080201 */ FOnPointerEvent OnMouseButtonUpEvent;
  /* offset=0x01c8 flags=0x0010001000080201 */ FOnPointerEvent OnMouseMoveEvent;
  /* offset=0x01d8 flags=0x0010001000080201 */ FOnPointerEvent OnMouseDoubleClickEvent;

  UMaterialInstanceDynamic* GetDynamicMaterial();
  void SetBrush(struct FSlateBrush InBrush);
  void SetBrushColor(struct FLinearColor InBrushColor);
  void SetBrushFromAsset(USlateBrushAsset* Asset);
  void SetBrushFromMaterial(UMaterialInterface* Material);
  void SetBrushFromTexture(UTexture2D* Texture);
  void SetContentColorAndOpacity(struct FLinearColor InContentColorAndOpacity);
  void SetDesiredSizeScale(struct FVector2D InScale);
  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UBorderSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0020081000000001 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0028081040000201 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0028081040000201 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UBoxComponent: public UShapeComponent {
  /* offset=0x05d0 flags=0x002808104000001d */ struct FVector BoxExtent;

  struct FVector GetScaledBoxExtent();
  struct FVector GetUnscaledBoxExtent();
  void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps);
};

class ABoxReflectionCapture: public AReflectionCapture {
};

class UBoxReflectionCaptureComponent: public UReflectionCaptureComponent {
  /* offset=0x02cc flags=0x0018001040000205 */ float BoxTransitionDistance;
  /* offset=0x02d0 flags=0x0018001040080208 */ UBoxComponent* PreviewInfluenceBox;
  /* offset=0x02d4 flags=0x0018001040080208 */ UBoxComponent* PreviewCaptureBox;
};

class UBrainComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x0028081040082208 */ UBlackboardComponent* BlackboardComp;
  /* offset=0x00b4 flags=0x0028081040002200 */ AAIController* AIOwner;

  bool IsPaused();
  bool IsRunning();
  void RestartLogic();
  void StopLogic(FString Reason);
};

class UBreakpoint: public UObject {
  /* offset=0x001c flags=0x0048001000002000 */ uint8 bEnabled:1;
  /* offset=0x0020 flags=0x0048001040000200 */ UEdGraphNode* Node;
  /* offset=0x0024 flags=0x0048001000000000 */ uint8 bStepOnce:1;
  /* offset=0x0024 flags=0x0048001000000000 */ uint8 bStepOnce_WasPreviouslyDisabled:1;
  /* offset=0x0024 flags=0x0048001000000000 */ uint8 bStepOnce_RemoveAfterHit:1;
};

class ABrush: public AActor {
  /* offset=0x02a8 flags=0x0018001040000201 */ uint8 BrushType;
  /* offset=0x02ac flags=0x0018001040000000 */ struct FColor BrushColor;
  /* offset=0x02b0 flags=0x0018001040000200 */ int32 PolyFlags;
  /* offset=0x02b4 flags=0x0018001000000000 */ uint8 bColored:1;
  /* offset=0x02b4 flags=0x0018001000000000 */ uint8 bSolidWhenSelected:1;
  /* offset=0x02b4 flags=0x0018001000000000 */ uint8 bPlaceableFromClassBrowser:1;
  /* offset=0x02b4 flags=0x0018001000000000 */ uint8 bNotForClientOrServer:1;
  /* offset=0x02b8 flags=0x001a001040080208 */ UModel* Brush;
  /* offset=0x02bc flags=0x00480010400a021d */ UBrushComponent* BrushComponent;
  /* offset=0x02c0 flags=0x0018001000000000 */ uint8 bInManipulation:1;
  /* offset=0x02c4 flags=0x0010000000000200 */ TArray<struct FGeomSelection> SavedSelections;
};

class UBrushBinding: public UPropertyBinding {
  struct FSlateBrush GetValue();
};

class UBrushBuilder: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString BitmapFilename;
  /* offset=0x0028 flags=0x0018000000000200 */ FString ToolTip;
  /* offset=0x0034 flags=0x0018001000002000 */ uint8 NotifyBadParams:1;
  /* offset=0x0038 flags=0x0020080000000200 */ TArray<struct FVector> Vertices;
  /* offset=0x0044 flags=0x0020080000000200 */ TArray<struct FBuilderPoly> Polys;
  /* offset=0x0050 flags=0x0028081040000200 */ FName Layer;
  /* offset=0x0058 flags=0x0028081000000000 */ uint8 MergeCoplanars:1;
};

class UBrushComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000200 */ UModel* Brush;
  /* offset=0x05c4 flags=0x0018001040000200 */ UBodySetup* BrushBodySetup;
  /* offset=0x05c8 flags=0x0018001060000000 */ struct FVector PrePivot;
};

class ABrushShape: public ABrush {
};

class ABuffManagerPathClass: public AActor {
  /* offset=0x02a8 flags=0x0018000000004200 */ FString BuffManagerBlueprintPath;
};

class UBugReporter: public UObject {
  TArray<uint8> CompressLog();
  void ReadZipLog(FString Filename);
  void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z);
  void SendScreenShot(FString errorReason, FString errorDescription, FString imagePath, float X, float Y, float Z);
};

class UBuildPatchManifest: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ uint8 ManifestFileVersion;
  /* offset=0x001d flags=0x0018001040000200 */ bool bIsFileData;
  /* offset=0x0020 flags=0x0018001040000200 */ uint32 appId;
  /* offset=0x0024 flags=0x0018000000000200 */ FString AppName;
  /* offset=0x0030 flags=0x0018000000000200 */ FString BuildVersion;
  /* offset=0x003c flags=0x0018000000000200 */ FString LaunchExe;
  /* offset=0x0048 flags=0x0018000000000200 */ FString LaunchCommand;
  /* offset=0x0054 flags=0x0010000000000200 */ TSet<FString> PrereqIds;
  /* offset=0x0090 flags=0x0018000000000200 */ FString PrereqName;
  /* offset=0x009c flags=0x0018000000000200 */ FString PrereqPath;
  /* offset=0x00a8 flags=0x0018000000000200 */ FString PrereqArgs;
  /* offset=0x00b4 flags=0x0010000000000200 */ TArray<struct FFileManifestData> FileManifestList;
  /* offset=0x00c0 flags=0x0010000000000200 */ TArray<struct FChunkInfoData> ChunkList;
  /* offset=0x00cc flags=0x0010000000000200 */ TArray<struct FCustomFieldData> CustomFields;
};

class UBulletHitInfoUploadComponent: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0018001040000200 */ float UploadInterval;
  /* offset=0x00b4 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;

  void AddHitData(struct FBulletHitInfoUploadData Data, struct FLocalShootHitData ShootData);
  void HandleOnWeaponStartFire();
  void HandleOnWeaponStopFire();
};

class UBulletMovementComponent: public UProjectileMovementComponent {
  /* offset=0x0140 flags=0x0018001040000204 */ bool bNeedStopWhenImpact;

  void ForceStop();
};

class UBulletTrackComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;

  float GetCurDeviation();
  struct FVector GetCurRecoilInfo();
  void OnWeaponShoot();
  void OnWeaponStartFire();
  void OnWeaponStopFire();
};

class UBuoyancyComponent: public UMovementComponent {
  /* offset=0x00e4 flags=0x0018041040000205 */ AOceanManager* OceanManager;
  /* offset=0x00e8 flags=0x0018001040000205 */ float MeshDensity;
  /* offset=0x00ec flags=0x0018001040000205 */ float FluidDensity;
  /* offset=0x00f0 flags=0x0018001040000205 */ float FluidLinearDamping;
  /* offset=0x00f4 flags=0x0018001040000205 */ float FluidAngularDamping;
  /* offset=0x00f8 flags=0x0018041040000005 */ struct FVector VelocityDamper;
  /* offset=0x0104 flags=0x0018001040000205 */ bool ClampMaxVelocity;
  /* offset=0x0108 flags=0x0018001040000205 */ float MaxUnderwaterVelocity;
  /* offset=0x010c flags=0x0018001040000205 */ float TestPointRadius;
  /* offset=0x0110 flags=0x0010000000000205 */ TArray<struct FVector> TestPoints;
  /* offset=0x011c flags=0x0010040000000205 */ TArray<float> PointDensityOverride;
  /* offset=0x0128 flags=0x0018041040000205 */ bool DrawDebugPoints;
  /* offset=0x0129 flags=0x0018041040000205 */ bool EnableStayUprightConstraint;
  /* offset=0x012c flags=0x0018041040000205 */ float StayUprightStiffness;
  /* offset=0x0130 flags=0x0018041040000205 */ float StayUprightDamping;
  /* offset=0x0134 flags=0x0010041040000005 */ struct FRotator StayUprightDesiredRotation;
  /* offset=0x0140 flags=0x0018041040000205 */ bool EnableWaveForces;
  /* offset=0x0144 flags=0x0018041040000205 */ float WaveForceMultiplier;
};

class UBuoyancyForceComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018041040000205 */ AOceanManager* OceanManager;
  /* offset=0x0274 flags=0x0018001040000205 */ float MeshDensity;
  /* offset=0x0278 flags=0x0018001040000205 */ float FluidDensity;
  /* offset=0x027c flags=0x0018001040000205 */ float FluidLinearDamping;
  /* offset=0x0280 flags=0x0018001040000205 */ float FluidAngularDamping;
  /* offset=0x0284 flags=0x0018041040000005 */ struct FVector VelocityDamper;
  /* offset=0x0290 flags=0x0018001040000205 */ bool ClampMaxVelocity;
  /* offset=0x0294 flags=0x0018001040000205 */ float MaxUnderwaterVelocity;
  /* offset=0x0298 flags=0x0018001040000205 */ float TestPointRadius;
  /* offset=0x029c flags=0x0010000000000205 */ TArray<struct FVector> TestPoints;
  /* offset=0x02a8 flags=0x0018001040000205 */ bool ApplyForceToBones;
  /* offset=0x02a9 flags=0x0018001040000205 */ bool SnapToSurfaceIfNoPhysics;
  /* offset=0x02aa flags=0x0018001040000205 */ bool TwoGerstnerIterations;
  /* offset=0x02ac flags=0x0010040000000205 */ TArray<float> PointDensityOverride;
  /* offset=0x02b8 flags=0x0010040000000205 */ TArray<struct FStructBoneOverride> BoneOverride;
  /* offset=0x02c4 flags=0x0018041040000205 */ bool DrawDebugPoints;
  /* offset=0x02c5 flags=0x0018041040000205 */ bool EnableStayUprightConstraint;
  /* offset=0x02c8 flags=0x0018041040000205 */ float StayUprightStiffness;
  /* offset=0x02cc flags=0x0018041040000205 */ float StayUprightDamping;
  /* offset=0x02d0 flags=0x0010041040000005 */ struct FRotator StayUprightDesiredRotation;
  /* offset=0x02dc flags=0x0018041040000205 */ bool EnableWaveForces;
  /* offset=0x02e0 flags=0x0018041040000205 */ float WaveForceMultiplier;
  /* offset=0x02e4 flags=0x0018041040000205 */ uint8 TickGroup;
};

class UBuoyantMeshComponent: public UStaticMeshComponent {
  /* offset=0x062c flags=0x0018001040000205 */ bool bVerticalForcesOnly;
  /* offset=0x062d flags=0x0018001040000205 */ bool bUseWaterPatch;
  /* offset=0x062e flags=0x0018001040000205 */ bool bUseStaticForces;
  /* offset=0x062f flags=0x0018001040000205 */ bool bUseDynamicForces;
  /* offset=0x0630 flags=0x0018041040000205 */ AOceanManager* OceanManager;
  /* offset=0x0634 flags=0x0018001040000205 */ bool bDrawForceArrows;
  /* offset=0x0635 flags=0x0018001040000205 */ bool bDrawWaterline;
  /* offset=0x0636 flags=0x0018001040000205 */ bool bDrawVertices;
  /* offset=0x0637 flags=0x0018001040000205 */ bool bDrawTriangles;
  /* offset=0x0638 flags=0x0018001040000205 */ bool bDrawSubtriangles;
  /* offset=0x063c flags=0x0018001040000205 */ float ForceArrowSize;
  /* offset=0x0640 flags=0x0018001040000205 */ bool bOverrideMeshDensity;
  /* offset=0x0644 flags=0x0018001040000205 */ float MeshDensity;
  /* offset=0x0648 flags=0x0018001040000205 */ bool bOverrideMass;
  /* offset=0x064c flags=0x0018001040000205 */ float Mass;
  /* offset=0x0650 flags=0x0018001040000205 */ float WaterDensity;
  /* offset=0x066c flags=0x0048001040080208 */ UWaterHeightmapComponent* WaterHeightmap;
};

class UBusinessHelper: public UBlueprintFunctionLibrary {
  void BroadCastMSG(UFrontendHUD* FrontendHUD, FString DesManagerName, FString msg);
  UWidget* GetChildByName(UUserWidget* pParent, FString Name);
  int32 GetCurrentNetworkState();
  UUAEDataTable* GetDataTable(FString TableName);
  FString GetMobileBasePath(FString InPath);
  float GetTime();
  ALuaClassObj* UIGetLuaManager(UUAEUserWidget* pUIClass);
  UObject* UIGetResWithPath(FString DesManagerName);
};

class UButton: public UContentWidget {
  /* offset=0x00d8 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x00e0 flags=0x0010000000000005 */ struct FButtonStyle WidgetStyle;
  /* offset=0x02d8 flags=0x0018001040000015 */ struct FLinearColor ColorAndOpacity;
  /* offset=0x02e8 flags=0x0018001040000015 */ struct FLinearColor BackgroundColor;
  /* offset=0x02f8 flags=0x0018041040000215 */ uint8 ClickMethod;
  /* offset=0x02f9 flags=0x0018041040000215 */ uint8 TouchMethod;
  /* offset=0x02fa flags=0x0018001040000215 */ bool IsFocusable;
  /* offset=0x02fc flags=0x0010000010080200 */ FOnButtonClickedEvent OnClicked;
  /* offset=0x0308 flags=0x0010000010080200 */ FOnButtonPressedEvent OnPressed;
  /* offset=0x0314 flags=0x0010000010080200 */ FOnButtonReleasedEvent OnReleased;
  /* offset=0x0320 flags=0x0010000010080200 */ FOnButtonHoverEvent OnHovered;
  /* offset=0x032c flags=0x0010000010080200 */ FOnButtonHoverEvent OnUnhovered;

  bool IsPressed();
  void SetBackgroundColor(struct FLinearColor InBackgroundColor);
  void SetClickMethod(uint8 InClickMethod);
  void SetColorAndOpacity(struct FLinearColor InColorAndOpacity);
  void SetStyle(struct FButtonStyle InStyle);
  void SetTouchMethod(uint8 InTouchMethod);
};

class UButtonSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UButtonStyleAsset: public UObject {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FButtonStyle ButtonStyle;
};

class UButtonWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000005 */ struct FButtonStyle ButtonStyle;
};

class UByteProperty: public UNumericProperty {
};

class UCDBarUI_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CancelUse;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_CancelUse;
  /* offset=0x023c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ItemCDBar;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_ItemCDBar;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* Text_inUsing;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemCDTime;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock_RescueInterupted;
  /* offset=0x0258 flags=0x0000001000010005 */ struct FTimerHandle CountDownTimeHandle;
  /* offset=0x0260 flags=0x0008001040010205 */ float CountDownTotalTime;
  /* offset=0x0264 flags=0x0008001040010205 */ float CountDownElapsedTime;
  /* offset=0x0268 flags=0x0000100010010205 */ FUserCancelUse UserCancelUse;
  /* offset=0x0274 flags=0x0000001040010205 */ bool IsRescueingOtherFlag;
  /* offset=0x0278 flags=0x0008001040010205 */ float StartCDRealTime;

  void BndEvt__Button_CancelUse_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void CDTimer();
  void Construct();
  void CustomEvent(ACharacter* HelpWho, ACharacter* Owner, bool IsTurnInto, float RemainingRescueTime);
  void Destruct();
  void EndShowRescueTips();
  void ExecuteUbergraph_CDBarUI_BP(int32 EntryPoint, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue2, ACharacter* K2Node_CustomEvent_HelpWho, ACharacter* K2Node_CustomEvent_Owner, bool K2Node_CustomEvent_IsTurnInto, float K2Node_CustomEvent_RemainingRescueTime, FText CallFunc_Conv_FloatToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue2, AController* CallFunc_GetController_ReturnValue, AController* CallFunc_GetController_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_GetRealTimeSeconds_ReturnValue, FString CallFunc_GetLocalizeText_Text, float CallFunc_Subtract_FloatFloat_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_GetRealTimeSeconds_ReturnValue2, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, FOnCharacterEnterRescueingStatusChangeDelegate K2Node_CreateDelegate_OutputDelegate2, FString CallFunc_GetLocalizeText_Text2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, float CallFunc_GetRealTimeSeconds_ReturnValue3, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue3);
  void IsShowingRescueingUI(bool NewParam, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ItemCDBar(float ItemCDtime, UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);
  void OnIsRescueing(ACharacter* HelpWho, ACharacter* Owner, bool IsBecomeCan, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, AController* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
  void ReceivedInitWidget();
  void ThrowCDbar(float CDTime);
  void UserCancelUse__DelegateSignature(bool ShouldShow?, float Duration, FString Tips);
};

class UCH_Base_AnimBP_C: public USTExtraAnimInstance {
  /* offset=0x0310 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0318 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6E2A7352482A91283D96DEA609E8844D;
  /* offset=0x03a0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28;
  /* offset=0x0410 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF;
  /* offset=0x0480 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1;
  /* offset=0x0570 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_7D4B6F6A41970A5756B8039B8D969461;
  /* offset=0x05a8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C;
  /* offset=0x0698 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_E36EB3AF45864D643ACA079211777C8E;
  /* offset=0x06d0 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_BD0EC74E47B535EF6B18C4A8DED838DD;
  /* offset=0x0770 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A;
  /* offset=0x07e0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65;
  /* offset=0x0850 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4AF7842E48BA870576901EAD5D98FD97;
  /* offset=0x08c0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F32;
  /* offset=0x0930 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B692;
  /* offset=0x09a0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_EC06E1E64D8311D0E0069A9928F9668F;
  /* offset=0x0a10 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD22;
  /* offset=0x0a80 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_3A0B9BE541AF0C565C0D42AF2DBD2318;
  /* offset=0x0af0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8DB2A9AC4DADD28CC7221BABB1C0D1DF;
  /* offset=0x0b60 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_67B9BD5C4AF0D8A2C551A196C242D8A3;
  /* offset=0x0bd0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A107812;
  /* offset=0x0c40 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_FFC839A543B258FDDA6761A08BCCFF83;
  /* offset=0x0cb0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3;
  /* offset=0x0d20 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69;
  /* offset=0x0d90 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2;
  /* offset=0x0e00 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5;
  /* offset=0x0e70 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781;
  /* offset=0x0ee0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A;
  /* offset=0x0f50 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_517F5CD5482BE5F3342A3C9735993B78;
  /* offset=0x1040 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_4F9BC4314BE4DA84F20AD4A27AAC395A;
  /* offset=0x1078 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_EAD1E5C84F32372D021784A2EF8475962;
  /* offset=0x10d8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_319382F6488A353D1D804DB9D01F8D182;
  /* offset=0x1110 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA6962;
  /* offset=0x1170 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A2;
  /* offset=0x11a8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E66A242940BFD90AB027798326F3DC732;
  /* offset=0x1238 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_89B2C1D7410B6DA93F9E748F3954C9BB2;
  /* offset=0x1278 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3F8AD8714C18C68CD3447CAF3C2C7CD22;
  /* offset=0x1328 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_771B757847BE5BD1D142EF9DAC5AD1412;
  /* offset=0x1388 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B122;
  /* offset=0x13c0 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D2CE2C9A4279C6AC932399B65B2F7BEB;
  /* offset=0x1420 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B5955895672;
  /* offset=0x1458 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_EAD1E5C84F32372D021784A2EF847596;
  /* offset=0x14b8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_319382F6488A353D1D804DB9D01F8D18;
  /* offset=0x14f0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A2;
  /* offset=0x1530 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C272;
  /* offset=0x1590 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B2;
  /* offset=0x1620 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF282;
  /* offset=0x1680 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD2282;
  /* offset=0x16d8 flags=0x0000000000000000 */ struct FAnimNode_RotateRootBone AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE2;
  /* offset=0x1720 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA2;
  /* offset=0x1758 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696;
  /* offset=0x17b8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A;
  /* offset=0x17f0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E66A242940BFD90AB027798326F3DC73;
  /* offset=0x1880 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_89B2C1D7410B6DA93F9E748F3954C9BB;
  /* offset=0x18c0 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3F8AD8714C18C68CD3447CAF3C2C7CD2;
  /* offset=0x1970 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_771B757847BE5BD1D142EF9DAC5AD141;
  /* offset=0x19d0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B12;
  /* offset=0x1a08 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_76E9869E4F8B8132BE70E98F846027A4;
  /* offset=0x1a68 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B595589567;
  /* offset=0x1aa0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A;
  /* offset=0x1ae0 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C27;
  /* offset=0x1b40 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B;
  /* offset=0x1bd0 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28;
  /* offset=0x1c30 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228;
  /* offset=0x1c88 flags=0x0000000000000000 */ struct FAnimNode_RotateRootBone AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE;
  /* offset=0x1cd0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA;
  /* offset=0x1d08 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_58F3F41C45E674D0FEBB6DAE55DA0751;
  /* offset=0x1db0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329;
  /* offset=0x1e20 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_DAA4202148FD06D242386B9962C136D7;
  /* offset=0x1e90 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70;
  /* offset=0x1f00 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_CC9CAF5142BB29A1D155BB84F7E76CC6;
  /* offset=0x1f70 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E76D6EC347267C62BC0DBAB44E51E58F;
  /* offset=0x1fb0 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_CD994842417FC29AD89E31A33952C05D;
  /* offset=0x2008 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C43A22814944F3B225743C94D723944D;
  /* offset=0x2068 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_C706FA7B47DD3BE19025E1AF41B1767D;
  /* offset=0x20a0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E7F3743411A3726D8BD919415CBB1AE;
  /* offset=0x20e0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A7754639472ADB097643B9B30CBCBC66;
  /* offset=0x2120 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_528D52F7443BB34F0313688FCBD2C6F0;
  /* offset=0x21d0 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_60E3C51F409D1CB237D47FADD6617FFD;
  /* offset=0x2228 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_D4B28F76445E4C2A222EAD9D1E15415D;
  /* offset=0x2260 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6CD0E986488D07CA72057DAC5A9D8251;
  /* offset=0x22a0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_D7000B504F670B39E309E4AA59C5664A;
  /* offset=0x22d8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_06F33B634554EECA995589A2AB909737;
  /* offset=0x2368 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4D35A1BE46C7BC02C07714B2D201567F;
  /* offset=0x23a8 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_F028E9DB40F9AD00B0793CA4C0A8632C;
  /* offset=0x2458 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C17E08064AEF9AC3B1C1F8ACB0774A9A;
  /* offset=0x2498 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_325E24294401CCC7998154AEEDC26C3C;
  /* offset=0x24f0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E9A3C94D44667E3133F15EBCD6473CFE;
  /* offset=0x2530 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_FD4E561748889CBDBC41DEA234B6657F;
  /* offset=0x2588 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_F9C396004A7C985102F22CB8A1AB1A73;
  /* offset=0x25c0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6670BD2B447CC759303FF0A8093EC421;
  /* offset=0x2600 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_FB1D254D4AC56CF90865A7BB4C72310B;
  /* offset=0x2658 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_F7AFA96E4C2BAD5A4D6E77A2C6866680;
  /* offset=0x26b8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_436F192C4CFF7723690A47AFE7742FAA;
  /* offset=0x26f0 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_49DA45D64C0BEAD52ED89AA2C5B48025;
  /* offset=0x2790 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_5FF54EED4C3B756B4423358AB9200FF4;
  /* offset=0x2810 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0D5DE5104BA2B987043F35BB5E86F0F4;
  /* offset=0x2900 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F2A9F84DD9DFF0A114D6921E50F2C3;
  /* offset=0x2990 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_174894E5463498BD5CE2C58529C87F63;
  /* offset=0x29e8 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_458080404F9C55B75C14EF80F4847606;
  /* offset=0x2a98 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_319716464D13C4ECDD98CB9595742352;
  /* offset=0x2af0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675;
  /* offset=0x2b80 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43A9039E41EF41FC5803878ECCF2115F;
  /* offset=0x2c00 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_98F2602F4DC5A49F702075A17D51FF69;
  /* offset=0x2c58 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C52841094FE8E562E2A56D8B627DB87F;
  /* offset=0x2cd8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E3DD09C6414B93D2B07AFD8292226B55;
  /* offset=0x2d18 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9DBE522A45A8D981027EA092788669F5;
  /* offset=0x2d58 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_53EE3A2A450D3CD2DFF1D8AABC2ABCBB;
  /* offset=0x2d98 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_E94CE6A24C14A812C27178A06F48CDC2;
  /* offset=0x2df0 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_669C6C0C4F1D960F8CF708B30A34DE05;
  /* offset=0x2ea0 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C0423B7B4B4DF05801AB008AADD6B3AF;
  /* offset=0x2f20 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5C5AD2324912F17395ABDEADCD6DC14E;
  /* offset=0x2f60 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_614712C84DF758F9553360ACE636B658;
  /* offset=0x2fa0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DE00E31C423EDB53B1E7F4A812674E66;
  /* offset=0x2fe0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_80DFA2864DFC581215F60B95F7DC9380;
  /* offset=0x3050 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_8E329B0A47E416418324F99CE29A2401;
  /* offset=0x30c0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_B50C1AE84D9436FFBC33709F6F0EB106;
  /* offset=0x3130 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_FD5B9C494EBA47F8974327B3D99915E2;
  /* offset=0x31a0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_A39C00F94B8B17F3DF23A99C3DDB2E88;
  /* offset=0x3210 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_70C75196485F1D5760DEEA95ED192B22;
  /* offset=0x3280 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_AA9AA59A413FD2E4529A19A07184E4FA;
  /* offset=0x32e0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_04DFCD6146926108DD38F59F6296BDC1;
  /* offset=0x3318 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C96DE772492B98DB0DE80BB734C2116E;
  /* offset=0x3378 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_32A4049D45BACC2F0CF64A83AC96F015;
  /* offset=0x33b0 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_82D7333F471BE3862A2B8DA6A09047DF;
  /* offset=0x34a0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_E61FA9B94E955F50CF334983A7D033E8;
  /* offset=0x34d8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0A72F9B446B5F08D52514C9B023F198F;
  /* offset=0x35c8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_3DD95A6A4389DA801A52ADA435C84617;
  /* offset=0x3600 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_D405617F41B462783757E3BD69CB5422;
  /* offset=0x36a0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0;
  /* offset=0x3740 flags=0x0000000000000000 */ struct FAnimNode_AnimDynamics AnimGraphNode_AnimDynamics_8E57203E4703F8A43B3E2BBD49A0C850;
  /* offset=0x3968 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4B788175470581A209B76B973D807262;
  /* offset=0x39a0 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FF22DAD4497C34327A559AA3DCF2AE45;
  /* offset=0x39d8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55;
  /* offset=0x3a68 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_E1876D99465C1BE509443BAE29D33409;
  /* offset=0x3ae8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EB740BF14F05E0E2CD75D38005819776;
  /* offset=0x3b28 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_3C5A5896446BC6123B3769AAE4322641;
  /* offset=0x3b80 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE;
  /* offset=0x3c10 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C;
  /* offset=0x3cb0 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2A1F872D45E5392E9F1F09A1B323C944;
  /* offset=0x3ce8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F;
  /* offset=0x3d78 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E6B21B0C4937DF1281AB46ACB479F1A8;
  /* offset=0x3db0 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3CF2A8814FF520521F709DB0D580B2AA;
  /* offset=0x3e30 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6DBDD07943048BB8FB1AB1872A66392C;
  /* offset=0x3ec0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2223AA0840552DE31079948F03279486;
  /* offset=0x3f30 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5591C71F4B499957FC9875869010AFBD;
  /* offset=0x3f90 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_06C18A774D8A7CAF0CEA61B5AAF8FE06;
  /* offset=0x3fc8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_B5E3D5F54BF49B7FEA2836B43904823D;
  /* offset=0x40b8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_FD74DAEC46FC936302EAC2AA96FE5A26;
  /* offset=0x40f0 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_5E1D47794DDE33EFBAA0658413060407;
  /* offset=0x4190 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_334079BF4A13B2F29708F5AD7E43BC4C;
  /* offset=0x41d0 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7797FEE34831097BF63BF69B63F59DA9;
  /* offset=0x4250 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3719DDAD40D1FF3394A7D0B80B9261EB;
  /* offset=0x4290 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E3AD8F1649BB7F3A7B94E0A59FB8EB4D;
  /* offset=0x42d0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5D86B57B40F785D5CBDD7FAFDEB10D85;
  /* offset=0x4370 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_4546C2E14396773A08760F87EC7A5030;
  /* offset=0x4410 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DF0B9A3F4A87F2F63283E3B7F893A693;
  /* offset=0x4490 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D45B3A8B440B8F75AC62669D80085DEC;
  /* offset=0x44d0 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_EE180C9B4A80C7B3A22DAEA399479C78;
  /* offset=0x4508 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C22296634B3329DCD18642899124C07B;
  /* offset=0x4588 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9078DB934183E6FE05BE3281437127A2;
  /* offset=0x45c8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_71F7B5004EAE8C9FAD7F5EB7EAB7B2B7;
  /* offset=0x4608 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C042155F4FEE0D669BE9538048391AEC;
  /* offset=0x4698 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_C85B89004FD20DB22B7620BCA4F74F9B;
  /* offset=0x4738 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7CF1CF344753662A1160AE885528C832;
  /* offset=0x4770 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_7F8BF32A483C05C104D27D84BDDB8047;
  /* offset=0x47c8 flags=0x0000000000000000 */ struct FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F4294E2340D99B17779EAAB0ED7F1A6D;
  /* offset=0x48d8 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_31DAF3FB48F3FEDEE067079557EEB502;
  /* offset=0x4978 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_329338674411ED2637246E918B0C8247;
  /* offset=0x49b8 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A208C4634FF28D66ADBE8894952EBF91;
  /* offset=0x49f0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6A4D4BB543581CEA78717FAE00540633;
  /* offset=0x4a30 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_Root_54C1F0ED422F557A3D58A1B8B79F8C7E;
  /* offset=0x4a68 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7598CC394959662FCA78AC8C45BFA981;
  /* offset=0x4aa8 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_AB1D4C514AD9020A44FE8E99D5E88556;
  /* offset=0x4ae0 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4E98CC1C42BDBE0649258FB8F995D839;
  /* offset=0x4b18 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_622244D444EE7EE65F88C8957C185EEF;
  /* offset=0x4b58 flags=0x0000000000000000 */ struct FAnimNode_CopyBone AnimGraphNode_CopyBone_8EB0E4584E691BA977D67E8623780010;
  /* offset=0x4be8 flags=0x0000000000000000 */ struct FAnimNode_CopyBone AnimGraphNode_CopyBone_433E01AA46322548F90AAC9A54AA867B;
  /* offset=0x4c78 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0DEEA3AF4E997C82A08BD2BB8D58B653;
  /* offset=0x4cb0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6585C49F4E4165EE151CC2B97C7B2F66;
  /* offset=0x4d40 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13AC8CA44937FBA30AB9C392D3298681;
  /* offset=0x4d78 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_5556764F492E2C6DA3D2878EEAC0F256;
  /* offset=0x4e18 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_DCFFAEA6498F4FADF4518C97538818ED;
  /* offset=0x4eb8 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_457372C34A3A70E9726335ABBA036702;
  /* offset=0x4ef0 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_93C780F94070F509C4F343B8D8068090;
  /* offset=0x4f28 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_8919B31E42985B72D0E33C8776686E74;
  /* offset=0x4fc8 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1112DC0A47EE06CCC0FB99A6D56C5D7E;
  /* offset=0x5000 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_97A57B76440F2547804DE8B65E588D67;
  /* offset=0x5080 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3BEDDAF74266DACAD9913192AC0BB255;
  /* offset=0x50c0 flags=0x0000000000000000 */ struct FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2E8B4E54AF4690FC6B;
  /* offset=0x5118 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_8E1711044635813E18A35BABACA19DF6;
  /* offset=0x5170 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C99F2028434D0DBD74153089B2D6D5D3;
  /* offset=0x51b0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6;
  /* offset=0x5240 flags=0x0000001040000200 */ bool __SUBINSTANCE_Scoping_B6EA793741EF081F1D4B18BE9B29A9E8;
  /* offset=0x5244 flags=0x0000001000000000 */ struct FAnimParamList __SUBINSTANCE_AnimParam_B6EA793741EF081F1D4B18BE9B29A9E8;
  /* offset=0x52f8 flags=0x0008001040000200 */ ASTExtraBaseCharacter* __SUBINSTANCE_OwnerCharacter_B6EA793741EF081F1D4B18BE9B29A9E8;
  /* offset=0x5300 flags=0x0000000000000000 */ struct FAnimNode_SubInstance AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8;
  /* offset=0x5390 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6710C86C44E9A19488E5BC8A078BFDFB;
  /* offset=0x5410 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16B201EE496A66D027E50CB55A8ABD62;
  /* offset=0x5490 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F75C21C84EB4D615E9FC2F9A9D8853F5;
  /* offset=0x54d0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9101E8B941BCBB1C76031A872C91A3FC;
  /* offset=0x5510 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_FFBFF4D34DF5B64FD6C889BE58395DC3;
  /* offset=0x55a0 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_43D12E0C4B649EFEFCAA0AAD51F83A9F;
  /* offset=0x5690 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_C9E5C2DD4EE0358504AB258E8E111BFB;
  /* offset=0x56e8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B565B8E34E070BA67AF43D8C95D3D1C8;
  /* offset=0x5728 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8F240C29490F47D8AE158FB5AD3DA767;
  /* offset=0x5768 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_94F32D994F5433E04265498241C67688;
  /* offset=0x57e8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E192423B48FB7B33588F24899B296971;
  /* offset=0x5828 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_15B77F8E4E65599DF6232F9AEBCB3FBD;
  /* offset=0x5868 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6AE6DAEC4BF6E0703556299166FEC2E0;
  /* offset=0x58f8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A143725F42DD4467D41CA0BFB906A522;
  /* offset=0x5938 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_0712F5734AC37790D9A12F8096EE9C4E;
  /* offset=0x5990 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0F051A204E1F9A9172B92E86CB305A1E;
  /* offset=0x5a40 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BDED8D4B7DE338450804B21CB65D90;
  /* offset=0x5a80 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1DB39F3145453030AB0728B31A1B2049;
  /* offset=0x5ac0 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F70F6EE744718CA0AA76638976CD41C5;
  /* offset=0x5b40 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A31BBF2D4CD8CE0BDF9AEB9FDDF8B096;
  /* offset=0x5b80 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45E193384DE39BDB8BF5949428D8CDC4;
  /* offset=0x5bc0 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8;
  /* offset=0x5c60 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_115F73CC4F4EB99D57153CA9C0B25298;
  /* offset=0x5c98 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5E08C82C430E1441B11FF599B3529D1D;
  /* offset=0x5cd0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_072677AC41CA4240D324B3930D3EA4DB;
  /* offset=0x5d40 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_2206D959438B4BEE00C4CEAEB75AAAE1;
  /* offset=0x5db0 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_99A0D43B4625DB28C707B296F897BFAD;
  /* offset=0x5ea0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_A7C94BC84D1B4DE1402B89BCA46090CB;
  /* offset=0x5ed8 flags=0x0000000000000000 */ struct FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_0F8D596F47555CC144FC028F17052B3E;
  /* offset=0x5f30 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5D730D2D4EDF6AE6A4ED68A9B5C35841;
  /* offset=0x5fc0 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_366D910649DD3FA9AFBA1E838ACAEE57;
  /* offset=0x6020 flags=0x0000000000000000 */ struct FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_A1B0C8DB44D08E3A56A862AFD62E57B5;
  /* offset=0x6078 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_05C8C04348DBEA25A5E920B02D29A8A4;
  /* offset=0x6108 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37;
  /* offset=0x6168 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B;
  /* offset=0x61f8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_30EBA2CF48AAECAA27E497B8E46DB4AA;
  /* offset=0x62e8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_5FA6ECDD4695357A89E7C290FB015914;
  /* offset=0x6320 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_27FA876E4F2C51AB4FBB54A4314A9AF1;
  /* offset=0x63c0 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6B33B0BF4CFBDF576C90BD8B97298239;
  /* offset=0x6440 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_220F99A04986C25E9539B2A92C64D7A8;
  /* offset=0x64c0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0DA5260C449DE23EFBC503A7C77F7E00;
  /* offset=0x6500 flags=0x0000000000000000 */ struct FAnimNode_Fabrik AnimGraphNode_Fabrik_7A8F51D9413B323BAE44DE93B45D3E3F;
  /* offset=0x6660 flags=0x0000000000000000 */ struct FAnimNode_CopyBone AnimGraphNode_CopyBone_FF7C88124B1026BF8DCDC88396D68D5B;
  /* offset=0x66f0 flags=0x0000000000000000 */ struct FAnimNode_CopyBone AnimGraphNode_CopyBone_50B56FAC4284F32E25CFCEB28B6C5E3A;
  /* offset=0x6780 flags=0x0000000000000000 */ struct FAnimNode_Fabrik AnimGraphNode_Fabrik_E5E672DB4B056FA5A45612B8931A18B6;
  /* offset=0x68e0 flags=0x0000000000000000 */ struct FAnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8D15414541B3EB717FE0CF94A60DBD3B;
  /* offset=0x6990 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98;
  /* offset=0x6a20 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_146A209B40A3F224355CE8B312147029;
  /* offset=0x6a60 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E1808C9D43A40CE46EB8F6A534DC1ABC;
  /* offset=0x6aa0 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59;
  /* offset=0x6b40 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F95908034B8D9CFB2B155BB5933D94A9;
  /* offset=0x6b78 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0AFC812147DFC014CDE3A3825EA3CBE5;
  /* offset=0x6bb0 flags=0x0000000000000000 */ struct FAnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_8CF51CA948DE444C840E599C64AC2CEE;
  /* offset=0x6c08 flags=0x0000000000000000 */ struct FAnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8DBC60DEB297EA85BE;
  /* offset=0x6c60 flags=0x0000000000000000 */ struct FAnimNode_Slot AnimGraphNode_Slot_DDA68583465674C7C37912B7D4A4E50F;
  /* offset=0x6cb8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F645305E41722890FC22B391480ADEBD;
  /* offset=0x6d48 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EBA89DFF4E86CAD0DB7051A88EA338B1;
  /* offset=0x6dd8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_53CF4F3440A9C4343DF7A9AEE6CEAADC;
  /* offset=0x6e18 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_0923836A4A1516BEF39634B6DCB6E5B2;
  /* offset=0x6ea8 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_66CC0D1349829696746E958E9ACAFC19;
  /* offset=0x6f28 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8B02E1854C22FFA0A02A53B3DC679824;
  /* offset=0x6f68 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6BFA14514C88A4E80BBF529D327F9E58;
  /* offset=0x6fa8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9E98E946479BB6F25CF86B8F6C0246AD;
  /* offset=0x7098 flags=0x0000000000000000 */ struct FAnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F73C783C46F301367C465EAFEBA8559A;
  /* offset=0x71a8 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DCFADC264F289627ED48DF95EF386452;
  /* offset=0x7228 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B070AF83456F0A61C74614987FAE7C80;
  /* offset=0x7268 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_500C364647FAF281EAF7EEB643A787BE;
  /* offset=0x72a8 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5BC93D324FE71B76644074976E6CC454;
  /* offset=0x7338 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5A628AA4F9EFD70D6EA9BBA06098B5C;
  /* offset=0x73b8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_238277944AB474796B3CBE98E08A7B97;
  /* offset=0x73f8 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4DE88066487B3696FFAC0F8A4857EE1B;
  /* offset=0x7438 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F8238AD840655EE7FF217FA8B5CEB00C;
  /* offset=0x7478 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F1AEDBA24520120F9AAA378FB7CD4DA9;
  /* offset=0x74b8 flags=0x0008001040010205 */ float MoveRight;
  /* offset=0x74bc flags=0x0008001040010205 */ float MoveForward;
  /* offset=0x74c0 flags=0x0008001040010205 */ float AnimRate;
  /* offset=0x74c4 flags=0x0000000000010005 */ struct FPlayerAnimList CharacterAnimList;
  /* offset=0x753c flags=0x0000001000010005 */ struct FAnimParamList CharacterAnimParam;
  /* offset=0x75f0 flags=0x0008001040010205 */ float HandFavoring;
  /* offset=0x75f4 flags=0x0008001040010205 */ float HandIKWeight;
  /* offset=0x75f8 flags=0x0000001040010205 */ bool NoAimOffset;
  /* offset=0x75f9 flags=0x0000001040010205 */ bool IsFire;
  /* offset=0x75fc flags=0x0008001040010205 */ UAimOffsetBlendSpace* AimBlendSpace;
  /* offset=0x7600 flags=0x0000001040010205 */ bool Move;
  /* offset=0x7604 flags=0x0008001040010205 */ float PickupBlendWeight;
  /* offset=0x7608 flags=0x0000001040010205 */ bool IsSwimUp;
  /* offset=0x760c flags=0x0008001040010205 */ UAnimSequence* WeaponFireAnim;
  /* offset=0x7610 flags=0x0008001040010205 */ UBlendSpace* MovementBSCache;
  /* offset=0x7614 flags=0x0000001040010205 */ bool MovementChanged;
  /* offset=0x7618 flags=0x0008001040010205 */ float MovementBlendTime;
  /* offset=0x761c flags=0x0008001040010205 */ float UpdateDeltaTime;
  /* offset=0x7620 flags=0x0000001040010205 */ bool bUseHairAnimDynamics;
  /* offset=0x7621 flags=0x0000001040010205 */ bool bScoping;
  /* offset=0x7624 flags=0x0008001040010205 */ UBlendSpace* HitBlendSpace;
  /* offset=0x7628 flags=0x0008001040010205 */ UAnimSequence* WeaponPreFireAnim;
  /* offset=0x762c flags=0x0008001040010205 */ UAnimSequence* TurnAnim;
  /* offset=0x7630 flags=0x0008001040010205 */ UAnimSequence* JumpStart;
  /* offset=0x7634 flags=0x0008001040010205 */ UAnimSequence* FallingSlow;
  /* offset=0x7638 flags=0x0008001040010205 */ UAnimSequence* FallingFast;
  /* offset=0x763c flags=0x0008001040010205 */ UAnimSequence* LandLight;
  /* offset=0x7640 flags=0x0008001040010205 */ UAnimSequence* LandHeavy;
  /* offset=0x7644 flags=0x0008001040010205 */ float FireAnimRate;
  /* offset=0x7648 flags=0x0008001040010205 */ float PreFireAnimRate;
  /* offset=0x764c flags=0x0008001040010205 */ UBlendSpace* MovementBSCache_Dest;
  /* offset=0x7650 flags=0x0008001040010205 */ float HandIKFalse;
  /* offset=0x7654 flags=0x0000001040010005 */ struct FRotator OwnerRotation;
  /* offset=0x7660 flags=0x0000001040010205 */ bool IsVaulting;
  /* offset=0x7664 flags=0x0008001040010205 */ float Alpha;
  /* offset=0x7668 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* OwnerCharacter;
  /* offset=0x766c flags=0x0008001040010205 */ float swimSpeed;
  /* offset=0x7670 flags=0x0008001040010205 */ UBlendSpace* ObstructedAnim;
  /* offset=0x7674 flags=0x0008001040010205 */ float NewVar;
  /* offset=0x7678 flags=0x0008001040010205 */ uint8 NewVar;
  /* offset=0x7679 flags=0x0008001040010205 */ uint8 NewVar;
  /* offset=0x767a flags=0x0000001040010205 */ bool Reload_Prone;
  /* offset=0x767c flags=0x0008001040010205 */ UAnimSequence* Idle_Addtive;
  /* offset=0x7680 flags=0x0000001040010205 */ bool HealingStand;
  /* offset=0x7684 flags=0x0008001040010205 */ float ProneHandleAlpha;
  /* offset=0x7688 flags=0x0008001040010205 */ float SwimRotateX;
  /* offset=0x768c flags=0x0000001040010205 */ bool IsObstructed;
  /* offset=0x7690 flags=0x0000001000010005 */ struct FAnimVehParamList VehAnimParam;
  /* offset=0x76a8 flags=0x0000001040010205 */ bool IsPeeking;
  /* offset=0x76ac flags=0x0008001040010205 */ UBlendSpace1D* PeekAnim;
  /* offset=0x76b0 flags=0x0000001040010005 */ struct FRotator ScopeAimOffsetStand;
  /* offset=0x76bc flags=0x0000001040010205 */ bool SightSlow;
  /* offset=0x76c0 flags=0x0008001040010205 */ UBlendSpace1D* FallingBS;
  /* offset=0x76c4 flags=0x0008001040010205 */ float MaxFallingSpeed;
  /* offset=0x76c8 flags=0x0008001040010205 */ uint8 LastMovementMode;
  /* offset=0x76cc flags=0x0008001040010205 */ UAimOffsetBlendSpace* PeekAnimLeftRight;
  /* offset=0x76d0 flags=0x0000001040010205 */ bool IsPistolPeekAim;
  /* offset=0x76d4 flags=0x0008001040010005 */ struct FVector MoveVelocity;
  /* offset=0x76e0 flags=0x0000001000010005 */ struct FAnimVehParamList CharacterVehParamList;

  void AnimNotify_LandCameraShake();
  void AnimNotify_LandHardCameraShake();
  void AnimNotify_PlayBoltSound();
  void AnimNotify_PlayChangeMagazineSound();
  void AnimNotify_PlayCrawlSound();
  void AnimNotify_PlayLoadBulletSound();
  void AnimNotify_PlayMagINSound();
  void AnimNotify_PlayMagOUTSound();
  void AnimNotify_PlayRunSound();
  void AnimNotify_PlayShellDropFX();
  void AnimNotify_PlaySquatSound();
  void AnimNotify_PlayWalkSound();
  void BlueprintInitializeAnimation();
  void BlueprintUpdateAnimation(float DeltaTimeX);
  void CacheAnimVar(bool CallFunc_LessEqual_FloatFloat_ReturnValue, AActor* CallFunc_GetOwningActor_ReturnValue, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue2, int32 CallFunc_Conv_ByteToInt_ReturnValue3, int32 CallFunc_Conv_ByteToInt_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UBlendSpace* K2Node_DynamicCast_AsBlend_Space, bool K2Node_DynamicCast_bSuccess, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_ObjectObject_ReturnValue, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence2, bool K2Node_DynamicCast_bSuccess3, UBlendSpace1D* K2Node_DynamicCast_AsBlend_Space_1D, bool K2Node_DynamicCast_bSuccess4, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence3, bool K2Node_DynamicCast_bSuccess5, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence4, bool K2Node_DynamicCast_bSuccess6, UBlendSpace* K2Node_DynamicCast_AsBlend_Space2, bool K2Node_DynamicCast_bSuccess7, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence5, bool K2Node_DynamicCast_bSuccess8, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence6, bool K2Node_DynamicCast_bSuccess9, UBlendSpace* K2Node_DynamicCast_AsBlend_Space3, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_IsValid_ReturnValue3, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence7, bool K2Node_DynamicCast_bSuccess11, UAimOffsetBlendSpace* K2Node_DynamicCast_AsAim_Offset_Blend_Space, bool K2Node_DynamicCast_bSuccess12);
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_AnimDynamics_8E57203E4703F8A43B3E2BBD49A0C850();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_C9E5C2DD4EE0358504AB258E8E111BFB();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_FB1D254D4AC56CF90865A7BB4C72310B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_05C8C04348DBEA25A5E920B02D29A8A4();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_06F33B634554EECA995589A2AB909737();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_0923836A4A1516BEF39634B6DCB6E5B2();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F2A9F84DD9DFF0A114D6921E50F2C3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5BC93D324FE71B76644074976E6CC454();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5D730D2D4EDF6AE6A4ED68A9B5C35841();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6585C49F4E4165EE151CC2B97C7B2F66();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6AE6DAEC4BF6E0703556299166FEC2E0();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6DBDD07943048BB8FB1AB1872A66392C();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C042155F4FEE0D669BE9538048391AEC();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E66A242940BFD90AB027798326F3DC73();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E66A242940BFD90AB027798326F3DC73();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EBA89DFF4E86CAD0DB7051A88EA338B1();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F645305E41722890FC22B391480ADEBD();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_FFBFF4D34DF5B64FD6C889BE58395DC3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_5D86B57B40F785D5CBDD7FAFDEB10D85();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0A72F9B446B5F08D52514C9B023F198F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0D5DE5104BA2B987043F35BB5E86F0F4();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_30EBA2CF48AAECAA27E497B8E46DB4AA();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_43D12E0C4B649EFEFCAA0AAD51F83A9F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_517F5CD5482BE5F3342A3C9735993B78();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_82D7333F471BE3862A2B8DA6A09047DF();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_99A0D43B4625DB28C707B296F897BFAD();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_9E98E946479BB6F25CF86B8F6C0246AD();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_B5E3D5F54BF49B7FEA2836B43904823D();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_31DAF3FB48F3FEDEE067079557EEB502();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4546C2E14396773A08760F87EC7A5030();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_5556764F492E2C6DA3D2878EEAC0F256();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_8919B31E42985B72D0E33C8776686E74();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_C85B89004FD20DB22B7620BCA4F74F9B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_DCFFAEA6498F4FADF4518C97538818ED();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F4294E2340D99B17779EAAB0ED7F1A6D();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F73C783C46F301367C465EAFEBA8559A();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_76E9869E4F8B8132BE70E98F846027A4();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_771B757847BE5BD1D142EF9DAC5AD141();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_771B757847BE5BD1D142EF9DAC5AD141();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C43A22814944F3B225743C94D723944D();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_D2CE2C9A4279C6AC932399B65B2F7BEB();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_EAD1E5C84F32372D021784A2EF847596();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_EAD1E5C84F32372D021784A2EF847596();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_F7AFA96E4C2BAD5A4D6E77A2C6866680();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_072677AC41CA4240D324B3930D3EA4DB();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2206D959438B4BEE00C4CEAEB75AAAE1();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2223AA0840552DE31079948F03279486();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_3A0B9BE541AF0C565C0D42AF2DBD2318();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4AF7842E48BA870576901EAD5D98FD97();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_67B9BD5C4AF0D8A2C551A196C242D8A3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_70C75196485F1D5760DEEA95ED192B22();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_80DFA2864DFC581215F60B95F7DC9380();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_8DB2A9AC4DADD28CC7221BABB1C0D1DF();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_8E329B0A47E416418324F99CE29A2401();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_A39C00F94B8B17F3DF23A99C3DDB2E88();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B50C1AE84D9436FFBC33709F6F0EB106();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_CC9CAF5142BB29A1D155BB84F7E76CC6();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_DAA4202148FD06D242386B9962C136D7();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EC06E1E64D8311D0E0069A9928F9668F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FD5B9C494EBA47F8974327B3D99915E2();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FFC839A543B258FDDA6761A08BCCFF83();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2E8B4E54AF4690FC6B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8DBC60DEB297EA85BE();
  void ExecuteUbergraph_CH_Base_AnimBP(int32 EntryPoint, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, bool CallFunc_Not_PreBool_ReturnValue4, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue4, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_BoolBool_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, struct FVector CallFunc_ClampVectorSize_ReturnValue, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue6, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue8, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue10, bool CallFunc_EqualEqual_BoolBool_ReturnValue3, bool CallFunc_NotEqual_ByteByte_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue13, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, bool CallFunc_EqualEqual_BoolBool_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue5, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, bool CallFunc_EqualEqual_ByteByte_ReturnValue14, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue14, bool CallFunc_BooleanAND_ReturnValue15, bool CallFunc_BooleanAND_ReturnValue16, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_NotEqual_ByteByte_ReturnValue6, float CallFunc_BreakVector_X9, float CallFunc_BreakVector_Y9, float CallFunc_BreakVector_Z9, bool CallFunc_Less_FloatFloat_ReturnValue2, FCharacterAnimEvent K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue17, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X10, float CallFunc_BreakVector_Y10, float CallFunc_BreakVector_Z10, bool CallFunc_NotEqual_FloatFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue15, bool CallFunc_EqualEqual_ByteByte_ReturnValue16, bool CallFunc_EqualEqual_ByteByte_ReturnValue17, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue18, bool CallFunc_NotEqual_ByteByte_ReturnValue7, bool CallFunc_BooleanAND_ReturnValue18, bool CallFunc_EqualEqual_ByteByte_ReturnValue19, float CallFunc_VSize_ReturnValue2, float CallFunc_VSize_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue7, bool CallFunc_Greater_FloatFloat_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue19, FOnCharacterEnterRescueingStatusDelegate K2Node_CreateDelegate_OutputDelegate2, struct FVector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue8, float CallFunc_BreakVector_X11, float CallFunc_BreakVector_Y11, float CallFunc_BreakVector_Z11, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue20, bool CallFunc_EqualEqual_ByteByte_ReturnValue20, bool CallFunc_Not_PreBool_ReturnValue6, FOnCharacterWeaponStateChanged K2Node_CreateDelegate_OutputDelegate3, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue6, bool CallFunc_Greater_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue21, bool CallFunc_EqualEqual_ByteByte_ReturnValue22, bool CallFunc_BooleanOR_ReturnValue5, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue7, FOnCharacterPickUpActorDelegate K2Node_CreateDelegate_OutputDelegate4, bool CallFunc_Greater_FloatFloat_ReturnValue10, FOnCharacterChangePoseDelegate K2Node_CreateDelegate_OutputDelegate5, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue21, bool CallFunc_Greater_FloatFloat_ReturnValue11, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue12, struct FRotator CallFunc_Multiply_RotatorFloat_ReturnValue, struct FRotator CallFunc_Multiply_RotatorFloat_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue9, struct FRotator CallFunc_Multiply_RotatorFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue22, bool CallFunc_NotEqual_ByteByte_ReturnValue11, bool CallFunc_NotEqual_FloatFloat_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue12, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_NotEqual_ByteByte_ReturnValue13, float ___float_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue23, bool ___bool_Variable, float K2Node_Select_Default, struct FRotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue24, bool CallFunc_BooleanAND_ReturnValue25, bool CallFunc_BooleanAND_ReturnValue26, bool CallFunc_EqualEqual_ByteByte_ReturnValue23, float CallFunc_BreakVector_X12, float CallFunc_BreakVector_Y12, float CallFunc_BreakVector_Z12, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue2, float CallFunc_BreakVector_X13, float CallFunc_BreakVector_Y13, float CallFunc_BreakVector_Z13, struct FRotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_MapRangeClamped_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue3, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue24, bool CallFunc_EqualEqual_ByteByte_ReturnValue25, bool CallFunc_BooleanOR_ReturnValue6, float K2Node_Event_DeltaTimeX, bool CallFunc_NotEqual_FloatFloat_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue27, bool CallFunc_BooleanOR_ReturnValue7, AActor* CallFunc_GetOwningActor_ReturnValue, uint8 K2Node_CustomEvent_LastPose, uint8 K2Node_CustomEvent_NewPose, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, uint8 K2Node_CustomEvent_CurState, bool CallFunc_Not_PreBool_ReturnValue10, bool CallFunc_Not_PreBool_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue28, float CallFunc_Multiply_FloatFloat_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue14, bool CallFunc_BooleanAND_ReturnValue29, float CallFunc_Conv_BoolToFloat_ReturnValue, bool K2Node_CustomEvent_IsTurnIntoRescueing, struct FPlayerAnimList CallFunc_GetPlayerAnimation_ReturnValue, bool CallFunc_CheckPlayerNeedUpdateAnimation_ReturnValue, struct FAnimParamList CallFunc_GetPlayerAnimParam_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_EventMsg, struct FAnimVehParamList CallFunc_GetPlayerVehAnimParam_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue26, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_Not_PreBool_ReturnValue12, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_NotEqual_ByteByte_ReturnValue15, float CallFunc_GetCurveValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue27, bool CallFunc_EqualEqual_ByteByte_ReturnValue28, bool CallFunc_BooleanOR_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue13, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue6, bool CallFunc_NotEqual_ByteByte_ReturnValue16, bool CallFunc_NotEqual_ByteByte_ReturnValue17, bool CallFunc_NotEqual_ByteByte_ReturnValue18, bool CallFunc_EqualEqual_ByteByte_ReturnValue29, bool CallFunc_BooleanAND_ReturnValue30, bool CallFunc_EqualEqual_ByteByte_ReturnValue30, bool CallFunc_BooleanAND_ReturnValue31, bool CallFunc_EqualEqual_ByteByte_ReturnValue31, bool CallFunc_EqualEqual_ByteByte_ReturnValue32, float CallFunc_VSize_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue32, bool CallFunc_Greater_FloatFloat_ReturnValue13, bool CallFunc_BooleanAND_ReturnValue33, bool CallFunc_BooleanAND_ReturnValue34, float CallFunc_VSize_ReturnValue5, float CallFunc_VSize_ReturnValue6, bool CallFunc_Greater_FloatFloat_ReturnValue14, bool CallFunc_Greater_FloatFloat_ReturnValue15, bool CallFunc_BooleanAND_ReturnValue35, bool CallFunc_BooleanAND_ReturnValue36, bool CallFunc_BooleanOR_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue37, bool CallFunc_BooleanOR_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue11, bool CallFunc_BooleanOR_ReturnValue12, bool CallFunc_BooleanOR_ReturnValue13, APawn* CallFunc_TryGetPawnOwner_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess4, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess5, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character4, bool K2Node_DynamicCast_bSuccess6, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character5, bool K2Node_DynamicCast_bSuccess7, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character6, bool K2Node_DynamicCast_bSuccess8, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character7, bool K2Node_DynamicCast_bSuccess9, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character8, bool K2Node_DynamicCast_bSuccess10, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character9, bool K2Node_DynamicCast_bSuccess11, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character10, bool K2Node_DynamicCast_bSuccess12, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character11, bool K2Node_DynamicCast_bSuccess13, APlayerController* CallFunc_GetPlayerController_ReturnValue, APawn* CallFunc_TryGetPawnOwner_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue14, bool CallFunc_BooleanAND_ReturnValue38, float CallFunc_GetCurveValue_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue5, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue15, bool CallFunc_BooleanAND_ReturnValue39, bool CallFunc_BooleanAND_ReturnValue40, float CallFunc_Conv_BoolToFloat_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue33, bool CallFunc_BooleanAND_ReturnValue41, bool CallFunc_BooleanAND_ReturnValue42, bool CallFunc_BooleanAND_ReturnValue43, bool CallFunc_NotEqual_ByteByte_ReturnValue19, float CallFunc_FMin_ReturnValue);
  void HandleAnimEvent(FName EventMsg);
  void HandlePlayerAnimEvent(FName msg, bool K2Node_SwitchName_CmpSuccess);
  void HandleWeaponStateChanged(uint8 NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Montage_IsPlaying_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue2, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Montage_IsPlaying_ReturnValue2);
  void OnPlayerPickUp();
  void OnPlayerPoseChange(uint8 LastPose, uint8 NewPose);
  void OnWeaponChangeState(uint8 CurState);
  void PlayFireAnim(bool IsPreFirew, bool CallFunc_IsValid_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);
  void PlayPickUpAnim(FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate, AActor* CallFunc_GetOwningActor_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_VSize_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Montage_Play_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);
  void PlayPoseChangeAnim(uint8 LastPose, uint8 NewPose, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, AActor* CallFunc_GetOwningActor_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Montage_Play_ReturnValue);
  void PlayReloadAnim(struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_IsValid_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);
  void PlaySwitchWeaponAnim(bool IsEquip, bool CallFunc_IsValid_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, UAnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue, float CallFunc_GetPlayLength_ReturnValue, float CallFunc_Montage_Play_ReturnValue2);
  void RefreshPeekState(bool CallFunc_HasState_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, struct FPlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue2, UAimOffsetBlendSpace* K2Node_DynamicCast_AsAim_Offset_Blend_Space, bool K2Node_DynamicCast_bSuccess, UBlendSpace1D* K2Node_DynamicCast_AsBlend_Space_1D, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2);
  void RescueingEvent(bool IsTurnIntoRescueing);
  void ResetPickupBlendWeight();
};

class UCH_Vehicle_AnimBP_C: public USTExtraAnimInstance {
  /* offset=0x0310 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0318 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_Root_10907A9949AC45566C73EC8DCAA64FE6;
  /* offset=0x0350 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_CD297B2D4BFB3B1225CCE49AEFBC4EDD;
  /* offset=0x03c0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_17213F834B8D1ABE70CF7CA7AF76EAE4;
  /* offset=0x0430 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_1E3296FE41E862383EE564BA0143F9E3;
  /* offset=0x04a0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_0D301FFF4F644815BBF34FB92F0100F9;
  /* offset=0x0510 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_4350244743C9D895258560BB9CF6BCAE;
  /* offset=0x0580 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_EA36EF144EA9A1570569A59CEF29E1B8;
  /* offset=0x05f0 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_D3E49F1E4B438514773ED2A88B55A2D9;
  /* offset=0x0660 flags=0x0000000000000000 */ struct FAnimNode_TransitionResult AnimGraphNode_TransitionResult_AD3159F54DB1F7350B262BBEF69F8FA0;
  /* offset=0x06d0 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_1A5BE3CB42BC1BB23797F8AA181AB2EA;
  /* offset=0x07c0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_159ED0144F99E5B6D02D438BF8F03C25;
  /* offset=0x0850 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_767768174D178BEB4A3807863045B430;
  /* offset=0x08b0 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_1C8CAEBC47C1C38207524C82C990B46F;
  /* offset=0x0908 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C0E1A1A74AE88BEEF03D63A513EC2A23;
  /* offset=0x0998 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3A3FE796429D80EC39B0F0850F8F0E95;
  /* offset=0x0a28 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_87F7E55E43E6C2DF988F3B8E1CCA2386;
  /* offset=0x0a88 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_251ABF2E4E9CCC6B0438DDA840EE3BFE;
  /* offset=0x0ae0 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_88DFF5EC42C09A41B645F38119B680EA;
  /* offset=0x0bd0 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_57D3479F4635DED8DBF1B8A0E2E57B1A;
  /* offset=0x0c08 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_448592B2467508D5846ABEA1D09AFD7D;
  /* offset=0x0cf8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_F112627C4840944B351E188F3241DD19;
  /* offset=0x0d30 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_A2F630CB4C8E98F3570445ACEFCD598D;
  /* offset=0x0d88 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_AC115C8144619180B301EE8F801A790C;
  /* offset=0x0de8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_075F27D641BFB284F94DF68E0B25DF93;
  /* offset=0x0ed8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_80E9FB1A4ACC5E1F49854CA8FF1AA18B;
  /* offset=0x0f10 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_CE4BA39D4C7F19165F4DB8B7A0D7F94A;
  /* offset=0x1000 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_26B6A3534BCEE7D2DCBA0E9FE5FFF52B;
  /* offset=0x1090 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C9926B9D4EBE53267F40FD8BAC9D129F;
  /* offset=0x1120 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2C9117AA4EDAD8156C64238FF6BD7AC0;
  /* offset=0x1180 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_DA1A3D604FD374035AA2F3909ECEA9AE;
  /* offset=0x11d8 flags=0x0000000000000000 */ struct FAnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F93CA3814E81E5DEC54D2E86728D481F;
  /* offset=0x12c8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_StateResult_27E85E4942A049664E0C6EB084F32698;
  /* offset=0x1300 flags=0x0000000000000000 */ struct FAnimNode_StateMachine AnimGraphNode_StateMachine_B0CCCE2B416C6B29C753299FEA41CB8D;
  /* offset=0x13a0 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2E169A074DE301BDA25A0F98D62A23DB;
  /* offset=0x13d8 flags=0x0000000000000000 */ struct FAnimNode_ModifyBone AnimGraphNode_ModifyBone_D1E3C446404DE1AC4DF28AA13E0C740A;
  /* offset=0x1478 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D67D53D54153F9EC34472F9AF89AF315;
  /* offset=0x14b0 flags=0x0000000000000000 */ struct FAnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7B70D78D47A2314B240BCC9778CB8851;
  /* offset=0x1540 flags=0x0000000000000000 */ struct FAnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_EF96423348D4A3D82783579A06114580;
  /* offset=0x15c0 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D8265E81457CB24C34DF5D8F7D2FB457;
  /* offset=0x1600 flags=0x0000000000000000 */ struct FAnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45CBB07C4B6E4E59523204A8DF6EB461;
  /* offset=0x1640 flags=0x0000001000010005 */ struct FPlayerVehAnimList CharacterVehAnimList;
  /* offset=0x1660 flags=0x0008001040010205 */ UBlendSpace* IdleAnim;
  /* offset=0x1664 flags=0x0008001040010205 */ UBlendSpace1D* LeanInAnim;
  /* offset=0x1668 flags=0x0008001040010205 */ UBlendSpace1D* LeanOutAnim;
  /* offset=0x166c flags=0x0008001040010205 */ UBlendSpace* AimAnim;
  /* offset=0x1670 flags=0x0008001040010a05 */ ASTExtraBaseCharacter* OwnerCharacter;
  /* offset=0x1674 flags=0x0000001000010005 */ struct FAnimParamList AnimParam;
  /* offset=0x1728 flags=0x0000001000010005 */ struct FAnimVehParamList VehAnimParam;
  /* offset=0x1740 flags=0x0000001040010205 */ bool Scoping;
  /* offset=0x1744 flags=0x0008001040010205 */ UAnimSequence* AimAdd;
  /* offset=0x1748 flags=0x0008001040010205 */ UAnimSequence* SeatIdle;
  /* offset=0x174c flags=0x0000001040010205 */ bool IsAimAdd;
  /* offset=0x174d flags=0x0000001040010205 */ bool IsSeatIdle;
  /* offset=0x174e flags=0x0000001040010205 */ bool HasLeanAnim;
  /* offset=0x1750 flags=0x0008001040010205 */ UAnimSequence* Reload;
  /* offset=0x1754 flags=0x0000001040010205 */ bool IsReload;
  /* offset=0x1758 flags=0x0008001040010205 */ UBlendSpace* FPPAimAnim;
  /* offset=0x175c flags=0x0000001040010205 */ bool IsFPPAimValid;

  void BlueprintUpdateAnimation(float DeltaTimeX);
  void CacheAnimVar(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UBlendSpace* K2Node_DynamicCast_AsBlend_Space, bool K2Node_DynamicCast_bSuccess, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue4, UAnimSequence* K2Node_DynamicCast_AsAnim_Sequence3, bool K2Node_DynamicCast_bSuccess4, UBlendSpace* K2Node_DynamicCast_AsBlend_Space2, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, UBlendSpace* K2Node_DynamicCast_AsBlend_Space3, bool K2Node_DynamicCast_bSuccess6, UBlendSpace1D* K2Node_DynamicCast_AsBlend_Space_1D, bool K2Node_DynamicCast_bSuccess7, UBlendSpace1D* K2Node_DynamicCast_AsBlend_Space_1D2, bool K2Node_DynamicCast_bSuccess8);
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_ApplyAdditive_251ABF2E4E9CCC6B0438DDA840EE3BFE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_ApplyAdditive_A2F630CB4C8E98F3570445ACEFCD598D();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_ApplyAdditive_DA1A3D604FD374035AA2F3909ECEA9AE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_159ED0144F99E5B6D02D438BF8F03C25();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_26B6A3534BCEE7D2DCBA0E9FE5FFF52B();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_3A3FE796429D80EC39B0F0850F8F0E95();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_7B70D78D47A2314B240BCC9778CB8851();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_C0E1A1A74AE88BEEF03D63A513EC2A23();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendListByBool_C9926B9D4EBE53267F40FD8BAC9D129F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_075F27D641BFB284F94DF68E0B25DF93();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_1A5BE3CB42BC1BB23797F8AA181AB2EA();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_448592B2467508D5846ABEA1D09AFD7D();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_88DFF5EC42C09A41B645F38119B680EA();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_CE4BA39D4C7F19165F4DB8B7A0D7F94A();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_BlendSpacePlayer_F93CA3814E81E5DEC54D2E86728D481F();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_ModifyBone_D1E3C446404DE1AC4DF28AA13E0C740A();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_SequencePlayer_2C9117AA4EDAD8156C64238FF6BD7AC0();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_SequencePlayer_767768174D178BEB4A3807863045B430();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_SequencePlayer_87F7E55E43E6C2DF988F3B8E1CCA2386();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_SequencePlayer_AC115C8144619180B301EE8F801A790C();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_0D301FFF4F644815BBF34FB92F0100F9();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_17213F834B8D1ABE70CF7CA7AF76EAE4();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_1E3296FE41E862383EE564BA0143F9E3();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_4350244743C9D895258560BB9CF6BCAE();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_AD3159F54DB1F7350B262BBEF69F8FA0();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_CD297B2D4BFB3B1225CCE49AEFBC4EDD();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_D3E49F1E4B438514773ED2A88B55A2D9();
  void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Vehicle_AnimBP_AnimGraphNode_TransitionResult_EA36EF144EA9A1570569A59CEF29E1B8();
  void ExecuteUbergraph_CH_Vehicle_AnimBP(int32 EntryPoint, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Conv_BoolToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, bool CallFunc_NotEqual_ByteByte_ReturnValue2, float CallFunc_Conv_BoolToFloat_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_NotEqual_ByteByte_ReturnValue3, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, float CallFunc_Conv_BoolToFloat_ReturnValue3, float ___float_Variable, bool CallFunc_Not_PreBool_ReturnValue4, bool ___bool_Variable, float K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue7, float K2Node_Event_DeltaTimeX, bool CallFunc_IsValid_ReturnValue, struct FAnimVehParamList CallFunc_GetPlayerVehAnimParam_ReturnValue, struct FPlayerVehAnimList CallFunc_GetPlayerVehAnimation_ReturnValue);
};

class UCS_Land_Heavy_C: public UCameraShake {
};

class UCS_ReloadEffect_C: public UCameraShake {
};

class ACableActor: public AActor {
  /* offset=0x02a8 flags=0x00180010400a021d */ UCableComponent* CableComponent;
};

class UCableComponent: public UMeshComponent {
  /* offset=0x05d9 flags=0x0018001040000205 */ bool bAttachStart;
  /* offset=0x05da flags=0x0018001040000205 */ bool bAttachEnd;
  /* offset=0x05e0 flags=0x0010001000000001 */ struct FComponentReference AttachEndTo;
  /* offset=0x05f8 flags=0x0018001040000201 */ FName AttachEndToSocketName;
  /* offset=0x0600 flags=0x0018001040000005 */ struct FVector EndLocation;
  /* offset=0x060c flags=0x0018001040000205 */ float CableLength;
  /* offset=0x0610 flags=0x0018001040000215 */ int32 NumSegments;
  /* offset=0x0614 flags=0x0018041040000215 */ float SubstepTime;
  /* offset=0x0618 flags=0x0018001040000205 */ int32 SolverIterations;
  /* offset=0x061c flags=0x0018041040000205 */ bool bEnableStiffness;
  /* offset=0x061d flags=0x0018041040000205 */ bool bEnableCollision;
  /* offset=0x0620 flags=0x0018041040000205 */ float CollisionFriction;
  /* offset=0x0624 flags=0x0018001040000005 */ struct FVector CableForce;
  /* offset=0x0630 flags=0x0018001040000205 */ float CableGravityScale;
  /* offset=0x0634 flags=0x0018001040000205 */ float CableWidth;
  /* offset=0x0638 flags=0x0018001040000215 */ int32 NumSides;
  /* offset=0x063c flags=0x0018001040000205 */ float TileMaterial;

  AActor* GetAttachedActor();
  USceneComponent* GetAttachedComponent();
  void GetCableParticleLocations(TArray<struct FVector> Locations);
  void SetAttachEndTo(AActor* Actor, FName ComponentProperty, FName SocketName);
};

class ACameraActor: public AActor {
  /* offset=0x02a8 flags=0x0048001040000201 */ uint8 AutoActivateForPlayer;
  /* offset=0x02ac flags=0x00480010400a021d */ UCameraComponent* CameraComponent;
  /* offset=0x02b0 flags=0x00480010400a021d */ USceneComponent* SceneComponent;
  /* offset=0x02bc flags=0x0048001020000000 */ uint8 bConstrainAspectRatio:1;
  /* offset=0x02c0 flags=0x0048001060000200 */ float AspectRatio;
  /* offset=0x02c4 flags=0x0048001060000200 */ float FOVAngle;
  /* offset=0x02c8 flags=0x0048001060000200 */ float PostProcessBlendWeight;
  /* offset=0x02d0 flags=0x0040000020000000 */ struct FPostProcessSettings PostProcessSettings;

  int32 GetAutoActivatePlayerIndex();
};

class UCameraAnim: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UInterpGroup* CameraInterpGroup;
  /* offset=0x0020 flags=0x0018001040000200 */ float AnimLength;
  /* offset=0x0024 flags=0x0010001040000000 */ struct FBox BoundingBox;
  /* offset=0x0040 flags=0x0018001000010001 */ uint8 bRelativeToInitialTransform:1;
  /* offset=0x0040 flags=0x0018001000010001 */ uint8 bRelativeToInitialFOV:1;
  /* offset=0x0044 flags=0x0018001040010201 */ float BaseFOV;
  /* offset=0x0050 flags=0x0010000000000000 */ struct FPostProcessSettings BasePostProcessSettings;
  /* offset=0x0520 flags=0x0018001040000200 */ float BasePostProcessBlendWeight;
};

class UCameraAnimInst: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UCameraAnim* CamAnim;
  /* offset=0x0020 flags=0x004a001040080208 */ UInterpGroupInst* InterpGroupInst;
  /* offset=0x003c flags=0x0018001040000204 */ float PlayRate;
  /* offset=0x0050 flags=0x0018001040002200 */ UInterpTrackMove* MoveTrack;
  /* offset=0x0054 flags=0x0018001040002200 */ UInterpTrackInstMove* MoveInst;
  /* offset=0x0058 flags=0x0018001040000200 */ uint8 PlaySpace;

  void SetDuration(float NewDuration);
  void SetScale(float NewDuration);
  void Stop(bool bImmediate);
};

class ACameraBlockingVolume: public AVolume {
};

class UCameraComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000205 */ float FieldOfView;
  /* offset=0x0274 flags=0x0018001240000205 */ float OrthoWidth;
  /* offset=0x0278 flags=0x0018001240000205 */ float OrthoNearClipPlane;
  /* offset=0x027c flags=0x0018001240000205 */ float OrthoFarClipPlane;
  /* offset=0x0280 flags=0x0018001240000205 */ float AspectRatio;
  /* offset=0x0284 flags=0x0018001200000005 */ uint8 bConstrainAspectRatio:1;
  /* offset=0x0284 flags=0x0018041200000005 */ uint8 bUseFieldOfViewForLOD:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bLockToHmd:1;
  /* offset=0x0284 flags=0x0018001000000005 */ uint8 bUsePawnControlRotation:1;
  /* offset=0x0285 flags=0x0018001240000205 */ uint8 ProjectionMode;
  /* offset=0x0288 flags=0x0018001240000205 */ float PostProcessBlendWeight;
  /* offset=0x0290 flags=0x0010000200000005 */ struct FPostProcessSettings PostProcessSettings;
  /* offset=0x07ac flags=0x0018001020000000 */ uint8 bUseControllerViewRotation:1;

  void AddOrUpdateBlendable(UInterface<UBlendableInterface>* InBlendableObject, float InWeight);
  void ApplyDrawDistanceOffset(float InFieldOfView);
  void GetCameraView(float DeltaTime, struct FMinimalViewInfo DesiredView);
  void RemoveBlendable(UInterface<UBlendableInterface>* InBlendableObject);
  void SetActive(bool bNewActive, bool bReset);
  void SetAspectRatio(float InAspectRatio);
  void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
  void SetFieldOfView(float InFieldOfView);
  void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
  void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
  void SetOrthoWidth(float InOrthoWidth);
  void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
  void SetProjectionMode(uint8 InProjectionMode);
  void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
};

class UCameraModifier: public UObject {
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bDebug:1;
  /* offset=0x001c flags=0x0018001000010015 */ uint8 bExclusive:1;
  /* offset=0x001d flags=0x0018001040010215 */ uint8 Priority;
  /* offset=0x0020 flags=0x0028081040002214 */ APlayerCameraManager* CameraOwner;
  /* offset=0x0024 flags=0x0028081040010215 */ float AlphaInTime;
  /* offset=0x0028 flags=0x0028081040010215 */ float AlphaOutTime;
  /* offset=0x002c flags=0x0028081040002214 */ float Alpha;

  void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector NewViewLocation, struct FRotator NewViewRotation, float NewFOV);
  void BlueprintModifyPostProcess(float DeltaTime, float PostProcessBlendWeight, struct FPostProcessSettings PostProcessSettings);
  void DisableModifier(bool bImmediate);
  void EnableModifier();
  AActor* GetViewTarget();
  bool IsDisabled();
};

class UCameraModifier_CameraShake: public UCameraModifier {
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<UCameraShake*> ActiveShakes;
  /* offset=0x003c flags=0x0028081040000201 */ float SplitScreenShakeScale;
};

class ACameraRig_Crane: public AActor {
  /* offset=0x02a8 flags=0x0018001240000205 */ float CranePitch;
  /* offset=0x02ac flags=0x0018001240000205 */ float CraneYaw;
  /* offset=0x02b0 flags=0x0018001240000205 */ float CraneArmLength;
  /* offset=0x02b4 flags=0x0018001240000205 */ bool bLockMountPitch;
  /* offset=0x02b5 flags=0x0018001240000205 */ bool bLockMountYaw;
  /* offset=0x02b8 flags=0x0048001040090209 */ USceneComponent* TransformComponent;
  /* offset=0x02bc flags=0x0048001040090209 */ USceneComponent* CraneYawControl;
  /* offset=0x02c0 flags=0x0048001040090209 */ USceneComponent* CranePitchControl;
  /* offset=0x02c4 flags=0x0048001040090209 */ USceneComponent* CraneCameraMount;
};

class ACameraRig_Rail: public AActor {
  /* offset=0x02a8 flags=0x0018001240000205 */ float CurrentPositionOnRail;
  /* offset=0x02ac flags=0x0048001040090209 */ USceneComponent* TransformComponent;
  /* offset=0x02b0 flags=0x0048001040090209 */ USplineComponent* RailSplineComponent;
  /* offset=0x02b4 flags=0x0048001040090209 */ USceneComponent* RailCameraMount;
};

class UCameraSettingComponentFromBP: public UActorComponent {
  void LerpCameraSettings(float LerpAlpha, struct FCameraSettings CameraSetting, USpringArmComponent* SpringArm);
  void SaveCurCameraSetting(USpringArmComponent* SpringArm);
};

class UCameraSettingComponent_C: public UActorComponent {
  /* offset=0x00b0 flags=0x0008001040000205 */ float Current Target Arm Length;
  /* offset=0x00b4 flags=0x0008001040000205 */ float CurrentCameraLagSpeed;
  /* offset=0x00b8 flags=0x0008001040000005 */ struct FVector CurrentSocketOffset;

  void LerpCameraSettings(float LerpAlpha, struct FSTR_CameraSetting CameraSettings, USpringArmComponent* SpringArm, USpringArmComponent* TargetSpringArm, struct FVector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, struct FVector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);
  void SaveCurCameraSetting(USpringArmComponent* SprintArm);
};

class UCameraShake: public UObject {
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bSingleInstance:1;
  /* offset=0x0020 flags=0x0018001040000201 */ float OscillationDuration;
  /* offset=0x0024 flags=0x0018001040000201 */ float OscillationBlendInTime;
  /* offset=0x0028 flags=0x0018001040000201 */ float OscillationBlendOutTime;
  /* offset=0x002c flags=0x0010001000000001 */ struct FROscillator RotOscillation;
  /* offset=0x0050 flags=0x0010001000000001 */ struct FVOscillator LocOscillation;
  /* offset=0x0074 flags=0x0010001000000001 */ struct FFOscillator FOVOscillation;
  /* offset=0x0080 flags=0x0018001040000201 */ float AnimPlayRate;
  /* offset=0x0084 flags=0x0018001040000201 */ float AnimScale;
  /* offset=0x0088 flags=0x0018001040000201 */ float AnimBlendInTime;
  /* offset=0x008c flags=0x0018001040000201 */ float AnimBlendOutTime;
  /* offset=0x0090 flags=0x0018001040000201 */ float RandomAnimSegmentDuration;
  /* offset=0x0094 flags=0x0018001040000201 */ UCameraAnim* Anim;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 bRandomAnimSegment:1;
  /* offset=0x00a8 flags=0x0028081040002214 */ APlayerCameraManager* CameraOwner;
  /* offset=0x0134 flags=0x0018001040002214 */ float ShakeScale;
  /* offset=0x0138 flags=0x0018001040002214 */ float OscillatorTimeRemaining;
  /* offset=0x013c flags=0x0018001040002214 */ UCameraAnimInst* AnimInst;

  void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo POV, struct FMinimalViewInfo ModifiedPOV);
  bool ReceiveIsFinished();
  void ReceivePlayShake(float Scale);
  void ReceiveStopShake(bool bImmediately);
};

class UCameraShakeForFalling_C: public UCameraShake {
  /* offset=0x0140 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;

  void ExecuteUbergraph_CameraShakeForFalling(int32 EntryPoint, float K2Node_Event_Scale);
  void ReceivePlayShake(float Scale);
};

class UCancelGrenadeBtn_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* TextBlock;

  void BndEvt__Button_0_K2Node_ComponentBoundEvent_11_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_73_OnButtonHoverEvent__DelegateSignature();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_86_OnButtonHoverEvent__DelegateSignature();
  void ExecuteUbergraph_CancelGrenadeBtn(int32 EntryPoint, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2);
};

class UCanvas: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ float OrgX;
  /* offset=0x0020 flags=0x0018001040000200 */ float OrgY;
  /* offset=0x0024 flags=0x0018001040000200 */ float ClipX;
  /* offset=0x0028 flags=0x0018001040000200 */ float ClipY;
  /* offset=0x002c flags=0x0018001040000000 */ struct FColor DrawColor;
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 bCenterX:1;
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 bCenterY:1;
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 bNoSmooth:1;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 SizeX;
  /* offset=0x0038 flags=0x0018001040000200 */ int32 SizeY;
  /* offset=0x0040 flags=0x0010001040000000 */ struct FPlane ColorModulate;
  /* offset=0x0050 flags=0x0018001040000200 */ UTexture2D* DefaultTexture;
  /* offset=0x0054 flags=0x0018001040000200 */ UTexture2D* GradientTexture0;
  /* offset=0x0058 flags=0x0018001040000200 */ UReporterGraph* ReporterGraph;

  void K2_Deproject(struct FVector2D ScreenPosition, struct FVector WorldOrigin, struct FVector WorldDirection);
  void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize);
  void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness);
  void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor);
  void K2_DrawMaterial(UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint);
  void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
  void K2_DrawPolygon(UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32 NumberOfSides, struct FLinearColor RenderColor);
  void K2_DrawText(UFont* RenderFont, FString RenderText, struct FVector2D ScreenPosition, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor);
  void K2_DrawTexture(UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, uint8 BlendMode, float Rotation, struct FVector2D PivotPoint);
  void K2_DrawTriangle(UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
  struct FVector K2_Project(struct FVector WorldLocation);
  struct FVector2D K2_StrLen(UFont* RenderFont, FString RenderText);
  struct FVector2D K2_TextSize(UFont* RenderFont, FString RenderText, struct FVector2D Scale);
};

class UCanvasPanel: public UPanelWidget {
  UCanvasPanelSlot* AddChildToCanvas(UWidget* content);
};

class UCanvasPanelSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FAnchorData LayoutData;
  /* offset=0x004c flags=0x0018041040000215 */ bool bAutoSize;
  /* offset=0x0050 flags=0x0018001040000215 */ int32 ZOrder;

  struct FVector2D GetAlignment();
  struct FAnchors GetAnchors();
  bool GetAutoSize();
  struct FAnchorData GetLayout();
  struct FMargin GetOffsets();
  struct FVector2D GetPosition();
  struct FVector2D GetSize();
  int32 GetZOrder();
  void SetAlignment(struct FVector2D InAlignment);
  void SetAnchors(struct FAnchors InAnchors);
  void SetAutoSize(bool InbAutoSize);
  void SetLayout(struct FAnchorData InLayoutData);
  void SetMaximum(struct FVector2D InMaximumAnchors);
  void SetMinimum(struct FVector2D InMinimumAnchors);
  void SetOffsets(struct FMargin InOffset);
  void SetPosition(struct FVector2D InPosition);
  void SetSize(struct FVector2D InSize);
  void SetZOrder(int32 InZOrder);
};

class UCanvasRenderTarget2D: public UTextureRenderTarget2D {
  /* offset=0x00b8 flags=0x0010000010080200 */ FOnCanvasRenderTargetUpdate OnCanvasRenderTargetUpdate;
  /* offset=0x00c4 flags=0x002c081040000200 */ UWorld* World;
  /* offset=0x00cc flags=0x0028081040002200 */ bool bShouldClearRenderTargetOnReceiveUpdate;

  UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass<UCanvasRenderTarget2D>* CanvasRenderTarget2DClass, int32 Width, int32 Height);
  void GetSize(int32 Width, int32 Height);
  void ReceiveUpdate(UCanvas* Canvas, int32 Width, int32 Height);
  void UpdateResource();
};

class UCapsuleComponent: public UShapeComponent {
  /* offset=0x05d0 flags=0x002808104000021d */ float CapsuleHalfHeight;
  /* offset=0x05d4 flags=0x002808104000021d */ float CapsuleRadius;
  /* offset=0x05d8 flags=0x0028081060000200 */ float CapsuleHeight;

  float GetScaledCapsuleHalfHeight();
  float GetScaledCapsuleHalfHeight_WithoutHemisphere();
  float GetScaledCapsuleRadius();
  void GetScaledCapsuleSize(float OutRadius, float OutHalfHeight);
  void GetScaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);
  float GetShapeScale();
  float GetUnscaledCapsuleHalfHeight();
  float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
  float GetUnscaledCapsuleRadius();
  void GetUnscaledCapsuleSize(float OutRadius, float OutHalfHeight);
  void GetUnscaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);
  void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
  void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
  void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
};

class UChannel: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UNetConnection* Connection;
};

class ACharacter: public APawn {
  /* offset=0x02ec flags=0x00480010400a021d */ USkeletalMeshComponent* Mesh;
  /* offset=0x02f0 flags=0x00480010400a021d */ UCharacterMovementComponent* CharacterMovement;
  /* offset=0x02f4 flags=0x00480010400a021d */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02f8 flags=0x0020089000000000 */ struct FBasedMovementInfo BasedMovement;
  /* offset=0x0328 flags=0x0020089100000020 */ struct FBasedMovementInfo ReplicatedBasedMovement;
  /* offset=0x0358 flags=0x0028081040000220 */ float AnimRootMotionTranslationScale;
  /* offset=0x035c flags=0x0028081040000000 */ struct FVector BaseTranslationOffset;
  /* offset=0x0370 flags=0x0020081040000000 */ struct FQuat BaseRotationOffset;
  /* offset=0x0380 flags=0x0028081040000220 */ float ReplicatedServerLastTransformUpdateTimeStamp;
  /* offset=0x0384 flags=0x0028081040000220 */ uint8 ReplicatedMovementMode;
  /* offset=0x0385 flags=0x0028081040000200 */ bool bInBaseReplication;
  /* offset=0x0388 flags=0x0018001040000205 */ float CrouchedEyeHeight;
  /* offset=0x038c flags=0x0018001100000034 */ uint8 bIsCrouched:1;
  /* offset=0x038c flags=0x0018001000000014 */ uint8 bPressedJump:1;
  /* offset=0x038c flags=0x0018001000002000 */ uint8 bClientUpdating:1;
  /* offset=0x038c flags=0x0018001000002000 */ uint8 bClientWasFalling:1;
  /* offset=0x038c flags=0x0018001000002000 */ uint8 bClientResimulateRootMotion:1;
  /* offset=0x038c flags=0x0018001000002000 */ uint8 bClientResimulateRootMotionSources:1;
  /* offset=0x038c flags=0x0018001000000000 */ uint8 bSimGravityDisabled:1;
  /* offset=0x038c flags=0x0018001000002000 */ uint8 bClientCheckEncroachmentOnNetUpdate:1;
  /* offset=0x038d flags=0x0018001000002000 */ uint8 bServerMoveIgnoreRootMotion:1;
  /* offset=0x0390 flags=0x0018001040022a15 */ float JumpKeyHoldTime;
  /* offset=0x0394 flags=0x0018001040000225 */ float JumpMaxHoldTime;
  /* offset=0x0398 flags=0x0018001040000225 */ int32 JumpMaxCount;
  /* offset=0x039c flags=0x0018001040020a15 */ int32 JumpCurrentCount;
  /* offset=0x03a0 flags=0x0018001000022815 */ uint8 bWasJumping:1;
  /* offset=0x03a4 flags=0x0010000010080200 */ FCharacterReachedApexSignature OnReachedJumpApex;
  /* offset=0x03bc flags=0x0010000010080200 */ FMovementModeChangedSignature MovementModeChangedDelegate;
  /* offset=0x03c8 flags=0x0010000010080200 */ FCharacterMovementUpdatedSignature OnCharacterMovementUpdated;
  /* offset=0x03d4 flags=0x0010000000002000 */ struct FRootMotionSourceGroup SavedRootMotion;
  /* offset=0x0470 flags=0x0010001000002000 */ struct FRootMotionMovementParams ClientRootMotionParams;
  /* offset=0x04b0 flags=0x0010008000002200 */ TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;
  /* offset=0x04c0 flags=0x0010008100000020 */ struct FRepRootMotionMontage RepRootMotion;

  void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation);
  bool CanJump();
  bool CanJumpInternal();
  /* CL  */ void ClientCheatFly();
  /* CL  */ void ClientCheatGhost();
  /* CL  */ void ClientCheatWalk();
  void Crouch(bool bClientSimulation);
  float GetAnimRootMotionTranslationScale();
  struct FRotator GetBaseRotationOffsetRotator();
  struct FVector GetBaseTranslationOffset();
  UAnimMontage* GetCurrentMontage();
  bool IsJumpProvidingForce();
  bool IsPlayingNetworkedRootMotionMontage();
  bool IsPlayingRootMotion();
  void Jump();
  void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
  void K2_OnMovementModeChanged(uint8 PrevMovementMode, uint8 NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
  void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
  void K2_UpdateCustomMovement(float DeltaTime);
  void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride);
  void OnJumped();
  void OnLanded(struct FHitResult Hit);
  void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride);
  void OnRep_IsCrouched();
  void OnRep_ReplicatedBasedMovement();
  void OnRep_RootMotion();
  void OnWalkingOffLedge(struct FVector PreviousFloorImpactNormal, struct FVector PreviousFloorContactNormal, struct FVector PreviousLocation, float TimeDelta);
  float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);
  /* CL  */ void RootMotionDebugClientPrintOnScreen(FString inString);
  void SetReplicateMovement(bool bInReplicateMovement);
  void StopAnimMontage(UAnimMontage* AnimMontage);
  void StopJumping();
  void UnCrouch(bool bClientSimulation);
};

class UCharacterAnimList_Base_C: public UUAECharacterAnimListComponent {
};

class UCharacterAvatarComp_BP_C: public UCharacterAvatarComponent {
  /* offset=0x05a0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;

  bool CheckShouldEquipItem(int32 slotID, struct FMeshData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
  void CreateMeshData(struct FMeshPackage MeshPackage, struct FItemDefineID DefineID, struct FMeshData Output, TArray<int32> NewLocalVar, struct FMeshData MeshData, UMaterialInstance* CallFunc_GetMaterial_ReturnValue, UStaticMesh* CallFunc_GetStaticMesh_ReturnValue, USkeletalMesh* CallFunc_GetSkeletalMesh_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, struct FMeshData K2Node_MakeStruct_MeshData);
  void ExecuteUbergraph_CharacterAvatarComp_BP(int32 EntryPoint);
  void GetBPID(int32 RowName, int32 BPID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  UBackpackAvatarHandle* GetBattleItemFromResID(int32 RowName, struct FItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, int32 CallFunc_GetBPID_BPID, UUAELoadedClassManager* CallFunc_Get_ReturnValue, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBackpackAvatarHandle>* K2Node_ClassDynamicCast_AsBackpack_Avatar_Handle, bool K2Node_ClassDynamicCast_bSuccess, UBackpackAvatarHandle* CallFunc_SpawnObject_ReturnValue);
  bool InitBodyMeshByHead(int32 Head, int32 ___int_Loop_Counter_Variable, UBackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, UBattleItemHandle_HeadBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Head_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Get_Item, UBackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue2, bool CallFunc_PutOnDefaultEquipment_ReturnValue);
  bool PutOffEquimentByResID(int32 resID, UBackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_PutOffEquiment_ReturnValue);
  bool PutOnDefaultEquipment(UBackpackAvatarHandle* ItemHandle, bool CallFunc_PutOnEquipmentByItemHandle_ReturnValue, struct FItemDefineID CallFunc_GetDefineID_ReturnValue, struct FMeshData CallFunc_CreateMeshData_outPut, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckShouldEquipItem_ReturnValue);
  bool PutOnEquipmentByResID(int32 resID, UBackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, bool CallFunc_PutOnEquipmentByItemHandle_ReturnValue);
  void ReceiveBeginPlay();
};

class UCharacterAvatarComponent: public UAvatarComponent {
  /* offset=0x04f0 flags=0x001000800000221c */ TMap<int32, UMeshComponent*> attachmentMeshCompList;
  /* offset=0x052c flags=0x0010000100002220 */ TArray<struct FMeshSynData> synData;
  /* offset=0x0538 flags=0x0010000100002220 */ TArray<struct FMeshSynData> defaultSynData;
  /* offset=0x058c flags=0x0020080000000200 */ TArray<UBattleItemHandleBase*> itemHandleCache;

  void ApplyAnimation(int32 Slot, struct FMeshPackage meshPack);
  void ApplyMeshCompCollision(int32 slotID);
  bool ApplySkeletalMeshByID(int32 Slot, USkeletalMesh* Mesh, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  bool ApplyStaticMeshByID(int32 Slot, UStaticMesh* pSM, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  bool CheckIsDefaultAvatar(struct FItemDefineID definedID);
  void ClearMeshBySlot(int32 Slot, bool putDefault);
  void ForceRemoveMeshBySlot(enum EAvatarSlotType SlotType);
  UMeshComponent* GetAttachmentToAvatar(int32 SlotType, int32 meshType);
  bool InitBodyMeshByHead(int32 Head);
  void InitDefaultAvatar(UBattleItemHandleBase* Handle);
  void InitDefaultAvatarByResID(int32 avatarGender, int32 Head, int32 hair);
  void InitDefaultMesh(UBattleItemHandleBase* Handle);
  void InitialAvatarParam(int32 AGender);
  void NetApplyHeadMesh(UBattleItemHandleBase* Handle);
  void NetSyncData(int32 Slot, enum ESyncOperation Type, UBattleItemHandleBase* Handle);
  void NetSyncDefData(int32 Slot, UBattleItemHandleBase* Handle);
  void OnDefaultItemLoaded(struct FItemDefineID DefineID, UBattleItemHandleBase* ItemHandle);
  void OnItemHandleLoaded(struct FItemDefineID DefineID, UBattleItemHandleBase* ItemHandle);
  void OnMeshLoaded(struct FSoftObjectPath AssetList, UBackpackAvatarHandle* itemHandles);
  void OnRep_AvatarMeshChanged();
  void OnRep_SetDefaultCfg();
  bool PutOnEquipmentByItemHandle(UBattleItemHandleBase* ItemHandle, USkeletalMesh* skMesh, UStaticMesh* stMesh);
  void RefreshAvatar();
  /* SRV */ void ServerRemoveMeshBySlot(enum EAvatarSlotType SlotType);
  void SetAllMeshCollisionState(bool IsEnable);
  void SetAvatarVisibility(enum EAvatarSlotType SlotType, bool visible, bool isForce);
  bool SetSkinMaterial(int32 slotID);
};

class UCharacterMovementComponent: public UPawnMovementComponent {
  /* offset=0x011c flags=0x0028081040202200 */ ACharacter* CharacterOwner;
  /* offset=0x0120 flags=0x0018041000000005 */ uint8 bApplyGravityWhileJumping:1;
  /* offset=0x0124 flags=0x0018001040000205 */ float GravityScale;
  /* offset=0x0128 flags=0x0018001040000205 */ float MaxStepHeight;
  /* offset=0x012c flags=0x0018001040000205 */ float JumpZVelocity;
  /* offset=0x0130 flags=0x0018041040000205 */ float JumpOffJumpZFactor;
  /* offset=0x0134 flags=0x0048001040000201 */ float WalkableFloorAngle;
  /* offset=0x0138 flags=0x0048001040020201 */ float WalkableFloorZ;
  /* offset=0x013c flags=0x0018001040000214 */ uint8 MovementMode;
  /* offset=0x013d flags=0x0018001040000214 */ uint8 CustomMovementMode;
  /* offset=0x0160 flags=0x0018001040000205 */ float GroundFriction;
  /* offset=0x0164 flags=0x0018001040000205 */ float MaxWalkSpeed;
  /* offset=0x0168 flags=0x0018001040000205 */ float MaxWalkSpeedCrouched;
  /* offset=0x016c flags=0x0018001040000205 */ float MaxSwimSpeed;
  /* offset=0x0170 flags=0x0018001040000205 */ float MaxFlySpeed;
  /* offset=0x0174 flags=0x0018001040000205 */ float MaxCustomMovementSpeed;
  /* offset=0x0178 flags=0x0018001040000205 */ float MaxAcceleration;
  /* offset=0x017c flags=0x0018001040000205 */ float MinAnalogWalkSpeed;
  /* offset=0x0180 flags=0x0018001040000205 */ float BrakingFrictionFactor;
  /* offset=0x0184 flags=0x0018001040000205 */ float BrakingFriction;
  /* offset=0x0188 flags=0x0018001000010005 */ uint8 bUseSeparateBrakingFriction:1;
  /* offset=0x018c flags=0x0018001040000205 */ float BrakingDecelerationWalking;
  /* offset=0x0190 flags=0x0018001040000205 */ float BrakingDecelerationFalling;
  /* offset=0x0194 flags=0x0018001040000205 */ float BrakingDecelerationSwimming;
  /* offset=0x0198 flags=0x0018001040000205 */ float BrakingDecelerationFlying;
  /* offset=0x019c flags=0x0018001040000205 */ float AirControl;
  /* offset=0x01a0 flags=0x0018001040000205 */ float AirControlBoostMultiplier;
  /* offset=0x01a4 flags=0x0018001040000205 */ float AirControlBoostVelocityThreshold;
  /* offset=0x01a8 flags=0x0018001040000205 */ float FallingLateralFriction;
  /* offset=0x01ac flags=0x0018001040000215 */ float CrouchedHalfHeight;
  /* offset=0x01b0 flags=0x0018001040000205 */ float Buoyancy;
  /* offset=0x01b4 flags=0x0018041040000205 */ float PerchRadiusThreshold;
  /* offset=0x01b8 flags=0x0018041040000205 */ float PerchAdditionalHeight;
  /* offset=0x01bc flags=0x0010001040000005 */ struct FRotator RotationRate;
  /* offset=0x01c8 flags=0x0018001000000005 */ uint8 bUseControllerDesiredRotation:1;
  /* offset=0x01c8 flags=0x0018001000000005 */ uint8 bOrientRotationToMovement:1;
  /* offset=0x01c8 flags=0x0018001000000005 */ uint8 bSweepWhileNavWalking:1;
  /* offset=0x01c8 flags=0x0028081000000000 */ uint8 bMovementInProgress:1;
  /* offset=0x01c8 flags=0x0018041000000001 */ uint8 bEnableScopedMovementUpdates:1;
  /* offset=0x01c8 flags=0x0018001000000000 */ uint8 bForceMaxAccel:1;
  /* offset=0x01c8 flags=0x0018041000000005 */ uint8 bRunPhysicsWithNoController:1;
  /* offset=0x01c9 flags=0x0018041000020805 */ uint8 bForceNextFloorCheck:1;
  /* offset=0x01c9 flags=0x0018001000000000 */ uint8 bShrinkProxyCapsule:1;
  /* offset=0x01c9 flags=0x0018001000000005 */ uint8 bCanWalkOffLedges:1;
  /* offset=0x01c9 flags=0x0018001000000005 */ uint8 bCanWalkOffLedgesWhenCrouching:1;
  /* offset=0x01c9 flags=0x0018001000000000 */ uint8 bDeferUpdateMoveComponent:1;
  /* offset=0x01cc flags=0x0018001040080208 */ USceneComponent* DeferredUpdatedMoveComponent;
  /* offset=0x01d0 flags=0x0018041040000205 */ float MaxOutOfWaterStepHeight;
  /* offset=0x01d4 flags=0x0018041040000205 */ float OutofWaterZ;
  /* offset=0x01d8 flags=0x0018001040000205 */ float Mass;
  /* offset=0x01dc flags=0x0018001040000205 */ bool bEnablePhysicsInteraction;
  /* offset=0x01dd flags=0x0018001040000205 */ bool bTouchForceScaledToMass;
  /* offset=0x01de flags=0x0018001040000205 */ bool bPushForceScaledToMass;
  /* offset=0x01df flags=0x0018001040000205 */ bool bPushForceUsingZOffset;
  /* offset=0x01e0 flags=0x0018001040000205 */ bool bScalePushForceToVelocity;
  /* offset=0x01e4 flags=0x0018001040000205 */ float StandingDownwardForceScale;
  /* offset=0x01e8 flags=0x0018001040000205 */ float InitialPushForceFactor;
  /* offset=0x01ec flags=0x0018001040000205 */ float PushForceFactor;
  /* offset=0x01f0 flags=0x0018001040000205 */ float PushForcePointZOffsetFactor;
  /* offset=0x01f4 flags=0x0018001040000205 */ float TouchForceFactor;
  /* offset=0x01f8 flags=0x0018001040000205 */ float MinTouchForce;
  /* offset=0x01fc flags=0x0018001040000205 */ float MaxTouchForce;
  /* offset=0x0200 flags=0x0018001040000205 */ float RepulsionForce;
  /* offset=0x0204 flags=0x0018001020000000 */ uint8 bForceBraking:1;
  /* offset=0x0208 flags=0x0018001060000200 */ float CrouchedSpeedMultiplier;
  /* offset=0x020c flags=0x0018001060000200 */ float UpperImpactNormalScale;
  /* offset=0x0210 flags=0x0028081040000000 */ struct FVector Acceleration;
  /* offset=0x021c flags=0x0028081040000000 */ struct FVector LastUpdateLocation;
  /* offset=0x0230 flags=0x0020081040000000 */ struct FQuat LastUpdateRotation;
  /* offset=0x0240 flags=0x0028081040000000 */ struct FVector LastUpdateVelocity;
  /* offset=0x024c flags=0x0028081040002200 */ float ServerLastTransformUpdateTimeStamp;
  /* offset=0x0250 flags=0x0028081040000000 */ struct FVector PendingImpulseToApply;
  /* offset=0x025c flags=0x0028081040000000 */ struct FVector PendingForceToApply;
  /* offset=0x0268 flags=0x0028081040000200 */ float AnalogInputModifier;
  /* offset=0x0274 flags=0x0018041040000205 */ float MaxSimulationTimeStep;
  /* offset=0x0278 flags=0x0018041040000205 */ int32 MaxSimulationIterations;
  /* offset=0x027c flags=0x0018041040000205 */ float MaxDepenetrationWithGeometry;
  /* offset=0x0280 flags=0x0018041040000205 */ float MaxDepenetrationWithGeometryAsProxy;
  /* offset=0x0284 flags=0x0018041040000205 */ float MaxDepenetrationWithPawn;
  /* offset=0x0288 flags=0x0018041040000205 */ float MaxDepenetrationWithPawnAsProxy;
  /* offset=0x028c flags=0x0018041040010201 */ float NetworkSimulatedSmoothLocationTime;
  /* offset=0x0290 flags=0x0018041040010201 */ float NetworkSimulatedSmoothRotationTime;
  /* offset=0x0294 flags=0x0018041040010201 */ float ListenServerNetworkSimulatedSmoothLocationTime;
  /* offset=0x0298 flags=0x0018041040010201 */ float ListenServerNetworkSimulatedSmoothRotationTime;
  /* offset=0x029c flags=0x0018041040010201 */ float NetProxyShrinkRadius;
  /* offset=0x02a0 flags=0x0018041040010201 */ float NetProxyShrinkHalfHeight;
  /* offset=0x02a4 flags=0x0018001040010201 */ float NetworkMaxSmoothUpdateDistance;
  /* offset=0x02a8 flags=0x0018001040010201 */ float NetworkNoSmoothUpdateDistance;
  /* offset=0x02ac flags=0x0018001040000215 */ enum ENetworkSmoothingMode NetworkSmoothingMode;
  /* offset=0x02b0 flags=0x0018041040000205 */ float LedgeCheckThreshold;
  /* offset=0x02b4 flags=0x0018041040000205 */ float JumpOutOfWaterPitch;
  /* offset=0x02b8 flags=0x0010009000020815 */ struct FFindFloorResult CurrentFloor;
  /* offset=0x0350 flags=0x0018001040000205 */ uint8 DefaultLandMovementMode;
  /* offset=0x0351 flags=0x0018001040000205 */ uint8 DefaultWaterMovementMode;
  /* offset=0x0352 flags=0x0048001040002200 */ uint8 GroundMovementMode;
  /* offset=0x0353 flags=0x0018001000000005 */ uint8 bMaintainHorizontalGroundVelocity:1;
  /* offset=0x0353 flags=0x0018001000000005 */ uint8 bImpartBaseVelocityX:1;
  /* offset=0x0353 flags=0x0018001000000005 */ uint8 bImpartBaseVelocityY:1;
  /* offset=0x0353 flags=0x0018001000000005 */ uint8 bImpartBaseVelocityZ:1;
  /* offset=0x0353 flags=0x0018001000000005 */ uint8 bImpartBaseAngularVelocity:1;
  /* offset=0x0353 flags=0x0018001000022805 */ uint8 bJustTeleported:1;
  /* offset=0x0353 flags=0x0018001000002000 */ uint8 bNetworkUpdateReceived:1;
  /* offset=0x0353 flags=0x0018001000002000 */ uint8 bNetworkMovementModeChanged:1;
  /* offset=0x0354 flags=0x0018001000002005 */ uint8 bIgnoreClientMovementErrorChecksAndCorrection:1;
  /* offset=0x0354 flags=0x0018001000020005 */ uint8 bNotifyApex:1;
  /* offset=0x0354 flags=0x0018001000000000 */ uint8 bCheatFlying:1;
  /* offset=0x0354 flags=0x0018001000020815 */ uint8 bWantsToCrouch:1;
  /* offset=0x0354 flags=0x0018041000020805 */ uint8 bCrouchMaintainsBaseLocation:1;
  /* offset=0x0354 flags=0x0018001000000005 */ uint8 bIgnoreBaseRotation:1;
  /* offset=0x0354 flags=0x0018001000000000 */ uint8 bFastAttachedMove:1;
  /* offset=0x0354 flags=0x0018041000000005 */ uint8 bAlwaysCheckFloor:1;
  /* offset=0x0355 flags=0x0018041000000005 */ uint8 bUseFlatBaseForFloorChecks:1;
  /* offset=0x0355 flags=0x0018001000000000 */ uint8 bPerformingJumpOff:1;
  /* offset=0x0355 flags=0x0018001000000000 */ uint8 bWantsToLeaveNavWalking:1;
  /* offset=0x0355 flags=0x0018001000000015 */ uint8 bUseRVOAvoidance:1;
  /* offset=0x0355 flags=0x0018041000000005 */ uint8 bRequestedMoveUseAcceleration:1;
  /* offset=0x0355 flags=0x0028081000002000 */ uint8 bHasRequestedVelocity:1;
  /* offset=0x0355 flags=0x0028081000002000 */ uint8 bRequestedMoveWithMaxSpeed:1;
  /* offset=0x0356 flags=0x0028081000002000 */ uint8 bWasAvoidanceUpdated:1;
  /* offset=0x0356 flags=0x0028081000000015 */ uint8 bProjectNavMeshWalking:1;
  /* offset=0x0356 flags=0x00280c1000000015 */ uint8 bProjectNavMeshOnBothWorldChannels:1;
  /* offset=0x0368 flags=0x0018001040000215 */ float AvoidanceConsiderationRadius;
  /* offset=0x036c flags=0x0018001040002000 */ struct FVector RequestedVelocity;
  /* offset=0x0378 flags=0x0018041040020215 */ int32 AvoidanceUID;
  /* offset=0x037c flags=0x0010041040000015 */ struct FNavAvoidanceMask AvoidanceGroup;
  /* offset=0x0380 flags=0x0010041040000015 */ struct FNavAvoidanceMask GroupsToAvoid;
  /* offset=0x0384 flags=0x0010041040000015 */ struct FNavAvoidanceMask GroupsToIgnore;
  /* offset=0x0388 flags=0x0018001040000215 */ float AvoidanceWeight;
  /* offset=0x038c flags=0x0018001040000000 */ struct FVector PendingLaunchVelocity;
  /* offset=0x0438 flags=0x0018001040000205 */ float NavMeshProjectionInterval;
  /* offset=0x043c flags=0x0018001040002200 */ float NavMeshProjectionTimer;
  /* offset=0x0440 flags=0x0018001040000205 */ float NavMeshProjectionInterpSpeed;
  /* offset=0x0444 flags=0x0018001040000205 */ float NavMeshProjectionHeightScaleUp;
  /* offset=0x0448 flags=0x0018001040000205 */ float NavMeshProjectionHeightScaleDown;
  /* offset=0x044c flags=0x0018001040000205 */ float NavWalkingFloorDistTolerance;
  /* offset=0x0450 flags=0x0010000000000000 */ struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;
  /* offset=0x0494 flags=0x0018001040000200 */ float MinTimeBetweenTimeStampResets;
  /* offset=0x0498 flags=0x0010000000002000 */ struct FRootMotionSourceGroup CurrentRootMotion;
  /* offset=0x05c0 flags=0x0010001000002000 */ struct FRootMotionMovementParams RootMotionParams;
  /* offset=0x0600 flags=0x0018001040002000 */ struct FVector AnimRootMotionVelocity;
  /* offset=0x060c flags=0x0018001040002200 */ bool bWasSimulatingRootMotion;
  /* offset=0x060d flags=0x0018001000000005 */ uint8 bAllowPhysicsRotationDuringAnimRootMotion:1;

  void AddForce(struct FVector Force);
  void AddImpulse(struct FVector Impulse, bool bVelocityChange);
  void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
  void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void ClearAccumulatedForces();
  /* CL  */ void ClientAckGoodMove(float TimeStamp);
  /* CL  */ void ClientAdjustPosition(float TimeStamp, struct FVector NewLoc, struct FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
  /* CL  */ void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
  /* CL  */ void ClientAdjustRootMotionSourcePosition(float TimeStamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
  /* CL  */ void ClientVeryShortAdjustPosition(float TimeStamp, struct FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
  void DisableMovement();
  float GetAnalogInputModifier();
  ACharacter* GetCharacterOwner();
  struct FVector GetCurrentAcceleration();
  struct FVector GetImpartedMovementBaseVelocity();
  float GetMaxAcceleration();
  float GetMaxBrakingDeceleration();
  float GetMaxJumpHeight();
  float GetMaxJumpHeightWithJumpTime();
  float GetMinAnalogSpeed();
  UPrimitiveComponent* GetMovementBase();
  float GetPerchRadiusThreshold();
  float GetValidPerchRadius();
  bool IsWalkable(struct FHitResult Hit);
  bool IsWalking();
  void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult FloorResult);
  void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult FloorResult);
  float K2_GetModifiedMaxAcceleration();
  float K2_GetWalkableFloorAngle();
  float K2_GetWalkableFloorZ();
  /* SRV */ void ServerMove(float TimeStamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode);
  /* SRV */ void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode);
  /* SRV */ void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode);
  /* SRV */ void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags);
  void SetAvoidanceEnabled(bool bEnable);
  void SetAvoidanceGroup(int32 GroupFlags);
  void SetAvoidanceGroupMask(struct FNavAvoidanceMask GroupMask);
  void SetGroupsToAvoid(int32 GroupFlags);
  void SetGroupsToAvoidMask(struct FNavAvoidanceMask GroupMask);
  void SetGroupsToIgnore(int32 GroupFlags);
  void SetGroupsToIgnoreMask(struct FNavAvoidanceMask GroupMask);
  void SetMovementMode(uint8 NewMovementMode, uint8 NewCustomMode);
  void SetWalkableFloorAngle(float InWalkableFloorAngle);
  void SetWalkableFloorZ(float InWalkableFloorZ);
};

class UCharacterParachuteComponent: public UActorComponent {
  /* offset=0x00b4 flags=0x0028081040000214 */ float CurrentDiveRate;
  /* offset=0x00c4 flags=0x0028081040000205 */ float FreeFall_InputTriggerThreshold;
  /* offset=0x00c8 flags=0x0028081040000205 */ float FreeFall_AcceFall;
  /* offset=0x00cc flags=0x0028081040000205 */ float FreeFall_MaxFreeFallSpeed;
  /* offset=0x00d0 flags=0x0028081040000205 */ float FreeFall_MaxFallSpeedChangeAccel;
  /* offset=0x00d4 flags=0x0028081040000205 */ float FreeFall_AcceForward;
  /* offset=0x00d8 flags=0x0028081040000205 */ float FreeFall_MaxForwardSpeed;
  /* offset=0x00dc flags=0x0028081040000205 */ float FreeFall_MaxForwardExtraFallSpeed;
  /* offset=0x00e0 flags=0x0028081040000205 */ float FreeFall_AcceRight;
  /* offset=0x00e4 flags=0x0028081040000205 */ float FreeFall_MaxRightSpeed;
  /* offset=0x00e8 flags=0x0028081040000205 */ float FreeFall_MaxRightExtraFallSpeed;
  /* offset=0x00ec flags=0x0028081040000205 */ float FreeFall_MaxPitchForwardAngle;
  /* offset=0x00f0 flags=0x0028081040000205 */ float FreeFall_MaxPitchBackAngle;
  /* offset=0x00f4 flags=0x0028081040000205 */ float FreeFall_RotationYawInterpSpeed;
  /* offset=0x00f8 flags=0x0028081040000205 */ float FreeFall_RotationPitchInterpSpeed;
  /* offset=0x00fc flags=0x0028081040000205 */ float FreeFall_MinDiveAngle;
  /* offset=0x0100 flags=0x0028081040000205 */ float FreeFall_DiveExtraAcceFall;
  /* offset=0x0104 flags=0x0028081040000205 */ float FreeFall_MaxDiveExtraFallSpeed;
  /* offset=0x0108 flags=0x0028081040000205 */ bool bOpened_EnableInputMode8Dirs;
  /* offset=0x010c flags=0x0028081040000205 */ float Opened_AcceFall;
  /* offset=0x0110 flags=0x0028081040000205 */ float Opened_MaxFreeFallSpeed;
  /* offset=0x0114 flags=0x0028081040000205 */ float Opened_AcceForward;
  /* offset=0x0118 flags=0x0028081040000205 */ float Opened_MaxForwardSpeed;
  /* offset=0x011c flags=0x0028081040000205 */ float Opened_MaxBackwardSpeed;
  /* offset=0x0120 flags=0x0028081040000205 */ float Opened_MaxForwardExtraFallSpeed;
  /* offset=0x0124 flags=0x0028081040000205 */ float Opened_MaxBackExtraFallSpeed;
  /* offset=0x0128 flags=0x0028081040000205 */ float Opened_AcceRight;
  /* offset=0x012c flags=0x0028081040000205 */ float Opened_MaxRightSpeed;
  /* offset=0x0130 flags=0x0028081040000205 */ float Opened_MaxLeftRightExtraFallSpeed;
  /* offset=0x0134 flags=0x0028081040000205 */ float Opened_MaxRollAngle;
  /* offset=0x0138 flags=0x0028081040000205 */ float Opened_MaxPitchForwardAngle;
  /* offset=0x013c flags=0x0028081040000205 */ float Opened_MaxPitchBackAngle;
  /* offset=0x0140 flags=0x0028081040000205 */ float Opened_MaxYawAngleSpeed;
  /* offset=0x0144 flags=0x0028081040000205 */ float Opened_RotationInterpSpeed;
  /* offset=0x0148 flags=0x0018001040000204 */ float CurrentFallSpeed;

  float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);
  struct FVector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);
  struct FVector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);
  void ResetVelocity();
  void UpdateFreeFallRotation(struct FRotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);
  void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);
};

class UCharacterWeaponManagerComponent: public UWeaponManagerComponent {
  /* offset=0x0348 flags=0x0018001040000204 */ float RefreshUIIntervalAfterReconnect;
  /* offset=0x034c flags=0x0018001040000204 */ int32 RefreshUITimesAfterReconnect;
  /* offset=0x0350 flags=0x0028081040000200 */ ASTExtraPlayerCharacter* OwnerCharacter;
  /* offset=0x036c flags=0x0020080000000200 */ TArray<struct FWeaponReconnectReplicateDataWrapper> WeaponReconnectReplicateDataWrapperList;

  void OnDisconnectToClientOnServer();
  void OnReconnectOnClient();
  void OnReconnectOnServer();
  void OnRecoverOnServer();
};

class UChasingBar: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0018001040000205 */ float ProgressBarCanvasXValue;
  /* offset=0x0234 flags=0x0018001040000205 */ bool IsNeedClearProgressBar;
  /* offset=0x0238 flags=0x0018001040000205 */ float BlueCircleAppearanceTime;
  /* offset=0x023c flags=0x0018001040000205 */ float BlueCircleMovingCountDownDuration;
  /* offset=0x0240 flags=0x0018001040000205 */ float BlueCircleRunStartTime;
  /* offset=0x0244 flags=0x0018001040000205 */ float BlueCircleRunDuration;
  /* offset=0x0248 flags=0x0018001040000205 */ float BlueCircleChasingPercent;
  /* offset=0x024c flags=0x0018001040000205 */ float ProgressBarLength;
  /* offset=0x0250 flags=0x0018001040000005 */ struct FVector OriginBlueCircle;
  /* offset=0x025c flags=0x0018001040000205 */ float CleaningTime;
  /* offset=0x0260 flags=0x0018001040000205 */ ASTExtraGameStateBase* STEGameStateBase;
  /* offset=0x0264 flags=0x0018001040000205 */ ASTExtraPlayerController* STEPlayerController;
  /* offset=0x0268 flags=0x0010000000000005 */ FText BlueCircleMovingCountDownText;
  /* offset=0x0274 flags=0x0018001040000205 */ float PlayerEscapeProgress;
  /* offset=0x0278 flags=0x0018001040000205 */ bool IsPlayerOutBlueCircleCurrently;

  void BlueCirclePreMoveCountDown();
  float CalPlayerEscapePercent();
  void CheckToCleanProgress();
  void CleanTheProgressBar();
  void ClearProgressBar();
  bool IsBlueCircleAppearAndCountDown();
  bool IsBlueCircleMoving();
  bool IsPlayerInWhiteCircle(APawn* CurPawn);
  bool IsPlayerOutBlueCircle(APawn* CurPawn);
  void OnCountDownTextInvisible();
  void OnPlayerEnterExitBlueCircle();
  void UpdateCountDownText();
};

class UChatComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000000205 */ TArray<int32> chatOptionList;
  /* offset=0x00b8 flags=0x0010000000000205 */ TArray<UAkAudioEvent*> chatAudioList;
  /* offset=0x00c4 flags=0x0018000000000205 */ FString TeammateColor;
  /* offset=0x00d0 flags=0x0018000000000205 */ FString MyColor;
  /* offset=0x00dc flags=0x0010000000000205 */ TMap<FString, struct FIngameFriendChat> FriendChatInfo;
  /* offset=0x0118 flags=0x0018000000000205 */ FString EndChar;
  /* offset=0x0124 flags=0x0018000000000205 */ FString ColonChar;

  void AddFriendChat(FString gid, FString Name, FString content, bool isSelf);
  void AddOneMsgToUI1(FString Name, FString content, int32 msgID, bool isMe);
  /* CL  */ void ClientReceiveMsg(struct FInGameChatMsg msgItem);
  void InviteNextBattleReply(FString gid, FString Name, bool bReply);
  void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);
  void NotifyFriendInvite(FString str_gid, FString sender_name);
  void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);
  void OnFilterFinish(FString filterText);
  void OnInviteNextBattle(FString gid, FString Name);
  void SendDirtyFilter(FString Name, FString content, bool isMe);
  /* SRV */ void ServerSendMsg(struct FInGameChatMsg msgItem);
};

class UChatComponent_BP_C: public UChatComponent {
  /* offset=0x0130 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0134 flags=0x0008000000010205 */ FString addToUIText;
  /* offset=0x0140 flags=0x0000000000010205 */ TArray<FString> UITextArray;
  /* offset=0x014c flags=0x0008001040010205 */ int32 FirstIndex;
  /* offset=0x0150 flags=0x0008001040010205 */ float lastShowTime;
  /* offset=0x0154 flags=0x0008001040010205 */ float ShowChatDuration;
  /* offset=0x0158 flags=0x0008001040010205 */ float ShowChatListDuration;
  /* offset=0x015c flags=0x0008000000010205 */ FString currContentMsg;
  /* offset=0x0168 flags=0x0008001040010205 */ USettingConfig_C* Setting;

  void AddOneMsgToUI1(FString Name, FString content, int32 msgID, bool isMe);
  void AddOneMsgToUIInner(bool isMe, float CallFunc_GetTimeSeconds_ReturnValue, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Variable2, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, AActor* CallFunc_GetOwner_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UUTRichTextBlock* K2Node_DynamicCast_AsUUTRichTextBlock__String_, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue3, int32 CallFunc_GetChildrenCount_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue4, UWidget* CallFunc_GetChildAt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue5, UUTRichTextBlock* K2Node_DynamicCast_AsUUTRichTextBlock__String, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_LessEqual_IntInt_ReturnValue2);
  void AddToArray(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);
  void ExecuteUbergraph_ChatComponent_BP(int32 EntryPoint, FString CallFunc_GetLocalizeText_Text, AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, AActor* CallFunc_GetOwner_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Add_FloatFloat_ReturnValue, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, FString K2Node_Event_name2, FString K2Node_Event_content2, int32 K2Node_Event_msgID, bool K2Node_Event_isMe2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, AActor* CallFunc_GetOwner_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, AActor* CallFunc_GetOwner_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4, FString CallFunc_Concat_StrStr_ReturnValue4, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow4, bool CallFunc_GetDataTableRowFromName_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, AActor* CallFunc_GetOwner_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess5, FString K2Node_Event_filterText, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess6, float K2Node_Event_DeltaSeconds, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16);
  void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);
  void NotifyFriendInvite(FString str_gid, FString sender_name);
  void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);
  void OnFilterFinish(FString filterText);
  void PlaySound(int32 msgID, int32 ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, AActor* CallFunc_GetOwner_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, int32 ___int_Loop_Counter_Variable, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Add_IntInt_ReturnValue, UAkAudioEvent* CallFunc_Array_Get_Item, int32 CallFunc_Array_Get_Item2, int32 CallFunc_PostEvent_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void ReceiveTick(float DeltaSeconds);
  void SendDirtyFilter(FString Name, FString content, bool isMe);
};

class UCheatManager: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ ADebugCameraController* DebugCameraControllerRef;
  /* offset=0x0020 flags=0x001c001040010215 */ UClass<ADebugCameraController>* DebugCameraControllerClass;

  void BugIt(FString ScreenShotDescription);
  void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
  void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, FString GoString, FString LocString);
  void ChangeSize(float F);
  void CheatScript(FString ScriptName);
  void DamageTarget(float DamageAmount);
  void DebugCapsuleSweep();
  void DebugCapsuleSweepCapture();
  void DebugCapsuleSweepChannel(uint8 Channel);
  void DebugCapsuleSweepClear();
  void DebugCapsuleSweepComplex(bool bTraceComplex);
  void DebugCapsuleSweepPawn();
  void DebugCapsuleSweepSize(float HalfHeight, float Radius);
  void DestroyAll(UClass<AActor>* aClass);
  void DestroyAllPawnsExceptTarget();
  void DestroyPawns(UClass<APawn>* aClass);
  void DestroyTarget();
  void DisableDebugCamera();
  void DumpChatState();
  void DumpOnlineSessionState();
  void DumpPartyState();
  void DumpVoiceMutingState();
  void EnableDebugCamera();
  void FlushLog();
  void Fly();
  void FreezeFrame(float Delay);
  void Ghost();
  void God();
  void InvertMouse();
  void LogLoc();
  void OnlyLoadLevel(FName PackageName);
  void PlayersOnly();
  void RebuildNavigation();
  void ReceiveEndPlay();
  void ReceiveInitCheatManager();
  /* SRV */ void ServerToggleAILogging();
  void SetMouseSensitivityToDefault();
  void SetNavDrawDistance(float DrawDistance);
  void SetWorldOrigin();
  void Slomo(float NewTimeDilation);
  void StreamLevelIn(FName PackageName);
  void StreamLevelOut(FName PackageName);
  void Summon(FString ClassName);
  void Teleport();
  void TestCollisionDistance();
  void ToggleAILogging();
  void ToggleDebugCamera();
  void ViewActor(FName ActorName);
  void ViewClass(UClass<AActor>* DesiredClass);
  void ViewPlayer(FString S);
  void ViewSelf();
  void Walk();
};

class UCheckBox: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000201 */ enum ECheckBoxState CheckedState;
  /* offset=0x00d8 flags=0x0010001000080200 */ FGetCheckBoxState CheckedStateDelegate;
  /* offset=0x00e8 flags=0x0010000000000005 */ struct FCheckBoxStyle WidgetStyle;
  /* offset=0x0528 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x052c flags=0x0018001060000200 */ USlateBrushAsset* UncheckedImage;
  /* offset=0x0530 flags=0x0018001060000200 */ USlateBrushAsset* UncheckedHoveredImage;
  /* offset=0x0534 flags=0x0018001060000200 */ USlateBrushAsset* UncheckedPressedImage;
  /* offset=0x0538 flags=0x0018001060000200 */ USlateBrushAsset* CheckedImage;
  /* offset=0x053c flags=0x0018001060000200 */ USlateBrushAsset* CheckedHoveredImage;
  /* offset=0x0540 flags=0x0018001060000200 */ USlateBrushAsset* CheckedPressedImage;
  /* offset=0x0544 flags=0x0018001060000200 */ USlateBrushAsset* UndeterminedImage;
  /* offset=0x0548 flags=0x0018001060000200 */ USlateBrushAsset* UndeterminedHoveredImage;
  /* offset=0x054c flags=0x0018001060000200 */ USlateBrushAsset* UndeterminedPressedImage;
  /* offset=0x0550 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0554 flags=0x0010001020000000 */ struct FMargin Padding;
  /* offset=0x0564 flags=0x0010000020000000 */ struct FSlateColor BorderBackgroundColor;
  /* offset=0x0580 flags=0x0018001040000215 */ bool IsFocusable;
  /* offset=0x0584 flags=0x0010000010080200 */ FOnCheckBoxComponentStateChanged OnCheckStateChanged;

  enum ECheckBoxState GetCheckedState();
  bool IsChecked();
  bool IsPressed();
  void SetCheckedState(enum ECheckBoxState InCheckedState);
  void SetIsChecked(bool InIsChecked);
};

class UCheckBoxStyleAsset: public UObject {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FCheckBoxStyle CheckBoxStyle;
};

class UCheckBoxWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FCheckBoxStyle CheckBoxStyle;
};

class UCheckedStateBinding: public UPropertyBinding {
  enum ECheckBoxState GetValue();
};

class UChildActorComponent: public USceneComponent {
  /* offset=0x0270 flags=0x004c001040000215 */ UClass<AActor>* ChildActorClass;
  /* offset=0x0274 flags=0x0048c01040000234 */ AActor* ChildActor;
  /* offset=0x0278 flags=0x0048001040230201 */ AActor* ChildActorTemplate;

  void SetChildActorClass(UClass<AActor>* InClass);
};

class UChildConnection: public UNetConnection {
  /* offset=0x294f0 flags=0x0018001040002200 */ UNetConnection* Parent;
};

class ACineCameraActor: public ACameraActor {
  /* offset=0x07a0 flags=0x0010001000000005 */ struct FCameraLookatTrackingSettings LookatTrackingSettings;

  UCineCameraComponent* GetCineCameraComponent();
};

class UCineCameraComponent: public UCameraComponent {
  /* offset=0x07b0 flags=0x0010001240000005 */ struct FCameraFilmbackSettings FilmbackSettings;
  /* offset=0x07bc flags=0x0010001040000005 */ struct FCameraLensSettings LensSettings;
  /* offset=0x07d0 flags=0x0010001000000005 */ struct FCameraFocusSettings FocusSettings;
  /* offset=0x0800 flags=0x0018001240000205 */ float CurrentFocalLength;
  /* offset=0x0804 flags=0x0018001240000205 */ float CurrentAperture;
  /* offset=0x0808 flags=0x0018001040020215 */ float CurrentFocusDistance;
  /* offset=0x0814 flags=0x0020080000004200 */ TArray<struct FNamedFilmbackPreset> FilmbackPresets;
  /* offset=0x0820 flags=0x0020080000004200 */ TArray<struct FNamedLensPreset> LensPresets;
  /* offset=0x082c flags=0x0028080000004200 */ FString DefaultFilmbackPresetName;
  /* offset=0x0838 flags=0x0028080000004200 */ FString DefaultLensPresetName;
  /* offset=0x0844 flags=0x0028081040004200 */ float DefaultLensFocalLength;
  /* offset=0x0848 flags=0x0028081040004200 */ float DefaultLensFStop;

  FString GetFilmbackPresetName();
  float GetHorizontalFieldOfView();
  FString GetLensPresetName();
  float GetVerticalFieldOfView();
  void SetFilmbackPresetByName(FString InPresetName);
  void SetLensPresetByName(FString InPresetName);
};

class UCircleChasingProgress_C: public UChasingBar {
  /* offset=0x0280 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0284 flags=0x000a0010c008021c */ UWidgetAnimation* BlueCircleRunning;
  /* offset=0x0288 flags=0x000a0010c008021c */ UWidgetAnimation* CleaningProgressBar;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* CautionIcon;
  /* offset=0x0290 flags=0x000a0010c008020c */ UTextBlock* CountDownText;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* PlayerIcon;
  /* offset=0x0298 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_BlueBar;
  /* offset=0x029c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Dist;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UProgressBar* WhiteProgressBar;
  /* offset=0x02a4 flags=0x0008001040010a05 */ ASTExtraGameStateBase* STExtraGameState;
  /* offset=0x02a8 flags=0x0008001040010a05 */ APawn* PlayerPawn;
  /* offset=0x02ac flags=0x0008001040010205 */ UCanvasPanelSlot* EscapeMarkerCanvasPanelSlot;
  /* offset=0x02b0 flags=0x0008001040010205 */ UCanvasPanelSlot* ProgressBarCanvasPanelSlot;
  /* offset=0x02b4 flags=0x0008001040010205 */ float CautionFlashing;
  /* offset=0x02b8 flags=0x0008001040010205 */ float DeltaTime;
  /* offset=0x02c0 flags=0x0000000000010005 */ struct FSlateBrush Taopao_zhongdu_R;
  /* offset=0x0328 flags=0x0000000000010005 */ struct FSlateBrush Taopao_zhongdu_W;
  /* offset=0x0390 flags=0x0000000000010005 */ struct FSlateBrush Taopao_zhongduTips_R;
  /* offset=0x03f8 flags=0x0000000000010005 */ struct FSlateBrush Taopao_zhongduTips_W;
  /* offset=0x0460 flags=0x0008001040010205 */ float PlayerPosition;
  /* offset=0x0464 flags=0x0000001040010205 */ bool IsRefreshCircleDistance;
  /* offset=0x0468 flags=0x0008000000010205 */ FString DebugTimeString;

  void CleanTheProgressBar();
  void ExecuteUbergraph_CircleChasingProgress(int32 EntryPoint, AGameStateBase* CallFunc_GetGameState_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, FOnCharacterBlueCirclePreWarningDelegate K2Node_CreateDelegate_OutputDelegate, FReConnectGameStateInfoNotify K2Node_CreateDelegate_OutputDelegate2, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float K2Node_CustomEvent_SafeZoneTime, float K2Node_CustomEvent_BlueCircleRunTime, FOnCharacterBlueCircleRunDelegate K2Node_CreateDelegate_OutputDelegate3, float CallFunc_Divide_FloatFloat_ReturnValue, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot2, bool K2Node_DynamicCast_bSuccess2, AGameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsValid_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess3, FOnCharacterSafeZoneTipsDelegate K2Node_CreateDelegate_OutputDelegate4, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess4, AGameStateBase* CallFunc_GetGameState_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess5, float K2Node_CustomEvent_BlueCirclePreWarningTime, struct FVector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, AGameStateBase* CallFunc_GetGameState_ReturnValue4, bool CallFunc_IsValid_ReturnValue4, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base3, bool K2Node_DynamicCast_bSuccess6, struct FReConnectGameStateInfo K2Node_CustomEvent_ReConnectInfo, AGameStateBase* CallFunc_GetGameState_ReturnValue5, float CallFunc_GetServerWorldTimeSeconds_ReturnValue2);
  void FlashCautionIcon(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue);
  void GetLocalTimeOfCircleStatusStart(float CircleStatusStartServerWorldSeconds, float LocalStartTimeSecond, float CallFunc_GetRealTimeSeconds_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, AGameStateBase* CallFunc_GetGameState_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5);
  void GetPlayerPawn(APawn* PlayerPawn, APawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void HandleReconnectInfo(struct FReConnectGameStateInfo Info, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Conv_FloatToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue12, AGameStateBase* CallFunc_GetGameState_ReturnValue, AGameStateBase* CallFunc_GetGameState_ReturnValue2, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue5, FString CallFunc_Conv_FloatToString_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, AGameStateBase* CallFunc_GetGameState_ReturnValue3, float CallFunc_GetServerWorldTimeSeconds_ReturnValue3, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_CalPlayerEscapePercent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue17, FString CallFunc_Concat_StrStr_ReturnValue18, FString CallFunc_Concat_StrStr_ReturnValue19);
  void OnBlueCircleRun(float BlueCircleRunTime);
  void OnCountDownTextInvisible();
  void OnPlayerEnterExitBlueCircle();
  void OnWhiteCircleAppear(float SafeZoneTime);
  void PlayerEscapePercent(UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3);
  void PreWarning(float BlueCirclePreWarningTime);
  void ReConnectGameStateInfoNotify(struct FReConnectGameStateInfo ReConnectInfo);
  void ReceivedInitWidget();
  void ShowCircleDistance(APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetWriteCircleDistance_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateCountDownText();
};

class UCircleMgrComponent: public UTimerRegistComponent {
  /* offset=0x00d8 flags=0x0010000000010205 */ TArray<struct FCirCleCfg> CircleConfigs;
  /* offset=0x0130 flags=0x0048001040000200 */ ACirleAreaVolume* BindedCirleAreaVolume;

  void RetriveCircleInfo(struct FReConnectGameStateInfo CurInfo);
  /* SRV */ void SetGMCicleTime(float CDTime, float LastTime);
};

class UCircularThrobber: public UWidget {
  /* offset=0x00c8 flags=0x0018001040000215 */ int32 NumberOfPieces;
  /* offset=0x00cc flags=0x0018001040000215 */ float Period;
  /* offset=0x00d0 flags=0x0018001040000215 */ float Radius;
  /* offset=0x00d4 flags=0x0018001060000200 */ USlateBrushAsset* PieceImage;
  /* offset=0x00d8 flags=0x0010000000000015 */ struct FSlateBrush Image;
  /* offset=0x0140 flags=0x0048001040002201 */ bool bEnableRadius;

  void SetNumberOfPieces(int32 InNumberOfPieces);
  void SetPeriod(float InPeriod);
  void SetRadius(float InRadius);
};

class ACirleAreaVolume: public AActor {
  /* offset=0x02a8 flags=0x0048001040080209 */ UBoxComponent* CircleBoxArea;
};

class UClass: public UStruct {
};

class UClassProperty: public UObjectProperty {
};

class UClientNetInterface: public UNetInterface {
};

class UClothingAsset: public UClothingAssetBase {
  /* offset=0x0038 flags=0x0018001040000201 */ UPhysicsAsset* PhysicsAsset;
  /* offset=0x003c flags=0x0010001000000001 */ struct FClothConfig ClothConfig;
  /* offset=0x00f8 flags=0x0010000000000200 */ TArray<struct FClothLODData> LODData;
  /* offset=0x0104 flags=0x0010000000000200 */ TArray<int32> LodMap;
  /* offset=0x0110 flags=0x0010000000000200 */ TArray<FName> UsedBoneNames;
  /* offset=0x011c flags=0x0010000000000200 */ TArray<int32> UsedBoneIndices;
  /* offset=0x0128 flags=0x0018001040000200 */ int32 ReferenceBoneIndex;
  /* offset=0x012c flags=0x0018001040000200 */ UClothingAssetCustomData* CustomData;
};

class UClothingAssetBase: public UObject {
  /* offset=0x001c flags=0x0018000000020201 */ FString ImportedFilePath;
  /* offset=0x0028 flags=0x0028081040000000 */ struct FGuid AssetGuid;
};

class UClothingAssetCustomData: public UObject {
};

class UClothingSimulationFactory: public UObject {
};

class UClothingSimulationFactoryNv: public UClothingSimulationFactory {
};

class UCloudStorageBase: public UPlatformInterfaceBase {
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<FString> LocalCloudFiles;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bSuppressDelegateCalls:1;
};

class UCollisionProfile: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0040000000044200 */ TArray<struct FCollisionResponseTemplate> Profiles;
  /* offset=0x003c flags=0x0040000000044200 */ TArray<struct FCustomChannelSetup> DefaultChannelResponses;
  /* offset=0x0048 flags=0x0040000000044200 */ TArray<struct FCustomProfile> EditProfiles;
  /* offset=0x0054 flags=0x0040000000044200 */ TArray<struct FRedirector> ProfileRedirects;
  /* offset=0x0060 flags=0x0040000000044200 */ TArray<struct FRedirector> CollisionChannelRedirects;
};

class UColorBinding: public UPropertyBinding {
  struct FLinearColor GetLinearValue();
  struct FSlateColor GetSlateValue();
};

class UComboBox: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000205 */ TArray<UObject*> Items;
  /* offset=0x00d8 flags=0x0010001000080201 */ FGenerateWidgetForObject OnGenerateWidgetEvent;
  /* offset=0x00e8 flags=0x0018001040000215 */ bool bIsFocusable;
};

class UComboBoxString: public UWidget {
  /* offset=0x00c8 flags=0x0040000000000201 */ TArray<FString> DefaultOptions;
  /* offset=0x00d4 flags=0x0048000000000201 */ FString SelectedOption;
  /* offset=0x00e0 flags=0x0010000000000005 */ struct FComboBoxStyle WidgetStyle;
  /* offset=0x03f8 flags=0x0010000000000005 */ struct FTableRowStyle ItemStyle;
  /* offset=0x0918 flags=0x0010001000000015 */ struct FMargin ContentPadding;
  /* offset=0x0928 flags=0x0018041040000215 */ float MaxListHeight;
  /* offset=0x092c flags=0x0018041040000215 */ bool HasDownArrow;
  /* offset=0x092d flags=0x0018041040000215 */ bool EnableGamepadNavigationMode;
  /* offset=0x0930 flags=0x0018000000000015 */ struct FSlateFontInfo Font;
  /* offset=0x0970 flags=0x0010000000000015 */ struct FSlateColor ForegroundColor;
  /* offset=0x098c flags=0x0018001040000215 */ bool bIsFocusable;
  /* offset=0x0990 flags=0x0010001000080201 */ FGenerateWidgetForString OnGenerateWidgetEvent;
  /* offset=0x09a0 flags=0x0010000010080200 */ FOnSelectionChangedEvent OnSelectionChanged;
  /* offset=0x09ac flags=0x0010000010080200 */ FOnOpeningEvent OnOpening;

  void AddOption(FString Option);
  void ClearOptions();
  void ClearSelection();
  int32 FindOptionIndex(FString Option);
  FString GetOptionAtIndex(int32 Index);
  int32 GetOptionCount();
  FString GetSelectedOption();
  void OnOpeningEvent__DelegateSignature();
  void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, uint8 SelectionType);
  void RefreshOptions();
  bool RemoveOption(FString Option);
  void SetSelectedOption(FString Option);
};

class UComboBoxWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FComboBoxStyle ComboBoxStyle;
};

class UComboButtonWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FComboButtonStyle ComboButtonStyle;
};

class UCommandlet: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString HelpDescription;
  /* offset=0x0028 flags=0x0018000000000200 */ FString HelpUsage;
  /* offset=0x0034 flags=0x0018000000000200 */ FString HelpWebLink;
  /* offset=0x0040 flags=0x0010000000000200 */ TArray<FString> HelpParamNames;
  /* offset=0x004c flags=0x0010000000000200 */ TArray<FString> HelpParamDescriptions;
  /* offset=0x0058 flags=0x0018001000000000 */ uint8 IsServer:1;
  /* offset=0x0058 flags=0x0018001000000000 */ uint8 IsClient:1;
  /* offset=0x0058 flags=0x0018001000000000 */ uint8 IsEditor:1;
  /* offset=0x0058 flags=0x0018001000000000 */ uint8 LogToConsole:1;
  /* offset=0x0058 flags=0x0018001000000000 */ uint8 ShowErrorCount:1;
};

class UCommonBtnComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000204 */ APUBGDoor* TriggeredDoor;

  void BP_ShowDoorBtn(bool bShow, bool bOpen);
  /* SRV */ void DoorRequireRPC(APUBGDoor* actionDoor);
};

class UCommon_Avatar_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x01b8 flags=0x0008001040010205 */ int32 acatarStyle;
  /* offset=0x01bc flags=0x0008000000010205 */ FString playerUid;
  /* offset=0x01c8 flags=0x0008000000010205 */ FString iconURL;
  /* offset=0x01d4 flags=0x0008001040010205 */ int32 frameLevel;
  /* offset=0x01d8 flags=0x0008001040010205 */ int32 gender;
  /* offset=0x01dc flags=0x0008001040010205 */ UUserWidget* targetUI;
  /* offset=0x01e0 flags=0x0008001040010205 */ UButton* buttonItem;
  /* offset=0x01e4 flags=0x0008001040010205 */ UImage* imageDefault;
  /* offset=0x01e8 flags=0x0008001040010205 */ UImage* imagePlayer;
  /* offset=0x01ec flags=0x0000100010010205 */ FOnClickItemCallback OnClickItemCallback;
  /* offset=0x01f8 flags=0x0008001040010205 */ UImage* imageFrame;
  /* offset=0x01fc flags=0x0008001040010205 */ int32 playerLevel;
  /* offset=0x0200 flags=0x0008001040010205 */ UTextBlock* textPlayerLevel;

  void Construct();
  void ExecuteUbergraph_Common_Avatar_BP(int32 EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, FImageDownloaderDelegate K2Node_CreateDelegate_OutputDelegate, FImageDownloaderDelegate K2Node_CreateDelegate_OutputDelegate2, UImageDownloader* CallFunc_MakeDownloader_ReturnValue, UTexture2D* K2Node_CustomEvent_Texture2, UImageDownloader* K2Node_CustomEvent_ImageDownloader2, bool CallFunc_EqualEqual_StrStr_ReturnValue, UTexture2D* K2Node_CustomEvent_Texture, UImageDownloader* K2Node_CustomEvent_ImageDownloader, UImageDownloader* CallFunc_MakeDownloader_ReturnValue2, int32 CallFunc_FindSubstring_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Left_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);
  void GetRankFrameLevelPath(int32 frameLevel, FString Path, FString frameName, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_AvatarFrame_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void InitView(int32 Style, FString UID, FString iconURL, int32 gender, int32 frameLevel, int32 playerLevel, bool K2Node_SwitchInteger_CmpSuccess, UCommon_Avatar_Style1_UIBP_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, UCommon_Avatar_Style2_UIBP_C* CallFunc_Create_ReturnValue2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, UPanelSlot* CallFunc_AddChild_ReturnValue, UCommon_Avatar_Style3_UIBP_C* CallFunc_Create_ReturnValue3);
  void OnClickItem();
  void OnClickItemCallback__DelegateSignature(FString UID);
  void OnFailImageDownloader(UTexture2D* Texture, UImageDownloader* ImageDownloader);
  void OnLoadIcon();
  void OnSuccessImageDownloader(UTexture2D* Texture, UImageDownloader* ImageDownloader);
  void SetDefaultIcon(UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue2, UTexture2D* K2Node_DynamicCast_AsTexture_2D2, bool K2Node_DynamicCast_bSuccess2);
  void SetFrame(int32 Level, FString CallFunc_GetRankFrameLevelPath_path, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void SetPlayerGender(int32 Gd);
  void SetPlayerIcon(FString URL, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void SetPlayerLevel(int32 Level, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);
  void SetPlayerUid(FString UID);
};

class UCommon_Avatar_Style1_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_Avatar;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image_Avatar;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_frame;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_Icon_Default;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerLevel;
};

class UCommon_Avatar_Style2_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_Avatar;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image_Avatar;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_frame;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_Icon_Default;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerLevel;
};

class UCommon_Avatar_Style3_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_Avatar;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image_Avatar;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_frame;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_Icon_Default;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerLevel;
};

class UCommon_HelpTips_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel__Tips;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Content;

  void BndEvt__Button_Close_K2Node_ComponentBoundEvent_255_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_Common_HelpTips_UIBP(int32 EntryPoint);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void SetContent(int32 alignStyle, FString str, FText CallFunc_Conv_StringToText_ReturnValue);
};

class UCommon_IMSDKNotice_Panel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_OK;
  /* offset=0x023c flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UGridPanel* MsgBox;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* Text_ok;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x024c flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_TipsContent;
  /* offset=0x0250 flags=0x0008001040010205 */ UTextBlock* Title;
  /* offset=0x0254 flags=0x0008001040010205 */ UUTRichTextBlock* content;
  /* offset=0x0258 flags=0x0008001040010a05 */ Abp_notice_intl_C* bp_notice_intl;
  /* offset=0x025c flags=0x0008001040010205 */ UButton* Button_OK;

  void BndEvt__Button_CloseUI_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OK_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_Common_IMSDKNotice_Panel_BP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_notice_intl_C* K2Node_DynamicCast_AsBp_Notice_Intl, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2);
  void HideAndDone();
  void HideAndNext();
  void ShowCommonIMSDKNotice(UIMSDKNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FIMSDKNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void ShowIMSDKNotice(UIMSDKNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FIMSDKNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void ShowMaintenanceIMSDKNotice(UIMSDKNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FIMSDKNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void TryShowMaintenanceIMSDKNotice();
  void TryToShowCommonIMSDKNotice();
};

class UCommon_ItemTips_Panel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_TaskTips_UIBP_C* Lobby_TaskTips_UIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_common_itemtips_panel_C* PanelLua;
  /* offset=0x023c flags=0x0000001040010205 */ bool isShow;

  void Construct();
  void ExecuteUbergraph_Common_ItemTips_Panel_BP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_common_itemtips_panel_C* K2Node_DynamicCast_AsBp_Common_Itemtips_Panel, bool K2Node_DynamicCast_bSuccess);
  void InitPanel(int32 ItemID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_StringToText_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue4);
  void InitPos(UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void UIClose();
  void UIShow();
};

class UCommon_Item_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x01b8 flags=0x0008001040010205 */ UUserWidget* targetUI;
  /* offset=0x01bc flags=0x0008001040010205 */ UImage* image_bg_default;
  /* offset=0x01c0 flags=0x0008001040010205 */ UImage* Image_Bg_Using;
  /* offset=0x01c4 flags=0x0008001040010205 */ UImage* Image_Icon;
  /* offset=0x01c8 flags=0x0008001040010205 */ UImage* image_icon_quality;
  /* offset=0x01cc flags=0x0008001040010205 */ UImage* image_new;
  /* offset=0x01d0 flags=0x0008001040010205 */ UImage* Image_Selected;
  /* offset=0x01d4 flags=0x0008001040010205 */ UTextBlock* text_number;
  /* offset=0x01d8 flags=0x0008000000000005 */ struct FBP_STRUCT_CommonItemData ItemData;
  /* offset=0x0214 flags=0x0008001040010205 */ int32 ItemStyle;
  /* offset=0x0218 flags=0x0008000000010205 */ FString IconPath;
  /* offset=0x0224 flags=0x0008001040010205 */ UButton* Button_item;
  /* offset=0x0228 flags=0x0000100010010205 */ FOnClickItemCallback OnClickItemCallback;
  /* offset=0x0234 flags=0x0000100010010205 */ FOnPressItemCallback OnPressItemCallback;
  /* offset=0x0240 flags=0x0000100010010205 */ FOnReleaseItemCallback OnReleaseItemCallback;
  /* offset=0x024c flags=0x0008001040010205 */ UImage* image_lock;
  /* offset=0x0250 flags=0x0008001040010205 */ UImage* image_limit_time;
  /* offset=0x0254 flags=0x0008001040010205 */ UCanvasPanel* group_item_name;
  /* offset=0x0258 flags=0x0008001040010205 */ UTextBlock* text_item_name;
  /* offset=0x025c flags=0x0008001040010205 */ UTextBlock* item_name_add;
  /* offset=0x0260 flags=0x0008001040010205 */ UWidget* WidgetTryOn;
  /* offset=0x0264 flags=0x0000001040010205 */ bool m_EnableShowTips;
  /* offset=0x0268 flags=0x0008001040010205 */ UTextBlock* Text_new;
  /* offset=0x026c flags=0x0008001040010205 */ UImage* Image_Bg_Own;
  /* offset=0x0270 flags=0x0008001040010205 */ int32 LanguageMaxLen;
  /* offset=0x0274 flags=0x0008001040010205 */ int32 languageLeftLen;

  void EnableShowTips(bool Enable);
  void ExecuteUbergraph_Common_Item_BP(int32 EntryPoint, int32 CallFunc_PostEventAtLocation_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void GetTextLen(FString NewParam, int32 Length, int32 text_len, TArray<FString> CallFunc_GetCharacterArrayFromString_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue4, bool CallFunc_IsSpace_Result, bool CallFunc_IsNumeric_ReturnValue, bool CallFunc_IsEnglish_isEnglish, int32 ___int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue6, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3);
  void HideNameAddrStr();
  void InitView(struct FBP_STRUCT_CommonItemData Data, int32 Style, UCommon_Item_BP_C* itemTarget, UCommon_Item_Style2_UIBP_C* CallFunc_Create_ReturnValue, UCommon_Item_Style1_UIBP_C* CallFunc_Create_ReturnValue2, FOnButtonReleasedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonPressedEvent K2Node_CreateDelegate_OutputDelegate2, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, UPanelSlot* CallFunc_AddChild_ReturnValue);
  void OnClickItem();
  void OnClickItemCallback__DelegateSignature(UCommon_Item_BP_C* Target, struct FBP_STRUCT_CommonItemData ItemData);
  void OnPreesItem();
  void OnPressItemCallback__DelegateSignature(UCommon_Item_BP_C* Target, struct FBP_STRUCT_CommonItemData ItemData);
  void OnReleaseItem();
  void OnReleaseItemCallback__DelegateSignature(UCommon_Item_BP_C* Target, struct FBP_STRUCT_CommonItemData ItemData);
  void SetIcon(int32 res_id, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void SetIconAlpha(float Alpha);
  void SetItemName(FString ItemName, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void SetLimitTime(bool showTime, bool CallFunc_IsValid_ReturnValue);
  void SetLock(bool isLock, bool CallFunc_IsValid_ReturnValue);
  void SetNameAddStr(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void SetNewState(bool isNew);
  void SetNumber(int32 Number, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetQuality(int32 quality, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, UObject* CallFunc_UIGetResWithPath_ReturnValue, struct FSlateBrush K2Node_MakeStruct_SlateBrush);
  void SetSelected(bool IsSelected);
  void SetTryOn(bool tryOn, bool CallFunc_IsValid_ReturnValue);
  void SetUsingState(bool IsUsing);
  void ShowOwn(bool isShow, bool CallFunc_IsValid_ReturnValue);
  void UpdateItemName(int32 left_name_len, FString OldNameS, FString NewNameS, int32 name_len, int32 add_len, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FText CallFunc_GetText_ReturnValue, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, int32 CallFunc_GetTextLen_length, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsVisible_ReturnValue, FText CallFunc_GetText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2, int32 CallFunc_GetTextLen_length2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7);
  void UpdateView(struct FBP_STRUCT_CommonItemData Data, bool CallFunc_EqualEqual_StrStr_ReturnValue, int32 CallFunc_Len_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
};

class UCommon_Item_Style1_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_item;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* image_bg_default;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_Bg_Mask;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_Bg_Own;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_Bg_Using;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_Icon;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* image_icon_quality;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image_LimitTime;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* image_lock;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* image_new;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image_Right;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image_Select;
  /* offset=0x0268 flags=0x000a0010c008020c */ UCanvasPanel* ItemName;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* Text_new;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* text_number;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0278 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x027c flags=0x000a0010c008020c */ UTextBlock* TextBlock_LimitedTime;

  void Construct();
  void ExecuteUbergraph_Common_Item_Style1_UIBP(int32 EntryPoint);
};

class UCommon_Item_Style2_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_item;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* image_bg_default;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_Bg_Mask;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_Bg_Using;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_Icon;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* image_icon_quality;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_LimitTime;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* image_new;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image_Right;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image_Select;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* Text_new;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* text_number;
  /* offset=0x0264 flags=0x0000000000010005 */ FText imgPath;
  /* offset=0x0270 flags=0x0008001040010205 */ int32 Num;
  /* offset=0x0274 flags=0x0008001040010205 */ int32 resID;
  /* offset=0x0278 flags=0x0008001040010205 */ int32 quality;
  /* offset=0x027c flags=0x0000001040010205 */ bool isNew;
  /* offset=0x027d flags=0x0000001040010205 */ bool IsSelected;
  /* offset=0x027e flags=0x0000001040010205 */ bool IsUsing;
  /* offset=0x0280 flags=0x0000100010010205 */ FOnClickItem OnClickItem;

  void Construct();
  void ExecuteUbergraph_Common_Item_Style2_UIBP(int32 EntryPoint);
  void InitItem();
  void OnClickItem__DelegateSignature(UObject* Target, int32 resID);
  struct FEventReply OnMouseButtonUp(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void SetIcon(int32 resID, FString IconPath, UObject* CallFunc_UIGetResWithPath_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void SetNewState(bool isNew, bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void SetNumber(int32 Num, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void SetQuality(int32 quality, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void SetSelected(bool IsSelected, bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void SetUsingState(bool IsUsing, bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void UpdateItem(int32 resID, FString ItemPath, int32 Num, int32 quality, bool isNew, bool IsSelected);
};

class UCommon_MessageBox_Panel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCommon_MessageBox_UIBP_C* Common_MessageBox_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UButton* Button_OK;
  /* offset=0x023c flags=0x0008001040010205 */ UButton* Button_Cancel;
  /* offset=0x0240 flags=0x0008001040010205 */ UTextBlock* text_Title;
  /* offset=0x0244 flags=0x0008001040010205 */ UUTRichTextBlock* text_Msg;
  /* offset=0x0248 flags=0x0008001040010a05 */ Abp_common_messagebox_panel_C* bp_viewController;
  /* offset=0x024c flags=0x0008001040010205 */ UTextBlock* Text_ok;
  /* offset=0x0250 flags=0x0008001040010205 */ UTextBlock* Text_cancel;

  void AutoClick();
  void Construct();
  void DeleteTimerInvoke();
  void ExecuteUbergraph_Common_MessageBox_Panel_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_common_messagebox_panel_C* K2Node_DynamicCast_AsBp_Common_Messagebox_Panel, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAutoRunTestGame_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2);
  void InitView(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue4);
  void OnClickCancel();
  void OnClickOK();
  void StartTimerInvoke(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void TimerInvoke();
  void UIHide();
  void UIShow();
  void UpdateMsg(FText CallFunc_Conv_StringToText_ReturnValue);
};

class UCommon_MessageBox_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_Cancel;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_OK;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UScrollBox* ScrollBox;
  /* offset=0x01cc flags=0x000a0010c008020c */ UTextBlock* Text_cancel;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UUTRichTextBlock* Text_Content;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UTextBlock* Text_ok;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Title;
};

class UCommon_Notice_Panel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_OK;
  /* offset=0x023c flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UGridPanel* MsgBox;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* Text_ok;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x024c flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_TipsContent;
  /* offset=0x0250 flags=0x0008001040010205 */ UTextBlock* Title;
  /* offset=0x0254 flags=0x0008001040010205 */ UUTRichTextBlock* content;
  /* offset=0x0258 flags=0x0008001040010a05 */ Abp_notice_C* bp_notice;
  /* offset=0x025c flags=0x0008001040010205 */ UButton* Button_OK;

  void BndEvt__Button_CloseUI_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OK_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_Common_Notice_Panel_BP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_notice_C* K2Node_DynamicCast_AsBp_Notice, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2);
  void HideAndDone();
  void HideAndNext();
  void ShowCommonNotice(UGCloudNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void ShowMaintenanceNotice(UGCloudNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void ShowNotice(UGCloudNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void TryShowMaintenanceNotice();
  void TryToShowCommonNotice();
};

class UCommon_RankIntegralLevel_Style_Small_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* Image_Icon;

  void SetRankInteral(int32 rankIntegral, UTextBlock* textIntegralName, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_RankIntegralLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
};

class UCommon_TreasureBox_Popup_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBigTreasureChest_BP_C* BigTreasureChest_BP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_common_treasurebox_popup_C* PanelLua;

  void ClearPanel();
  void Construct();
  void ExecuteUbergraph_Common_TreasureBox_Popup_BP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, Abp_common_treasurebox_popup_C* K2Node_DynamicCast_AsBp_Common_Treasurebox_Popup, bool K2Node_DynamicCast_bSuccess);
  void InitPanel(struct FBP_STRUCT_ActiveAwardItem AwardData, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, struct FBP_STRUCT_DropItem CallFunc_Array_Get_Item, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData, UCommon_Item_BP_C* CallFunc_Create_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, struct FBP_STRUCT_DropItem CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData2, UCommon_Item_BP_C* CallFunc_InitView_itemTarget, int32 CallFunc_Add_IntInt_ReturnValue2, UCommon_Item_BP_C* CallFunc_Create_ReturnValue2, UCommon_Item_BP_C* CallFunc_InitView_itemTarget2, UWrapBoxSlot* CallFunc_AddChildWrapBox_ReturnValue, UWrapBoxSlot* CallFunc_AddChildWrapBox_ReturnValue2);
  void SetTitle(FText CallFunc_Conv_StringToText_ReturnValue);
  void UIClose(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void UIShow();
};

class UCommon_UIPanelBG_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button;

  void Construct();
  void ExecuteUbergraph_Common_UIPanelBG(int32 EntryPoint);
};

class UCommon_UIPopupBG_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button;
};

class UCommon_UITransitionBG_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008021c */ UWidgetAnimation* ANITransitionBG;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* But_Transition;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* TransitionBG;
  /* offset=0x0240 flags=0x0008001040010205 */ FName NewVar;
};

class UComponentDelegateBinding: public UDynamicBlueprintBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;
};

class UCompositionGraphCaptureSettings: public UMovieSceneCaptureProtocolSettings {
  /* offset=0x001c flags=0x0010000000004001 */ struct FCompositionGraphCapturePasses IncludeRenderPasses;
  /* offset=0x0028 flags=0x0018001040004201 */ bool bCaptureFramesInHDR;
  /* offset=0x002c flags=0x0018001040004201 */ int32 HDRCompressionQuality;
  /* offset=0x0030 flags=0x0018001040004201 */ uint8 CaptureGamut;
  /* offset=0x0038 flags=0x0018000000004001 */ struct FSoftObjectPath PostProcessingMaterial;
};

class UConfigInterface: public UInterface {
};

class UConnectionCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FOnlineConnectionResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnlineConnectionResult OnFailure;

  UConnectionCallbackProxy* ConnectToService(UObject* WorldContextObject, APlayerController* PlayerController);
};

class UConsole: public UObject {
  /* offset=0x0024 flags=0x0018001040000200 */ ULocalPlayer* ConsoleTargetPlayer;
  /* offset=0x0028 flags=0x0018001040000200 */ UTexture2D* DefaultTexture_Black;
  /* offset=0x002c flags=0x0018001040000200 */ UTexture2D* DefaultTexture_White;
  /* offset=0x0044 flags=0x0010000000004200 */ TArray<FString> HistoryBuffer;
};

class UConsoleSettings: public UObject {
  /* offset=0x001c flags=0x0018001040044201 */ int32 MaxScrollbackSize;
  /* offset=0x0020 flags=0x0010000000004201 */ TArray<struct FAutoCompleteCommand> ManualAutoCompleteList;
  /* offset=0x002c flags=0x0010000000004201 */ TArray<FString> AutoCompleteMapPaths;
  /* offset=0x0038 flags=0x0018001040004201 */ float BackgroundOpacityPercentage;
  /* offset=0x003c flags=0x0018001040004201 */ bool bOrderTopToBottom;
  /* offset=0x0040 flags=0x0018001040004001 */ struct FColor InputColor;
  /* offset=0x0044 flags=0x0018001040004001 */ struct FColor HistoryColor;
  /* offset=0x0048 flags=0x0018001040004001 */ struct FColor AutoCompleteCommandColor;
  /* offset=0x004c flags=0x0018001040004001 */ struct FColor AutoCompleteCVarColor;
  /* offset=0x0050 flags=0x0018001040004001 */ struct FColor AutoCompleteFadedColor;
};

class UConsumableItemList_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem1;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem2;
  /* offset=0x023c flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem3;
  /* offset=0x0240 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem4;
  /* offset=0x0244 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem5;
  /* offset=0x0248 flags=0x000a0010c008020c */ UBorder* Border_CurFirstItem;
  /* offset=0x024c flags=0x000a0010c008020c */ UBorder* Border_InteractivePanel;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* ConsumeItem1_BG;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem1_CountText;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* ConsumeItem1_Image;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* ConsumeItem1Btn;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* ConsumeItem2_BG;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem2_CountText;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* ConsumeItem2_Image;
  /* offset=0x026c flags=0x000a0010c008020c */ UButton* ConsumeItem2Btn;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* ConsumeItem3_BG;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem3_CountText;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* ConsumeItem3_Image;
  /* offset=0x027c flags=0x000a0010c008020c */ UButton* ConsumeItem3Btn;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* ConsumeItem4_BG;
  /* offset=0x0284 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem4_CountText;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* ConsumeItem4_Image;
  /* offset=0x028c flags=0x000a0010c008020c */ UButton* ConsumeItem4Btn;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* ConsumeItem5_BG;
  /* offset=0x0294 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem5_CountText;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* ConsumeItem5_Image;
  /* offset=0x029c flags=0x000a0010c008020c */ UButton* ConsumeItem5Btn;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UGridPanel* CurFirstItem;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* CurUseBG;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UButton* CurUseFirstItemBtn;
  /* offset=0x02ac flags=0x000a0010c008020c */ UTextBlock* CurUseFirstItemCountText;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* CurUseFirstItemImage;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02bc flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem1;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem2;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem3;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem4;
  /* offset=0x02cc flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem5;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItemFolder;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_LeftChildPanel;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UImage* InteractiveBG;
  /* offset=0x02dc flags=0x000a0010c008020c */ UImage* InteractiveTriangleToDown;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UImage* InteractiveTriangleToUp;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UButton* InterativeBtn;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x02f0 flags=0x0000000000010005 */ struct FSlateBrush BtnNormalBG;
  /* offset=0x0358 flags=0x0000000000010005 */ struct FSlateBrush BtnHightLightBG;
  /* offset=0x03c0 flags=0x0000001040010205 */ bool IsListExpand;
  /* offset=0x03c8 flags=0x0000000000010005 */ struct FSlateBrush InteractiveNormalBG;
  /* offset=0x0430 flags=0x0000000000010005 */ struct FSlateBrush InteractiveHighLightBG;
  /* offset=0x0498 flags=0x0000001040010205 */ bool IsAutoCollapseInterupted;
  /* offset=0x049c flags=0x0008001040000205 */ float AutoCollapsedTime;
  /* offset=0x04a0 flags=0x0008001040010a05 */ ASTExtraPlayerCharacter* STExtraPlayerCharacter;
  /* offset=0x04a4 flags=0x0000000000010205 */ TMap<int32, struct FBP_STRUCT_Item_type> ConsumableItemDataTableMap;
  /* offset=0x04e0 flags=0x0000000000010205 */ TArray<struct FCompatableComsumableItemType> CompableItemArray;
  /* offset=0x04ec flags=0x0008001040010205 */ int32 ConsumableMinID;
  /* offset=0x04f0 flags=0x0008001040010205 */ int32 ConsumableMaxID;
  /* offset=0x04f8 flags=0x0000000000010005 */ struct FCompatableComsumableItemType CurFirstItemTypeData;
  /* offset=0x0580 flags=0x0000001040010205 */ bool bIntelligentDrugs;
  /* offset=0x0584 flags=0x0008001040010205 */ float CacheHP;
  /* offset=0x0588 flags=0x0008001040010205 */ uint8 SortingMode;
  /* offset=0x0589 flags=0x0000001040010205 */ bool bIsDoneFullHealthSort;
  /* offset=0x058a flags=0x0000001040010205 */ bool bIsDoneLittleBitWoundSort;
  /* offset=0x058b flags=0x0000001040010205 */ bool bIsDonePlentyWoundSort;
  /* offset=0x058c flags=0x0000001040010205 */ bool bIsDoneSeriousWoundSort;
  /* offset=0x058d flags=0x0000001040010205 */ bool bIsDoneAlmostDieSort;
  /* offset=0x058e flags=0x0000001040010205 */ bool bForceUpdate;

  void BndEvt__ConsumeItem1Btn_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ConsumeItem1Btn_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__ConsumeItem2Btn_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ConsumeItem2Btn_K2Node_ComponentBoundEvent_6_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__ConsumeItem3Btn_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ConsumeItem3Btn_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__ConsumeItem4Btn_K2Node_ComponentBoundEvent_10_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__ConsumeItem4Btn_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ConsumeItem5Btn_K2Node_ComponentBoundEvent_11_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ConsumeItem5Btn_K2Node_ComponentBoundEvent_12_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__CurUseFirstItemBtn_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__CurUseFirstItemBtn_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__InterativeBtn_K2Node_ComponentBoundEvent_757_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__InterativeBtn_K2Node_ComponentBoundEvent_767_OnButtonReleasedEvent__DelegateSignature();
  void CollapseFolder();
  void ExecuteUbergraph_ConsumableItemList(int32 EntryPoint, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate, FOnLocalCharacterHPChangeDelegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Not_PreBool_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, float K2Node_CustomEvent_currentHP, float K2Node_CustomEvent_ratioHP, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate3, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, TArray<struct FCompatableComsumableItemType> CallFunc_ResetItemPriorityInArray_Out, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue);
  void GetConsumItemTypeBySpecificID(struct FItemDefineID DefineID, uint8 Type, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6);
  void GetConsumableItemDataTableMap(TMap<int32, struct FBP_STRUCT_Item_type> DataTableRowMap, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue);
  void GetConsumableItemUIWidgetGroupByIndex(int32 Index, UImage* BG, UImage* ItemImage, UButton* Btn, UTextBlock* CountText, UGridPanel* Grid, UBorder* Border, bool K2Node_SwitchInteger_CmpSuccess);
  void GetPlayerCharacter(ASTExtraPlayerCharacter* PlayerCharacter, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue);
  void HandleHPChange(float CurHP, float LocalCurHP, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_InRange_FloatFloat_ReturnValue3, bool CallFunc_InRange_FloatFloat_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);
  void HandleItemUpdate();
  void IntelligentSort(bool BoolValue);
  void IsAConsumableItem(struct FItemDefineID DefineID, bool IsComsumableItem, bool CallFunc_InRange_IntInt_ReturnValue);
  void IsFirstItemRunOut(bool Result, bool FuncResult, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FCompatableComsumableItemType CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void OnItemClick(int32 Index, TArray<struct FCompatableComsumableItemType> ConsumableItemArray, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, TArray<struct FCompatableComsumableItemType> CallFunc_ResetItemPriorityInArray_Out, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue, struct FCompatableComsumableItemType CallFunc_Array_Get_Item);
  void OnLocalCharacterHPChangeDel_Event(float currentHP, float ratioHP);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState();
  void ResetCurUsingItemType(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void ResetItemPriorityInArray(TArray<struct FCompatableComsumableItemType> In, TArray<struct FCompatableComsumableItemType> Out, TArray<struct FCompatableComsumableItemType> TempArray, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, int32 ___int_Array_Index_Variable, bool CallFunc_Greater_IntInt_ReturnValue, struct FCompatableComsumableItemType CallFunc_Array_Get_Item, struct FCompatableComsumableItemType CallFunc_SetItemPriorityBySortMode_OutData, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void RrefreshItemImage(UObject* NewParam, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_BG, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_ItemImage, UButton* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Btn, UTextBlock* CallFunc_GetConsumableItemUIWidgetGroupByIndex_CountText, UGridPanel* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Grid, UBorder* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Border, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2);
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetItemPriorityBySortMode(struct FCompatableComsumableItemType InData, struct FCompatableComsumableItemType OutData, struct FCompatableComsumableItemType LocalData, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType2, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType3, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType4, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType5, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType6, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType7, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType8, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType9, bool K2Node_SwitchEnum3_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType10, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType11, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType12, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType13, bool K2Node_SwitchEnum4_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType14, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType15, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType16, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType17, bool K2Node_SwitchEnum5_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType18, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType19, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType20, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType21, bool K2Node_SwitchEnum6_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType22, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType23, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType24, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType25, bool K2Node_SwitchEnum7_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType26, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType27, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType28, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType29, bool K2Node_SwitchEnum8_CmpSuccess, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType30);
  void SetSettingControlUI();
  void SetSortModeBySetting(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetPlayerHealth_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue2, bool CallFunc_InRange_FloatFloat_ReturnValue3, bool CallFunc_InRange_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);
  void SimulateExpand();
  void UpdateConsumableItemArray(int32 CacheArrayLengthBeforePick, int32 ___int_Array_Index_Variable, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue2, int32 ___int_Loop_Counter_Variable, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue3, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_IsFirstItemRunOut_Result, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue4, TArray<struct FCompatableComsumableItemType> CallFunc_SortConsumableItemArray_ReturnValue4, ASTExtraPlayerCharacter* CallFunc_GetPlayerCharacter_PlayerCharacter, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetConsumablesInBackpack_ReturnValue, int32 CallFunc_Array_Length_ReturnValue4, struct FBattleItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, uint8 CallFunc_GetConsumItemTypeBySpecificID_Type, bool CallFunc_IsAConsumableItem_IsComsumableItem, struct FCompatableComsumableItemType K2Node_MakeStruct_CompatableComsumableItemType, struct FCompatableComsumableItemType CallFunc_SetItemPriorityBySortMode_OutData, bool CallFunc_InRange_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void UpdateFirstItemImage(TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetConsumableItemDataTableMap_DataTableRowMap, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_BG, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_ItemImage, UButton* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Btn, UTextBlock* CallFunc_GetConsumableItemUIWidgetGroupByIndex_CountText, UGridPanel* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Grid, UBorder* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Border, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);
  void UpdateFloderListImage(int32 CurIndex, TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetConsumableItemDataTableMap_DataTableRowMap, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_BG, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_ItemImage, UButton* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Btn, UTextBlock* CallFunc_GetConsumableItemUIWidgetGroupByIndex_CountText, UGridPanel* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Grid, UBorder* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Border, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_BG2, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_ItemImage2, UButton* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Btn2, UTextBlock* CallFunc_GetConsumableItemUIWidgetGroupByIndex_CountText2, UGridPanel* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Grid2, UBorder* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Border2, int32 ___int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void UpdateInterativeTriangle();
  void UpdateItemPressOrRelease(int32 Index, bool IsPress, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_BG, UImage* CallFunc_GetConsumableItemUIWidgetGroupByIndex_ItemImage, UButton* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Btn, UTextBlock* CallFunc_GetConsumableItemUIWidgetGroupByIndex_CountText, UGridPanel* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Grid, UBorder* CallFunc_GetConsumableItemUIWidgetGroupByIndex_Border);
};

class UContentWidget: public UPanelWidget {
  UWidget* GetContent();
  UPanelSlot* GetContentSlot();
  UPanelSlot* SetContent(UWidget* content);
};

class UControlChannel: public UChannel {
};

class UControlPointMeshComponent: public UStaticMeshComponent {
};

class UControlRigInterface: public UInterface {
};

class AController: public AActor {
  /* offset=0x02ac flags=0x0048001140000220 */ APawn* Pawn;
  /* offset=0x02b8 flags=0x0048001040000200 */ ACharacter* Character;
  /* offset=0x02bc flags=0x0018001140000234 */ APlayerState* PlayerState;
  /* offset=0x02c0 flags=0x0048001040080208 */ USceneComponent* TransformComponent;
  /* offset=0x02c4 flags=0x0020081040000000 */ struct FRotator ControlRotation;
  /* offset=0x02d0 flags=0x00280c1000010001 */ uint8 bAttachToPawn:1;
  /* offset=0x02d0 flags=0x0028081000000000 */ uint8 bIsPlayerController:1;
  /* offset=0x02e0 flags=0x0018001040000200 */ FName StateName;
  /* offset=0x02e8 flags=0x0040000010080200 */ FInstigatedAnyDamageSignature OnInstigatedAnyDamage;

  APlayerController* CastToPlayerController();
  /* CL  */ void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation);
  /* CL  */ void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera);
  struct FRotator GetControlRotation();
  struct FRotator GetDesiredRotation();
  AActor* GetViewTarget();
  bool IsLocalController();
  bool IsLocalPlayerController();
  bool IsLookInputIgnored();
  bool IsMoveInputIgnored();
  bool IsPlayerController();
  APawn* K2_GetPawn();
  bool LineOfSightTo(AActor* Other, struct FVector ViewPoint, bool bAlternateChecks);
  void OnRep_Pawn();
  void OnRep_PlayerState();
  void Possess(APawn* InPawn);
  void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser);
  void ResetIgnoreInputFlags();
  void ResetIgnoreLookInput();
  void ResetIgnoreMoveInput();
  void SetControlRotation(struct FRotator NewRotation);
  void SetIgnoreLookInput(bool bNewLookInput);
  void SetIgnoreMoveInput(bool bNewMoveInput);
  void SetInitialLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation);
  void StopMovement();
  void UnPossess();
};

class UCreateSessionCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UCreateSessionCallbackProxy* CreateSession(UObject* WorldContextObject, APlayerController* PlayerController, int32 PublicConnections, bool bUseLAN);
};

class UCrossHairComponent: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0010000000010201 */ TMap<FName, FString> CrossHairNameAndTextureMap;
  /* offset=0x00ec flags=0x0018001040010201 */ float PistolCenterDownDis;
  /* offset=0x00f0 flags=0x0018001040010201 */ bool bDrawDebugCrossHairCircleArea;
  /* offset=0x00f4 flags=0x0018001040010201 */ float DrawDebugCrossHairCircleAreaSteps;
  /* offset=0x00f8 flags=0x0018001040010201 */ bool bDrawDebugSpreadCircleArea;
  /* offset=0x00fc flags=0x0018001040010201 */ float DrawDebugSpreadCircleAreaSteps;
  /* offset=0x0100 flags=0x0018001040000205 */ ASTExtraPlayerController* PlayerController;
  /* offset=0x0104 flags=0x0028081040080208 */ UShootWeaponEntity* ShootWeaponEntity;
  /* offset=0x0108 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
  /* offset=0x010c flags=0x0028081040080208 */ UBulletTrackComponent* BulletTrackComp;
  /* offset=0x0110 flags=0x0028081040000200 */ UTexture2D* CrossHairTextureNormal;
  /* offset=0x0114 flags=0x0028081040000200 */ UTexture2D* CrossHairEmptyHand;
  /* offset=0x0118 flags=0x0028081040000200 */ UTexture2D* CrossHairPistolEdge;
  /* offset=0x011c flags=0x0028081040000200 */ UTexture2D* CrossHairPistolCenter;
  /* offset=0x0120 flags=0x0028081040000200 */ UTexture2D* CrossHairShotGun;

  void DrawDebugPointEnd();
  void DrawSpreadEnd();
};

class UCrowdAgentInterface: public UInterface {
};

class UCrowdFollowingComponent: public UPathFollowingComponent {
  /* offset=0x0320 flags=0x0018001040000000 */ struct FVector CrowdAgentMoveDirection;
  /* offset=0x032c flags=0x0028081040082208 */ UCharacterMovementComponent* CharacterMovement;
  /* offset=0x0330 flags=0x0020081060000000 */ struct FNavAvoidanceMask AvoidanceGroup;
  /* offset=0x0334 flags=0x0020081060000000 */ struct FNavAvoidanceMask GroupsToAvoid;
  /* offset=0x0338 flags=0x0020081060000000 */ struct FNavAvoidanceMask GroupsToIgnore;

  void SuspendCrowdSteering(bool bSuspend);
};

class UCrowdManager: public UCrowdManagerBase {
  /* offset=0x001c flags=0x0028081040002200 */ ANavigationData* MyNavData;
  /* offset=0x0020 flags=0x0020080000004201 */ TArray<struct FCrowdAvoidanceConfig> AvoidanceConfig;
  /* offset=0x002c flags=0x0020080000004201 */ TArray<struct FCrowdAvoidanceSamplingPattern> SamplingPatterns;
  /* offset=0x0038 flags=0x0028081040004201 */ int32 MaxAgents;
  /* offset=0x003c flags=0x0028081040004201 */ float MaxAgentRadius;
  /* offset=0x0040 flags=0x0028081040004201 */ int32 MaxAvoidedAgents;
  /* offset=0x0044 flags=0x0028081040004201 */ int32 MaxAvoidedWalls;
  /* offset=0x0048 flags=0x0028081040004201 */ float NavmeshCheckInterval;
  /* offset=0x004c flags=0x0028081040004201 */ float PathOptimizationInterval;
  /* offset=0x0050 flags=0x0028081040004201 */ float SeparationDirClamp;
  /* offset=0x0054 flags=0x0028081040004201 */ float PathOffsetRadiusMultiplier;
  /* offset=0x0058 flags=0x0028081000004001 */ uint8 bResolveCollisions:1;
};

class UCrowdManagerBase: public UObject {
};

class ACullDistanceVolume: public AVolume {
  /* offset=0x02d0 flags=0x0010000000000215 */ TArray<struct FCullDistanceSizePair> CullDistances;
  /* offset=0x02dc flags=0x0018001000000015 */ uint8 bEnabled:1;
  /* offset=0x02dc flags=0x0018001000000015 */ uint8 bEnabledDeviceScale:1;
  /* offset=0x02e0 flags=0x0018001040000215 */ float VeryLowScale;
  /* offset=0x02e4 flags=0x0018001040000215 */ float LowScale;
  /* offset=0x02e8 flags=0x0018001040000215 */ float MidScale;
  /* offset=0x02ec flags=0x0018001040000215 */ float HighScale;
};

class UCurveBase: public UObject {
  void GetTimeRange(float MinTime, float MaxTime);
  void GetValueRange(float MinValue, float MaxValue);
};

class UCurveEdPresetCurve: public UObject {
};

class UCurveFloat: public UCurveBase {
  /* offset=0x0020 flags=0x0010000000000000 */ struct FRichCurve FloatCurve;
  /* offset=0x0074 flags=0x0018001040000200 */ bool bIsEventCurve;

  float GetFloatValue(float InTime);
};

class UCurveLinearColor: public UCurveBase {
  /* offset=0x0020 flags=0x0010000000000000 */ struct FRichCurve FloatCurves;

  struct FLinearColor GetLinearColorValue(float InTime);
};

class UCurveSourceInterface: public UInterface {
  FName GetBindingName();
  float GetCurveValue(FName CurveName);
  void GetCurves(TArray<struct FNamedCurveValue> OutValues);
};

class UCurveTable: public UObject {
};

class UCurveVector: public UCurveBase {
  /* offset=0x0020 flags=0x0010000000000000 */ struct FRichCurve FloatCurves;

  struct FVector GetVectorValue(float InTime);
};

class UCustomParticleSystemComponent: public UParticleSystemComponent {
  /* offset=0x07b4 flags=0x0010000000000204 */ TArray<AActor*> CollisionIgnoreActors;
  /* offset=0x07c0 flags=0x0018001040010201 */ bool bShowImpactInfo;

  void AddCollisionIgnoreActor(AActor* IgnoreActor);
};

class UCustomScrollBox: public UPanelWidget {
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FScrollBoxStyle WidgetStyle;
  /* offset=0x0280 flags=0x0010000000000005 */ struct FScrollBarStyle WidgetBarStyle;
  /* offset=0x0630 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x0634 flags=0x0018001060000200 */ USlateWidgetStyleAsset* BarStyle;
  /* offset=0x0638 flags=0x0018001040000215 */ uint8 Orientation;
  /* offset=0x0639 flags=0x0018001040000215 */ enum ESlateVisibility ScrollBarVisibility;
  /* offset=0x063a flags=0x0018001040000215 */ enum EConsumeMouseWheel ConsumeMouseWheel;
  /* offset=0x063c flags=0x0018001040000015 */ struct FVector2D ScrollbarThickness;
  /* offset=0x0644 flags=0x0018001040000215 */ bool AlwaysShowScrollbar;
  /* offset=0x0645 flags=0x0018001040000215 */ bool AllowOverscroll;
  /* offset=0x0646 flags=0x0018001040000215 */ enum EDescendantScrollDestination NavigationDestination;
  /* offset=0x0648 flags=0x0018001040000215 */ float NavigationScrollPadding;
  /* offset=0x064c flags=0x0010000010080200 */ FOnUserScrolledEvent OnUserScrolled;

  float GetScrollOffset();
  void ScrollToEnd();
  void ScrollToStart();
  void ScrollWidgetIntoView(UWidget* WidgetToFind, bool AnimateScroll, enum EDescendantScrollDestination ScrollDesintion);
  void SetAllowOverscroll(bool NewAllowOverscroll);
  void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);
  void SetOrientation(uint8 NewOrientation);
  void SetScrollBarVisibility(enum ESlateVisibility NewScrollBarVisibility);
  void SetScrollOffset(float NewScrollOffset);
  void SetScrollbarThickness(struct FVector2D NewScrollbarThickness);
};

class UCustomScrollBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
};

class UCustomSpringArmComponent: public USpringArmComponent {
  /* offset=0x0328 flags=0x0018001040000204 */ float SpringArmLengthModifier1;
  /* offset=0x032c flags=0x0018001040000204 */ float SpringArmLengthModifier2;
  /* offset=0x0330 flags=0x0018001040000204 */ float SpringArmLengthModifier3;
  /* offset=0x0334 flags=0x0018001040010215 */ UCurveFloat* SpringArmForwadOffsetByPitchCurve;
  /* offset=0x0338 flags=0x0018001040010215 */ bool bDrawDebugLineAndShap;
  /* offset=0x034c flags=0x0018001040010205 */ float IndoorCheckDistance;
  /* offset=0x0350 flags=0x0018001040010205 */ float IndoorCheckTime;
  /* offset=0x0358 flags=0x0018001040010205 */ float SocketOffsetInterpSpeed;
  /* offset=0x035c flags=0x0018001040010205 */ float TargetOffsetInterpSpeed;
  /* offset=0x0360 flags=0x0018001040010205 */ float ArmLengthInterpSpeed;
  /* offset=0x0364 flags=0x0010001000010005 */ struct FCameraOffsetData CrouchCameraData;
  /* offset=0x0380 flags=0x0010001000010005 */ struct FCameraOffsetData ProneCameraData;
  /* offset=0x039c flags=0x0010001000010005 */ struct FCameraOffsetData IndoorCameraData;
  /* offset=0x03b8 flags=0x0010001000010005 */ struct FCameraOffsetData LeanLeftCameraData;
  /* offset=0x03d4 flags=0x0010001000010005 */ struct FCameraOffsetData LeanRightCameraData;
  /* offset=0x03f0 flags=0x0010001000010005 */ struct FCameraOffsetData InVehicleCameraData;
  /* offset=0x040c flags=0x0010001000010005 */ struct FCameraOffsetData NearDeathCameraData;
  /* offset=0x0428 flags=0x0010001000010005 */ struct FCameraOffsetData PeekLeftCameraData;
  /* offset=0x0444 flags=0x0010001000010005 */ struct FCameraOffsetData PeekRightCameraData;

  void ClearCameraData();
  void DelayRotationLagEnabled(bool bEnabled, float Time);
  void DelayRotationLagEnabledEnd();
  void SetCameraDataEnable(uint8 CameraDataType, bool IsEnable);
  /* SRV */ void UpdateIndoorState(bool isIndoor);
};

class UCustomUIPositionInterface_C: public UInterface {
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetSettingControlUI();
};

class UCustomUserWidget: public UUAEUserWidget {
  /* offset=0x022f flags=0x0018001040010201 */ bool bEnableGlobalTouch;
};

class UCustomizeModeListItem_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_ClickItem;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image_ItemDisableIcon;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_ItemEnableIcon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image_ItemIcon2;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName2;
  /* offset=0x01cc flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_State;
  /* offset=0x01d0 flags=0x0008001040010205 */ int32 RoomType;
  /* offset=0x01d8 flags=0x0000000000010005 */ struct FSlateBrush Brust_Training;
  /* offset=0x0240 flags=0x0000000000010005 */ struct FSlateBrush Brust_CreateRoom;

  void SetRoomType(int32 Type, bool K2Node_SwitchInteger_CmpSuccess);
  void SetShowBrush(struct FSlateBrush Brush);
};

class UCustomizePickUpPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_AKeyPickUp;
  /* offset=0x0238 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* GridPanel_PickUpList;
  /* offset=0x0240 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBox_PickUpListMode1;
  /* offset=0x0248 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBox_PickUpListMode2;
  /* offset=0x024c flags=0x000a0010c008020c */ UShortcutMenu_BP_C* ShortcutMenu_BP;
  /* offset=0x0250 flags=0x000a0010c008020c */ USizeBox* SizeBox_PanelList;
  /* offset=0x0254 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0258 flags=0x000a0010c008020c */ UWrapBox* WrapBox_Mode2;
  /* offset=0x025c flags=0x0000100010010205 */ FCloseCustomPickUpPanel CloseCustomPickUpPanel;
  /* offset=0x0268 flags=0x0000100010010205 */ FCloseCustomBoxPanel CloseCustomBoxPanel;

  void BndEvt__Button_ClosePickUpListUI_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();
  void CloseCustomBoxPanel__DelegateSignature();
  void CloseCustomPickUpPanel__DelegateSignature();
  void EventCloseCustomBoxPanel();
  void EventCloseCustomPickupPanel();
  void ExecuteUbergraph_CustomizePickUpPanel_BP(int32 EntryPoint, FClickClosePickup K2Node_CreateDelegate_OutputDelegate, FClickCloseBox K2Node_CreateDelegate_OutputDelegate2);
  void ReceivedInitWidget();
};

class UDPICustomScalingRule: public UObject {
};

class UDamageType: public UObject {
  /* offset=0x001c flags=0x0018001000000015 */ uint8 bCausedByWorld:1;
  /* offset=0x001c flags=0x0018001000000015 */ uint8 bScaleMomentumByMass:1;
  /* offset=0x001c flags=0x0018001000000015 */ uint8 bRadialDamageVelChange:1;
  /* offset=0x0020 flags=0x0018001040000215 */ float DamageImpulse;
  /* offset=0x0024 flags=0x0018001040000215 */ float DestructibleImpulse;
  /* offset=0x0028 flags=0x0018001040000215 */ float DestructibleDamageSpreadScale;
  /* offset=0x002c flags=0x0018001040000215 */ float DamageFalloff;
};

class UDamageType_BuffDot: public UDamageType {
};

class UDataAsset: public UObject {
  /* offset=0x001c flags=0x004c011040000200 */ UClass<UDataAsset>* NativeClass;
};

class UDataTable: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UScriptStruct* RowStruct;
};

class UDataTableFunctionLibrary: public UBlueprintFunctionLibrary {
  void EvaluateCurveTableRow(UCurveTable* CurveTable, FName RowName, float InXY, uint8 OutResult, float OutXY, FString ContextString);
  bool GetDataTableRowFromName(UDataTable* Table, FName RowName, struct FTableRowBase OutRow);
  void GetDataTableRowNames(UDataTable* Table, TArray<FName> OutRowNames);
};

class UDataTableManager: public UBlueprintFunctionLibrary {
  /* offset=0x001c flags=0x0018001040000214 */ UDataTable* PickUpGlobalDataTable;
  /* offset=0x0020 flags=0x0018001040000214 */ UDataTable* PickUpGlobalIDAndWrapperDataTable;
  /* offset=0x0024 flags=0x0018001040000214 */ UDataTable* WeaponDataTable;
  /* offset=0x0028 flags=0x0018001040000214 */ UDataTable* PlayerEquipmentDataTable;
  /* offset=0x002c flags=0x0018001040000214 */ UDataTable* WeaponComponentDataTable;
  /* offset=0x0030 flags=0x0018001040000214 */ UDataTable* ConsumeItemDataTable;
  /* offset=0x0034 flags=0x0018001040000214 */ UDataTable* AkEventDataTable;

  UDataTableManager* GetInstance();
  UDataTable* GetTableByType(uint8 TableType);
};

class UDeathPlayback: public UObject {
  /* offset=0x0038 flags=0x0018001040020215 */ bool bDeathPlaybackEnable;

  void PlayReplay();
  void StartRecordingReplay(FString RecordingReplayName);
  void StopPlay();
  void StopRecordingReplay();
};

class ADebugCameraController: public APlayerController {
  /* offset=0x053e flags=0x0018001000044000 */ uint8 bShowSelectedInfo:1;
  /* offset=0x053e flags=0x0018001000000000 */ uint8 bIsFrozenRendering:1;
  /* offset=0x0540 flags=0x0018001040080208 */ UDrawFrustumComponent* DrawFrustum;
  /* offset=0x0554 flags=0x0018001040010215 */ float SpeedScale;
  /* offset=0x0558 flags=0x0018001040010215 */ float InitialMaxSpeed;
  /* offset=0x055c flags=0x0018001040010215 */ float InitialAccel;
  /* offset=0x0560 flags=0x0018001040010215 */ float InitialDecel;

  AActor* GetSelectedActor();
  void ReceiveOnActivate(APlayerController* OriginalPC);
  void ReceiveOnActorSelected(AActor* NewSelectedActor, struct FVector SelectHitLocation, struct FVector SelectHitNormal, struct FHitResult Hit);
  void ReceiveOnDeactivate(APlayerController* RestoredPC);
  void SetPawnMovementSpeedScale(float NewSpeedScale);
  void ShowDebugSelectedInfo();
  void ToggleDisplay();
};

class ADebugCameraHUD: public AHUD {
};

class UDebugDrawService: public UBlueprintFunctionLibrary {
};

class ADecalActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UDecalComponent* Decal;

  UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
  UMaterialInterface* GetDecalMaterial();
  void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);
};

class UDecalComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000215 */ UMaterialInterface* DecalMaterial;
  /* offset=0x0274 flags=0x0018001040000215 */ int32 SortOrder;
  /* offset=0x0278 flags=0x0018001040000215 */ float FadeScreenSize;
  /* offset=0x027c flags=0x0018001040000215 */ float FadeStartDelay;
  /* offset=0x0280 flags=0x0018001040000215 */ float FadeDuration;
  /* offset=0x0284 flags=0x0018001000000015 */ uint8 bDestroyOwnerAfterFade:1;
  /* offset=0x0288 flags=0x0018001040000015 */ struct FVector DecalSize;

  UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
  UMaterialInterface* GetDecalMaterial();
  float GetFadeDuration();
  float GetFadeStartDelay();
  void SetDecalMaterial(UMaterialInterface* NewDecalMaterial);
  void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
  void SetFadeScreenSize(float NewFadeScreenSize);
  void SetSortOrder(int32 Value);
};

class ADefaultPawn: public APawn {
  /* offset=0x02ec flags=0x0018001040020215 */ float BaseTurnRate;
  /* offset=0x02f0 flags=0x0018001040020215 */ float BaseLookUpRate;
  /* offset=0x02f4 flags=0x00480010400a021d */ UPawnMovementComponent* MovementComponent;
  /* offset=0x02f8 flags=0x00480010400a021d */ USphereComponent* CollisionComponent;
  /* offset=0x02fc flags=0x00480010400a021d */ UStaticMeshComponent* MeshComponent;
  /* offset=0x0300 flags=0x0018001000000015 */ uint8 bAddDefaultMovementBindings:1;

  void LookUpAtRate(float Rate);
  void MoveForward(float Val);
  void MoveRight(float Val);
  void MoveUp_World(float Val);
  void TurnAtRate(float Rate);
};

class ADefaultPhysicsVolume: public APhysicsVolume {
};

class UDelayFlyProjMovementComponent: public UProjectileMovementComponent {
  /* offset=0x0140 flags=0x0018001040010201 */ float ThrowLowGravityScale;
  /* offset=0x0144 flags=0x0018001040010201 */ float ThrowHighGravityScale;

  void StartFly(struct FVector flyVelocity, bool isThrowHigh);
};

class UDelegateFunction: public UFunction {
};

class UDelegateProperty: public UProperty {
};

class UDemoNetConnection: public UNetConnection {
};

class UDemoNetDriver: public UNetDriver {
  /* offset=0x040c flags=0x0010000000002200 */ TMap<FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;
  /* offset=0x0728 flags=0x0048001040004200 */ float CheckpointSaveMaxMSPerFrame;
  /* offset=0x0750 flags=0x0018001040000200 */ bool bIsLocalReplay;
};

class UDemoPendingNetGame: public UPendingNetGame {
};

class UDestroySessionCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UDestroySessionCallbackProxy* DestroySession(UObject* WorldContextObject, APlayerController* PlayerController);
};

class ADestructibleActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UDestructibleComponent* DestructibleComponent;
  /* offset=0x02ac flags=0x0018001000004005 */ uint8 bAffectNavigation:1;
  /* offset=0x02b0 flags=0x0010000010080200 */ FActorFractureSignature OnActorFracture;
};

class UDestructibleComponent: public USkinnedMeshComponent {
  /* offset=0x0704 flags=0x0018001000000005 */ uint8 bFractureEffectOverride:1;
  /* offset=0x0708 flags=0x0010000000000255 */ TArray<struct FFractureEffect> FractureEffects;
  /* offset=0x0714 flags=0x0018001040000205 */ bool bEnableHardSleeping;
  /* offset=0x0718 flags=0x0018001040000205 */ float LargeChunkThreshold;
  /* offset=0x0728 flags=0x0010000010080200 */ FComponentFractureSignature OnComponentFracture;

  void ApplyDamage(float DamageAmount, struct FVector HitLocation, struct FVector ImpulseDir, float ImpulseStrength);
  void ApplyRadiusDamage(float BaseDamage, struct FVector HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
  UDestructibleMesh* GetDestructibleMesh();
  void SetDestructibleMesh(UDestructibleMesh* NewMesh);
};

class UDestructibleFractureSettings: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ int32 CellSiteCount;
  /* offset=0x0020 flags=0x0010001000002001 */ struct FFractureMaterial FractureMaterialDesc;
  /* offset=0x0044 flags=0x0018001040000201 */ int32 RandomSeed;
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FVector> VoronoiSites;
  /* offset=0x0054 flags=0x0018001040000200 */ int32 OriginalSubmeshCount;
  /* offset=0x0058 flags=0x0010000000000200 */ TArray<UMaterialInterface*> Materials;
  /* offset=0x0064 flags=0x0010000000000200 */ TArray<struct FDestructibleChunkParameters> ChunkParameters;
};

class UDestructibleInterface: public UInterface {
};

class UDestructibleMesh: public USkeletalMesh {
  /* offset=0x0220 flags=0x0010000000000001 */ struct FDestructibleParameters DefaultDestructibleParameters;
  /* offset=0x029c flags=0x0010000000000241 */ TArray<struct FFractureEffect> FractureEffects;
};

class ADetourCrowdAIController: public AAIController {
};

class UDeveloperSettings: public UObject {
};

class UDeviceProfile: public UTextureLODSettings {
  /* offset=0x0028 flags=0x0018000000024201 */ FString DeviceType;
  /* offset=0x0034 flags=0x0018000000004201 */ FString BaseProfileName;
  /* offset=0x0040 flags=0x0018001040000200 */ UObject* Parent;
  /* offset=0x0054 flags=0x0010000000004201 */ TArray<FString> CVars;
};

class UDeviceProfileManager: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<UObject*> Profiles;
};

class UDialogueSoundWaveProxy: public USoundBase {
};

class UDialogueVoice: public UObject {
  /* offset=0x001c flags=0x0018011040000201 */ uint8 gender;
  /* offset=0x001d flags=0x0018011040000201 */ uint8 Plurality;
  /* offset=0x0020 flags=0x0018001040000000 */ struct FGuid LocalizationGUID;
};

class UDialogueWave: public UObject {
  /* offset=0x001c flags=0x0018011000000001 */ uint8 bMature:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 bOverride_SubtitleOverride:1;
  /* offset=0x0020 flags=0x0018000000000201 */ FString SpokenText;
  /* offset=0x002c flags=0x0018000000000201 */ FString SubtitleOverride;
  /* offset=0x0038 flags=0x0010000000000201 */ TArray<struct FDialogueContextMapping> ContextMappings;
  /* offset=0x0044 flags=0x0018001040000000 */ struct FGuid LocalizationGUID;
};

class ADirectionalLight: public ALight {
};

class UDirectionalLightComponent: public ULightComponent {
  /* offset=0x035d flags=0x0018001000000015 */ uint8 bEnableLightShaftOcclusion:1;
  /* offset=0x0360 flags=0x0018001040000215 */ float OcclusionMaskDarkness;
  /* offset=0x0364 flags=0x0018001040000215 */ float OcclusionDepthRange;
  /* offset=0x0368 flags=0x0018041040000015 */ struct FVector LightShaftOverrideDirection;
  /* offset=0x0374 flags=0x0018001060000200 */ float WholeSceneDynamicShadowRadius;
  /* offset=0x0378 flags=0x0018001040000215 */ float DynamicShadowDistanceMovableLight;
  /* offset=0x037c flags=0x0018001040000215 */ float DynamicShadowDistanceStationaryLight;
  /* offset=0x0380 flags=0x0018001040000215 */ int32 DynamicShadowCascades;
  /* offset=0x0384 flags=0x0018001040000215 */ float CascadeDistributionExponent;
  /* offset=0x0388 flags=0x0018001040000215 */ float CascadeTransitionFraction;
  /* offset=0x038c flags=0x0018001040000215 */ float ShadowDistanceFadeoutFraction;
  /* offset=0x0390 flags=0x0018041000000015 */ uint8 bUseInsetShadowsForMovableObjects:1;
  /* offset=0x0394 flags=0x0018041040000215 */ int32 FarShadowCascadeCount;
  /* offset=0x0398 flags=0x0018041040000215 */ float FarShadowDistance;
  /* offset=0x039c flags=0x0018001040000215 */ float DistanceFieldShadowDistance;
  /* offset=0x03a0 flags=0x0018001040000215 */ float LightSourceAngle;
  /* offset=0x03a4 flags=0x0018041040000215 */ float TraceDistance;
  /* offset=0x03a8 flags=0x0010001000000001 */ struct FLightmassDirectionalLightSettings LightmassSettings;
  /* offset=0x03b8 flags=0x0018041000000015 */ uint8 bCastModulatedShadows:1;
  /* offset=0x03bc flags=0x0018041240000015 */ struct FColor ModulatedShadowColor;
  /* offset=0x03c0 flags=0x0018041000000015 */ uint8 bUsedAsAtmosphereSunLight:1;

  void SetCascadeDistributionExponent(float NewValue);
  void SetCascadeTransitionFraction(float NewValue);
  void SetDynamicShadowCascades(int32 NewValue);
  void SetDynamicShadowDistanceMovableLight(float NewValue);
  void SetDynamicShadowDistanceStationaryLight(float NewValue);
  void SetEnableLightShaftOcclusion(bool bNewValue);
  void SetLightShaftOverrideDirection(struct FVector NewValue);
  void SetOcclusionMaskDarkness(float NewValue);
  void SetShadowDistanceFadeoutFraction(float NewValue);
};

class UDistribution: public UObject {
};

class UDistributionFloat: public UDistribution {
  /* offset=0x0020 flags=0x0018001000000001 */ uint8 bCanBeBaked:1;
  /* offset=0x0020 flags=0x0028081000000000 */ uint8 bBakedDataSuccesfully:1;
};

class UDistributionFloatConstant: public UDistributionFloat {
  /* offset=0x0024 flags=0x0018001040000201 */ float Constant;
};

class UDistributionFloatConstantCurve: public UDistributionFloat {
  /* offset=0x0024 flags=0x0018000000000001 */ struct FInterpCurveFloat ConstantCurve;
};

class UDistributionFloatParameterBase: public UDistributionFloatConstant {
  /* offset=0x0028 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0030 flags=0x0018001040000201 */ float MinInput;
  /* offset=0x0034 flags=0x0018001040000201 */ float MaxInput;
  /* offset=0x0038 flags=0x0018001040000201 */ float MinOutput;
  /* offset=0x003c flags=0x0018001040000201 */ float MaxOutput;
  /* offset=0x0040 flags=0x0018001040000201 */ uint8 ParamMode;
};

class UDistributionFloatParticleParameter: public UDistributionFloatParameterBase {
};

class UDistributionFloatUniform: public UDistributionFloat {
  /* offset=0x0024 flags=0x0018001040000201 */ float Min;
  /* offset=0x0028 flags=0x0018001040000201 */ float Max;
};

class UDistributionFloatUniformCurve: public UDistributionFloat {
  /* offset=0x0024 flags=0x0018000000000001 */ struct FInterpCurveVector2D ConstantCurve;
};

class UDistributionVector: public UDistribution {
  /* offset=0x0020 flags=0x0018001000000001 */ uint8 bCanBeBaked:1;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bIsDirty:1;
  /* offset=0x0020 flags=0x0028081000000000 */ uint8 bBakedDataSuccesfully:1;
};

class UDistributionVectorConstant: public UDistributionVector {
  /* offset=0x0024 flags=0x0018001040000001 */ struct FVector Constant;
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 bLockAxes:1;
  /* offset=0x0031 flags=0x0018001040000201 */ uint8 LockedAxes;
};

class UDistributionVectorConstantCurve: public UDistributionVector {
  /* offset=0x0024 flags=0x0018000000000001 */ struct FInterpCurveVector ConstantCurve;
  /* offset=0x0038 flags=0x0018001000000000 */ uint8 bLockAxes:1;
  /* offset=0x0039 flags=0x0018001040000201 */ uint8 LockedAxes;
};

class UDistributionVectorParameterBase: public UDistributionVectorConstant {
  /* offset=0x0038 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0040 flags=0x0018001040000001 */ struct FVector MinInput;
  /* offset=0x004c flags=0x0018001040000001 */ struct FVector MaxInput;
  /* offset=0x0058 flags=0x0018001040000001 */ struct FVector MinOutput;
  /* offset=0x0064 flags=0x0018001040000001 */ struct FVector MaxOutput;
  /* offset=0x0070 flags=0x0018001040000201 */ uint8 ParamModes;
};

class UDistributionVectorParticleParameter: public UDistributionVectorParameterBase {
};

class UDistributionVectorUniform: public UDistributionVector {
  /* offset=0x0024 flags=0x0018001040000001 */ struct FVector Max;
  /* offset=0x0030 flags=0x0018001040000001 */ struct FVector Min;
  /* offset=0x003c flags=0x0018001000000000 */ uint8 bLockAxes:1;
  /* offset=0x003d flags=0x0018001040000201 */ uint8 LockedAxes;
  /* offset=0x003e flags=0x0018001040000201 */ uint8 MirrorFlags;
  /* offset=0x0041 flags=0x0018001000000001 */ uint8 bUseExtremes:1;
};

class UDistributionVectorUniformCurve: public UDistributionVector {
  /* offset=0x0024 flags=0x0018000000000001 */ struct FInterpCurveTwoVectors ConstantCurve;
  /* offset=0x0038 flags=0x0018001000000000 */ uint8 bLockAxes1:1;
  /* offset=0x0038 flags=0x0018001000000000 */ uint8 bLockAxes2:1;
  /* offset=0x0039 flags=0x0018001040000201 */ uint8 LockedAxes;
  /* offset=0x003b flags=0x0018001040000201 */ uint8 MirrorFlags;
  /* offset=0x003e flags=0x0018001000000001 */ uint8 bUseExtremes:1;
};

class UDmgTypeBP_Environmental_C: public UDamageType {
};

class ADocumentationActor: public AActor {
};

class UDoubleProperty: public UNumericProperty {
};

class UDragDropOperation: public UObject {
  /* offset=0x001c flags=0x0019000000000205 */ FString Tag;
  /* offset=0x0028 flags=0x0019001040000205 */ UObject* Payload;
  /* offset=0x002c flags=0x001900104008021d */ UWidget* DefaultDragVisual;
  /* offset=0x0030 flags=0x0019001040000205 */ enum EDragPivot Pivot;
  /* offset=0x0034 flags=0x0019041040000005 */ struct FVector2D Offset;
  /* offset=0x003c flags=0x0010000010080200 */ FOnDragDropMulticast OnDrop;
  /* offset=0x0048 flags=0x0010000010080200 */ FOnDragDropMulticast OnDragCancelled;
  /* offset=0x0054 flags=0x0010000010080200 */ FOnDragDropMulticast OnDragged;

  void DragCancelled(struct FPointerEvent PointerEvent);
  void Dragged(struct FPointerEvent PointerEvent);
  void Drop(struct FPointerEvent PointerEvent);
};

class UDrawFrustumComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000005 */ struct FColor FrustumColor;
  /* offset=0x05c4 flags=0x0018001040000205 */ float FrustumAngle;
  /* offset=0x05c8 flags=0x0018001040000205 */ float FrustumAspectRatio;
  /* offset=0x05cc flags=0x0018001040000205 */ float FrustumStartDist;
  /* offset=0x05d0 flags=0x0018001040000205 */ float FrustumEndDist;
  /* offset=0x05d4 flags=0x0018001040000205 */ UTexture* Texture;
};

class UDrawSphereComponent: public USphereComponent {
};

class UDynamicBlueprintBinding: public UObject {
};

class UDynamicClass: public UClass {
};

class UEQSQueryResultSourceInterface: public UInterface {
};

class UEQSRenderingComponent: public UPrimitiveComponent {
};

class AEQSTestingPawn: public ACharacter {
  /* offset=0x05a4 flags=0x0018001040000201 */ UEnvQuery* QueryTemplate;
  /* offset=0x05a8 flags=0x0010000000020201 */ TArray<struct FEnvNamedValue> QueryParams;
  /* offset=0x05b4 flags=0x0010000000000201 */ TArray<struct FAIDynamicParam> QueryConfig;
  /* offset=0x05c0 flags=0x0018001040000201 */ float TimeLimitPerStep;
  /* offset=0x05c4 flags=0x0018001040000201 */ int32 StepToDebugDraw;
  /* offset=0x05c8 flags=0x0018001040000201 */ enum EEnvQueryHightlightMode HighlightMode;
  /* offset=0x05c9 flags=0x0018001000000001 */ uint8 bDrawLabels:1;
  /* offset=0x05c9 flags=0x0018001000000001 */ uint8 bDrawFailedItems:1;
  /* offset=0x05c9 flags=0x0018001000000001 */ uint8 bReRunQueryOnlyOnFinishedMove:1;
  /* offset=0x05c9 flags=0x0018001000000001 */ uint8 bShouldBeVisibleInGame:1;
  /* offset=0x05c9 flags=0x0018001000000001 */ uint8 bTickDuringGame:1;
  /* offset=0x05ca flags=0x0018001040000201 */ uint8 QueryingMode;
};

class UEdGraph: public UObject {
  /* offset=0x001c flags=0x001c001040000200 */ UClass<UEdGraphSchema>* Schema;
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<UEdGraphNode*> Nodes;
  /* offset=0x002c flags=0x0018001000000000 */ uint8 bEditable:1;
  /* offset=0x002c flags=0x0018001000000000 */ uint8 bAllowDeletion:1;
  /* offset=0x002c flags=0x0018001000000000 */ uint8 bAllowRenaming:1;
};

class UEdGraphNode: public UObject {
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<UEdGraphPin_Deprecated*> DeprecatedPins;
  /* offset=0x0034 flags=0x0018001040000200 */ int32 NodePosX;
  /* offset=0x0038 flags=0x0018001040000200 */ int32 NodePosY;
  /* offset=0x003c flags=0x0018001040000200 */ int32 NodeWidth;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 NodeHeight;
  /* offset=0x0044 flags=0x0018001040000200 */ uint8 AdvancedPinDisplay;
  /* offset=0x0045 flags=0x0048001040000200 */ enum ENodeEnabledState EnabledState;
  /* offset=0x0047 flags=0x0048001000000000 */ uint8 bUserSetEnabledState:1;
  /* offset=0x0047 flags=0x0048001020000000 */ uint8 bIsNodeEnabled:1;
  /* offset=0x0047 flags=0x0018001000000000 */ uint8 bHasCompilerMessage:1;
  /* offset=0x0047 flags=0x0018001000000000 */ uint8 bCommentBubblePinned:1;
  /* offset=0x0047 flags=0x0018001000000000 */ uint8 bCommentBubbleVisible:1;
  /* offset=0x0047 flags=0x0018001000002000 */ uint8 bCommentBubbleMakeVisible:1;
  /* offset=0x0048 flags=0x0018000000000200 */ FString NodeComment;
  /* offset=0x0054 flags=0x0018001040000200 */ int32 ErrorType;
  /* offset=0x0058 flags=0x0018000000000200 */ FString ErrorMsg;
  /* offset=0x0064 flags=0x0018001040000000 */ struct FGuid NodeGuid;
};

class UEdGraphNode_Documentation: public UEdGraphNode {
  /* offset=0x0074 flags=0x0018000000000200 */ FString Link;
  /* offset=0x0080 flags=0x0018000000000200 */ FString Excerpt;
};

class UEdGraphPin_Deprecated: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString PinName;
  /* offset=0x0028 flags=0x0018000000000200 */ FString PinToolTip;
  /* offset=0x0034 flags=0x0018001040000200 */ uint8 Direction;
  /* offset=0x0038 flags=0x0010000000000000 */ struct FEdGraphPinType PinType;
  /* offset=0x00a0 flags=0x0018000000000200 */ FString DefaultValue;
  /* offset=0x00ac flags=0x0018000000000200 */ FString AutogeneratedDefaultValue;
  /* offset=0x00b8 flags=0x0018001040000200 */ UObject* DefaultObject;
  /* offset=0x00bc flags=0x0010000000000000 */ FText DefaultTextValue;
  /* offset=0x00c8 flags=0x0010000000000200 */ TArray<UEdGraphPin_Deprecated*> LinkedTo;
  /* offset=0x00d4 flags=0x0010000000000200 */ TArray<UEdGraphPin_Deprecated*> SubPins;
  /* offset=0x00e0 flags=0x0018001040000200 */ UEdGraphPin_Deprecated* ParentPin;
  /* offset=0x00e4 flags=0x0018001040000200 */ UEdGraphPin_Deprecated* ReferencePassThroughConnection;
};

class UEdGraphSchema: public UObject {
};

class UEditableGameplayTagQuery: public UObject {
  /* offset=0x001c flags=0x0018000000010201 */ FString UserDescription;
  /* offset=0x0034 flags=0x001a001040090209 */ UEditableGameplayTagQueryExpression* RootExpression;
  /* offset=0x0038 flags=0x0040000000000000 */ struct FGameplayTagQuery TagQueryExportText_Helper;
};

class UEditableGameplayTagQueryExpression: public UObject {
};

class UEditableGameplayTagQueryExpression_AllExprMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010008000000209 */ TArray<UEditableGameplayTagQueryExpression*> Expressions;
};

class UEditableGameplayTagQueryExpression_AllTagsMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010000000010001 */ struct FGameplayTagContainer Tags;
};

class UEditableGameplayTagQueryExpression_AnyExprMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010008000000209 */ TArray<UEditableGameplayTagQueryExpression*> Expressions;
};

class UEditableGameplayTagQueryExpression_AnyTagsMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010000000010001 */ struct FGameplayTagContainer Tags;
};

class UEditableGameplayTagQueryExpression_NoExprMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010008000000209 */ TArray<UEditableGameplayTagQueryExpression*> Expressions;
};

class UEditableGameplayTagQueryExpression_NoTagsMatch: public UEditableGameplayTagQueryExpression {
  /* offset=0x001c flags=0x0010000000010001 */ struct FGameplayTagContainer Tags;
};

class UEditableText: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000001 */ FText Text;
  /* offset=0x00d8 flags=0x0010001000080200 */ FGetText TextDelegate;
  /* offset=0x00e8 flags=0x0010000000000015 */ FText HintText;
  /* offset=0x00f8 flags=0x0010001000080200 */ FGetText HintTextDelegate;
  /* offset=0x0108 flags=0x0010000000000005 */ struct FEditableTextStyle WidgetStyle;
  /* offset=0x02a8 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x02ac flags=0x0018001060000200 */ USlateBrushAsset* BackgroundImageSelected;
  /* offset=0x02b0 flags=0x0018001060000200 */ USlateBrushAsset* BackgroundImageComposing;
  /* offset=0x02b4 flags=0x0018001060000200 */ USlateBrushAsset* CaretImage;
  /* offset=0x02b8 flags=0x0018000020000000 */ struct FSlateFontInfo Font;
  /* offset=0x02f8 flags=0x0010000020000000 */ struct FSlateColor ColorAndOpacity;
  /* offset=0x0314 flags=0x0018001040000201 */ bool IsReadOnly;
  /* offset=0x0315 flags=0x0018001040000201 */ bool IsPassword;
  /* offset=0x0318 flags=0x0018001040000201 */ float MinimumDesiredWidth;
  /* offset=0x031c flags=0x0018041040000201 */ bool IsCaretMovedWhenGainFocus;
  /* offset=0x031d flags=0x0018041040000201 */ bool SelectAllTextWhenFocused;
  /* offset=0x031e flags=0x0018041040000201 */ bool RevertTextOnEscape;
  /* offset=0x031f flags=0x0018041040000201 */ bool ClearKeyboardFocusOnCommit;
  /* offset=0x0320 flags=0x0018041040000201 */ bool SelectAllTextOnCommit;
  /* offset=0x0321 flags=0x0018041040000201 */ bool AllowContextMenu;
  /* offset=0x0322 flags=0x0018041040000201 */ uint8 KeyboardType;
  /* offset=0x0324 flags=0x0010041000000015 */ struct FShapedTextOptions ShapedTextOptions;
  /* offset=0x0328 flags=0x0010000010080200 */ FOnEditableTextChangedEvent OnTextChanged;
  /* offset=0x0334 flags=0x0010000010080200 */ FOnEditableTextCommittedEvent OnTextCommitted;

  FText GetText();
  void OnEditableTextChangedEvent__DelegateSignature(FText Text);
  void OnEditableTextCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void SetHintText(FText InHintText);
  void SetIsPassword(bool InbIsPassword);
  void SetIsReadOnly(bool InbIsReadyOnly);
  void SetText(FText InText);
};

class UEditableTextBox: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000001 */ FText Text;
  /* offset=0x00d8 flags=0x0010001000080200 */ FGetText TextDelegate;
  /* offset=0x00e8 flags=0x0010000000000005 */ struct FEditableTextBoxStyle WidgetStyle;
  /* offset=0x0708 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x070c flags=0x0010000000000015 */ FText HintText;
  /* offset=0x0718 flags=0x0010001000080200 */ FGetText HintTextDelegate;
  /* offset=0x0728 flags=0x0018000020000000 */ struct FSlateFontInfo Font;
  /* offset=0x0768 flags=0x0018001060000000 */ struct FLinearColor ForegroundColor;
  /* offset=0x0778 flags=0x0018001060000000 */ struct FLinearColor BackgroundColor;
  /* offset=0x0788 flags=0x0018001060000000 */ struct FLinearColor ReadOnlyForegroundColor;
  /* offset=0x0798 flags=0x0018001040000215 */ bool IsReadOnly;
  /* offset=0x0799 flags=0x0018001040000215 */ bool IsPassword;
  /* offset=0x079c flags=0x0018001040000215 */ float MinimumDesiredWidth;
  /* offset=0x07a0 flags=0x0010001020000000 */ struct FMargin Padding;
  /* offset=0x07b0 flags=0x0018041040000215 */ bool IsCaretMovedWhenGainFocus;
  /* offset=0x07b1 flags=0x0018041040000215 */ bool SelectAllTextWhenFocused;
  /* offset=0x07b2 flags=0x0018041040000215 */ bool RevertTextOnEscape;
  /* offset=0x07b3 flags=0x0018041040000215 */ bool ClearKeyboardFocusOnCommit;
  /* offset=0x07b4 flags=0x0018041040000215 */ bool SelectAllTextOnCommit;
  /* offset=0x07b5 flags=0x0018041040000201 */ bool AllowContextMenu;
  /* offset=0x07b6 flags=0x0018041040000201 */ uint8 KeyboardType;
  /* offset=0x07b8 flags=0x0010041000000015 */ struct FShapedTextOptions ShapedTextOptions;
  /* offset=0x07bc flags=0x0010000010080200 */ FOnEditableTextBoxChangedEvent OnTextChanged;
  /* offset=0x07c8 flags=0x0010000010080200 */ FOnEditableTextBoxCommittedEvent OnTextCommitted;

  void ClearError();
  FText GetText();
  bool HasError();
  void OnEditableTextBoxChangedEvent__DelegateSignature(FText Text);
  void OnEditableTextBoxCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void SetError(FText InError);
  void SetHintText(FText InText);
  void SetIsReadOnly(bool bReadOnly);
  void SetText(FText InText);
};

class UEditableTextBoxWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FEditableTextBoxStyle EditableTextBoxStyle;
};

class UEditableTextWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FEditableTextStyle EditableTextStyle;
};

class UEffectComponent: public UActorComponent {
  /* SRV */ void C2S_CallRemoteEffect(int32 graphTid, int32 graphUid, int32 effectTid, AActor* Source, AActor* Target, TArray<uint8> Data);
  /* CL* */ void S2A_EndEffectGraph(int32 UID);
  /* CL  */ void S2C_CallRemoteEffect(int32 graphTid, int32 graphUid, int32 effectTid, AActor* Source, AActor* Target, TArray<uint8> Data);
  /* CL* */ void S2Sim_CallRemoteEffect(int32 graphTid, int32 graphUid, int32 effectTid, AActor* Source, AActor* Target, TArray<uint8> Data);
};

class AEmitter: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UParticleSystemComponent* ParticleSystemComponent;
  /* offset=0x02ac flags=0x0018001000000000 */ uint8 bDestroyOnSystemFinish:1;
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bPostUpdateTickGroup:1;
  /* offset=0x02ac flags=0x0018001100000020 */ uint8 bCurrentlyActive:1;
  /* offset=0x02b0 flags=0x0010000010080200 */ FParticleSpawnSignature OnParticleSpawn;
  /* offset=0x02bc flags=0x0010000010080200 */ FParticleBurstSignature OnParticleBurst;
  /* offset=0x02c8 flags=0x0010000010080200 */ FParticleDeathSignature OnParticleDeath;
  /* offset=0x02d4 flags=0x0010000010080200 */ FParticleCollisionSignature OnParticleCollide;

  void Activate();
  void Deactivate();
  bool IsActive();
  void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent);
  void OnRep_bCurrentlyActive();
  void SetActorParameter(FName ParameterName, AActor* Param);
  void SetColorParameter(FName ParameterName, struct FLinearColor Param);
  void SetFloatParameter(FName ParameterName, float Param);
  void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);
  void SetTemplate(UParticleSystem* NewTemplate);
  void SetVectorParameter(FName ParameterName, struct FVector Param);
  void ToggleActive();
};

class AEmitterCameraLensEffectBase: public AEmitter {
  /* offset=0x02e0 flags=0x0028081040010201 */ UParticleSystem* PS_CameraEffect;
  /* offset=0x02e4 flags=0x0028081060000200 */ UParticleSystem* PS_CameraEffectNonExtremeContent;
  /* offset=0x02e8 flags=0x0028081040002200 */ APlayerCameraManager* BaseCamera;
  /* offset=0x02f0 flags=0x0020081040010001 */ struct FTransform RelativeTransform;
  /* offset=0x0320 flags=0x0018001040010201 */ float BaseFOV;
  /* offset=0x0324 flags=0x0018001000000001 */ uint8 bAllowMultipleInstances:1;
  /* offset=0x0324 flags=0x0018001000000001 */ uint8 bResetWhenRetriggered:1;
  /* offset=0x0328 flags=0x0014000000010201 */ TArray<UClass<AEmitterCameraLensEffectBase>*> EmittersToTreatAsSame;
  /* offset=0x0334 flags=0x0048001060000200 */ float DistFromCamera;
};

class UEndMatchCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UEndMatchCallbackProxy* EndMatch(UObject* WorldContextObject, APlayerController* PlayerController, UInterface<UTurnBasedMatchInterface>* MatchActor, FString MatchID, uint8 LocalPlayerOutcome, uint8 OtherPlayersOutcome);
};

class UEndTurnCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UEndTurnCallbackProxy* EndTurn(UObject* WorldContextObject, APlayerController* PlayerController, FString MatchID, UInterface<UTurnBasedMatchInterface>* TurnBasedMatchInterface);
};

class UEndUserSettings: public UObject {
  /* offset=0x0020 flags=0x0018001040004201 */ bool bSendAnonymousUsageDataToEpic;
  /* offset=0x0021 flags=0x0018001040004201 */ bool bSendMeanTimeBetweenFailureDataToEpic;
  /* offset=0x0022 flags=0x0018001040004201 */ bool bAllowUserIdInUsageData;
};

class UEngine: public UObject {
  /* offset=0x0020 flags=0x0048001040000200 */ UFont* TinyFont;
  /* offset=0x0028 flags=0x0018000000044001 */ struct FSoftObjectPath TinyFontName;
  /* offset=0x0040 flags=0x0048001040000200 */ UFont* SmallFont;
  /* offset=0x0048 flags=0x0018000000044001 */ struct FSoftObjectPath SmallFontName;
  /* offset=0x0060 flags=0x0048001040000200 */ UFont* MediumFont;
  /* offset=0x0068 flags=0x0018000000044001 */ struct FSoftObjectPath MediumFontName;
  /* offset=0x0080 flags=0x0048001040000200 */ UFont* LargeFont;
  /* offset=0x0088 flags=0x0018000000044001 */ struct FSoftObjectPath LargeFontName;
  /* offset=0x00a0 flags=0x0048001040000200 */ UFont* SubtitleFont;
  /* offset=0x00a8 flags=0x0018040000044001 */ struct FSoftObjectPath SubtitleFontName;
  /* offset=0x00c0 flags=0x0040000000000200 */ TArray<UFont*> AdditionalFonts;
  /* offset=0x00d4 flags=0x0010040000044201 */ TArray<FString> AdditionalFontNames;
  /* offset=0x00e0 flags=0x001c001040000200 */ UClass<UConsole>* ConsoleClass;
  /* offset=0x00e8 flags=0x0010000002044001 */ struct FSoftClassPath ConsoleClassName;
  /* offset=0x0100 flags=0x001c001040000200 */ UClass<UGameViewportClient>* GameViewportClientClass;
  /* offset=0x0108 flags=0x0010000002044001 */ struct FSoftClassPath GameViewportClientClassName;
  /* offset=0x0120 flags=0x001c001040000200 */ UClass<ULocalPlayer>* LocalPlayerClass;
  /* offset=0x0128 flags=0x0010000002044001 */ struct FSoftClassPath LocalPlayerClassName;
  /* offset=0x0140 flags=0x001c001040000200 */ UClass<AWorldSettings>* WorldSettingsClass;
  /* offset=0x0148 flags=0x0010000002044001 */ struct FSoftClassPath WorldSettingsClassName;
  /* offset=0x0160 flags=0x0010000002044000 */ struct FSoftClassPath NavigationSystemClassName;
  /* offset=0x0178 flags=0x001c001040000200 */ UClass<UNavigationSystem>* NavigationSystemClass;
  /* offset=0x0180 flags=0x0010000002044000 */ struct FSoftClassPath AvoidanceManagerClassName;
  /* offset=0x0198 flags=0x001c001040000200 */ UClass<UAvoidanceManager>* AvoidanceManagerClass;
  /* offset=0x019c flags=0x001c001040000200 */ UClass<UPhysicsCollisionHandler>* PhysicsCollisionHandlerClass;
  /* offset=0x01a0 flags=0x0010040002044001 */ struct FSoftClassPath PhysicsCollisionHandlerClassName;
  /* offset=0x01b8 flags=0x0010000002044000 */ struct FSoftClassPath GameUserSettingsClassName;
  /* offset=0x01d0 flags=0x001c001040000200 */ UClass<UGameUserSettings>* GameUserSettingsClass;
  /* offset=0x01d8 flags=0x0010000002044000 */ struct FSoftClassPath AIControllerClassName;
  /* offset=0x01f0 flags=0x0018001040000200 */ UGameUserSettings* GameUserSettings;
  /* offset=0x01f4 flags=0x001c001040000200 */ UClass<ALevelScriptActor>* LevelScriptActorClass;
  /* offset=0x01f8 flags=0x0010000002044001 */ struct FSoftClassPath LevelScriptActorClassName;
  /* offset=0x0210 flags=0x0010040002044001 */ struct FSoftClassPath DefaultBlueprintBaseClassName;
  /* offset=0x0228 flags=0x0010040002044001 */ struct FSoftClassPath GameSingletonClassName;
  /* offset=0x0240 flags=0x0018001040000200 */ UObject* GameSingleton;
  /* offset=0x0248 flags=0x0010040002044001 */ struct FSoftClassPath AssetManagerClassName;
  /* offset=0x0260 flags=0x0018001040000200 */ UAssetManager* AssetManager;
  /* offset=0x0264 flags=0x0018001040000200 */ UTexture2D* DefaultTexture;
  /* offset=0x0268 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultTextureName;
  /* offset=0x0280 flags=0x0018001040000200 */ UTexture* DefaultDiffuseTexture;
  /* offset=0x0288 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultDiffuseTextureName;
  /* offset=0x02a0 flags=0x0018001040000200 */ UTexture2D* DefaultBSPVertexTexture;
  /* offset=0x02a8 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultBSPVertexTextureName;
  /* offset=0x02c0 flags=0x0018001040000200 */ UTexture2D* HighFrequencyNoiseTexture;
  /* offset=0x02c8 flags=0x0018000000044000 */ struct FSoftObjectPath HighFrequencyNoiseTextureName;
  /* offset=0x02e0 flags=0x0018001040000200 */ UTexture2D* DefaultBokehTexture;
  /* offset=0x02e8 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultBokehTextureName;
  /* offset=0x0300 flags=0x0018001040000200 */ UTexture2D* DefaultBloomKernelTexture;
  /* offset=0x0308 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultBloomKernelTextureName;
  /* offset=0x0320 flags=0x0018001040000200 */ UMaterial* WireframeMaterial;
  /* offset=0x0324 flags=0x0018000000044200 */ FString WireframeMaterialName;
  /* offset=0x0330 flags=0x0018001040000200 */ UMaterial* DebugMeshMaterial;
  /* offset=0x0338 flags=0x0018000000044000 */ struct FSoftObjectPath DebugMeshMaterialName;
  /* offset=0x0350 flags=0x0018001040000200 */ UMaterial* LevelColorationLitMaterial;
  /* offset=0x0354 flags=0x0018000000044200 */ FString LevelColorationLitMaterialName;
  /* offset=0x0360 flags=0x0018001040000200 */ UMaterial* LevelColorationUnlitMaterial;
  /* offset=0x0364 flags=0x0018000000044200 */ FString LevelColorationUnlitMaterialName;
  /* offset=0x0370 flags=0x0018001040000200 */ UMaterial* LightingTexelDensityMaterial;
  /* offset=0x0374 flags=0x0018000000044200 */ FString LightingTexelDensityName;
  /* offset=0x0380 flags=0x0018001040000200 */ UMaterial* ShadedLevelColorationLitMaterial;
  /* offset=0x0384 flags=0x0018000000044200 */ FString ShadedLevelColorationLitMaterialName;
  /* offset=0x0390 flags=0x0018001040000200 */ UMaterial* ShadedLevelColorationUnlitMaterial;
  /* offset=0x0394 flags=0x0018000000044200 */ FString ShadedLevelColorationUnlitMaterialName;
  /* offset=0x03a0 flags=0x0018001040000200 */ UMaterial* RemoveSurfaceMaterial;
  /* offset=0x03a8 flags=0x0018000000044000 */ struct FSoftObjectPath RemoveSurfaceMaterialName;
  /* offset=0x03c0 flags=0x0018001040000200 */ UMaterial* VertexColorMaterial;
  /* offset=0x03c4 flags=0x0018000000044200 */ FString VertexColorMaterialName;
  /* offset=0x03d0 flags=0x0018001040000200 */ UMaterial* VertexColorViewModeMaterial_ColorOnly;
  /* offset=0x03d4 flags=0x0018000000044200 */ FString VertexColorViewModeMaterialName_ColorOnly;
  /* offset=0x03e0 flags=0x0018001040000200 */ UMaterial* VertexColorViewModeMaterial_AlphaAsColor;
  /* offset=0x03e4 flags=0x0018000000044200 */ FString VertexColorViewModeMaterialName_AlphaAsColor;
  /* offset=0x03f0 flags=0x0018001040000200 */ UMaterial* VertexColorViewModeMaterial_RedOnly;
  /* offset=0x03f4 flags=0x0018000000044200 */ FString VertexColorViewModeMaterialName_RedOnly;
  /* offset=0x0400 flags=0x0018001040000200 */ UMaterial* VertexColorViewModeMaterial_GreenOnly;
  /* offset=0x0404 flags=0x0018000000044200 */ FString VertexColorViewModeMaterialName_GreenOnly;
  /* offset=0x0410 flags=0x0018001040000200 */ UMaterial* VertexColorViewModeMaterial_BlueOnly;
  /* offset=0x0414 flags=0x0018000000044200 */ FString VertexColorViewModeMaterialName_BlueOnly;
  /* offset=0x0420 flags=0x0018000000044000 */ struct FSoftObjectPath DebugEditorMaterialName;
  /* offset=0x0438 flags=0x0018001040000200 */ UMaterial* ConstraintLimitMaterial;
  /* offset=0x043c flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialX;
  /* offset=0x0440 flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis;
  /* offset=0x0444 flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialY;
  /* offset=0x0448 flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis;
  /* offset=0x044c flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialZ;
  /* offset=0x0450 flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis;
  /* offset=0x0454 flags=0x0018001040000200 */ UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;
  /* offset=0x0458 flags=0x0018001040000200 */ UMaterial* InvalidLightmapSettingsMaterial;
  /* offset=0x0460 flags=0x0018000000044000 */ struct FSoftObjectPath InvalidLightmapSettingsMaterialName;
  /* offset=0x0478 flags=0x0018001040000200 */ UMaterial* PreviewShadowsIndicatorMaterial;
  /* offset=0x0480 flags=0x0018000000044001 */ struct FSoftObjectPath PreviewShadowsIndicatorMaterialName;
  /* offset=0x0498 flags=0x0018001040000200 */ UMaterial* ArrowMaterial;
  /* offset=0x04a0 flags=0x0018000000044000 */ struct FSoftObjectPath ArrowMaterialName;
  /* offset=0x04b8 flags=0x0018001040044000 */ struct FLinearColor LightingOnlyBrightness;
  /* offset=0x04c8 flags=0x0010000000044200 */ TArray<struct FLinearColor> ShaderComplexityColors;
  /* offset=0x04d4 flags=0x0010000000044200 */ TArray<struct FLinearColor> QuadComplexityColors;
  /* offset=0x04e0 flags=0x0010000000044200 */ TArray<struct FLinearColor> LightComplexityColors;
  /* offset=0x04ec flags=0x0010000000044200 */ TArray<struct FLinearColor> StationaryLightOverlapColors;
  /* offset=0x04f8 flags=0x0010000000044200 */ TArray<struct FLinearColor> LODColorationColors;
  /* offset=0x0504 flags=0x0010000000044200 */ TArray<struct FLinearColor> HLODColorationColors;
  /* offset=0x0510 flags=0x0010000000044200 */ TArray<struct FLinearColor> StreamingAccuracyColors;
  /* offset=0x051c flags=0x0018001040044200 */ float MaxPixelShaderAdditiveComplexityCount;
  /* offset=0x0520 flags=0x0018001040044200 */ float MaxES2PixelShaderAdditiveComplexityCount;
  /* offset=0x0524 flags=0x0018001040044200 */ float MinLightMapDensity;
  /* offset=0x0528 flags=0x0018001040044200 */ float IdealLightMapDensity;
  /* offset=0x052c flags=0x0018001040044200 */ float MaxLightMapDensity;
  /* offset=0x0530 flags=0x0018001000044000 */ uint8 bRenderLightMapDensityGrayscale:1;
  /* offset=0x0534 flags=0x0018001040044200 */ float RenderLightMapDensityGrayscaleScale;
  /* offset=0x0538 flags=0x0018001040044200 */ float RenderLightMapDensityColorScale;
  /* offset=0x053c flags=0x0018001040044000 */ struct FLinearColor LightMapDensityVertexMappedColor;
  /* offset=0x054c flags=0x0018001040044000 */ struct FLinearColor LightMapDensitySelectedColor;
  /* offset=0x055c flags=0x0010000000044200 */ TArray<struct FStatColorMapping> StatColorMappings;
  /* offset=0x0568 flags=0x0018001040000200 */ UPhysicalMaterial* DefaultPhysMaterial;
  /* offset=0x0570 flags=0x0018000000044000 */ struct FSoftObjectPath DefaultPhysMaterialName;
  /* offset=0x0588 flags=0x0010000000004200 */ TArray<struct FGameNameRedirect> ActiveGameNameRedirects;
  /* offset=0x0594 flags=0x0010000000004200 */ TArray<struct FClassRedirect> ActiveClassRedirects;
  /* offset=0x05a0 flags=0x0010000000004200 */ TArray<struct FPluginRedirect> ActivePluginRedirects;
  /* offset=0x05ac flags=0x0010000000004200 */ TArray<struct FStructRedirect> ActiveStructRedirects;
  /* offset=0x05b8 flags=0x0018001040000200 */ UTexture2D* PreIntegratedSkinBRDFTexture;
  /* offset=0x05c0 flags=0x0018000000044000 */ struct FSoftObjectPath PreIntegratedSkinBRDFTextureName;
  /* offset=0x05d8 flags=0x0018001040000200 */ UTexture2D* MiniFontTexture;
  /* offset=0x05e0 flags=0x0018000000044000 */ struct FSoftObjectPath MiniFontTextureName;
  /* offset=0x05f8 flags=0x0018001040000200 */ UTexture* WeightMapPlaceholderTexture;
  /* offset=0x0600 flags=0x0018000000044000 */ struct FSoftObjectPath WeightMapPlaceholderTextureName;
  /* offset=0x0618 flags=0x0018001040000200 */ UTexture2D* LightMapDensityTexture;
  /* offset=0x0620 flags=0x0018000000044000 */ struct FSoftObjectPath LightMapDensityTextureName;
  /* offset=0x063c flags=0x0018001040000200 */ UGameViewportClient* GameViewport;
  /* offset=0x0640 flags=0x0010000000000200 */ TArray<FString> DeferredCommands;
  /* offset=0x064c flags=0x0018001040000200 */ int32 TickCycles;
  /* offset=0x0650 flags=0x0018001040000200 */ int32 GameCycles;
  /* offset=0x0654 flags=0x0018001040000200 */ int32 ClientCycles;
  /* offset=0x0658 flags=0x0018001040004201 */ float NearClipPlane;
  /* offset=0x065c flags=0x0018001020000000 */ uint8 bHardwareSurveyEnabled:1;
  /* offset=0x065c flags=0x0018001000004001 */ uint8 bSubtitlesEnabled:1;
  /* offset=0x065c flags=0x0018001000004001 */ uint8 bSubtitlesForcedOff:1;
  /* offset=0x0660 flags=0x0018001040004201 */ int32 MaximumLoopIterationCount;
  /* offset=0x0664 flags=0x0018001000004001 */ uint8 bCanBlueprintsTickByDefault:1;
  /* offset=0x0664 flags=0x0018001000004001 */ uint8 bOptimizeAnimBlueprintMemberVariableAccess:1;
  /* offset=0x0664 flags=0x0018001000004001 */ uint8 bAllowMultiThreadedAnimationUpdate:1;
  /* offset=0x0664 flags=0x0018001000004000 */ uint8 bEnableEditorPSysRealtimeLOD:1;
  /* offset=0x0664 flags=0x0018001000004001 */ uint8 bSmoothFrameRate:1;
  /* offset=0x0664 flags=0x0018001000004001 */ uint8 bUseFixedFrameRate:1;
  /* offset=0x0668 flags=0x0018001040004201 */ float FixedFrameRate;
  /* offset=0x066c flags=0x0018000000004001 */ struct FFloatRange SmoothedFrameRateRange;
  /* offset=0x067c flags=0x0018001000004000 */ uint8 bCheckForMultiplePawnsSpawnedInAFrame:1;
  /* offset=0x0680 flags=0x0018001040004200 */ int32 NumPawnsAllowedToBeSpawnedInAFrame;
  /* offset=0x0684 flags=0x0018001020044000 */ uint8 bShouldGenerateLowQualityLightmaps:1;
  /* offset=0x0688 flags=0x0018001040000000 */ struct FColor C_WorldBox;
  /* offset=0x068c flags=0x0018001040000000 */ struct FColor C_BrushWire;
  /* offset=0x0690 flags=0x0018001040000000 */ struct FColor C_AddWire;
  /* offset=0x0694 flags=0x0018001040000000 */ struct FColor C_SubtractWire;
  /* offset=0x0698 flags=0x0018001040000000 */ struct FColor C_SemiSolidWire;
  /* offset=0x069c flags=0x0018001040000000 */ struct FColor C_NonSolidWire;
  /* offset=0x06a0 flags=0x0018001040000000 */ struct FColor C_WireBackground;
  /* offset=0x06a4 flags=0x0018001040000000 */ struct FColor C_ScaleBoxHi;
  /* offset=0x06a8 flags=0x0018001040000000 */ struct FColor C_VolumeCollision;
  /* offset=0x06ac flags=0x0018001040000000 */ struct FColor C_BSPCollision;
  /* offset=0x06b0 flags=0x0018001040000000 */ struct FColor C_OrthoBackground;
  /* offset=0x06b4 flags=0x0018001040000000 */ struct FColor C_Volume;
  /* offset=0x06b8 flags=0x0018001040000000 */ struct FColor C_BrushShape;
  /* offset=0x06bc flags=0x0018041040000201 */ float StreamingDistanceFactor;
  /* offset=0x06c0 flags=0x0010000000004001 */ struct FDirectoryPath GameScreenshotSaveDirectory;
  /* offset=0x06cc flags=0x0018001040000200 */ uint8 TransitionType;
  /* offset=0x06d0 flags=0x0018000000000200 */ FString TransitionDescription;
  /* offset=0x06dc flags=0x0018000000000200 */ FString TransitionGameMode;
  /* offset=0x06e8 flags=0x0018001040004200 */ float MeshLODRange;
  /* offset=0x06ec flags=0x0018001000004000 */ uint8 bAllowMatureLanguage:1;
  /* offset=0x06f0 flags=0x0018001040004200 */ float CameraRotationThreshold;
  /* offset=0x06f4 flags=0x0018001040004200 */ float CameraTranslationThreshold;
  /* offset=0x06f8 flags=0x0018001040004200 */ float PrimitiveProbablyVisibleTime;
  /* offset=0x06fc flags=0x0018001040004200 */ float MaxOcclusionPixelsFraction;
  /* offset=0x0700 flags=0x0018001000004000 */ uint8 bPauseOnLossOfFocus:1;
  /* offset=0x0704 flags=0x0018001040004200 */ int32 MaxParticleResize;
  /* offset=0x0708 flags=0x0018001040004200 */ int32 MaxParticleResizeWarn;
  /* offset=0x070c flags=0x0010000000002200 */ TArray<struct FDropNoteInfo> PendingDroppedNotes;
  /* offset=0x0718 flags=0x0010001000004000 */ struct FRigidBodyErrorCorrection PhysicErrorCorrection;
  /* offset=0x0734 flags=0x0018001040044200 */ float NetClientTicksPerSecond;
  /* offset=0x0738 flags=0x0018001040004200 */ float DisplayGamma;
  /* offset=0x073c flags=0x0018001040004201 */ float MinDesiredFrameRate;
  /* offset=0x0740 flags=0x0048001040044000 */ struct FLinearColor DefaultSelectedMaterialColor;
  /* offset=0x0750 flags=0x0048001040002000 */ struct FLinearColor SelectedMaterialColor;
  /* offset=0x0760 flags=0x0048001040002000 */ struct FLinearColor SelectionOutlineColor;
  /* offset=0x0770 flags=0x0048001040002000 */ struct FLinearColor SubduedSelectionOutlineColor;
  /* offset=0x0780 flags=0x0048001040002000 */ struct FLinearColor SelectedMaterialColorOverride;
  /* offset=0x0790 flags=0x0048001040002200 */ bool bIsOverridingSelectedColor;
  /* offset=0x0791 flags=0x0018001000044000 */ uint8 bEnableOnScreenDebugMessages:1;
  /* offset=0x0791 flags=0x0018001000002000 */ uint8 bEnableOnScreenDebugMessagesDisplay:1;
  /* offset=0x0791 flags=0x0018001000044000 */ uint8 bSuppressMapWarnings:1;
  /* offset=0x0791 flags=0x0018001000044000 */ uint8 bDisableAILogging:1;
  /* offset=0x0794 flags=0x0018001040044200 */ uint32 bEnableVisualLogRecordingOnStart;
  /* offset=0x079c flags=0x0048001040002200 */ int32 ScreenSaverInhibitorSemaphore;
  /* offset=0x07a0 flags=0x0018001000002000 */ uint8 bLockReadOnlyLevels:1;
  /* offset=0x07a4 flags=0x0018000000044200 */ FString ParticleEventManagerClassPath;
  /* offset=0x07bc flags=0x0018001040002200 */ float SelectionHighlightIntensity;
  /* offset=0x07c0 flags=0x0018001040002200 */ float SelectionMeshSectionHighlightIntensity;
  /* offset=0x07c4 flags=0x0018001040002200 */ float BSPSelectionHighlightIntensity;
  /* offset=0x07c8 flags=0x0018001040002200 */ float HoverHighlightIntensity;
  /* offset=0x07cc flags=0x0018001040002200 */ float SelectionHighlightIntensityBillboards;
  /* offset=0x0b48 flags=0x0010000000006200 */ TArray<struct FNetDriverDefinition> NetDriverDefinitions;
  /* offset=0x0b54 flags=0x0010000000004200 */ TArray<FString> ServerActors;
  /* offset=0x0b60 flags=0x0010000000000200 */ TArray<FString> RuntimeServerActors;
  /* offset=0x0b6c flags=0x0018001000002000 */ uint8 bStartedLoadMapMovie:1;
  /* offset=0x0b7c flags=0x0028081040000200 */ int32 NextWorldContextHandle;
};

class UEngineBaseTypes: public UObject {
};

class UEngineHandlerComponentFactory: public UHandlerComponentFactory {
};

class UEngineMessage: public ULocalMessage {
  /* offset=0x001c flags=0x0018000000000200 */ FString FailedPlaceMessage;
  /* offset=0x0028 flags=0x0018000000000200 */ FString MaxedOutMessage;
  /* offset=0x0034 flags=0x0018000000000200 */ FString EnteredMessage;
  /* offset=0x0040 flags=0x0018000000000200 */ FString LeftMessage;
  /* offset=0x004c flags=0x0018000000000200 */ FString GlobalNameChange;
  /* offset=0x0058 flags=0x0018000000000200 */ FString SpecEnteredMessage;
  /* offset=0x0064 flags=0x0018000000000200 */ FString NewPlayerMessage;
  /* offset=0x0070 flags=0x0018000000000200 */ FString NewSpecMessage;
};

class UEngineTypes: public UObject {
};

class UEnum: public UField {
};

class UEnumProperty: public UProperty {
};

class UEnvQuery: public UDataAsset {
  /* offset=0x0020 flags=0x0028081040000200 */ FName QueryName;
  /* offset=0x0028 flags=0x0020080000000200 */ TArray<UEnvQueryOption*> Options;
};

class UEnvQueryContext: public UObject {
};

class UEnvQueryContext_BlueprintBase: public UEnvQueryContext {
  void ProvideActorsSet(UObject* QuerierObject, AActor* QuerierActor, TArray<AActor*> ResultingActorsSet);
  void ProvideLocationsSet(UObject* QuerierObject, AActor* QuerierActor, TArray<struct FVector> ResultingLocationSet);
  void ProvideSingleActor(UObject* QuerierObject, AActor* QuerierActor, AActor* ResultingActor);
  void ProvideSingleLocation(UObject* QuerierObject, AActor* QuerierActor, struct FVector ResultingLocation);
};

class UEnvQueryContext_Item: public UEnvQueryContext {
};

class UEnvQueryContext_Querier: public UEnvQueryContext {
};

class UEnvQueryDebugHelpers: public UObject {
};

class UEnvQueryGenerator: public UEnvQueryNode {
  /* offset=0x0020 flags=0x0018000000010201 */ FString OptionName;
  /* offset=0x002c flags=0x001c001040000200 */ UClass<UEnvQueryItemType>* ItemType;
  /* offset=0x0030 flags=0x0018041000010001 */ uint8 bAutoSortTests:1;
};

class UEnvQueryGenerator_ActorsOfClass: public UEnvQueryGenerator {
  /* offset=0x0034 flags=0x001c001040010201 */ UClass<AActor>* SearchedActorClass;
  /* offset=0x0038 flags=0x0010008000010001 */ struct FAIDataProviderBoolValue GenerateOnlyActorsInRadius;
  /* offset=0x0058 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue SearchRadius;
  /* offset=0x0078 flags=0x001c001040000201 */ UClass<UEnvQueryContext>* SearchCenter;
};

class UEnvQueryGenerator_BlueprintBase: public UEnvQueryGenerator {
  /* offset=0x0034 flags=0x0010000000000001 */ FText GeneratorsActionDescription;
  /* offset=0x0040 flags=0x001c001040000201 */ UClass<UEnvQueryContext>* Context;
  /* offset=0x0044 flags=0x001c001040010201 */ UClass<UEnvQueryItemType>* GeneratedItemType;

  void AddGeneratedActor(AActor* GeneratedActor);
  void AddGeneratedVector(struct FVector GeneratedVector);
  void DoItemGeneration(TArray<struct FVector> ContextLocations);
  UObject* GetQuerier();
};

class UEnvQueryGenerator_Composite: public UEnvQueryGenerator {
  /* offset=0x0034 flags=0x0010008000010209 */ TArray<UEnvQueryGenerator*> Generators;
  /* offset=0x0040 flags=0x0018041000010001 */ uint8 bAllowDifferentItemTypes:1;
  /* offset=0x0040 flags=0x0018001000000000 */ uint8 bHasMatchingItemType:1;
  /* offset=0x0044 flags=0x001c041040010201 */ UClass<UEnvQueryItemType>* ForcedItemType;
};

class UEnvQueryGenerator_Cone: public UEnvQueryGenerator_ProjectedPoints {
  /* offset=0x0060 flags=0x0020088000010001 */ struct FAIDataProviderFloatValue AlignedPointsDistance;
  /* offset=0x0080 flags=0x0020088000010001 */ struct FAIDataProviderFloatValue ConeDegrees;
  /* offset=0x00a0 flags=0x0020088000010001 */ struct FAIDataProviderFloatValue AngleStep;
  /* offset=0x00c0 flags=0x0020088000010001 */ struct FAIDataProviderFloatValue Range;
  /* offset=0x00e0 flags=0x002c081040000201 */ UClass<UEnvQueryContext>* CenterActor;
  /* offset=0x00e4 flags=0x0028081000000001 */ uint8 bIncludeContextLocation:1;
};

class UEnvQueryGenerator_CurrentLocation: public UEnvQueryGenerator {
  /* offset=0x0034 flags=0x002c081040010201 */ UClass<UEnvQueryContext>* QueryContext;
};

class UEnvQueryGenerator_Donut: public UEnvQueryGenerator_ProjectedPoints {
  /* offset=0x0060 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue InnerRadius;
  /* offset=0x0080 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue OuterRadius;
  /* offset=0x00a0 flags=0x0010008000010001 */ struct FAIDataProviderIntValue NumberOfRings;
  /* offset=0x00c0 flags=0x0010008000010001 */ struct FAIDataProviderIntValue PointsPerRing;
  /* offset=0x00e0 flags=0x0010001000010001 */ struct FEnvDirection ArcDirection;
  /* offset=0x00f0 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ArcAngle;
  /* offset=0x0110 flags=0x0018001040010201 */ bool bUseSpiralPattern;
  /* offset=0x0114 flags=0x001c001040000201 */ UClass<UEnvQueryContext>* Center;
  /* offset=0x0118 flags=0x0018001000000001 */ uint8 bDefineArc:1;
};

class UEnvQueryGenerator_OnCircle: public UEnvQueryGenerator_ProjectedPoints {
  /* offset=0x0060 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue CircleRadius;
  /* offset=0x0080 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue SpaceBetween;
  /* offset=0x00a0 flags=0x0010008000010001 */ struct FAIDataProviderIntValue NumberOfPoints;
  /* offset=0x00c0 flags=0x0018001040010201 */ enum EPointOnCircleSpacingMethod PointOnCircleSpacingMethod;
  /* offset=0x00c4 flags=0x0010001000010001 */ struct FEnvDirection ArcDirection;
  /* offset=0x00d8 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ArcAngle;
  /* offset=0x00f8 flags=0x0018001040000200 */ float AngleRadians;
  /* offset=0x00fc flags=0x001c001040000201 */ UClass<UEnvQueryContext>* CircleCenter;
  /* offset=0x0100 flags=0x0018001040010201 */ bool bIgnoreAnyContextActorsWhenGeneratingCircle;
  /* offset=0x0108 flags=0x0010008000000001 */ struct FAIDataProviderFloatValue CircleCenterZOffset;
  /* offset=0x0128 flags=0x0010001000000001 */ struct FEnvTraceData TraceData;
  /* offset=0x0150 flags=0x0018001000000001 */ uint8 bDefineArc:1;
};

class UEnvQueryGenerator_PathingGrid: public UEnvQueryGenerator_SimpleGrid {
  /* offset=0x00a8 flags=0x0010008000010001 */ struct FAIDataProviderBoolValue PathToItem;
  /* offset=0x00c8 flags=0x001c001040010201 */ UClass<UNavigationQueryFilter>* NavigationFilter;
  /* offset=0x00d0 flags=0x0010048000010001 */ struct FAIDataProviderFloatValue ScanRangeMultiplier;
};

class UEnvQueryGenerator_ProjectedPoints: public UEnvQueryGenerator {
  /* offset=0x0034 flags=0x0010001000010001 */ struct FEnvTraceData ProjectionData;
};

class UEnvQueryGenerator_SimpleGrid: public UEnvQueryGenerator_ProjectedPoints {
  /* offset=0x0060 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue GridSize;
  /* offset=0x0080 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue SpaceBetween;
  /* offset=0x00a0 flags=0x001c001040010201 */ UClass<UEnvQueryContext>* GenerateAround;
};

class UEnvQueryInstanceBlueprintWrapper: public UObject {
  /* offset=0x0020 flags=0x0028081040000214 */ int32 QueryID;
  /* offset=0x0038 flags=0x002c081040000214 */ UClass<UEnvQueryItemType>* ItemType;
  /* offset=0x003c flags=0x0028081040000214 */ int32 OptionIndex;
  /* offset=0x0040 flags=0x0020080010080200 */ FEQSQueryDoneSignature OnQueryFinishedEvent;

  void EQSQueryDoneSignature__DelegateSignature(UEnvQueryInstanceBlueprintWrapper* QueryInstance, uint8 QueryStatus);
  float GetItemScore(int32 ItemIndex);
  TArray<AActor*> GetResultsAsActors();
  TArray<struct FVector> GetResultsAsLocations();
  void SetNamedParam(FName ParamName, float Value);
};

class UEnvQueryItemType: public UObject {
};

class UEnvQueryItemType_Actor: public UEnvQueryItemType_ActorBase {
};

class UEnvQueryItemType_ActorBase: public UEnvQueryItemType_VectorBase {
};

class UEnvQueryItemType_Direction: public UEnvQueryItemType_VectorBase {
};

class UEnvQueryItemType_Point: public UEnvQueryItemType_VectorBase {
};

class UEnvQueryItemType_VectorBase: public UEnvQueryItemType {
};

class UEnvQueryManager: public UObject {
  /* offset=0x0070 flags=0x0020080000002200 */ TArray<struct FEnvQueryInstanceCache> InstanceCache;
  /* offset=0x007c flags=0x0020080000002200 */ TArray<UEnvQueryContext*> LocalContexts;
  /* offset=0x0088 flags=0x0020080000000200 */ TArray<UEnvQueryInstanceBlueprintWrapper*> GCShieldedWrappers;
  /* offset=0x00d4 flags=0x0028081040004200 */ float MaxAllowedTestingTime;
  /* offset=0x00d8 flags=0x0028081040004200 */ bool bTestQueriesUsingBreadth;
  /* offset=0x00dc flags=0x0028081040004200 */ int32 QueryCountWarningThreshold;
  /* offset=0x00e0 flags=0x0028081040004200 */ double QueryCountWarningInterval;

  UEnvQueryInstanceBlueprintWrapper* RunEQSQuery(UObject* WorldContextObject, UEnvQuery* QueryTemplate, UObject* Querier, uint8 RunMode, UClass<UEnvQueryInstanceBlueprintWrapper>* WrapperClass);
};

class UEnvQueryNode: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ int32 VerNum;
};

class UEnvQueryOption: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UEnvQueryGenerator* Generator;
  /* offset=0x0020 flags=0x0010000000000200 */ TArray<UEnvQueryTest*> Tests;
};

class UEnvQueryTest: public UEnvQueryNode {
  /* offset=0x0020 flags=0x0018001040000200 */ int32 TestOrder;
  /* offset=0x0024 flags=0x0018001040010201 */ uint8 TestPurpose;
  /* offset=0x0028 flags=0x0018000000010201 */ FString TestComment;
  /* offset=0x0034 flags=0x0018041040010201 */ uint8 MultipleContextFilterOp;
  /* offset=0x0035 flags=0x0018041040010201 */ uint8 MultipleContextScoreOp;
  /* offset=0x0036 flags=0x0018001040010201 */ uint8 FilterType;
  /* offset=0x0038 flags=0x0010008000010001 */ struct FAIDataProviderBoolValue BoolValue;
  /* offset=0x0058 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue FloatValueMin;
  /* offset=0x0078 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue FloatValueMax;
  /* offset=0x0099 flags=0x0018001040010201 */ uint8 ScoringEquation;
  /* offset=0x009a flags=0x0018001040010201 */ uint8 ClampMinType;
  /* offset=0x009b flags=0x0018001040010201 */ uint8 ClampMaxType;
  /* offset=0x009c flags=0x0018001040010201 */ enum EEQSNormalizationType NormalizationType;
  /* offset=0x00a0 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ScoreClampMin;
  /* offset=0x00c0 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ScoreClampMax;
  /* offset=0x00e0 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ScoringFactor;
  /* offset=0x0100 flags=0x0010008000010001 */ struct FAIDataProviderFloatValue ReferenceValue;
  /* offset=0x0120 flags=0x0018001040010201 */ bool bDefineReferenceValue;
  /* offset=0x0128 flags=0x0048001000000000 */ uint8 bWorkOnFloatValues:1;
};

class UEnvQueryTest_Distance: public UEnvQueryTest {
  /* offset=0x0129 flags=0x0018001040010201 */ uint8 TestMode;
  /* offset=0x012c flags=0x001c001040010201 */ UClass<UEnvQueryContext>* DistanceTo;
};

class UEnvQueryTest_Dot: public UEnvQueryTest {
  /* offset=0x012c flags=0x0020081000010001 */ struct FEnvDirection LineA;
  /* offset=0x013c flags=0x0020081000010001 */ struct FEnvDirection LineB;
  /* offset=0x014c flags=0x0028081040010201 */ enum EEnvTestDot TestMode;
  /* offset=0x014d flags=0x0028081040010201 */ bool bAbsoluteValue;
};

class UEnvQueryTest_GameplayTags: public UEnvQueryTest {
  /* offset=0x012c flags=0x0020080000000001 */ struct FGameplayTagQuery TagQueryToMatch;
  /* offset=0x0160 flags=0x0028081040000200 */ bool bUpdatedToUseQuery;
  /* offset=0x0161 flags=0x0028081040000200 */ enum EGameplayContainerMatchType TagsToMatch;
  /* offset=0x0164 flags=0x0020080000000000 */ struct FGameplayTagContainer GameplayTags;
};

class UEnvQueryTest_Overlap: public UEnvQueryTest {
  /* offset=0x012c flags=0x0010001000010001 */ struct FEnvOverlapData OverlapData;
};

class UEnvQueryTest_Pathfinding: public UEnvQueryTest {
  /* offset=0x0129 flags=0x0018001040010201 */ uint8 TestMode;
  /* offset=0x012c flags=0x001c001040010201 */ UClass<UEnvQueryContext>* Context;
  /* offset=0x0130 flags=0x0010008000010001 */ struct FAIDataProviderBoolValue PathFromContext;
  /* offset=0x0150 flags=0x0010048000010001 */ struct FAIDataProviderBoolValue SkipUnreachable;
  /* offset=0x0170 flags=0x001c001040010201 */ UClass<UNavigationQueryFilter>* FilterClass;
};

class UEnvQueryTest_PathfindingBatch: public UEnvQueryTest_Pathfinding {
  /* offset=0x0178 flags=0x0010048000010001 */ struct FAIDataProviderFloatValue ScanRangeMultiplier;
};

class UEnvQueryTest_Project: public UEnvQueryTest {
  /* offset=0x012c flags=0x0020081000010001 */ struct FEnvTraceData ProjectionData;
};

class UEnvQueryTest_Random: public UEnvQueryTest {
};

class UEnvQueryTest_Trace: public UEnvQueryTest {
  /* offset=0x012c flags=0x0010001000010001 */ struct FEnvTraceData TraceData;
  /* offset=0x0158 flags=0x0010008000010001 */ struct FAIDataProviderBoolValue TraceFromContext;
  /* offset=0x0178 flags=0x0010048000010001 */ struct FAIDataProviderFloatValue ItemHeightOffset;
  /* offset=0x0198 flags=0x0010048000010001 */ struct FAIDataProviderFloatValue ContextHeightOffset;
  /* offset=0x01b8 flags=0x001c001040010201 */ UClass<UEnvQueryContext>* Context;
};

class UEnvQueryTypes: public UObject {
};

class UExcitingParty_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UActivity_FeastUIBP_C* Activity_FeastUIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_exciting_party_C* bp_exciting_party;
  /* offset=0x023c flags=0x0008001040010205 */ UButton* BtnClose;
  /* offset=0x0240 flags=0x0000000000010205 */ TArray<UExcitingParty_Item_BP_C*> ItemList;
  /* offset=0x0250 flags=0x0000001000010005 */ struct FTimerHandle updateStateTimer;
  /* offset=0x0258 flags=0x0008001040010205 */ UButton* BtnRule;
  /* offset=0x025c flags=0x0008001040010205 */ UTextBlock* labelOpenTime;

  void Construct();
  void CreateExcitingItem(UActivity_FeasWind_C* uiWidget, bool isbig, UExcitingParty_Item_BP_C* CallFunc_Create_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void ExecuteUbergraph_ExcitingParty_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FClickViewBox K2Node_CreateDelegate_OutputDelegate3, FClickShareGet K2Node_CreateDelegate_OutputDelegate4, int32 ___int_Array_Index_Variable, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_exciting_party_C* K2Node_DynamicCast_AsBp_Exciting_Party, bool K2Node_DynamicCast_bSuccess, UExcitingParty_Item_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FBP_STRUCT_Exciting_Party_Info K2Node_CustomEvent_itemInfo2, int32 ___int_Loop_Counter_Variable, struct FBP_STRUCT_Exciting_Party_Info K2Node_CustomEvent_itemInfo, UExcitingParty_Item_BP_C* K2Node_CustomEvent_itemBp, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void OnClickBtnRule();
  void OnClickClose();
  void OnClickViewBox(struct FBP_STRUCT_Exciting_Party_Info itemInfo);
  void OnItemClickShareGet(struct FBP_STRUCT_Exciting_Party_Info itemInfo, UExcitingParty_Item_BP_C* ItemBP);
  void OnShareSuccess(int32 CallFunc_Subtract_IntInt_ReturnValue, UExcitingParty_Item_BP_C* CallFunc_Array_Get_Item);
  void ReleaseTimer(bool CallFunc_K2_TimerExistsHandle_ReturnValue);
  void StartTimer(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UIHide();
  void UIShow();
  void UpdateData(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UExcitingParty_Item_BP_C* CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateExcitingPartyTimeStatus();
};

class UExcitingParty_Item_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x0008001040010205 */ UButton* BtnShareGet;
  /* offset=0x0238 flags=0x0008001040010205 */ UImage* awardIcon;
  /* offset=0x023c flags=0x0000100010010205 */ FClickShareGet ClickShareGet;
  /* offset=0x0248 flags=0x0008000000010005 */ struct FBP_STRUCT_Exciting_Party_Info ItemData;
  /* offset=0x02bc flags=0x0008001040010205 */ UTextBlock* labelTarget;
  /* offset=0x02c0 flags=0x0008001040010205 */ UTextBlock* labelTime;
  /* offset=0x02c4 flags=0x0008001040010205 */ UActivity_FeasWind_C* UIBP;
  /* offset=0x02c8 flags=0x0000001040010205 */ bool isBigAward;
  /* offset=0x02cc flags=0x0008001040010205 */ UWidgetSwitcher* stateSwither;
  /* offset=0x02d0 flags=0x0008001040010205 */ UTextBlock* labelTitle;
  /* offset=0x02d4 flags=0x0008001040010205 */ UTextBlock* labelBigProgress;
  /* offset=0x02d8 flags=0x0008001040010205 */ UButton* BtnGetBig;
  /* offset=0x02dc flags=0x0008001040000205 */ UVerticalBox* ConBigProgress;
  /* offset=0x02e0 flags=0x0000100010010205 */ FClickViewBox ClickViewBox;
  /* offset=0x02ec flags=0x0008001040010205 */ UButton* BtnViewBox;
  /* offset=0x02f0 flags=0x0008001040010205 */ UTextBlock* labelItemName;
  /* offset=0x02f4 flags=0x0008001040010205 */ UTextBlock* labelBigItemName;
  /* offset=0x02f8 flags=0x0008001040010205 */ UTextBlock* TextBtnShare;
  /* offset=0x02fc flags=0x0008001040010205 */ UHorizontalBox* BigAwardGot;
  /* offset=0x0300 flags=0x0000001040010205 */ bool isShared;

  void ClickShareGet__DelegateSignature(struct FBP_STRUCT_Exciting_Party_Info itemInfo, UExcitingParty_Item_BP_C* ItemBP);
  void ClickViewBox__DelegateSignature(struct FBP_STRUCT_Exciting_Party_Info itemInfo);
  void Construct();
  void ExecuteUbergraph_ExcitingParty_Item_BP(int32 EntryPoint);
  void HideItemTip();
  void InitUIBP(UActivity_FeasWind_C* uiWidget, bool isbig, FOnButtonReleasedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonPressedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5);
  void OnShareGetClicked();
  void OnViewBoxClicked();
  void OnViewBoxPress();
  void OnViewBoxRelease();
  void SetShared();
  void ShowBoxIcon(FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ShowItemTip(FString CallFunc_GetItemTimeS_time_s, bool CallFunc_GetItemTimeS_is_have_limit, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData);
  void UpdateBigItem(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool K2Node_SwitchInteger_CmpSuccess);
  void UpdateItem(struct FBP_STRUCT_Exciting_Party_Info Info);
  void UpdateNormalItem(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue4);
};

class UExcitingPary_ViewBox_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UActivity_FeastViewBoxUIBP_C* Activity_FeastViewBoxUIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_exciting_party_C* BpExcitingParty;

  void ClearPanel();
  void Construct();
  void ExecuteUbergraph_ExcitingPary_ViewBox_BP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, Abp_exciting_party_C* K2Node_DynamicCast_AsBp_Exciting_Party, bool K2Node_DynamicCast_bSuccess);
  void HideItemTip(UCommon_Item_BP_C* Item, struct FBP_STRUCT_CommonItemData Data);
  void InitPanel(TArray<struct FBP_STRUCT_Exciting_Party_Award_Info> awardInfos, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, struct FBP_STRUCT_Exciting_Party_Award_Info CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData, int32 CallFunc_Add_IntInt_ReturnValue, FOnReleaseItemCallback K2Node_CreateDelegate_OutputDelegate, FOnPressItemCallback K2Node_CreateDelegate_OutputDelegate2, UCommon_Item_BP_C* CallFunc_Create_ReturnValue, UCommon_Item_BP_C* CallFunc_InitView_itemTarget, UWrapBoxSlot* CallFunc_AddChildWrapBox_ReturnValue);
  void ShowBox();
  void ShowItemTip(UCommon_Item_BP_C* Item, struct FBP_STRUCT_CommonItemData Data);
  void UIClose();
};

class UExpandableArea: public UWidget {
  /* offset=0x00d0 flags=0x0010000000000001 */ struct FExpandableAreaStyle Style;
  /* offset=0x01b0 flags=0x0010000000000015 */ struct FSlateBrush BorderBrush;
  /* offset=0x0218 flags=0x0010000000000015 */ struct FSlateColor BorderColor;
  /* offset=0x0234 flags=0x0018001040000215 */ bool bIsExpanded;
  /* offset=0x0238 flags=0x0018001040000215 */ float MaxHeight;
  /* offset=0x023c flags=0x0010001000000015 */ struct FMargin HeaderPadding;
  /* offset=0x024c flags=0x0010001000000015 */ struct FMargin AreaPadding;
  /* offset=0x025c flags=0x0010000010080200 */ FOnExpandableAreaExpansionChanged OnExpansionChanged;
  /* offset=0x0268 flags=0x0028081040080208 */ UWidget* HeaderContent;
  /* offset=0x026c flags=0x0028081040080208 */ UWidget* BodyContent;

  bool GetIsExpanded();
  void SetIsExpanded(bool IsExpanded);
  void SetIsExpanded_Animated(bool IsExpanded);
};

class AExponentialHeightFog: public AInfo {
  /* offset=0x02a8 flags=0x00480010400a021d */ UExponentialHeightFogComponent* Component;
  /* offset=0x02ac flags=0x0018001100000020 */ uint8 bEnabled:1;

  void OnRep_bEnabled();
};

class UExponentialHeightFogComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000215 */ float FogDensity;
  /* offset=0x0274 flags=0x0010000200000215 */ TArray<struct FCustomHeightFog> CustomHightFogDensity;
  /* offset=0x0280 flags=0x0018001240000015 */ struct FLinearColor FogInscatteringColor;
  /* offset=0x0290 flags=0x0018001040000215 */ UTextureCube* InscatteringColorCubemap;
  /* offset=0x0294 flags=0x0018001040000215 */ float InscatteringColorCubemapAngle;
  /* offset=0x0298 flags=0x0018001040000015 */ struct FLinearColor InscatteringTextureTint;
  /* offset=0x02a8 flags=0x0018001040000215 */ float FullyDirectionalInscatteringColorDistance;
  /* offset=0x02ac flags=0x0018001040000215 */ float NonDirectionalInscatteringColorDistance;
  /* offset=0x02b0 flags=0x0018001240000215 */ float DirectionalInscatteringExponent;
  /* offset=0x02b4 flags=0x0018001240000215 */ float DirectionalInscatteringStartDistance;
  /* offset=0x02b8 flags=0x0018001240000015 */ struct FLinearColor DirectionalInscatteringColor;
  /* offset=0x02c8 flags=0x0018001240000215 */ float FogHeightFalloff;
  /* offset=0x02cc flags=0x0018001240000215 */ float FogMaxOpacity;
  /* offset=0x02d0 flags=0x0018001240000215 */ float StartDistance;
  /* offset=0x02d4 flags=0x0018001040000215 */ float FogCutoffDistance;
  /* offset=0x02d8 flags=0x0018001040000215 */ bool bEnableVolumetricFog;
  /* offset=0x02dc flags=0x0018001040000215 */ float VolumetricFogScatteringDistribution;
  /* offset=0x02e0 flags=0x0018001040000015 */ struct FColor VolumetricFogAlbedo;
  /* offset=0x02e4 flags=0x0018001040000015 */ struct FLinearColor VolumetricFogEmissive;
  /* offset=0x02f4 flags=0x0018001040000215 */ float VolumetricFogExtinctionScale;
  /* offset=0x02f8 flags=0x0018001040000215 */ float VolumetricFogDistance;
  /* offset=0x02fc flags=0x0018001040000215 */ float VolumetricFogStaticLightingScatteringIntensity;
  /* offset=0x0300 flags=0x0018041040000215 */ bool bOverrideLightColorsWithFogInscatteringColors;

  void SetDirectionalInscatteringColor(struct FLinearColor Value);
  void SetDirectionalInscatteringExponent(float Value);
  void SetDirectionalInscatteringStartDistance(float Value);
  void SetFogCutoffDistance(float Value);
  void SetFogDensity(float Value);
  void SetFogHeightFalloff(float Value);
  void SetFogInscatteringColor(struct FLinearColor Value);
  void SetFogMaxOpacity(float Value);
  void SetFullyDirectionalInscatteringColorDistance(float Value);
  void SetInscatteringColorCubemap(UTextureCube* Value);
  void SetInscatteringColorCubemapAngle(float Value);
  void SetInscatteringTextureTint(struct FLinearColor Value);
  void SetNonDirectionalInscatteringColorDistance(float Value);
  void SetStartDistance(float Value);
  void SetVolumetricFog(bool bNewValue);
  void SetVolumetricFogAlbedo(struct FColor NewValue);
  void SetVolumetricFogDistance(float NewValue);
  void SetVolumetricFogEmissive(struct FLinearColor NewValue);
  void SetVolumetricFogExtinctionScale(float NewValue);
  void SetVolumetricFogScatteringDistribution(float NewValue);
};

class UExporter: public UObject {
  /* offset=0x001c flags=0x001c001040000200 */ UClass<UObject>* SupportedClass;
  /* offset=0x0020 flags=0x0018001040002200 */ UObject* ExportRootScope;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<FString> FormatExtension;
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<FString> FormatDescription;
  /* offset=0x003c flags=0x0018001040000200 */ int32 PreferredFormatIndex;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 TextIndent;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bText:1;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bSelectedOnly:1;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bForceFileOperations:1;
};

class UFPPComponent_C: public UActorComponent {
  /* offset=0x00b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00b4 flags=0x0008001040010205 */ float BoltActionFov;
  /* offset=0x00b8 flags=0x0008001040010a05 */ ABP_PlayerPawn_C* Pawn;
  /* offset=0x00bc flags=0x0000001040010205 */ bool bScoping;
  /* offset=0x00c0 flags=0x0008001040010205 */ float ThirdPersonFov;
  /* offset=0x00c4 flags=0x0008001040010205 */ float BoltActionHoldTime;
  /* offset=0x00c8 flags=0x0008001040010205 */ FName ScopeAimCameraSocketName;
  /* offset=0x00d0 flags=0x0008001040010205 */ FName FPSASocketName;
  /* offset=0x00d8 flags=0x0000000000010005 */ struct FDebugFloatHistory History_RecoilTargetY;
  /* offset=0x00f8 flags=0x0008001040010205 */ FName FPSAPistolSocketName;
  /* offset=0x0100 flags=0x0000001040010205 */ bool bTempFPP;
  /* offset=0x0101 flags=0x0000001040010205 */ bool IsTeleprotScope;

  void CameraActive(bool NewParam, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UCameraComponent*> CallFunc_GetComponentsByClass_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UCameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void ExecuteUbergraph_FPPComponent(int32 EntryPoint, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool K2Node_CustomEvent_bTeleport2, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ABP_ShootWeaponBase_C* K2Node_DynamicCast_AsBP_Shoot_Weapon_Base, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EnterState_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_CustomEvent_NewParam, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, ABP_ShootWeaponBase_C* K2Node_DynamicCast_AsBP_Shoot_Weapon_Base2, bool K2Node_DynamicCast_bSuccess3, UMeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue6, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue3, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_DoesSocketExist_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue4, bool CallFunc_IsValid_ReturnValue8, ABP_ShootWeaponBase_C* K2Node_DynamicCast_AsBP_Shoot_Weapon_Base3, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_IsLocallyControlled_ReturnValue, UAnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue10, float CallFunc_GetCurveValue_ReturnValue, struct FTransform CallFunc_TLerp_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsComponentTickEnabled_ReturnValue, bool CallFunc_IsValid_ReturnValue11, bool CallFunc_IsLocallyControlled_ReturnValue2, bool K2Node_CustomEvent_bTeleport3, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsPistol_isPistol, bool CallFunc_IsHandleInFold_ReturnValue, bool CallFunc_IsHandleInFold_ReturnValue2, float K2Node_Event_DeltaSeconds, float CallFunc_Lerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_CustomEvent_bTeleport, ASTExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue, FOnWeaponReloadStartDelegate K2Node_CreateDelegate_OutputDelegate, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue5, bool CallFunc_IsValid_ReturnValue13, UMeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue2, bool CallFunc_IsValid_ReturnValue14, struct FTransform CallFunc_K2_GetComponentToWorld_ReturnValue, struct FTransform CallFunc_GetSocketTransform_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue2, struct FVector CallFunc_BreakTransform_Location, struct FRotator CallFunc_BreakTransform_Rotation, struct FVector CallFunc_BreakTransform_Scale, bool ___bool_Variable, FName K2Node_Select_Default, bool CallFunc_K2_AttachToComponent_ReturnValue2, struct FTransform CallFunc_GetSocketTransform_ReturnValue2, struct FHitResult CallFunc_K2_SetWorldTransform_SweepHitResult, struct FVector CallFunc_BreakTransform_Location2, struct FRotator CallFunc_BreakTransform_Rotation2, struct FVector CallFunc_BreakTransform_Scale2, bool CallFunc_DoesSocketExist_ReturnValue3, float K2Node_CustomEvent_Alpha3, struct FRotator CallFunc_RLerp_ReturnValue, struct FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult, struct FVector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult, struct FTransform CallFunc_GetSocketTransform_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue2, struct FVector CallFunc_BreakTransform_Location3, struct FRotator CallFunc_BreakTransform_Rotation3, struct FVector CallFunc_BreakTransform_Scale3, float K2Node_CustomEvent_Alpha2, float CallFunc_Lerp_ReturnValue3, float K2Node_CustomEvent_Alpha, struct FRotator CallFunc_RLerp_ReturnValue2, struct FVector CallFunc_VLerp_ReturnValue2, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult2, struct FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult2);
  void FirstPerson();
  bool IsBackPackPanelOpen(ABP_STExtraPlayerController_C* self2, bool CallFunc_IsVisible_ReturnValue);
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void ReloadEvent();
  void ScopeIn(bool bTeleport);
  void ScopeInSpeedChange(ABP_STExtraPlayerController_C* Controller, UShootWeaponEntity* entity, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2);
  void ScopeInterrupt(bool bTeleport);
  void ScopeOut(bool bTeleport);
  void ScopeOutCamFOVUpdate(float Alpha);
  void ScopeOutCamLocUpdate(float Alpha);
  void ScopeOutFinished();
  void ScopeOutSpeedChange(ASTExtraPlayerController* self2, ABP_ShootWeaponBase_C* self5, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2);
  void ScopeTimelineFinished();
  void ScopeTimelineUpdate(float Alpha);
  void Scoping(bool NewParam);
  void SwitchPerson(uint8 NewParam, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AController* CallFunc_GetController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue, AController* CallFunc_GetController_ReturnValue2, USpringArmComponent* CallFunc_Array_Get_Item, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, int32 ___int_Array_Index_Variable2, bool CallFunc_Less_IntInt_ReturnValue, UCameraComponent* CallFunc_Array_Get_Item2, uint8 CallFunc_Conv_IntToByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, int32 ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2);
  void TempTransformFromFPP();
  void TempTransformToFPP();
  void isPistol(bool isPistol, float CallFunc_GetWorldDeltaSeconds_ReturnValue, struct FAnimParamList CallFunc_GetPlayerAnimParam_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
};

class UFade_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008021c */ UWidgetAnimation* FadeOut;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* FadeIn;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image;

  void UIHide();
  void UIShowFadeIn(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UIShowFadeOut(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
};

class AFakePlayerAIController: public ABaseAIController {
  /* offset=0x0368 flags=0x001c001040000201 */ UClass<ASTExtraBaseCharacter>* CharacterClass;
  /* offset=0x036c flags=0x0010000010080200 */ FFakePlayerControllerDelegate OnEnterJumping;
  /* offset=0x0381 flags=0x0028081040010201 */ bool bUseDynamicNAV;
};

class UField: public UObject {
};

class UFileMediaSource: public UBaseMediaSource {
  /* offset=0x0028 flags=0x0018010000000205 */ FString FilePath;
  /* offset=0x0034 flags=0x0018041040000205 */ bool PrecacheFile;

  void SetFilePath(FString Path);
};

class UFindSessionsCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FBlueprintFindSessionsResultDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FBlueprintFindSessionsResultDelegate OnFailure;

  UFindSessionsCallbackProxy* FindSessions(UObject* WorldContextObject, APlayerController* PlayerController, int32 MaxResults, bool bUseLAN);
  int32 GetCurrentPlayers(struct FBlueprintSessionResult Result);
  int32 GetMaxPlayers(struct FBlueprintSessionResult Result);
  int32 GetPingInMs(struct FBlueprintSessionResult Result);
  FString GetServerName(struct FBlueprintSessionResult Result);
};

class UFindTurnBasedMatchCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FOnlineTurnBasedMatchResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnlineTurnBasedMatchResult OnFailure;

  UFindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(UObject* WorldContextObject, APlayerController* PlayerController, UInterface<UTurnBasedMatchInterface>* MatchActor, int32 MinPlayers, int32 MaxPlayers, int32 PlayerGroup, bool ShowExistingMatches);
};

class UFireWeaponState: public UWeaponStateBase {
  /* offset=0x00f0 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
  /* offset=0x00f4 flags=0x0028081040000200 */ ASTExtraBaseCharacter* WeaponOwner;
};

class AFishManager: public AActor {
  /* offset=0x02a8 flags=0x0010000000000205 */ TArray<UClass<UObject>*> flockTypes;
  /* offset=0x02b4 flags=0x0010000000000205 */ TArray<float> numInFlock;
  /* offset=0x02c0 flags=0x0018001040000205 */ float minZ;
  /* offset=0x02c4 flags=0x0018001040000205 */ float maxZ;
  /* offset=0x02c8 flags=0x0018001040000205 */ float underwaterBoxLength;
  /* offset=0x02cc flags=0x0018001040000205 */ bool attachToPlayer;
  /* offset=0x02cd flags=0x0018001040000205 */ bool DebugMode;
  /* offset=0x02d0 flags=0x0018001040000205 */ UClass<UObject>* playerType;
};

class UFitingSlotItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_SlotClick;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_FittingIcon;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_SlotHoverStatus;
  /* offset=0x0240 flags=0x000a0010c008020c */ UTextBlock* TextBlock_FittingName;
  /* offset=0x0248 flags=0x0008001000010005 */ struct FItemDefineID DefineID;
  /* offset=0x0260 flags=0x0000001040010205 */ bool isTouchStart;
  /* offset=0x0261 flags=0x0008001040010205 */ uint8 DragOrigin;
  /* offset=0x0268 flags=0x0008001000010005 */ struct FItemDefineID highlightAttachID;
  /* offset=0x0280 flags=0x0008001040010205 */ UMainWeaponInfoItem_BP_C* parentWeaponInfo;
  /* offset=0x0284 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x0290 flags=0x0000100010010205 */ FItemBeDragCancel ItemBeDragCancel;

  void BndEvt__Button_SlotClick_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_FitingSlotItem_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation);
  void HighLightSocket(bool highLight, struct FItemDefineID DefineID);
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrigin);
  void ItemBeDragCancel__DelegateSignature();
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, struct FBattleItemData CallFunc_GetBattleItemByDefineID_battleItemData, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, ABP_STExtraPlayerController_C* PlayerController, struct FEventReply CallFunc_Handled_ReturnValue, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, bool CallFunc_EqualEqual_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, FString CallFunc_GetPlatformName_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, bool K2Node_SwitchString_CmpSuccess, struct FEventReply CallFunc_CaptureMouse_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue2, struct FEventReply CallFunc_CaptureMouse_ReturnValue2);
  void UpdateSlotItem(int32 resID, struct FItemDefineID DefineID, uint8 DragOrigin, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
};

class AFlightVehicle: public AActor {
};

class UFloatBinding: public UPropertyBinding {
  float GetValue();
};

class UFloatProperty: public UNumericProperty {
};

class UFloatingPawnMovement: public UPawnMovementComponent {
  /* offset=0x0114 flags=0x0018001040000205 */ float MaxSpeed;
  /* offset=0x0118 flags=0x0018001040000205 */ float Acceleration;
  /* offset=0x011c flags=0x0018001040000205 */ float Deceleration;
  /* offset=0x0120 flags=0x0018001040000205 */ float TurningBoost;
  /* offset=0x0124 flags=0x0028081000002000 */ uint8 bPositionCorrected:1;
};

class AFlockFish: public APawn {
  /* offset=0x02f4 flags=0x00480010400a021d */ USphereComponent* FishInteractionSphere;
  /* offset=0x02f8 flags=0x0018001040000205 */ bool isLeader;
  /* offset=0x02fc flags=0x0010000000000205 */ TArray<UClass<UObject>*> enemyTypes;
  /* offset=0x0308 flags=0x0010000000000205 */ TArray<UClass<UObject>*> preyTypes;
  /* offset=0x0314 flags=0x0018001040000205 */ UClass<UObject>* neighborType;
  /* offset=0x0318 flags=0x0018001040000205 */ float followDist;
  /* offset=0x031c flags=0x0018001040000205 */ float Speed;
  /* offset=0x0320 flags=0x0018001040000205 */ float MaxSpeed;
  /* offset=0x0324 flags=0x0018001040000205 */ float TurnSpeed;
  /* offset=0x0328 flags=0x0018001040000205 */ float turnFrequency;
  /* offset=0x032c flags=0x0018001040000205 */ float hungerResetTime;
  /* offset=0x0330 flags=0x0018001040000205 */ float distBehindSpeedUpRange;
  /* offset=0x0334 flags=0x0018001040000205 */ float SeperationDistanceMultiplier;
  /* offset=0x0338 flags=0x0018001040000205 */ float FleeDistanceMultiplier;
  /* offset=0x033c flags=0x0018001040000205 */ float FleeAccelerationMultiplier;
  /* offset=0x0340 flags=0x0018001040000205 */ float ChaseAccelerationMultiplier;
  /* offset=0x0344 flags=0x0018001040000205 */ float SeekDecelerationMultiplier;
  /* offset=0x0348 flags=0x0018001040000205 */ float AvoidForceMultiplier;
  /* offset=0x034c flags=0x0018001040000205 */ float AvoidanceForce;
  /* offset=0x0350 flags=0x0018001040000205 */ UClass<UObject>* playerType;
  /* offset=0x0354 flags=0x0018001040000005 */ struct FVector underwaterMin;
  /* offset=0x0360 flags=0x0018001040000005 */ struct FVector underwaterMax;
  /* offset=0x036c flags=0x0018001040000205 */ float CustomZSeekMin;
  /* offset=0x0370 flags=0x0018001040000205 */ float CustomZSeekMax;
  /* offset=0x0374 flags=0x0018001040000205 */ float NumNeighborsToEvaluate;
  /* offset=0x0378 flags=0x0018001040000205 */ float UpdateEveryTick;
  /* offset=0x038c flags=0x0018001040000205 */ bool DebugMode;

  void OnBeginOverlap(UPrimitiveComponent* activatedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void OnEndOverlap(UPrimitiveComponent* activatedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
};

class UFoliageInstancedStaticMeshComponent: public UHierarchicalInstancedStaticMeshComponent {
  /* offset=0x07a0 flags=0x0010000010080200 */ FInstancePointDamageSignature OnInstanceTakePointDamage;
  /* offset=0x07ac flags=0x0010000010080200 */ FInstanceRadialDamageSignature OnInstanceTakeRadialDamage;
};

class UFoliageStatistics: public UBlueprintFunctionLibrary {
  int32 FoliageOverlappingBoxCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, struct FBox Box);
  int32 FoliageOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius);
};

class UFoliageType: public UObject {
  /* offset=0x001c flags=0x0018001040000000 */ struct FGuid UpdateGuid;
  /* offset=0x002c flags=0x0018001040000201 */ float Density;
  /* offset=0x0030 flags=0x0018001040000201 */ float DensityAdjustmentFactor;
  /* offset=0x0034 flags=0x0018001040000201 */ float Radius;
  /* offset=0x0038 flags=0x0018001040000201 */ enum EFoliageScaling Scaling;
  /* offset=0x003c flags=0x0018000000000001 */ struct FFloatInterval ScaleX;
  /* offset=0x0044 flags=0x0018000000000001 */ struct FFloatInterval ScaleY;
  /* offset=0x004c flags=0x0018000000000001 */ struct FFloatInterval ScaleZ;
  /* offset=0x0054 flags=0x0010041000000001 */ struct FFoliageVertexColorChannelMask VertexColorMaskByChannel;
  /* offset=0x0084 flags=0x0018001060000200 */ uint8 VertexColorMask;
  /* offset=0x0088 flags=0x0018001060000200 */ float VertexColorMaskThreshold;
  /* offset=0x008c flags=0x0018001020000000 */ uint8 VertexColorMaskInvert:1;
  /* offset=0x0090 flags=0x0018000000000001 */ struct FFloatInterval ZOffset;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 AlignToNormal:1;
  /* offset=0x009c flags=0x0018001040000201 */ float AlignMaxAngle;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 RandomYaw:1;
  /* offset=0x00a4 flags=0x0018001040000201 */ float RandomPitchAngle;
  /* offset=0x00a8 flags=0x0018000000000001 */ struct FFloatInterval GroundSlopeAngle;
  /* offset=0x00b0 flags=0x0018000000000001 */ struct FFloatInterval Height;
  /* offset=0x00b8 flags=0x0010040000000201 */ TArray<FName> LandscapeLayers;
  /* offset=0x00c8 flags=0x0018001060000200 */ FName LandscapeLayer;
  /* offset=0x00d0 flags=0x0018041000000001 */ uint8 CollisionWithWorld:1;
  /* offset=0x00d4 flags=0x0018041040000001 */ struct FVector CollisionScale;
  /* offset=0x00e0 flags=0x0018041040000201 */ float MinimumLayerWeight;
  /* offset=0x00e4 flags=0x0010001040000000 */ struct FBoxSphereBounds MeshBounds;
  /* offset=0x0100 flags=0x0018001040000000 */ struct FVector LowBoundOriginRadius;
  /* offset=0x010c flags=0x0018001040000215 */ uint8 Mobility;
  /* offset=0x0110 flags=0x0018000000000001 */ struct FInt32Interval CullDistance;
  /* offset=0x0118 flags=0x0018001020000000 */ uint8 bEnableStaticLighting:1;
  /* offset=0x0118 flags=0x0018001000000015 */ uint8 CastShadow:1;
  /* offset=0x0118 flags=0x0018001000000015 */ uint8 bAffectDynamicIndirectLighting:1;
  /* offset=0x0118 flags=0x0018001000000015 */ uint8 bAffectDistanceFieldLighting:1;
  /* offset=0x0118 flags=0x0018001000000015 */ uint8 bCastDynamicShadow:1;
  /* offset=0x0118 flags=0x0018001000000015 */ uint8 bCastStaticShadow:1;
  /* offset=0x0118 flags=0x0018041000000015 */ uint8 bCastShadowAsTwoSided:1;
  /* offset=0x0118 flags=0x0018041000000015 */ uint8 bReceivesDecals:1;
  /* offset=0x0119 flags=0x0018001000000015 */ uint8 bOverrideLightMapRes:1;
  /* offset=0x011c flags=0x0018001040000215 */ int32 OverriddenLightMapRes;
  /* offset=0x0120 flags=0x0018041000000015 */ uint8 bUseAsOccluder:1;
  /* offset=0x0130 flags=0x0010000000000001 */ struct FBodyInstance BodyInstance;
  /* offset=0x0320 flags=0x0018001040000201 */ uint8 CustomNavigableGeometry;
  /* offset=0x0321 flags=0x0010041000000015 */ struct FLightingChannels LightingChannels;
  /* offset=0x0322 flags=0x0018041000000015 */ uint8 bRenderCustomDepth:1;
  /* offset=0x0324 flags=0x0018041040000215 */ int32 CustomDepthStencilValue;
  /* offset=0x0328 flags=0x0018001040000201 */ float CollisionRadius;
  /* offset=0x032c flags=0x0018001040000201 */ float ShadeRadius;
  /* offset=0x0330 flags=0x0018001040000201 */ int32 NumSteps;
  /* offset=0x0334 flags=0x0018001040000201 */ float InitialSeedDensity;
  /* offset=0x0338 flags=0x0018001040000201 */ float AverageSpreadDistance;
  /* offset=0x033c flags=0x0018001040000201 */ float SpreadVariance;
  /* offset=0x0340 flags=0x0018001040000201 */ int32 SeedsPerStep;
  /* offset=0x0344 flags=0x0018001040000201 */ int32 DistributionSeed;
  /* offset=0x0348 flags=0x0018001040000201 */ float MaxInitialSeedOffset;
  /* offset=0x034c flags=0x0018001040000201 */ bool bCanGrowInShade;
  /* offset=0x034d flags=0x0018001040000201 */ bool bSpawnsInShade;
  /* offset=0x0350 flags=0x0018001040000201 */ float MaxInitialAge;
  /* offset=0x0354 flags=0x0018001040000201 */ float MaxAge;
  /* offset=0x0358 flags=0x0018001040000201 */ float OverlapPriority;
  /* offset=0x035c flags=0x0018000000000001 */ struct FFloatInterval ProceduralScale;
  /* offset=0x0364 flags=0x0010000000000001 */ struct FRuntimeFloatCurve ScaleCurve;
  /* offset=0x03bc flags=0x0018001040000200 */ int32 ChangeCount;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyDensity:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyRadius:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyAlignToNormal:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyRandomYaw:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyScaling:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyScaleX:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyScaleY:1;
  /* offset=0x03c0 flags=0x0018001000010001 */ uint8 ReapplyScaleZ:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyRandomPitchAngle:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyGroundSlope:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyHeight:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyLandscapeLayers:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyZOffset:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyCollisionWithWorld:1;
  /* offset=0x03c1 flags=0x0018001000010001 */ uint8 ReapplyVertexColorMask:1;
  /* offset=0x03c1 flags=0x0018001000000001 */ uint8 bEnableDensityScaling:1;
};

class UFoliageType_InstancedStaticMesh: public UFoliageType {
  /* offset=0x03c4 flags=0x0018001040000201 */ UStaticMesh* Mesh;
  /* offset=0x03c8 flags=0x0010040000000201 */ TArray<UMaterialInterface*> OverrideMaterials;
  /* offset=0x03d4 flags=0x001c001040000201 */ UClass<UFoliageInstancedStaticMeshComponent>* ComponentClass;
};

class UFont: public UObject {
  /* offset=0x0020 flags=0x0018001040000201 */ enum EFontCacheType FontCacheType;
  /* offset=0x0024 flags=0x0010000000000201 */ TArray<struct FFontCharacter> Characters;
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<UTexture2D*> Textures;
  /* offset=0x003c flags=0x0018001040000200 */ int32 IsRemapped;
  /* offset=0x0040 flags=0x0018001040000201 */ float EmScale;
  /* offset=0x0044 flags=0x0018001040000201 */ float Ascent;
  /* offset=0x0048 flags=0x0018001040000201 */ float Descent;
  /* offset=0x004c flags=0x0018001040000201 */ float Leading;
  /* offset=0x0050 flags=0x0018001040000201 */ int32 Kerning;
  /* offset=0x0054 flags=0x0010000000000001 */ struct FFontImportOptionsData ImportOptions;
  /* offset=0x00e4 flags=0x0018001040002200 */ int32 NumCharacters;
  /* offset=0x00e8 flags=0x0010000000002200 */ TArray<int32> MaxCharHeight;
  /* offset=0x00f4 flags=0x0018001040000201 */ float ScalingFactor;
  /* offset=0x00f8 flags=0x0018001040000201 */ int32 LegacyFontSize;
  /* offset=0x0100 flags=0x0018001040000201 */ FName LegacyFontName;
  /* offset=0x0108 flags=0x0010000000000000 */ struct FCompositeFont CompositeFont;
};

class UFontBulkData: public UObject {
};

class UFontFace: public UObject {
  /* offset=0x0020 flags=0x0018000000000215 */ FString SourceFilename;
  /* offset=0x002c flags=0x0018001040000205 */ enum EFontHinting Hinting;
  /* offset=0x002d flags=0x0018001040000205 */ enum EFontLoadingPolicy LoadingPolicy;
  /* offset=0x002e flags=0x0018041040000205 */ enum EFontLayoutMethod LayoutMethod;
};

class UFontFaceInterface: public UInterface {
};

class UFontImportOptions: public UObject {
  /* offset=0x001c flags=0x0010000000000001 */ struct FFontImportOptionsData Data;
};

class UFontProviderInterface: public UInterface {
};

class UForceFeedbackAttenuation: public UObject {
  /* offset=0x001c flags=0x0010000000000015 */ struct FForceFeedbackAttenuationSettings Attenuation;
};

class UForceFeedbackComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000215 */ UForceFeedbackEffect* ForceFeedbackEffect;
  /* offset=0x0274 flags=0x0018001000000000 */ uint8 bAutoDestroy:1;
  /* offset=0x0274 flags=0x0018001000000000 */ uint8 bStopWhenOwnerDestroyed:1;
  /* offset=0x0274 flags=0x0018001000000005 */ uint8 bLooping:1;
  /* offset=0x0274 flags=0x0018001000000005 */ uint8 bIgnoreTimeDilation:1;
  /* offset=0x0274 flags=0x0018001000000005 */ uint8 bOverrideAttenuation:1;
  /* offset=0x0278 flags=0x0018001040000205 */ float IntensityMultiplier;
  /* offset=0x027c flags=0x0018001040000205 */ UForceFeedbackAttenuation* AttenuationSettings;
  /* offset=0x0280 flags=0x0010000000000005 */ struct FForceFeedbackAttenuationSettings AttenuationOverrides;
  /* offset=0x02fc flags=0x0010000010080200 */ FOnForceFeedbackFinished OnForceFeedbackFinished;

  void AdjustAttenuation(struct FForceFeedbackAttenuationSettings InAttenuationSettings);
  bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings OutAttenuationSettings);
  void Play(float StartTime);
  void SetForceFeedbackEffect(UForceFeedbackEffect* NewForceFeedbackEffect);
  void SetIntensityMultiplier(float NewIntensityMultiplier);
  void Stop();
};

class UForceFeedbackEffect: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FForceFeedbackChannelDetails> ChannelDetails;
  /* offset=0x0028 flags=0x0018011040020215 */ float Duration;
};

class AFpsReportActor: public AActor {
};

class UFrameGrabberProtocolSettings: public UMovieSceneCaptureProtocolSettings {
};

class UFreeCameraBtn_C: public UCustomUserWidget {
  /* offset=0x0238 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* AimControlGrid;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* BtnImg;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0250 flags=0x0000000000010005 */ struct FSlateBrush PressImg;
  /* offset=0x02b8 flags=0x0000000000010005 */ struct FSlateBrush NormalImg;
  /* offset=0x0320 flags=0x0000001040010205 */ bool CanUseFreeCam;
  /* offset=0x0321 flags=0x0000001040010205 */ bool IsFreeCamera;

  void CustomEvent();
  void ExecuteUbergraph_FreeCameraBtn(int32 EntryPoint, FOnSwitchCameraModeStartDelegate K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, uint8 K2Node_CustomEvent_CameraMode, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void OnSwitchCameraModeStart(uint8 CameraMode);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue);
  void ReceivedInitWidget();
  void StopFreeCamera(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void SwitchCameraModeScope_Aim();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void TouchStartLogic(uint8 TouchIndex, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void UIInGameEvent_BackpackOpen_StopFreeLook();
};

class UFriendsListItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBorder* Border_ItemStatus;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_Apply;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_Invite;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_OfflineShare;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_Reservation;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_Reserved;
  /* offset=0x024c flags=0x000a0010c008020c */ UCommon_Avatar_BP_C* Common_Avatar_BP;
  /* offset=0x0250 flags=0x000a0010c008020c */ UCommon_RankIntegralLevel_Style_Small_UIBP_C* Common_RankIntegralLevel_Style_Small_UIBP;
  /* offset=0x0254 flags=0x000a0010c008020c */ UGridPanel* GridPanel_WaitingIcon;
  /* offset=0x0258 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_DanInfo;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_Icon_female;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image_Icon_gender;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image_ItemBG;
  /* offset=0x0268 flags=0x000a0010c008020c */ UOverlay* Overlay_OfflineShareFather;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0278 flags=0x000a0010c008020c */ UTextBlock* TextBlock_FriendGameStatus;
  /* offset=0x027c flags=0x000a0010c008020c */ UTextBlock* TextBlock_FriendName;
  /* offset=0x0280 flags=0x000a0010c008020c */ UTextBlock* TextBlock_rank;
  /* offset=0x0284 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_ItemSize;
  /* offset=0x0288 flags=0x0000000000010005 */ struct FSlateColor IntheGame_Color;
  /* offset=0x02a4 flags=0x0000000000010005 */ struct FSlateColor Free_Color;
  /* offset=0x02c0 flags=0x0000000000010005 */ struct FSlateColor Left_Color;
  /* offset=0x02dc flags=0x0009001040000205 */ int32 ItemSizeID;
  /* offset=0x02e0 flags=0x0008001040010a05 */ Abp_teamup_friend_C* TeampUpFriendLua;
  /* offset=0x02e4 flags=0x0008000000010005 */ struct FBP_STRUCT_InviteFriendProfile ItemFrientData;
  /* offset=0x0378 flags=0x0000000000010005 */ struct FSlateColor InTeam_Color;
  /* offset=0x0394 flags=0x0008001040010205 */ int32 TimeLeft;
  /* offset=0x0398 flags=0x0008000000010205 */ FString TimeString;
  /* offset=0x03a4 flags=0x0000001040010205 */ bool Itemmatch;
  /* offset=0x03a5 flags=0x0000001040010205 */ bool ItemStatuChange;

  void BeginCountDown(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void BndEvt__Button_Add_K2Node_ComponentBoundEvent_166_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_InviteFriend_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OfflineShare_K2Node_ComponentBoundEvent_31_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Reservation_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_FriendsListItem_BP(int32 EntryPoint, FString K2Node_CustomEvent_uid, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue4);
  void HandleCountDown(bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue);
  void OnClickHead(FString UID);
  void RefreshButtonIcon(bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue3);
  void SetRank(int32 CallFunc_Max_ReturnValue, int32 CallFunc_Max_ReturnValue2);
  void SetSex(int32 sex, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void SetTeamUpLuaClass(Abp_teamup_friend_C* teamUpFriend);
  void ShowStatuInTheGame(FString CallFunc_GetLocalizeString_textValue, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue3, int32 CallFunc_Divide_IntInt_ReturnValue4, int32 CallFunc_Percent_IntInt_ReturnValue2, int32 CallFunc_Percent_IntInt_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeString_textValue2, FString CallFunc_GetLocalizeString_textValue3, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, bool CallFunc_GreaterEqual_IntInt_ReturnValue2);
  void StopCountDown();
  void UpdateItem(struct FBP_STRUCT_InviteFriendProfile FriendStructData, Abp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, FOnClickItemCallback K2Node_CreateDelegate_OutputDelegate, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);
  void UpdateItemIcon(FString CallFunc_GetLocalizeString_textValue, FString CallFunc_GetLocalizeString_textValue2, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetLocalizeString_textValue3, FString CallFunc_GetLocalizeString_textValue4, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_GetLocalizeString_textValue5, FString CallFunc_GetLocalizeString_textValue6, FText CallFunc_Conv_StringToText_ReturnValue4, FText CallFunc_Conv_StringToText_ReturnValue5, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool K2Node_SwitchInteger2_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue6);
  void UpdateStatus(struct FBP_STRUCT_InviteFriendProfile CurrentItemData);
};

class UFrontendHUD: public UObject {
  /* offset=0x001c flags=0x0028081040000200 */ UGameInstance* GameInstance;
  /* offset=0x0024 flags=0x0028080000004200 */ FString FrontendUtilsClassName;
  /* offset=0x0030 flags=0x0028081040000200 */ UFrontendUtils* Utils;
  /* offset=0x0034 flags=0x0020080000000200 */ TArray<ULogicManagerBase*> LogicManagerList;
  /* offset=0x0040 flags=0x0024080000000200 */ TMap<FName, ULogicManagerBase*> LogicManagerMap;
  /* offset=0x0080 flags=0x0018001040000214 */ FName CurrentGameStatus;
  /* offset=0x0088 flags=0x0018001040000214 */ FName PendingGameStatus;
  /* offset=0x0090 flags=0x0018000000000214 */ FString LatestGameStatusURL;
  /* offset=0x009c flags=0x0028081040000200 */ UWorld* CurrentGameStatusWorld;

  AGameMode* GetGameMode();
  UGameViewportClient* GetGameViewportClient();
  ULogicManagerBase* GetLogicManager(int32 LogicManagerIndex);
  ULogicManagerBase* GetLogicManagerByName(FName LogicManagerTagName);
  APlayerController* GetPlayerController();
  UFrontendUtils* GetUtils();
  UWorld* GetWorld();
  void OnGameViewportClientCreated();
  void OnPostLoadMapWithWorld(UWorld* World);
  void OnPreLoadMap(FString MapName);
  void SwitchGameStatus(FName GameStatus, FString Options);
};

class UFrontendUtils: public UObject {
  /* offset=0x001c flags=0x0048001040000200 */ UFrontendHUD* OwningFrontendHUD;
  /* offset=0x0090 flags=0x0018001040000214 */ FName CurrentSceneCameraName;
  /* offset=0x0098 flags=0x0040000000000200 */ TArray<ACameraActor*> SceneCameraList;
  /* offset=0x00a4 flags=0x0044000000000200 */ TMap<FName, ACameraActor*> SceneCameraMap;
  /* offset=0x01f0 flags=0x0048000000004200 */ FString GlobalUIEventDispatcherClassName;
  /* offset=0x01fc flags=0x0048001040000200 */ UClass<UObject>* GlobalUIEventDispatcherClass;
  /* offset=0x0200 flags=0x0048001040000200 */ UObject* GlobalUIEventDispatcher;
  /* offset=0x0204 flags=0x0048000000004200 */ FString GlobalUIContainerClassName;
  /* offset=0x0210 flags=0x0040000000004200 */ TArray<FName> GlobalUIContainerNames;
  /* offset=0x021c flags=0x0040008000000208 */ TMap<FName, UUAEWidgetContainer*> GlobalUIContainers;

  UUAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);
  UObject* GetGlobalUIEventDispatcher();
  UFrontendHUD* GetOwningFrontendHUD();
  bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);
  void OnAllSceneCamerasRegistered();
  void RegisterSceneCamera(FName SceneCameraName, ACameraActor* SceneCamera);
  void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);
};

class UFunction: public UStruct {
};

class UGCObjectReferencer: public UObject {
};

class UGCloudNet: public UObject {
  /* offset=0x0560 flags=0x0048001040000200 */ UGCloudSDK* _GCloudSDKInst;

  void OnAccessTokenRefreshedNotify(int32 Result);
  void OnAccountInitializeNotify(int32 Result);
  void OnAccountLoginNotify(int32 Result, FString OpenID, int32 Channel);
  void OnAccountLogoutNotify(int32 Result);
  void OnBindIntlNotify(int32 bindEventID);
  void OnGCloudConnectedNotify(int32 IsConnected, int32 nResult);
  void OnGCloudDisconnectedNotify(int32 Result);
  void OnGCloudStateChangeNotify(int32 State, int32 param1, int32 param2, int32 param3);
  void OnGroupNotify(struct FGroupInfoWrapper groupInfo);
  void OnLaunchInfo(FString roominfo);
  void OnQRCodeGenQRImg(int32 Tag, int32 ret, FString imgPath);
  void OnQuickLoginNotify(struct FWakeupInfoWrapper wakeupinfo);
  void OnReceiveDataNotify(int32 Result, TArray<uint8> msg);
  void OnShareNotify(int32 Result, int32 platform);
  void OnTConndAuthFailDelegate();
  void OnWebviewNotify(struct FWebviewInfoWrapper webviewinfo);
};

class UGCloudNotice: public UObject {
  void ClearNotice();
  UGCloudNotice* GetInstance();
  TArray<struct FNoticeInfo> GetNotice(FString Scene);
};

class UGCloudSDK: public UObject {
  /* offset=0x00e0 flags=0x0018001040004200 */ bool OpenBuglyLogReport;
};

class UGCloudSDKDelegates: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FConnectNotifyDelegate ConnectNotifyDelegate;
  /* offset=0x0028 flags=0x0010000010080200 */ FConnectStateChangedNotifyDelegate ConnectStateChangedNotifyDelegate;
  /* offset=0x0034 flags=0x0010000010080200 */ FDisconnectNotifyDelegate DisconnectNotifyDelegate;
  /* offset=0x0040 flags=0x0010000010080200 */ FReceiveDataNotifyDelegate ReceiveDataNotifyDelegate;
  /* offset=0x004c flags=0x0010000010080200 */ FAccountInitializeNotifyDelegate AccountInitializeNotifyDelegate;
  /* offset=0x0058 flags=0x0010000010080200 */ FAccountLoginNotifyDelegate AccountLoginNotifyDelegate;
  /* offset=0x0064 flags=0x0010000010080200 */ FAccessTokenRefreshedNotifyDelegate AccessTokenRefreshedNotifyDelegate;
  /* offset=0x0070 flags=0x0010000010080200 */ FAccountLogoutNotifyDelegate AccountLogoutNotifyDelegate;
  /* offset=0x007c flags=0x0010000010080200 */ FShareNotifyDelegate ShareNotifyDelegate;
  /* offset=0x0088 flags=0x0010000010080200 */ FGroupNotifyDelegate GroupNotifyDelegate;
  /* offset=0x0094 flags=0x0010000010080200 */ FQuickLoginNotifyDelegate QuickLoginNotifyDelegate;
  /* offset=0x00a0 flags=0x0010000010080200 */ FQRCodeGenQRImgDelegate QRCodeGenQRImgDelegate;
  /* offset=0x00ac flags=0x0010000010080200 */ FQRCodeLaunchDelegate QRCodeLaunchDelegate;
  /* offset=0x00b8 flags=0x0010000010080200 */ FWebviewNotifyDelegate WebviewNotifyDelegate;
  /* offset=0x00c4 flags=0x0010000010080200 */ FTConndAuthFailDelegate TConndAuthFailDelegate;
};

class UGDolphinUpdater: public UObject {
  /* offset=0x004c flags=0x0048000000004200 */ FString AppStoreUrl;
  /* offset=0x0058 flags=0x0048000000004200 */ FString GooglePlayUrl;
  /* offset=0x0064 flags=0x0048001040004200 */ bool Disable;
  /* offset=0x0068 flags=0x0048000000004200 */ FString UpdateUrl;
  /* offset=0x0074 flags=0x0048000000004200 */ FString PreUpdateUrl;
  /* offset=0x0080 flags=0x0048001040004200 */ uint32 UpdateChannel;
  /* offset=0x0084 flags=0x0048001040004200 */ uint32 UpdateChannelIOS;
  /* offset=0x0088 flags=0x0048001040004200 */ uint32 UpdateChannelAndroid;
  /* offset=0x008c flags=0x0048001040004200 */ bool PreUpdate;
  /* offset=0x0090 flags=0x0048000000004200 */ FString UpdateInfoPath;
  /* offset=0x009c flags=0x0048001040004200 */ bool OpenDebugLog;

  void CancelUpdate();
  void ContinueUpdate();
  void FinishUpdate();
  int32 GetCurStage(float percent, int32 GetCurVal, int32 GetMaxVal);
  void Install();
  bool IsExamine();
  bool IsGrayUpdate();
  bool IsUpdating();
  void StartAppUpdate();
};

class UGMCheatManager: public UCheatManager {
  void AutoSetPlayerLocation(bool bEnable);
  void ForceEndInputForAppWillDeactivate();
  void ForceGC();
  void GMDecreaseHealth();
  void GMIOSFrameRateLock(int32 FrameRateLock);
  void GMInvincible(bool IsInvincible);
  void GMSetCircleTime(float CDTime, float LastTime);
  void GMSetHealth(float Val);
  void GMSetJoystickActivatedRange(bool IsNeedActivatedRange, float ActivatedRange);
  void GMSetJoystickEightDirection(bool IsNeedEightDirection);
  void GMSetSpeed(float WalkSpeed);
  void GMSpeedUp();
  void GMSuicide();
  void GetGVMemberID(int32 memberID);
  void PrintAllAnim();
  void PrintWeaponAllState();
  void SetAnimEnable(bool Enable);
  void SetCameraLagEnable(bool Enable);
  void SetGVMemberID(int32 memberID);
  void SpawnBotForTest(int32 Num);
  void SpawnFakePlayer(int32 Num);
  void TeleportTo(float X, float Y, float Z);
  void TestGameplayDataRecord(int32 UID, int32 RecordType);
  void TestWeaponAttachment(bool bEquip);
  void TogglePawnInfo();
  void ToggleShootVertify();
};

class UGMUI_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* AddBtn;
  /* offset=0x0238 flags=0x000a0010c008020c */ UEditableTextBox* AddCount;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* AimPitchButton;
  /* offset=0x0240 flags=0x000a0010c008020c */ UEditableTextBox* AimPitchTextBox;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* AimScreenMoveXAdditionalSpeedBtn;
  /* offset=0x0248 flags=0x000a0010c008020c */ UEditableTextBox* AimScreenMoveXAdditionalSpeedTxt;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* AimScreenMoveYAdditionalSpeedBtn;
  /* offset=0x0250 flags=0x000a0010c008020c */ UEditableTextBox* AimScreenMoveYAdditionalSpeedTxt;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* AimYawButton;
  /* offset=0x0258 flags=0x000a0010c008020c */ UEditableTextBox* AimYawTextBox;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* ApplyOperatingRule3Btn;
  /* offset=0x0260 flags=0x000a0010c008020c */ UEditableTextBox* AutoAimConstantPowerBaseText;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* AutoAimOnlyInTouchBtn;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* AutoAimOnlyOnFireBtn;
  /* offset=0x026c flags=0x000a0010c008020c */ UEditableTextBox* AutoAimPowerBaseText;
  /* offset=0x0270 flags=0x000a0010c008020c */ UButton* AutoAimTypeBtn;
  /* offset=0x0274 flags=0x000a0010c008020c */ UEditableTextBox* AutoAimTypeTextBox;
  /* offset=0x0278 flags=0x000a0010c008020c */ UButton* BaseScreenMoveXSpeedBtn;
  /* offset=0x027c flags=0x000a0010c008020c */ UEditableTextBox* BaseScreenMoveXSpeedTxt;
  /* offset=0x0280 flags=0x000a0010c008020c */ UButton* BaseScreenMoveYSpeedBtn;
  /* offset=0x0284 flags=0x000a0010c008020c */ UEditableTextBox* BaseScreenMoveYSpeedTxt;
  /* offset=0x0288 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x028c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0290 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0294 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0298 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x029c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02ac flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02bc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02cc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02dc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02ec flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x02fc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0300 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0304 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0308 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x030c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0310 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0314 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0318 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x031c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0320 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0324 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0328 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x032c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0330 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0334 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0338 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x033c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0340 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0344 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0348 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x034c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0350 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0354 flags=0x000a0010c008020c */ UButton* Button_*;
  /* offset=0x0358 flags=0x000a0010c008020c */ UButton* Button_AILocation;
  /* offset=0x035c flags=0x000a0010c008020c */ UButton* Button_CircleCDTime;
  /* offset=0x0360 flags=0x000a0010c008020c */ UButton* Button_CircleTime;
  /* offset=0x0364 flags=0x000a0010c008020c */ UButton* Button_Engine;
  /* offset=0x0368 flags=0x000a0010c008020c */ UButton* Button_FPS;
  /* offset=0x036c flags=0x000a0010c008020c */ UButton* Button_Game;
  /* offset=0x0370 flags=0x000a0010c008020c */ UButton* Button_GetPlayer;
  /* offset=0x0374 flags=0x000a0010c008020c */ UButton* Button_GetVehicleHealth;
  /* offset=0x0378 flags=0x000a0010c008020c */ UButton* Button_MaterialQualityLevel;
  /* offset=0x037c flags=0x000a0010c008020c */ UButton* Button_Memory;
  /* offset=0x0380 flags=0x000a0010c008020c */ UButton* Button_OpenMapLocation;
  /* offset=0x0384 flags=0x000a0010c008020c */ UButton* Button_Particles;
  /* offset=0x0388 flags=0x000a0010c008020c */ UButton* Button_PlayerLocation;
  /* offset=0x038c flags=0x000a0010c008020c */ UButton* Button_Positin_End;
  /* offset=0x0390 flags=0x000a0010c008020c */ UButton* Button_Position;
  /* offset=0x0394 flags=0x000a0010c008020c */ UButton* Button_Result;
  /* offset=0x0398 flags=0x000a0010c008020c */ UButton* Button_SceneRendering;
  /* offset=0x039c flags=0x000a0010c008020c */ UButton* Button_SetHealth;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UButton* Button_SpawnVehicle;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03ac flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03bc flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03c8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03cc flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03d4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03d8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03dc flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox;
  /* offset=0x03e0 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_AILocation;
  /* offset=0x03e4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_CircleCDTime;
  /* offset=0x03e8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_CircleTime;
  /* offset=0x03ec flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_GetPlayer;
  /* offset=0x03f0 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_GetVehicleHealth;
  /* offset=0x03f4 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_Location;
  /* offset=0x03f8 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_OpenMapLocation;
  /* offset=0x03fc flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_PlayerLocation;
  /* offset=0x0400 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_Position;
  /* offset=0x0404 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_Result;
  /* offset=0x0408 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_Result1;
  /* offset=0x040c flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_SetHealth;
  /* offset=0x0410 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_SpawnVehicle;
  /* offset=0x0414 flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_WalkSpeed;
  /* offset=0x0418 flags=0x000a0010c008020c */ UButton* EditCustomUI;
  /* offset=0x041c flags=0x000a0010c008020c */ UButton* ExitButton;
  /* offset=0x0420 flags=0x000a0010c008020c */ UTextBlock* FireAutoAim;
  /* offset=0x0424 flags=0x000a0010c008020c */ UButton* GrassButton;
  /* offset=0x0428 flags=0x000a0010c008020c */ UTextBlock* GrassSettingsText;
  /* offset=0x042c flags=0x000a0010c008020c */ UButton* HidePartBtn;
  /* offset=0x0430 flags=0x000a0010c008020c */ UEditableTextBox* HidePartId;
  /* offset=0x0434 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0438 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x043c flags=0x000a0010c008020c */ UTextBlock* IntouchText;
  /* offset=0x0440 flags=0x000a0010c008020c */ UTextBlock* IOSFPS;
  /* offset=0x0444 flags=0x000a0010c008020c */ UEditableTextBox* MaterialQualityLevelVar;
  /* offset=0x0448 flags=0x000a0010c008020c */ UButton* Mortal;
  /* offset=0x044c flags=0x000a0010c008020c */ UTextBlock* MotalText;
  /* offset=0x0450 flags=0x000a0010c008020c */ UTextBlock* MotionText;
  /* offset=0x0454 flags=0x000a0010c008020c */ UButton* MoveCameraMinDistanceThresholdBtn;
  /* offset=0x0458 flags=0x000a0010c008020c */ UEditableTextBox* MoveCameraMinDistanceThresholdText;
  /* offset=0x045c flags=0x000a0010c008020c */ UButton* MoveCameraMinTimeThresholdBtn;
  /* offset=0x0460 flags=0x000a0010c008020c */ UEditableTextBox* MoveCameraMinTimeThresholdText;
  /* offset=0x0464 flags=0x000a0010c008020c */ UButton* PitchRateButton;
  /* offset=0x0468 flags=0x000a0010c008020c */ UEditableTextBox* PitchRateTextBox;
  /* offset=0x046c flags=0x000a0010c008020c */ UButton* PitchThButton;
  /* offset=0x0470 flags=0x000a0010c008020c */ UEditableTextBox* PitchThTextBox;
  /* offset=0x0474 flags=0x000a0010c008020c */ UTextBlock* RcityWeatherText;
  /* offset=0x0478 flags=0x000a0010c008020c */ UButton* RemoveBtn;
  /* offset=0x047c flags=0x000a0010c008020c */ UEditableTextBox* removeCount;
  /* offset=0x0480 flags=0x000a0010c008020c */ UTextBlock* ShowNameText;
  /* offset=0x0484 flags=0x000a0010c008020c */ UButton* ShowPartBtn;
  /* offset=0x0488 flags=0x000a0010c008020c */ UEditableTextBox* ShowPartId;
  /* offset=0x048c flags=0x000a0010c008020c */ UButton* SpeedUp;
  /* offset=0x0490 flags=0x000a0010c008020c */ UTextBlock* SpeedUpText;
  /* offset=0x0494 flags=0x000a0010c008020c */ UButton* Suicide;
  /* offset=0x0498 flags=0x000a0010c008020c */ UButton* SwitchClassBtn;
  /* offset=0x049c flags=0x000a0010c008020c */ UEditableTextBox* SwitchClassText;
  /* offset=0x04a0 flags=0x000a0010c008020c */ UButton* SwitchScreenMoveSpeedUpMode;
  /* offset=0x04a4 flags=0x000a0010c008020c */ UEditableTextBox* SwitchStateText;
  /* offset=0x04a8 flags=0x000a0010c008020c */ UButton* SwtichStateBtn;
  /* offset=0x04ac flags=0x000a0010c008020c */ UButton* Tab0Button;
  /* offset=0x04b0 flags=0x000a0010c008020c */ UButton* Tab1Button;
  /* offset=0x04b4 flags=0x000a0010c008020c */ UButton* Tab2Button;
  /* offset=0x04b8 flags=0x000a0010c008020c */ UButton* Tab3Button;
  /* offset=0x04bc flags=0x000a0010c008020c */ UButton* Tab4Button;
  /* offset=0x04c0 flags=0x000a0010c008020c */ UButton* Tab5Button;
  /* offset=0x04c4 flags=0x000a0010c008020c */ UButton* TenPercentDamage;
  /* offset=0x04c8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04cc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04d0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04d4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04d8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04dc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04e0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04e4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04e8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04ec flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04fc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0500 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0504 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0508 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x050c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0510 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0514 flags=0x000a0010c008020c */ UButton* TouchAimPitchButton;
  /* offset=0x0518 flags=0x000a0010c008020c */ UEditableTextBox* TouchAimPitchTextBox;
  /* offset=0x051c flags=0x000a0010c008020c */ UButton* TouchAimYawButton;
  /* offset=0x0520 flags=0x000a0010c008020c */ UEditableTextBox* TouchAimYawTextBox;
  /* offset=0x0524 flags=0x000a0010c008020c */ UButton* TouchPitchButton;
  /* offset=0x0528 flags=0x000a0010c008020c */ UEditableTextBox* TouchPitchTextBox;
  /* offset=0x052c flags=0x000a0010c008020c */ UButton* TouchYawButton;
  /* offset=0x0530 flags=0x000a0010c008020c */ UEditableTextBox* TouchYawTextBox;
  /* offset=0x0534 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0538 flags=0x000a0010c008020c */ UButton* YawRateButton;
  /* offset=0x053c flags=0x000a0010c008020c */ UEditableTextBox* YawRateTextBox;
  /* offset=0x0540 flags=0x000a0010c008020c */ UButton* YawThButton;
  /* offset=0x0544 flags=0x000a0010c008020c */ UEditableTextBox* YawThTextBox;
  /* offset=0x0548 flags=0x0000001040010205 */ bool isSpeedUpClicked;
  /* offset=0x054c flags=0x0008000000010205 */ FString GrassTextValue;
  /* offset=0x0558 flags=0x0008001040010205 */ float CurSpeed;
  /* offset=0x055c flags=0x0000000000010005 */ FText IOSFPSValue;
  /* offset=0x0568 flags=0x0008001040010205 */ int32 TestCount;
  /* offset=0x056c flags=0x0000001040010005 */ struct FRotator PlayerRotation;
  /* offset=0x0578 flags=0x0000001040010205 */ bool TestFirstTime;
  /* offset=0x057c flags=0x0008001040010005 */ struct FVector PlayerRightVect;
  /* offset=0x0588 flags=0x0008001040010205 */ int32 col;
  /* offset=0x058c flags=0x0008001040010205 */ int32 TestPawnIndex;
  /* offset=0x0590 flags=0x0008001040010005 */ struct FVector2D CurJSCenter;
  /* offset=0x0598 flags=0x0008000000010205 */ FString CmdStr;

  void ApplyCustomUI();
  void BndEvt__AimScreenMoveXAdditionalSpeedBtn_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__AimScreenMoveYAdditionalSpeedBtn_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__AutoAimOnlyInTouchBtn_K2Node_ComponentBoundEvent_324_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__AutoAimTypeBtn_K2Node_ComponentBoundEvent_841_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BaseScreenMoveXSpeedBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BaseScreenMoveYSpeedBtn_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_134_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_11_K2Node_ComponentBoundEvent_1088_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_11_K2Node_ComponentBoundEvent_183_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_11_K2Node_ComponentBoundEvent_1913_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_11_K2Node_ComponentBoundEvent_438_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_12_K2Node_ComponentBoundEvent_235_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_12_K2Node_ComponentBoundEvent_768_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_13_K2Node_ComponentBoundEvent_691_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_14_K2Node_ComponentBoundEvent_287_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_15_K2Node_ComponentBoundEvent_256_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_16_K2Node_ComponentBoundEvent_116_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_17_K2Node_ComponentBoundEvent_500_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_183_K2Node_ComponentBoundEvent_270_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_184_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_186_K2Node_ComponentBoundEvent_152_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_18_K2Node_ComponentBoundEvent_767_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_19_K2Node_ComponentBoundEvent_128_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_215_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_384_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_20_K2Node_ComponentBoundEvent_1006_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_21_K2Node_ComponentBoundEvent_1261_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_22_K2Node_ComponentBoundEvent_2170_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_24_K2Node_ComponentBoundEvent_164_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_25_K2Node_ComponentBoundEvent_469_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_26_K2Node_ComponentBoundEvent_720_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_27_K2Node_ComponentBoundEvent_520_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_28_K2Node_ComponentBoundEvent_1392_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_29_K2Node_ComponentBoundEvent_2319_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_2_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_30_K2Node_ComponentBoundEvent_2671_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_31_K2Node_ComponentBoundEvent_499_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_32_K2Node_ComponentBoundEvent_718_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_33_K2Node_ComponentBoundEvent_569_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_34_K2Node_ComponentBoundEvent_612_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_35_K2Node_ComponentBoundEvent_314_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_36_K2Node_ComponentBoundEvent_1138_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_37_K2Node_ComponentBoundEvent_644_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_38_K2Node_ComponentBoundEvent_880_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_3_K2Node_ComponentBoundEvent_106_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_40_K2Node_ComponentBoundEvent_286_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_41_K2Node_ComponentBoundEvent_379_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_42_K2Node_ComponentBoundEvent_589_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_44_K2Node_ComponentBoundEvent_488_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_45_K2Node_ComponentBoundEvent_2658_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_46_K2Node_ComponentBoundEvent_513_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_47_K2Node_ComponentBoundEvent_626_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_4_K2Node_ComponentBoundEvent_115_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_5_K2Node_ComponentBoundEvent_200_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_6_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_7_K2Node_ComponentBoundEvent_277_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_7_K2Node_ComponentBoundEvent_68_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_AILocation_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CircleCDTime_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CircleTime_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_GetPlayer_K2Node_ComponentBoundEvent_665_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_GetVehicleHealth_K2Node_ComponentBoundEvent_1222_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OpenMapLocation_K2Node_ComponentBoundEvent_2139_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_PlayerLocation_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Positin_End_K2Node_ComponentBoundEvent_455_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Position_K2Node_ComponentBoundEvent_1000_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Result_K2Node_ComponentBoundEvent_1691_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SetHealth_K2Node_ComponentBoundEvent_831_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SpawnVehicle_K2Node_ComponentBoundEvent_548_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__ExitButton_K2Node_ComponentBoundEvent_467_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__GrassButton_K2Node_ComponentBoundEvent_3427_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Mortal_K2Node_ComponentBoundEvent_698_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__MoveCameraMinDistanceThresholdBtn_K2Node_ComponentBoundEvent_1050_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__MoveCameraMinTimeThresholdBtn_K2Node_ComponentBoundEvent_1302_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__PitchRateButton_K2Node_ComponentBoundEvent_260_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__PitchThButton_14_K2Node_ComponentBoundEvent_1132_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Restart_K2Node_ComponentBoundEvent_797_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__SpeedUp_K2Node_ComponentBoundEvent_762_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Suicide_K2Node_ComponentBoundEvent_729_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__SwitchScreenMoveSpeedUpMode_K2Node_ComponentBoundEvent_89_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Tab1Button_K2Node_ComponentBoundEvent_503_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Tab1Button_K2Node_ComponentBoundEvent_569_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Tab2Button_K2Node_ComponentBoundEvent_2348_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Tab3Button_K2Node_ComponentBoundEvent_2457_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Tab4Button_K2Node_ComponentBoundEvent_2618_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__TenPercentDamage_K2Node_ComponentBoundEvent_661_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__TouchAimPitchButton_20_K2Node_ComponentBoundEvent_1305_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__TouchAimYawButton_19_K2Node_ComponentBoundEvent_1248_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__TouchPitchButton_14_K2Node_ComponentBoundEvent_1194_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__TouchYawButton_13_K2Node_ComponentBoundEvent_1141_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__YawThButton_13_K2Node_ComponentBoundEvent_1183_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_GMUI(int32 EntryPoint, APlayerController* CallFunc_GetPlayerController_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Array_Index_Variable, APlayerController* CallFunc_GetPlayerController_ReturnValue2, APawn* CallFunc_K2_GetPawn_ReturnValue2, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character2, bool K2Node_DynamicCast_bSuccess2, UUIElemLayout_BP_C* CallFunc_Create_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue2, bool ___bool_Variable2, bool CallFunc_Not_PreBool_ReturnValue3, struct FGM K2Node_MakeStruct_GM, struct FGM K2Node_MakeStruct_GM2, APlayerController* CallFunc_GetPlayerController_ReturnValue3, APlayerController* CallFunc_GetPlayerController_ReturnValue4, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsAGMPlayer_ReturnValue, bool CallFunc_IsAGMPlayer_ReturnValue2, APlayerController* CallFunc_GetPlayerController_ReturnValue5, APlayerController* CallFunc_GetPlayerController_ReturnValue6, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_IsAGMPlayer_ReturnValue3, APawn* CallFunc_K2_GetPawn_ReturnValue3, APlayerController* CallFunc_GetPlayerController_ReturnValue7, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character3, bool K2Node_DynamicCast_bSuccess7, APawn* CallFunc_K2_GetPawn_ReturnValue4, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character4, bool K2Node_DynamicCast_bSuccess8, uint8 ___byte_Variable, bool CallFunc_Not_PreBool_ReturnValue4, APlayerController* CallFunc_GetPlayerController_ReturnValue8, APawn* CallFunc_K2_GetPawn_ReturnValue5, APlayerController* CallFunc_GetPlayerController_ReturnValue9, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, APawn* CallFunc_K2_GetPawn_ReturnValue6, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess9, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character5, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_Not_PreBool_ReturnValue5, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsValid_ReturnValue3, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsAGMPlayer_ReturnValue4, FString CallFunc_MakeLiteralString_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, FText CallFunc_Conv_FloatToText_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue2, FText CallFunc_Conv_FloatToText_ReturnValue3, FText CallFunc_Conv_FloatToText_ReturnValue4, FText CallFunc_Conv_FloatToText_ReturnValue5, FText CallFunc_Conv_FloatToText_ReturnValue6, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess13, APlayerController* CallFunc_GetPlayerController_ReturnValue10, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess14, bool CallFunc_IsAGMPlayer_ReturnValue5, bool CallFunc_IsAGMPlayer_ReturnValue6, bool CallFunc_Not_PreBool_ReturnValue6, bool K2Node_MultiGate_FirstRun, int32 K2Node_MultiGate_Data, bool K2Node_MultiGate_ScratchBool, int32 K2Node_MultiGate_ScratchIndex, APlayerController* CallFunc_GetPlayerController_ReturnValue11, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsAGMPlayer_ReturnValue7, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_IsAGMPlayer_ReturnValue8, float CallFunc_SetMotionConfig_out, float CallFunc_SetMotionConfig_out2, float CallFunc_SetMotionConfig_out3, float CallFunc_SetMotionConfig_out4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue4, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_IsAGMPlayer_ReturnValue9, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess18, APlayerController* CallFunc_GetOwningPlayer_ReturnValue5, bool CallFunc_IsAGMPlayer_ReturnValue10, bool CallFunc_IsValid_ReturnValue8, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess19, bool CallFunc_IsAGMPlayer_ReturnValue11, FText CallFunc_GetText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue6, FString CallFunc_MakeLiteralString_ReturnValue2, bool CallFunc_IsValid_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_MakeLiteralFloat_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess20, bool CallFunc_IsAGMPlayer_ReturnValue12, FText CallFunc_GetText_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue3, TArray<ABP_radiation_C*> CallFunc_GetAllActorsOfClass_OutActors, FString CallFunc_MakeLiteralString_ReturnValue3, ABP_radiation_C* CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_MakeLiteralFloat_ReturnValue3, bool CallFunc_IsVisible_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, USTExtraGlobalData* CallFunc_STExtraGlobalDataInstance_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue7, USTExtraGlobalData* CallFunc_STExtraGlobalDataInstance_ReturnValue2, USTExtraGlobalData* CallFunc_STExtraGlobalDataInstance_ReturnValue3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue8, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess21, FText CallFunc_GetText_ReturnValue4, bool CallFunc_IsAGMPlayer_ReturnValue13, FString CallFunc_Conv_TextToString_ReturnValue4, FString CallFunc_MakeLiteralString_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_MakeLiteralFloat_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue9, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess22, FText CallFunc_GetText_ReturnValue5, bool CallFunc_IsAGMPlayer_ReturnValue14, FString CallFunc_Conv_TextToString_ReturnValue5, FString CallFunc_MakeLiteralString_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue5, APlayerController* CallFunc_GetOwningPlayer_ReturnValue10, float CallFunc_MakeLiteralFloat_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess23, bool CallFunc_IsAGMPlayer_ReturnValue15, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Greater_FloatFloat_ReturnValue4, FText CallFunc_GetText_ReturnValue6, FString CallFunc_Conv_TextToString_ReturnValue6, APlayerController* CallFunc_GetOwningPlayer_ReturnValue11, FString CallFunc_MakeLiteralString_ReturnValue6, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess24, float CallFunc_Conv_StringToFloat_ReturnValue6, bool CallFunc_IsAGMPlayer_ReturnValue16, float CallFunc_MakeLiteralFloat_ReturnValue6, struct FVector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue5, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, FText CallFunc_GetText_ReturnValue7, FString CallFunc_Conv_TextToString_ReturnValue7, APlayerController* CallFunc_GetOwningPlayer_ReturnValue12, FString CallFunc_MakeLiteralString_ReturnValue7, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess25, float CallFunc_Conv_StringToFloat_ReturnValue7, bool CallFunc_IsAGMPlayer_ReturnValue17, float CallFunc_MakeLiteralFloat_ReturnValue7, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue6, bool CallFunc_Not_PreBool_ReturnValue7, APlayerController* CallFunc_GetPlayerController_ReturnValue12, bool CallFunc_IsValid_ReturnValue10, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess26, bool CallFunc_IsAGMPlayer_ReturnValue18, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue13, bool CallFunc_IsValid_ReturnValue11, float CallFunc_SetMotionConfig_out5, bool CallFunc_IsValid_ReturnValue12, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller15, bool K2Node_DynamicCast_bSuccess27, bool CallFunc_IsAGMPlayer_ReturnValue19, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller16, bool K2Node_DynamicCast_bSuccess28, bool CallFunc_IsAGMPlayer_ReturnValue20, float CallFunc_SetMotionConfig_out6, float CallFunc_SetMotionConfig_out7, float CallFunc_SetMotionConfig_out8, APlayerController* CallFunc_GetPlayerController_ReturnValue14, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller17, bool K2Node_DynamicCast_bSuccess29, bool CallFunc_IsAGMPlayer_ReturnValue21, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller18, bool K2Node_DynamicCast_bSuccess30, bool CallFunc_IsAGMPlayer_ReturnValue22, APlayerController* CallFunc_GetPlayerController_ReturnValue15, float CallFunc_SetMotionConfig_out9, bool CallFunc_IsValid_ReturnValue15, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller19, bool K2Node_DynamicCast_bSuccess31, bool CallFunc_IsAGMPlayer_ReturnValue23, APlayerController* CallFunc_GetPlayerController_ReturnValue16, bool CallFunc_IsValid_ReturnValue16, float CallFunc_SetMotionConfig_out10, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller20, bool K2Node_DynamicCast_bSuccess32, bool CallFunc_IsAGMPlayer_ReturnValue24, APlayerController* CallFunc_GetOwningPlayer_ReturnValue13, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller21, bool K2Node_DynamicCast_bSuccess33, bool CallFunc_IsAGMPlayer_ReturnValue25, bool CallFunc_IsValid_ReturnValue17, APlayerController* CallFunc_GetOwningPlayer_ReturnValue14, APlayerController* CallFunc_GetPlayerController_ReturnValue17, bool CallFunc_IsValid_ReturnValue18, APawn* CallFunc_K2_GetPawn_ReturnValue7, ASTExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character6, bool K2Node_DynamicCast_bSuccess34, APlayerController* CallFunc_GetOwningPlayer_ReturnValue15, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller22, bool K2Node_DynamicCast_bSuccess35, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller23, bool K2Node_DynamicCast_bSuccess36, bool CallFunc_IsAGMPlayer_ReturnValue26, bool CallFunc_IsAGMPlayer_ReturnValue27, APlayerController* CallFunc_GetOwningPlayer_ReturnValue16, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller24, bool K2Node_DynamicCast_bSuccess37, FText CallFunc_GetText_ReturnValue8, bool CallFunc_IsAGMPlayer_ReturnValue28, FString CallFunc_Conv_TextToString_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue8, APlayerController* CallFunc_GetOwningPlayer_ReturnValue17, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller25, bool K2Node_DynamicCast_bSuccess38, FText CallFunc_GetText_ReturnValue9, bool CallFunc_IsAGMPlayer_ReturnValue29, FString CallFunc_Conv_TextToString_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue9, APlayerController* CallFunc_GetOwningPlayer_ReturnValue18, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller26, bool K2Node_DynamicCast_bSuccess39, bool CallFunc_IsAGMPlayer_ReturnValue30, bool CallFunc_NotEqual_ByteByte_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue19, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller27, bool K2Node_DynamicCast_bSuccess40, bool CallFunc_IsAGMPlayer_ReturnValue31, APlayerController* CallFunc_GetOwningPlayer_ReturnValue20, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller28, bool K2Node_DynamicCast_bSuccess41, FText CallFunc_GetText_ReturnValue10, bool CallFunc_IsAGMPlayer_ReturnValue32, FString CallFunc_Conv_TextToString_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue10, APlayerController* CallFunc_GetOwningPlayer_ReturnValue21, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller29, bool K2Node_DynamicCast_bSuccess42, bool CallFunc_IsAGMPlayer_ReturnValue33, FText CallFunc_GetText_ReturnValue11, FString CallFunc_Conv_TextToString_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue11, uint8 ___byte_Variable2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue22, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller30, bool K2Node_DynamicCast_bSuccess43, APlayerController* CallFunc_GetOwningPlayer_ReturnValue23, bool CallFunc_IsAGMPlayer_ReturnValue34, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller31, bool K2Node_DynamicCast_bSuccess44, bool CallFunc_IsAGMPlayer_ReturnValue35, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_GetText_ReturnValue12, FString CallFunc_Conv_TextToString_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue12, APlayerController* CallFunc_GetPlayerController_ReturnValue18, FText CallFunc_GetText_ReturnValue13, APlayerController* CallFunc_GetOwningPlayer_ReturnValue24, FString CallFunc_Conv_TextToString_ReturnValue13, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller32, bool K2Node_DynamicCast_bSuccess45, TArray<FString> K2Node_MakeArray_Array, bool CallFunc_IsAGMPlayer_ReturnValue36, FString CallFunc_JoinStringArray_ReturnValue, bool CallFunc_IsValid_ReturnValue19, APlayerController* CallFunc_GetOwningPlayer_ReturnValue25, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller33, bool K2Node_DynamicCast_bSuccess46, bool CallFunc_IsAGMPlayer_ReturnValue37, bool CallFunc_IsValid_ReturnValue20, APlayerController* CallFunc_GetOwningPlayer_ReturnValue26, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller34, bool K2Node_DynamicCast_bSuccess47, bool CallFunc_IsAGMPlayer_ReturnValue38, FText CallFunc_Conv_FloatToText_ReturnValue7, FText CallFunc_Conv_FloatToText_ReturnValue8, APlayerController* CallFunc_GetOwningPlayer_ReturnValue27, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller35, bool K2Node_DynamicCast_bSuccess48, bool CallFunc_IsAGMPlayer_ReturnValue39, FText CallFunc_GetText_ReturnValue14, FString CallFunc_Conv_TextToString_ReturnValue14, APlayerController* CallFunc_GetOwningPlayer_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue13, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller36, bool K2Node_DynamicCast_bSuccess49, bool CallFunc_IsAGMPlayer_ReturnValue40, FText CallFunc_GetText_ReturnValue15, FString CallFunc_Conv_TextToString_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue14, FText CallFunc_GetText_ReturnValue16, FString CallFunc_Conv_TextToString_ReturnValue16, APlayerController* CallFunc_GetOwningPlayer_ReturnValue29, FName CallFunc_Conv_StringToName_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller37, bool K2Node_DynamicCast_bSuccess50, TArray<AActor*> CallFunc_GetAllActorsWithTag_OutActors, APawn* CallFunc_K2_GetPawn_ReturnValue8, AActor* CallFunc_Array_Get_Item2, ACharacter* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess51, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue30, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller38, bool K2Node_DynamicCast_bSuccess52, bool CallFunc_IsAGMPlayer_ReturnValue41, APawn* CallFunc_K2_GetPawn_ReturnValue9, ACharacter* K2Node_DynamicCast_AsCharacter2, bool K2Node_DynamicCast_bSuccess53, APlayerController* CallFunc_GetOwningPlayer_ReturnValue31, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess54, bool CallFunc_IsAGMPlayer_ReturnValue42, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess55, bool CallFunc_IsAGMPlayer_ReturnValue43, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, FText CallFunc_GetText_ReturnValue17, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, FString CallFunc_Conv_TextToString_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue15, FText CallFunc_GetText_ReturnValue18, float CallFunc_Add_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue18, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Add_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue32, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess56, bool CallFunc_IsAGMPlayer_ReturnValue44, APlayerController* CallFunc_GetOwningPlayer_ReturnValue33, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller39, bool K2Node_DynamicCast_bSuccess57, bool CallFunc_IsAGMPlayer_ReturnValue45, APlayerController* CallFunc_GetPlayerController_ReturnValue19, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller40, bool K2Node_DynamicCast_bSuccess58, bool CallFunc_IsAGMPlayer_ReturnValue46, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsValid_ReturnValue22, bool CallFunc_IsValid_ReturnValue23, bool CallFunc_IsValid_ReturnValue24, FText CallFunc_GetText_ReturnValue19, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue19, bool CallFunc_IsValid_ReturnValue25, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_FClamp_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue34, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller41, bool K2Node_DynamicCast_bSuccess59, bool CallFunc_IsAGMPlayer_ReturnValue47, bool CallFunc_IsValid_ReturnValue26, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue35, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller42, bool K2Node_DynamicCast_bSuccess60, bool CallFunc_IsAGMPlayer_ReturnValue48, bool CallFunc_Not_PreBool_ReturnValue8, APlayerController* CallFunc_GetOwningPlayer_ReturnValue36, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller43, bool K2Node_DynamicCast_bSuccess61, bool CallFunc_IsAGMPlayer_ReturnValue49, bool CallFunc_Not_PreBool_ReturnValue9, FText CallFunc_GetText_ReturnValue20, FString CallFunc_Conv_TextToString_ReturnValue20, FString CallFunc_MakeLiteralString_ReturnValue8, int32 CallFunc_Conv_StringToInt_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue37, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller44, bool K2Node_DynamicCast_bSuccess62, APlayerController* CallFunc_GetOwningPlayer_ReturnValue38, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, FText CallFunc_Conv_VectorToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_IsAGMPlayer_ReturnValue50, APlayerController* CallFunc_GetPlayerController_ReturnValue20, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess63, APawn* CallFunc_K2_GetPawn_ReturnValue10, bool CallFunc_IsValid_ReturnValue27, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess64, float CallFunc_GetMaxSpeed_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue39, FText CallFunc_Conv_FloatToText_ReturnValue9, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller45, bool K2Node_DynamicCast_bSuccess65, bool CallFunc_IsAGMPlayer_ReturnValue51, APlayerController* CallFunc_GetPlayerController_ReturnValue21, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess66, bool CallFunc_IsAGMPlayer_ReturnValue52, bool CallFunc_Not_PreBool_ReturnValue10, FText CallFunc_GetText_ReturnValue21, FText CallFunc_GetText_ReturnValue22, FString CallFunc_Conv_TextToString_ReturnValue21, FString CallFunc_Conv_TextToString_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue19, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue28, ASTExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess67, float CallFunc_GetVehicleHP_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue10, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue11, bool CallFunc_IsValid_ReturnValue29, APlayerController* CallFunc_GetOwningPlayer_ReturnValue40, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller46, bool K2Node_DynamicCast_bSuccess68, bool CallFunc_IsAGMPlayer_ReturnValue53, bool CallFunc_IsValid_ReturnValue30, bool CallFunc_IsValid_ReturnValue31, bool CallFunc_IsValid_ReturnValue32, APlayerController* CallFunc_GetPlayerController_ReturnValue22, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue3, AUAEPlayerState* K2Node_DynamicCast_AsUAEPlayer_State, bool K2Node_DynamicCast_bSuccess69, bool ___bool_Variable3, FText CallFunc_GetText_ReturnValue23, uint8 K2Node_Select_Default, FString CallFunc_Conv_TextToString_ReturnValue23, FName CallFunc_Conv_StringToName_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue41, struct FBP_STRUCT_VehicleSpawn_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller47, bool K2Node_DynamicCast_bSuccess70, FString CallFunc_Concat_StrStr_ReturnValue4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue42, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller48, bool K2Node_DynamicCast_bSuccess71, FText CallFunc_GetText_ReturnValue24, FString CallFunc_Conv_TextToString_ReturnValue24, APlayerController* CallFunc_GetOwningPlayer_ReturnValue43, FString CallFunc_Concat_StrStr_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller49, bool K2Node_DynamicCast_bSuccess72, bool CallFunc_IsAGMPlayer_ReturnValue54, bool CallFunc_IsValid_ReturnValue33, bool CallFunc_IsValid_ReturnValue34, APlayerController* CallFunc_GetOwningPlayer_ReturnValue44, APlayerController* CallFunc_GetOwningPlayer_ReturnValue45, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess73, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess74, bool CallFunc_IsAGMPlayer_ReturnValue55, bool CallFunc_IsAGMPlayer_ReturnValue56, APlayerController* CallFunc_GetOwningPlayer_ReturnValue46, bool CallFunc_Not_PreBool_ReturnValue11, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess75, bool CallFunc_IsAGMPlayer_ReturnValue57, APlayerController* CallFunc_GetOwningPlayer_ReturnValue47, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess76, APlayerController* CallFunc_GetOwningPlayer_ReturnValue48, bool CallFunc_IsAGMPlayer_ReturnValue58, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller15, bool K2Node_DynamicCast_bSuccess77, bool CallFunc_IsAGMPlayer_ReturnValue59, APlayerController* CallFunc_GetOwningPlayer_ReturnValue49, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller16, bool K2Node_DynamicCast_bSuccess78, APlayerController* CallFunc_GetOwningPlayer_ReturnValue50, bool CallFunc_IsAGMPlayer_ReturnValue60, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller17, bool K2Node_DynamicCast_bSuccess79, bool CallFunc_IsAGMPlayer_ReturnValue61, APlayerController* CallFunc_GetOwningPlayer_ReturnValue51, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller18, bool K2Node_DynamicCast_bSuccess80, APlayerController* CallFunc_GetOwningPlayer_ReturnValue52, bool CallFunc_IsAGMPlayer_ReturnValue62, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller19, bool K2Node_DynamicCast_bSuccess81, bool CallFunc_IsAGMPlayer_ReturnValue63, APlayerController* CallFunc_GetOwningPlayer_ReturnValue53, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller20, bool K2Node_DynamicCast_bSuccess82, APlayerController* CallFunc_GetOwningPlayer_ReturnValue54, bool CallFunc_IsAGMPlayer_ReturnValue64, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller21, bool K2Node_DynamicCast_bSuccess83, bool CallFunc_IsAGMPlayer_ReturnValue65, APlayerController* CallFunc_GetOwningPlayer_ReturnValue55, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller22, bool K2Node_DynamicCast_bSuccess84, APlayerController* CallFunc_GetOwningPlayer_ReturnValue56, bool CallFunc_IsAGMPlayer_ReturnValue66, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller23, bool K2Node_DynamicCast_bSuccess85, bool CallFunc_IsAGMPlayer_ReturnValue67, APlayerController* CallFunc_GetOwningPlayer_ReturnValue57, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller24, bool K2Node_DynamicCast_bSuccess86, APlayerController* CallFunc_GetOwningPlayer_ReturnValue58, bool CallFunc_IsAGMPlayer_ReturnValue68, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller25, bool K2Node_DynamicCast_bSuccess87, bool CallFunc_IsAGMPlayer_ReturnValue69, APlayerController* CallFunc_GetOwningPlayer_ReturnValue59, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller26, bool K2Node_DynamicCast_bSuccess88, APlayerController* CallFunc_GetOwningPlayer_ReturnValue60, bool CallFunc_IsAGMPlayer_ReturnValue70, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller27, bool K2Node_DynamicCast_bSuccess89, bool CallFunc_IsAGMPlayer_ReturnValue71, APlayerController* CallFunc_GetOwningPlayer_ReturnValue61, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller28, bool K2Node_DynamicCast_bSuccess90, APlayerController* CallFunc_GetOwningPlayer_ReturnValue62, bool CallFunc_IsAGMPlayer_ReturnValue72, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller29, bool K2Node_DynamicCast_bSuccess91, bool CallFunc_IsAGMPlayer_ReturnValue73, APlayerController* CallFunc_GetOwningPlayer_ReturnValue63, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller30, bool K2Node_DynamicCast_bSuccess92, APlayerController* CallFunc_GetOwningPlayer_ReturnValue64, bool CallFunc_IsAGMPlayer_ReturnValue74, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller31, bool K2Node_DynamicCast_bSuccess93, bool CallFunc_IsAGMPlayer_ReturnValue75, APlayerController* CallFunc_GetOwningPlayer_ReturnValue65, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller32, bool K2Node_DynamicCast_bSuccess94, APlayerController* CallFunc_GetOwningPlayer_ReturnValue66, bool CallFunc_IsAGMPlayer_ReturnValue76, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller33, bool K2Node_DynamicCast_bSuccess95, bool CallFunc_IsAGMPlayer_ReturnValue77, APlayerController* CallFunc_GetOwningPlayer_ReturnValue67, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller34, bool K2Node_DynamicCast_bSuccess96, APlayerController* CallFunc_GetOwningPlayer_ReturnValue68, bool CallFunc_IsAGMPlayer_ReturnValue78, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller35, bool K2Node_DynamicCast_bSuccess97, bool CallFunc_IsAGMPlayer_ReturnValue79, APlayerController* CallFunc_GetOwningPlayer_ReturnValue69, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller36, bool K2Node_DynamicCast_bSuccess98, APlayerController* CallFunc_GetOwningPlayer_ReturnValue70, bool CallFunc_IsAGMPlayer_ReturnValue80, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller37, bool K2Node_DynamicCast_bSuccess99, bool CallFunc_IsAGMPlayer_ReturnValue81, APlayerController* CallFunc_GetPlayerController_ReturnValue23, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller50, bool K2Node_DynamicCast_bSuccess100, bool CallFunc_IsAGMPlayer_ReturnValue82, bool CallFunc_IsValid_ReturnValue35, bool CallFunc_IsValid_ReturnValue36, bool CallFunc_IsValid_ReturnValue37, UPanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue38);
  void InitScreenVars(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FText CallFunc_Conv_FloatToText_ReturnValue2, FText CallFunc_Conv_FloatToText_ReturnValue3, FText CallFunc_Conv_FloatToText_ReturnValue4);
  void OperatingRule1();
  void PrintNearestPlayerLocation(bool bIsAI, UEditableTextBox* TextBox, UEditableTextBox* NewLocalVar, float MinLength, float Length, struct FVector SelfPlayerLocation, struct FVector Location, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_VectorToText_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, TArray<ABP_PlayerPawn_C*> CallFunc_GetAllActorsOfClass_OutActors, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, ABP_PlayerPawn_C* CallFunc_Array_Get_Item, bool CallFunc_IsPlayerControlled_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void ReadMotionConfig(UEditableTextBox* NewParam, float NewParam1, FText CallFunc_Conv_FloatToText_ReturnValue);
  void SetCircleTime(float CDTime, float Time, AGameModeBase* GameMode, UCircleMgrComponent* CircleMgr, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);
  void SetMotionConfig(UEditableTextBox* TextBox, float Out, APlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_GetText_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue);
  void UpdateAITabData();
  void UpdateGrassText(bool bInverse, USTExtraGlobalData* CallFunc_STExtraGlobalDataInstance_ReturnValue, bool CallFunc_BooleanXOR_ReturnValue);
  void UpdateIndoorTabData();
  void UpdateManipulatingTab2Data();
};

class UGVoiceInterface: public UObject {
  /* offset=0x0030 flags=0x0048000000004200 */ FString ServerInfo;
  /* offset=0x003c flags=0x0048001040000200 */ UGameFrontendHUD* GameFrontendHUD;

  void CloseIngameMicphone();
  void CloseIngameSpeaker();
  void CloseMic();
  void CloseSpeaker();
  void DownloadRecordFile();
  void GetAuthKey();
  float GetVoiceLength();
  bool HaveLbsRoom();
  bool HaveTeamRoom();
  void InitGVoiceComponent(FString userId);
  void JoinLbsRoom(FString lbsRoom, FString userId);
  void JoinRoom(FString room, FString userId);
  void OnRoomTypeChanged(FString itemtext);
  int32 OpenIngameMicphone();
  void OpenIngameSpeaker();
  void OpenMic();
  void OpenMicAndSpeakerAfterJoinLbsRoom();
  void OpenSpeaker();
  void PlayRecordFile();
  void QuitRoom();
  void ReactiveLbsStatus();
  void ResetWhenLogOut();
  void SetAllVoiceStatus(bool Flag);
  void SetCurrentDownloadFieldID(FString filedId);
  void SetGameFrontendHUD(UGameFrontendHUD* InHUD);
  void SetLbsRoomEnableStatus(bool Flag);
  void SetLbsVoiceRadius(float Radius);
  void SetMicphoneStatus(bool Flag);
  void SetMicphoneVolum(float Value);
  void SetSpeakerStatus(bool Flag);
  void SetSpeakerVolum(float Value);
  void SetVoiceMode(int32 Type);
  void ShowOpenSpeakerAtFirstMsg();
  void SpeechToText();
  void StartRecord();
  void StopPlayRecordFile();
  void StopRecord();
  void UploadRecordFile();
};

class UGameBackendHUD: public UBackendHUD {
  UGameFrontendHUD* GetFirstGameFrontendHUD();
  UGameBackendHUD* GetInstance();
  UGameBackendUtils* GetUtils();
};

class UGameBackendUtils: public UBackendUtils {
  /* offset=0x0020 flags=0x0048001040000200 */ UUAETableManager* TableManager;

  UUAELoadedClassManager* GetLoadedClassManager();
  UUAETableManager* GetTableManager();
};

class UGameBusinessManager: public ULogicManagerBase {
  /* offset=0x006c flags=0x0010000000000205 */ TArray<struct FGameWidgetConfig> WidgetConfigList;
  /* offset=0x00bc flags=0x0048001040002200 */ ALuaClassObj* LuaObject;

  UGameFrontendHUD* GetGameFrontendHUD();
  ALuaClassObj* GetLuaObject();
};

class UGameEngine: public UEngine {
  /* offset=0x0c00 flags=0x0018001040004200 */ float MaxDeltaTime;
  /* offset=0x0c04 flags=0x0018001040004200 */ float ServerFlushLogInterval;
  /* offset=0x0c08 flags=0x0018001040002200 */ UGameInstance* GameInstance;
};

class UGameEventListener: public UActorComponent {
  /* offset=0x00ac flags=0x0010100010080214 */ FGamePawnEventDelegate OnGameEventListener;
  /* offset=0x00b8 flags=0x0018001040000205 */ float HeightCheck_High;
  /* offset=0x00bc flags=0x0018001040000205 */ float HeightCheck_Mid;
  /* offset=0x00c0 flags=0x0018001040000205 */ float HeightCheck_Low;

  void GameEventBirth();
  void GameEventDie(float currentHP, float ratioHP);
  void GameEventFighting();
  void GameEventJump();
  void GameEventLanded();
  void GameEventParachute();
  void GameEventPlane();
  void GameEventReBirth();
  void HeightCheck();
  void StarCalcJump();
};

class UGameFrontendHUD: public UFrontendHUD {
  /* offset=0x00a0 flags=0x0048000000004200 */ FString CSVTableRelativeDir;
  /* offset=0x00ac flags=0x0040000000000200 */ TMap<FName, FString> GameStatusMap;
  /* offset=0x00e8 flags=0x0040000000000200 */ TMap<FString, bool> LanguageMap;
  /* offset=0x0124 flags=0x0048001040000200 */ UGVoiceInterface* GVoice;
  /* offset=0x0128 flags=0x0048001040004200 */ bool DisableGVoice;
  /* offset=0x012c flags=0x0048001040000200 */ UBugReporter* BugReporter;
  /* offset=0x0130 flags=0x0048001040000200 */ UGDolphinUpdater* GDolphin;
  /* offset=0x0134 flags=0x0048001040000200 */ UTranslator* Translator;
  /* offset=0x0148 flags=0x0018001040000200 */ FName UnrealNetworkStatus;
  /* offset=0x0160 flags=0x0018001040000200 */ float UnrealNetworkConnectingTimer;
  /* offset=0x016c flags=0x0048001040004200 */ float UnrealNetworkConnectingTime;
  /* offset=0x0174 flags=0x0028081040000200 */ ULuaStateWrapper* LuaStateWrapper;
  /* offset=0x0178 flags=0x0018000000004200 */ FString ScriptBPRelativeDir;
  /* offset=0x0184 flags=0x0048000000004200 */ FString ScriptRelativeDir;
  /* offset=0x0190 flags=0x0048000000004200 */ FString InGameLuaDir;
  /* offset=0x019c flags=0x0048000000004200 */ FString PreloadLuaFileRelativePath;
  /* offset=0x01a8 flags=0x0040000000004200 */ TArray<FString> LuaDirList;
  /* offset=0x01b4 flags=0x0048001040004200 */ float LuaTickTime;
  /* offset=0x01b8 flags=0x0048001040004200 */ bool bCallLuaTick;
  /* offset=0x01c0 flags=0x0048001040000200 */ UTssManager* TssMgr;
  /* offset=0x01dc flags=0x0048001040004200 */ float PingReportInterval;
  /* offset=0x0238 flags=0x0028081040004200 */ uint64 gameId;
  /* offset=0x0240 flags=0x0028080000004200 */ FString GameKey;
  /* offset=0x024c flags=0x0048000000004200 */ FString UserSettingsClassName;
  /* offset=0x0258 flags=0x0048001040000200 */ UClass<UObject>* UserSettingsClass;
  /* offset=0x025c flags=0x0048001040000200 */ USaveGame* UserSettings;
  /* offset=0x02a8 flags=0x0018001040000214 */ UUDPPingCollector* UDPPingCollector;

  void BeginModifyUserSettings();
  void CallGlobalScriptFunction(FString InFunctionName);
  void CheckLocalizationLanguage();
  void FinishModifyUserSettings();
  FString GetBattleIDHexStr();
  UBugReporter* GetBugReporter();
  int32 GetDetailNetInfoFromGCloud();
  UGVoiceInterface* GetGVoiceInterface();
  ULuaStateWrapper* GetLuaStateWrapper();
  UTranslator* GetTranslator();
  UGDolphinUpdater* GetUpdater();
  USaveGame* GetUserSettings();
  void HandleCultureChanged();
  void OnGenQRImgNotify(int32 ret, int32 Size, FString imgPath);
  void OnGroupNotify(struct FGroupInfoWrapper groupInfo);
  void OnLoginFlowNotify(int32 _Flow, int32 _Param);
  void OnQuickLoginNotify(struct FWakeupInfoWrapper wakeupinfo);
  void OnRefreshAccountInfo(bool Result, int32 InChannel, FString InOpenId);
  void OnWebviewNotify(struct FWebviewInfoWrapper webviewinfo);
  void RegisterUserSettingsDelegate(FUserSettingsDelegate Delegate);
  void RegisterUserSettingsDelegate_Bool(FString PropertyName, FUserSettingsDelegate_Bool Delegate);
  void RegisterUserSettingsDelegate_Enum(FString PropertyName, FUserSettingsDelegate_Enum Delegate);
  void RegisterUserSettingsDelegate_Float(FString PropertyName, FUserSettingsDelegate_Float Delegate);
  void RegisterUserSettingsDelegate_Int(FString PropertyName, FUserSettingsDelegate_Int Delegate);
  void ResetUserSettings();
  void RetryDownload();
  void SetGameStatusMap(TMap<FName, FString> InGameStatusMap);
  void ShutdownUnrealNetwork();
  bool StartGrayUpdate();
  void TickUdpCollector(float DeltaTime);
};

class UGameFrontendUtils: public UFrontendUtils {
};

class UGameInstance: public UObject {
  /* offset=0x0024 flags=0x0020080000000200 */ TArray<ULocalPlayer*> LocalPlayers;
  /* offset=0x0030 flags=0x0028081040000200 */ UOnlineSession* OnlineSession;

  void DebugCreatePlayer(int32 ControllerId);
  void DebugRemovePlayer(int32 ControllerId);
  void HandleNetworkError(uint8 FailureType, bool bIsServer);
  void HandleTravelError(uint8 FailureType);
  void ReceiveInit();
  void ReceiveShutdown();
};

class UGameJoyInterface: public UObject {
  UGameJoyInterface* GetInstance();
  bool IsSDKFeatureSupport();
  void OnCheckSDKFeature(int32 sdkFeatureInt);
  void OnCheckSDKPermission(bool isSuccess);
  void OnManualRecordingStart(int32 status);
  void OnRecordingEnd(int64 Duration);
  void OnRecordingStart(int32 status);
  void OnShowVideoPlayer(int32 isShow);
  void OnVideoShare(int32 status);
};

class UGameLogicManagerBase_C: public UGameBusinessManager {
};

class UGameMapsSettings: public UObject {
  /* offset=0x0020 flags=0x0018000000004001 */ struct FSoftObjectPath EditorStartupMap;
  /* offset=0x0038 flags=0x0018040000004201 */ FString LocalMapOptions;
  /* offset=0x0048 flags=0x0018040000004001 */ struct FSoftObjectPath TransitionMap;
  /* offset=0x0060 flags=0x0018001040004201 */ bool bUseSplitscreen;
  /* offset=0x0061 flags=0x0018001040004201 */ uint8 TwoPlayerSplitscreenLayout;
  /* offset=0x0062 flags=0x0018001040004201 */ uint8 ThreePlayerSplitscreenLayout;
  /* offset=0x0063 flags=0x0018001040004201 */ bool bOffsetPlayerGamepadIds;
  /* offset=0x0068 flags=0x0010000002004001 */ struct FSoftClassPath GameInstanceClass;
  /* offset=0x0080 flags=0x0048000000004001 */ struct FSoftObjectPath GameDefaultMap;
  /* offset=0x0098 flags=0x0048040000004001 */ struct FSoftObjectPath ServerDefaultMap;
  /* offset=0x00b0 flags=0x0040000002004001 */ struct FSoftClassPath GlobalDefaultGameMode;
  /* offset=0x00c8 flags=0x0040040000004001 */ struct FSoftClassPath GlobalDefaultServerGameMode;
  /* offset=0x00e0 flags=0x0040040000004201 */ TArray<struct FGameModeName> GameModeMapPrefixes;
  /* offset=0x00ec flags=0x0040040000004201 */ TArray<struct FGameModeName> GameModeClassAliases;
};

class AGameMode: public AGameModeBase {
  /* offset=0x02f8 flags=0x0028081040002200 */ FName MatchState;
  /* offset=0x0300 flags=0x0018001000000015 */ uint8 bDelayedStart:1;
  /* offset=0x0304 flags=0x0018001040000214 */ int32 NumSpectators;
  /* offset=0x0308 flags=0x0018001040000214 */ int32 NumPlayers;
  /* offset=0x030c flags=0x0018001040000214 */ int32 NumBots;
  /* offset=0x0310 flags=0x0018001040000215 */ float MinRespawnDelay;
  /* offset=0x0314 flags=0x0018001040000214 */ int32 NumTravellingPlayers;
  /* offset=0x0318 flags=0x001c001040000200 */ UClass<ULocalMessage>* EngineMessageClass;
  /* offset=0x031c flags=0x0010000000000200 */ TArray<APlayerState*> InactivePlayerArray;
  /* offset=0x0328 flags=0x0028081040000201 */ float InactivePlayerStateLifeSpan;
  /* offset=0x032c flags=0x0028081040004200 */ bool bHandleDedicatedServerReplays;

  void AbortMatch();
  void EndMatch();
  FName GetMatchState();
  bool HasMatchEnded();
  bool IsMatchInProgress();
  void K2_OnSetMatchState(FName NewState);
  bool ReadyToEndMatch();
  bool ReadyToStartMatch();
  void RestartGame();
  void Say(FString msg);
  void SetBandwidthLimit(float AsyncIOBandwidthLimit);
  void StartMatch();
};

class AGameModeBase: public AInfo {
  /* offset=0x02a8 flags=0x0018000000000214 */ FString OptionsString;
  /* offset=0x02b4 flags=0x001c001040000205 */ UClass<AGameSession>* GameSessionClass;
  /* offset=0x02b8 flags=0x001c001042000215 */ UClass<AGameStateBase>* GameStateClass;
  /* offset=0x02bc flags=0x001c001042000215 */ UClass<APlayerController>* PlayerControllerClass;
  /* offset=0x02c0 flags=0x001c001042000215 */ UClass<APlayerState>* PlayerStateClass;
  /* offset=0x02c4 flags=0x001c001040000205 */ UClass<AHUD>* HUDClass;
  /* offset=0x02c8 flags=0x001c001040000205 */ UClass<APawn>* DefaultPawnClass;
  /* offset=0x02cc flags=0x001c001042000215 */ UClass<ASpectatorPawn>* SpectatorClass;
  /* offset=0x02d0 flags=0x001c001042000215 */ UClass<APlayerController>* ReplaySpectatorPlayerControllerClass;
  /* offset=0x02d4 flags=0x0018001040002200 */ AGameSession* GameSession;
  /* offset=0x02d8 flags=0x0018001040002200 */ AGameStateBase* GameState;
  /* offset=0x02dc flags=0x0010000000000001 */ FText DefaultPlayerName;
  /* offset=0x02e8 flags=0x0018001000000005 */ uint8 bUseSeamlessTravel:1;
  /* offset=0x02e8 flags=0x0028081000000015 */ uint8 bStartPlayersAsSpectators:1;
  /* offset=0x02e8 flags=0x0028081000000005 */ uint8 bPauseable:1;

  bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget);
  void ChangeName(AController* Controller, FString NewName, bool bNameChange);
  AActor* ChoosePlayerStart(AController* Player);
  AActor* FindPlayerStart(AController* Player, FString IncomingName);
  UClass<UObject>* GetDefaultPawnClassForController(AController* InController);
  int32 GetNumPlayers();
  int32 GetNumSpectators();
  void HandleStartingNewPlayer(APlayerController* NewPlayer);
  bool HasMatchStarted();
  void InitStartSpot(AActor* StartSpot, AController* NewPlayer);
  void InitializeHUDForPlayer(APlayerController* NewPlayer);
  AActor* K2_FindPlayerStart(AController* Player, FString IncomingName);
  void K2_OnChangeName(AController* Other, FString NewName, bool bNameChange);
  void K2_OnLogout(AController* ExitingController);
  void K2_OnRestartPlayer(AController* NewPlayer);
  void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC);
  void K2_PostLogin(APlayerController* NewPlayer);
  bool MustSpectate(APlayerController* NewPlayerController);
  bool PlayerCanRestart(APlayerController* Player);
  void ResetLevel();
  void RestartPlayer(AController* NewPlayer);
  void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot);
  void RestartPlayerAtTransform(AController* NewPlayer, struct FTransform SpawnTransform);
  void ReturnToMainMenuHost();
  bool ShouldReset(AActor* ActorToReset);
  APawn* SpawnDefaultPawnAtTransform(AController* NewPlayer, struct FTransform SpawnTransform);
  APawn* SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot);
  void StartPlay();
};

class UGameModeDataAsset: public UDataAsset {
  /* offset=0x0020 flags=0x0010000000000201 */ TArray<struct FGameModeParam> GameModeParams;
};

class UGameModeState: public UObject {
  /* offset=0x0028 flags=0x0028081040000201 */ float StateTime;
  /* offset=0x002c flags=0x0028081040000200 */ AUAEGameMode* OwnerGameMode;

  void GotoNextState();
};

class UGameModeStateActive: public UGameModeState {
};

class UGameModeStateFighting: public UGameModeState {
};

class UGameModeStateFinished: public UGameModeState {
};

class UGameModeStateFinishedTeam: public UGameModeStateFinished {
};

class UGameModeStateFlying: public UGameModeState {
  /* offset=0x0030 flags=0x002c081040000201 */ UClass<APawn>* PlaneClass;
  /* offset=0x0034 flags=0x0028081040000201 */ UBehaviorTree* PlaneBT;
};

class UGameModeStateFlyingTeam: public UGameModeStateFlying {
};

class UGameModeStateReady: public UGameModeState {
  /* offset=0x0030 flags=0x0018001040000201 */ float StopJoinTime;
  /* offset=0x0034 flags=0x0018001040000201 */ float ForceStartCountDownTime;

  void StopJoin();
};

class AGameNetworkManager: public AInfo {
  /* offset=0x02a8 flags=0x0018001040000200 */ int32 AdjustedNetSpeed;
  /* offset=0x02ac flags=0x0018001040000200 */ float LastNetSpeedUpdateTime;
  /* offset=0x02b0 flags=0x0018001040044200 */ int32 TotalNetBandwidth;
  /* offset=0x02b4 flags=0x0018001040044200 */ int32 MinDynamicBandwidth;
  /* offset=0x02b8 flags=0x0018001040044200 */ int32 MaxDynamicBandwidth;
  /* offset=0x02bc flags=0x0018001000004000 */ uint8 bIsStandbyCheckingEnabled:1;
  /* offset=0x02bc flags=0x0018001000000000 */ uint8 bHasStandbyCheatTriggered:1;
  /* offset=0x02c0 flags=0x0018001040004200 */ float StandbyRxCheatTime;
  /* offset=0x02c4 flags=0x0018001040004200 */ float StandbyTxCheatTime;
  /* offset=0x02c8 flags=0x0018001040004200 */ int32 BadPingThreshold;
  /* offset=0x02cc flags=0x0018001040004200 */ float PercentMissingForRxStandby;
  /* offset=0x02d0 flags=0x0018001040004200 */ float PercentMissingForTxStandby;
  /* offset=0x02d4 flags=0x0018001040004200 */ float PercentForBadPing;
  /* offset=0x02d8 flags=0x0018001040004200 */ float JoinInProgressStandbyWaitTime;
  /* offset=0x02dc flags=0x0018001040044200 */ float MoveRepSize;
  /* offset=0x02e0 flags=0x0018001040044200 */ float MAXPOSITIONERRORSQUARED;
  /* offset=0x02e4 flags=0x0018001040044200 */ float MAXNEARZEROVELOCITYSQUARED;
  /* offset=0x02e8 flags=0x0018001040044200 */ float CLIENTADJUSTUPDATECOST;
  /* offset=0x02ec flags=0x0018001040044200 */ float MAXCLIENTUPDATEINTERVAL;
  /* offset=0x02f0 flags=0x0018001040044200 */ float MaxMoveDeltaTime;
  /* offset=0x02f4 flags=0x0018001040044200 */ float ClientNetSendMoveDeltaTime;
  /* offset=0x02f8 flags=0x0018001040044200 */ float ClientNetSendMoveDeltaTimeThrottled;
  /* offset=0x02fc flags=0x0018001040044200 */ int32 ClientNetSendMoveThrottleAtNetSpeed;
  /* offset=0x0300 flags=0x0018001040044200 */ int32 ClientNetSendMoveThrottleOverPlayerCount;
  /* offset=0x0304 flags=0x0018001040044200 */ bool ClientAuthorativePosition;
  /* offset=0x0308 flags=0x0018001040044200 */ float ClientErrorUpdateRateLimit;
  /* offset=0x030c flags=0x0018001040044200 */ bool bMovementTimeDiscrepancyDetection;
  /* offset=0x030d flags=0x0018001040044200 */ bool bMovementTimeDiscrepancyResolution;
  /* offset=0x0310 flags=0x0018001040044200 */ float MovementTimeDiscrepancyMaxTimeMargin;
  /* offset=0x0314 flags=0x0018001040044200 */ float MovementTimeDiscrepancyMinTimeMargin;
  /* offset=0x0318 flags=0x0018001040044200 */ float MovementTimeDiscrepancyResolutionRate;
  /* offset=0x031c flags=0x0018001040044200 */ float MovementTimeDiscrepancyDriftAllowance;
  /* offset=0x0320 flags=0x0018001040044200 */ bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;
  /* offset=0x0321 flags=0x0018001040044200 */ bool bUseDistanceBasedRelevancy;
};

class UGameNetworkManagerSettings: public UObject {
  /* offset=0x001c flags=0x0018001040044201 */ int32 MinDynamicBandwidth;
  /* offset=0x0020 flags=0x0018001040044201 */ int32 MaxDynamicBandwidth;
  /* offset=0x0024 flags=0x0018001040044201 */ int32 TotalNetBandwidth;
  /* offset=0x0028 flags=0x0018001040004201 */ int32 BadPingThreshold;
  /* offset=0x002c flags=0x0018001000004001 */ uint8 bIsStandbyCheckingEnabled:1;
  /* offset=0x0030 flags=0x0018001040004201 */ float StandbyRxCheatTime;
  /* offset=0x0034 flags=0x0018001040004201 */ float StandbyTxCheatTime;
  /* offset=0x0038 flags=0x0018001040004201 */ float PercentMissingForRxStandby;
  /* offset=0x003c flags=0x0018001040004201 */ float PercentMissingForTxStandby;
  /* offset=0x0040 flags=0x0018001040004201 */ float PercentForBadPing;
  /* offset=0x0044 flags=0x0018001040004201 */ float JoinInProgressStandbyWaitTime;
};

class AGameSession: public AInfo {
  /* offset=0x02a8 flags=0x0018001040044200 */ int32 MaxSpectators;
  /* offset=0x02ac flags=0x0018001040044200 */ int32 MaxPlayers;
  /* offset=0x02b0 flags=0x0018001040000200 */ int32 MaxPartySize;
  /* offset=0x02b4 flags=0x0018001040044200 */ uint8 MaxSplitscreensPerConnection;
  /* offset=0x02b5 flags=0x0018001040044200 */ bool bRequiresPushToTalk;
  /* offset=0x02b8 flags=0x0018001040000200 */ FName SessionName;
};

class UGameSessionSettings: public UObject {
  /* offset=0x001c flags=0x0018001040044201 */ int32 MaxSpectators;
  /* offset=0x0020 flags=0x0018001040044201 */ int32 MaxPlayers;
  /* offset=0x0024 flags=0x0018001000044001 */ uint8 bRequiresPushToTalk:1;
};

class AGameState: public AGameStateBase {
  /* offset=0x02d8 flags=0x0028081140020a35 */ FName MatchState;
  /* offset=0x02e0 flags=0x0028081040020a15 */ FName PreviousMatchState;
  /* offset=0x02e8 flags=0x0018001140000234 */ int32 ElapsedTime;

  void OnRep_ElapsedTime();
  void OnRep_MatchState();
};

class AGameStateBase: public AInfo {
  /* offset=0x02a8 flags=0x001c001140002234 */ UClass<AGameModeBase>* GameModeClass;
  /* offset=0x02ac flags=0x0018001040002214 */ AGameModeBase* AuthorityGameMode;
  /* offset=0x02b0 flags=0x001c001140002234 */ UClass<ASpectatorPawn>* SpectatorClass;
  /* offset=0x02b4 flags=0x0010000000002214 */ TArray<APlayerState*> PlayerArray;
  /* offset=0x02c0 flags=0x0028081140002220 */ bool bReplicatedHasBegunPlay;
  /* offset=0x02c4 flags=0x0028081140002220 */ float ReplicatedWorldTimeSeconds;
  /* offset=0x02c8 flags=0x0028081040002200 */ float ServerWorldTimeSecondsDelta;
  /* offset=0x02cc flags=0x0028081040010201 */ float ServerWorldTimeSecondsUpdateFrequency;

  float GetPlayerRespawnDelay(AController* Controller);
  float GetPlayerStartTime(AController* Controller);
  float GetServerWorldTimeSeconds();
  bool HasBegunPlay();
  bool HasMatchStarted();
  void OnRep_GameModeClass();
  void OnRep_ReplicatedHasBegunPlay();
  void OnRep_ReplicatedWorldTimeSeconds();
  void OnRep_SpectatorClass();
};

class UGameUserSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004200 */ bool bUseVSync;
  /* offset=0x0060 flags=0x0028081040004200 */ uint32 ResolutionSizeX;
  /* offset=0x0064 flags=0x0028081040004200 */ uint32 ResolutionSizeY;
  /* offset=0x0068 flags=0x0028081040004200 */ uint32 LastUserConfirmedResolutionSizeX;
  /* offset=0x006c flags=0x0028081040004200 */ uint32 LastUserConfirmedResolutionSizeY;
  /* offset=0x0070 flags=0x0028081040004200 */ int32 WindowPosX;
  /* offset=0x0074 flags=0x0028081040004200 */ int32 WindowPosY;
  /* offset=0x0078 flags=0x0028081040004200 */ int32 FullscreenMode;
  /* offset=0x007c flags=0x0028081040004200 */ int32 LastConfirmedFullscreenMode;
  /* offset=0x0080 flags=0x0028081040004200 */ int32 PreferredFullscreenMode;
  /* offset=0x0084 flags=0x0028081040004200 */ uint32 version;
  /* offset=0x0088 flags=0x0028081040004200 */ int32 AudioQualityLevel;
  /* offset=0x008c flags=0x0028081040004200 */ float FrameRateLimit;
  /* offset=0x0094 flags=0x0028081040004200 */ int32 DesiredScreenWidth;
  /* offset=0x0098 flags=0x0028081040044200 */ bool bUseDesiredScreenHeight;
  /* offset=0x009c flags=0x0028081040004200 */ int32 DesiredScreenHeight;
  /* offset=0x00a0 flags=0x0028081040004200 */ float LastRecommendedScreenWidth;
  /* offset=0x00a4 flags=0x0028081040004200 */ float LastRecommendedScreenHeight;
  /* offset=0x00a8 flags=0x0028081040004200 */ float LastCPUBenchmarkResult;
  /* offset=0x00ac flags=0x0028081040004200 */ float LastGPUBenchmarkResult;
  /* offset=0x00b0 flags=0x0020080000004200 */ TArray<float> LastCPUBenchmarkSteps;
  /* offset=0x00bc flags=0x0020080000004200 */ TArray<float> LastGPUBenchmarkSteps;
  /* offset=0x00c8 flags=0x0028081040004200 */ float LastGPUBenchmarkMultiplier;
  /* offset=0x00cc flags=0x0028081040004200 */ bool bUseHDRDisplayOutput;
  /* offset=0x00d0 flags=0x0028081040004200 */ int32 HDRDisplayOutputNits;
  /* offset=0x00d4 flags=0x0040000010080200 */ FOnGameUserSettingsUINeedsUpdate OnGameUserSettingsUINeedsUpdate;

  void ApplyHardwareBenchmarkResults();
  void ApplyNonResolutionSettings();
  void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
  void ApplySettings(bool bCheckForCommandLineOverrides);
  void ConfirmVideoMode();
  void EnableHDRDisplayOutput(bool bEnable, int32 DisplayNits);
  int32 GetAntiAliasingQuality();
  int32 GetAudioQualityLevel();
  int32 GetCurrentHDRDisplayNits();
  struct FIntPoint GetDefaultResolution();
  float GetDefaultResolutionScale();
  uint8 GetDefaultWindowMode();
  struct FIntPoint GetDefaultWindowPosition();
  struct FIntPoint GetDesktopResolution();
  int32 GetFoliageQuality();
  float GetFrameRateLimit();
  uint8 GetFullscreenMode();
  UGameUserSettings* GetGameUserSettings();
  uint8 GetLastConfirmedFullscreenMode();
  struct FIntPoint GetLastConfirmedScreenResolution();
  int32 GetOverallScalabilityLevel();
  int32 GetPostProcessingQuality();
  uint8 GetPreferredFullscreenMode();
  float GetRecommendedResolutionScale();
  void GetResolutionScaleInformation(float CurrentScaleNormalized, int32 CurrentScaleValue, int32 MinScaleValue, int32 MaxScaleValue);
  void GetResolutionScaleInformationEx(float CurrentScaleNormalized, float CurrentScaleValue, float MinScaleValue, float MaxScaleValue);
  struct FIntPoint GetScreenResolution();
  int32 GetShadowQuality();
  int32 GetTextureQuality();
  int32 GetViewDistanceQuality();
  int32 GetVisualEffectQuality();
  bool IsDirty();
  bool IsFullscreenModeDirty();
  bool IsHDREnabled();
  bool IsScreenResolutionDirty();
  bool IsVSyncDirty();
  bool IsVSyncEnabled();
  void LoadSettings(bool bForceReload);
  void ResetToCurrentSettings();
  void RevertVideoMode();
  void RunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
  void SaveSettings();
  void SetAntiAliasingQuality(int32 Value);
  void SetAudioQualityLevel(int32 QualityLevel);
  void SetBenchmarkFallbackValues();
  void SetFoliageQuality(int32 Value);
  void SetFrameRateLimit(float NewLimit);
  void SetFullscreenMode(uint8 InFullscreenMode);
  void SetOverallScalabilityLevel(int32 Value);
  void SetPostProcessingQuality(int32 Value);
  void SetResolutionScaleNormalized(float NewScaleNormalized);
  void SetResolutionScaleValue(int32 NewScaleValue);
  void SetResolutionScaleValueEx(float NewScaleValue);
  void SetScreenResolution(struct FIntPoint Resolution);
  void SetShadowQuality(int32 Value);
  void SetTextureQuality(int32 Value);
  void SetToDefaults();
  void SetVSyncEnabled(bool bEnable);
  void SetViewDistanceQuality(int32 Value);
  void SetVisualEffectQuality(int32 Value);
  bool SupportsHDRDisplayOutput();
  void ValidateSettings();
};

class UGameViewportClient: public UScriptViewportClient {
  /* offset=0x0024 flags=0x0018001040000200 */ UConsole* ViewportConsole;
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<struct FDebugDisplayProperty> DebugProperties;
  /* offset=0x0058 flags=0x0028081040000200 */ UWorld* World;
  /* offset=0x005c flags=0x0028081040000200 */ UGameInstance* GameInstance;

  void SSSwapControllers();
  void SetConsoleTarget(int32 PlayerIndex);
  void ShowTitleSafeArea();
};

class UGameplayStatics: public UBlueprintFunctionLibrary {
  void ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);
  float ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, UClass<UDamageType>* DamageTypeClass);
  float ApplyPointDamage(AActor* DamagedActor, float BaseDamage, struct FVector HitFromDirection, struct FHitResult HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass<UDamageType>* DamageTypeClass);
  bool ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, struct FVector Origin, float DamageRadius, UClass<UDamageType>* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, uint8 DamagePreventionChannel);
  bool ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass<UDamageType>* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, uint8 DamagePreventionChannel);
  bool AreAnyListenersWithinRange(UObject* WorldContextObject, struct FVector Location, float MaximumRange);
  bool AreSubtitlesEnabled();
  AActor* BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, UClass<AActor>* ActorClass, struct FTransform SpawnTransform, enum ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, AActor* Owner);
  AActor* BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, struct FTransform SpawnTransform, bool bNoCollisionFail);
  AActor* BeginSpawningActorFromClass(UObject* WorldContextObject, UClass<AActor>* ActorClass, struct FTransform SpawnTransform, bool bNoCollisionFail, AActor* Owner);
  bool BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, struct FVector TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, uint8 TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
  bool Blueprint_PredictProjectilePath_Advanced(UObject* WorldContextObject, struct FPredictProjectilePathParams PredictParams, struct FPredictProjectilePathResult PredictResult);
  bool Blueprint_PredictProjectilePath_ByObjectType(UObject* WorldContextObject, struct FHitResult OutHit, TArray<struct FVector> OutPathPositions, struct FVector OutLastTraceDestination, struct FVector startPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
  bool Blueprint_PredictProjectilePath_ByTraceChannel(UObject* WorldContextObject, struct FHitResult OutHit, TArray<struct FVector> OutPathPositions, struct FVector OutLastTraceDestination, struct FVector startPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
  void BreakHitResult(struct FHitResult Hit, bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName HitBoneName, int32 HitItem, int32 FaceIndex, struct FVector TraceStart, struct FVector TraceEnd);
  void CancelAsyncLoading();
  void ClearSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float FadeOutTime);
  void ClearSoundMixModifiers(UObject* WorldContextObject);
  APlayerController* CreatePlayer(UObject* WorldContextObject, int32 ControllerId, bool bSpawnPawn);
  USaveGame* CreateSaveGameObject(UClass<USaveGame>* SaveGameClass);
  USaveGame* CreateSaveGameObjectFromBlueprint(UBlueprint* SaveGameBlueprint);
  UAudioComponent* CreateSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
  void DeactivateReverbEffect(UObject* WorldContextObject, FName TagName);
  bool DeleteGameInSlot(FString SlotName, int32 UserIndex);
  bool DeprojectScreenToWorld(APlayerController* Player, struct FVector2D ScreenPosition, struct FVector WorldPosition, struct FVector WorldDirection);
  bool DoesSaveGameExist(FString SlotName, int32 UserIndex);
  void EnableLiveStreaming(bool Enable);
  bool FindCollisionUV(struct FHitResult Hit, int32 UVChannel, struct FVector2D UV);
  AActor* FinishSpawningActor(AActor* Actor, struct FTransform SpawnTransform);
  void FlushLevelStreaming(UObject* WorldContextObject);
  void GetAccurateRealTime(UObject* WorldContextObject, int32 Seconds, float PartialSeconds);
  struct FVector GetActorArrayAverageLocation(TArray<AActor*> Actors);
  void GetActorArrayBounds(TArray<AActor*> Actors, bool bOnlyCollidingComponents, struct FVector Center, struct FVector BoxExtent);
  void GetAllActorsOfClass(UObject* WorldContextObject, UClass<AActor>* ActorClass, TArray<AActor*> OutActors);
  void GetAllActorsWithInterface(UObject* WorldContextObject, UClass<UInterface>* Interface, TArray<AActor*> OutActors);
  void GetAllActorsWithTag(UObject* WorldContextObject, FName Tag, TArray<AActor*> OutActors);
  float GetAudioTimeSeconds(UObject* WorldContextObject);
  FString GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString);
  UReverbEffect* GetCurrentReverbEffect(UObject* WorldContextObject);
  UGameInstance* GetGameInstance(UObject* WorldContextObject);
  AGameModeBase* GetGameMode(UObject* WorldContextObject);
  AGameStateBase* GetGameState(UObject* WorldContextObject);
  float GetGlobalTimeDilation(UObject* WorldContextObject);
  int32 GetIntOption(FString Options, FString Key, int32 DefaultValue);
  void GetKeyValue(FString Pair, FString Key, FString Value);
  UClass<UObject>* GetObjectClass(UObject* Object);
  FString GetPlatformName();
  APlayerCameraManager* GetPlayerCameraManager(UObject* WorldContextObject, int32 PlayerIndex);
  ACharacter* GetPlayerCharacter(UObject* WorldContextObject, int32 PlayerIndex);
  APlayerController* GetPlayerController(UObject* WorldContextObject, int32 PlayerIndex);
  int32 GetPlayerControllerID(APlayerController* Player);
  APawn* GetPlayerPawn(UObject* WorldContextObject, int32 PlayerIndex);
  float GetRealTimeSeconds(UObject* WorldContextObject);
  ULevelStreaming* GetStreamingLevel(UObject* WorldContextObject, FName PackageName);
  uint8 GetSurfaceType(struct FHitResult Hit);
  float GetTimeSeconds(UObject* WorldContextObject);
  float GetUnpausedTimeSeconds(UObject* WorldContextObject);
  float GetWorldDeltaSeconds(UObject* WorldContextObject);
  struct FIntVector GetWorldOriginLocation(UObject* WorldContextObject);
  int32 GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius);
  bool HasLaunchOption(FString OptionToCheck);
  bool HasOption(FString Options, FString InKey);
  bool IsGamePaused(UObject* WorldContextObject);
  USaveGame* LoadGameFromSlot(FString SlotName, int32 UserIndex);
  void LoadStreamLevel(UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo);
  struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName HitBoneName, int32 HitItem, int32 FaceIndex, struct FVector TraceStart, struct FVector TraceEnd);
  void OpenLevel(UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);
  FString ParseOption(FString Options, FString Key);
  void PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, struct FDialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
  void PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, struct FDialogueContext Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings);
  void PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, AActor* OwningActor);
  void PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, AActor* OwningActor);
  void PlayWorldCameraShake(UObject* WorldContextObject, UClass<UCameraShake>* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
  void PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);
  bool ProjectWorldToScreen(APlayerController* Player, struct FVector WorldPosition, struct FVector2D ScreenPosition, bool bPlayerViewportRelative);
  void PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier);
  struct FVector RebaseLocalOriginOntoZero(UObject* WorldContextObject, struct FVector WorldLocation);
  struct FVector RebaseZeroOriginOntoLocal(UObject* WorldContextObject, struct FVector WorldLocation);
  void RemovePlayer(APlayerController* Player, bool bDestroyPawn);
  bool SaveGameToSlot(USaveGame* SaveGameObject, FString SlotName, int32 UserIndex);
  void SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix);
  bool SetGamePaused(UObject* WorldContextObject, bool bPaused);
  void SetGlobalListenerFocusParameters(UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
  void SetGlobalPitchModulation(UObject* WorldContextObject, float PitchModulation, float TimeSec);
  void SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation);
  void SetPlayerControllerID(APlayerController* Player, int32 ControllerId);
  void SetSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
  void SetSubtitlesEnabled(bool bEnabled);
  void SetWorldOriginLocation(UObject* WorldContextObject, struct FIntVector NewLocation);
  UDecalComponent* SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan);
  UDecalComponent* SpawnDecalAttached(UMaterialInterface* DecalMaterial, struct FVector DecalSize, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, uint8 LocationType, float LifeSpan);
  UAudioComponent* SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, struct FDialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);
  UAudioComponent* SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, struct FDialogueContext Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
  UAudioComponent* SpawnDialogueAttached(UDialogueWave* Dialogue, struct FDialogueContext Context, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, uint8 LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy);
  UParticleSystemComponent* SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy);
  UParticleSystemComponent* SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, uint8 LocationType, bool bAutoDestroy);
  UForceFeedbackComponent* SpawnForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
  UForceFeedbackComponent* SpawnForceFeedbackAttached(UForceFeedbackEffect* ForceFeedbackEffect, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, uint8 LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
  UObject* SpawnObject(UClass<UObject>* ObjectClass, UObject* Outer);
  UAudioComponent* SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
  UAudioComponent* SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
  UAudioComponent* SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, uint8 LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
  bool SuggestProjectileVelocity_CustomArc(UObject* WorldContextObject, struct FVector OutLaunchVelocity, struct FVector startPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam);
  void UnloadStreamLevel(UObject* WorldContextObject, FName LevelName, struct FLatentActionInfo LatentInfo);
};

class UGameplayTagAssetInterface: public UInterface {
  void GetOwnedGameplayTags(struct FGameplayTagContainer TagContainer);
  bool HasAllMatchingGameplayTags(struct FGameplayTagContainer TagContainer);
  bool HasAnyMatchingGameplayTags(struct FGameplayTagContainer TagContainer);
  bool HasMatchingGameplayTag(struct FGameplayTag TagToCheck);
};

class UGameplayTagsDeveloperSettings: public UObject {
  /* offset=0x001c flags=0x0018000000004201 */ FString DeveloperConfigName;
};

class UGameplayTagsList: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString ConfigFileName;
  /* offset=0x0028 flags=0x0010000000004201 */ TArray<struct FGameplayTagTableRow> GameplayTagList;
};

class UGameplayTagsManager: public UObject {
  /* offset=0x007c flags=0x0040000000000200 */ TArray<struct FGameplayTagSource> TagSources;
  /* offset=0x00d4 flags=0x0040000000000200 */ TArray<UDataTable*> GameplayTagTables;
};

class UGameplayTagsSettings: public UGameplayTagsList {
  /* offset=0x0034 flags=0x0018001040004201 */ bool ImportTagsFromConfig;
  /* offset=0x0035 flags=0x0018001040004201 */ bool WarnOnInvalidTags;
  /* offset=0x0038 flags=0x0010000000004201 */ TArray<struct FGameplayTagCategoryRemap> CategoryRemapping;
  /* offset=0x0044 flags=0x0018001040004201 */ bool FastReplication;
  /* offset=0x0048 flags=0x0010000000004201 */ TArray<struct FSoftObjectPath> GameplayTagTableList;
  /* offset=0x0054 flags=0x0010000000004201 */ TArray<struct FGameplayTagRedirect> GameplayTagRedirects;
  /* offset=0x0060 flags=0x0010000000004201 */ TArray<FName> CommonlyReplicatedTags;
  /* offset=0x006c flags=0x0018001040004201 */ int32 NumBitsForContainerSize;
  /* offset=0x0070 flags=0x0018001040004201 */ int32 NetIndexFirstBitSegment;
};

class UGameplayTask: public UObject {
  /* offset=0x0020 flags=0x0028081040000200 */ FName InstanceName;
  /* offset=0x002a flags=0x0028081040004200 */ enum ETaskResourceOverlapPolicy ResourceOverlapPolicy;
  /* offset=0x0044 flags=0x0028081040000200 */ UGameplayTask* ChildTask;

  void EndTask();
  void GenericGameplayTaskDelegate__DelegateSignature();
  void ReadyForActivation();
};

class UGameplayTaskOwnerInterface: public UInterface {
};

class UGameplayTaskResource: public UObject {
  /* offset=0x001c flags=0x0028081040014215 */ int32 ManualResourceID;
  /* offset=0x0020 flags=0x0048001040000200 */ int8 AutoResourceID;
  /* offset=0x0021 flags=0x0018001000010001 */ uint8 bManuallySetID:1;
};

class UGameplayTask_ClaimResource: public UGameplayTask {
  UGameplayTask_ClaimResource* ClaimResource(UInterface<UGameplayTaskOwnerInterface>* InTaskOwner, UClass<UGameplayTaskResource>* ResourceClass, uint8 Priority, FName TaskInstanceName);
  UGameplayTask_ClaimResource* ClaimResources(UInterface<UGameplayTaskOwnerInterface>* InTaskOwner, TArray<UClass<UGameplayTaskResource>*> ResourceClasses, uint8 Priority, FName TaskInstanceName);
};

class UGameplayTask_SpawnActor: public UGameplayTask {
  /* offset=0x0048 flags=0x0010000010080200 */ FGameplayTaskSpawnActorDelegate Success;
  /* offset=0x0054 flags=0x0010000010080200 */ FGameplayTaskSpawnActorDelegate DidNotSpawn;
  /* offset=0x0078 flags=0x002c081040000200 */ UClass<AActor>* ClassToSpawn;

  bool BeginSpawningActor(UObject* WorldContextObject, AActor* SpawnedActor);
  void FinishSpawningActor(UObject* WorldContextObject, AActor* SpawnedActor);
  UGameplayTask_SpawnActor* SpawnActor(UInterface<UGameplayTaskOwnerInterface>* TaskOwner, struct FVector SpawnLocation, struct FRotator SpawnRotation, UClass<AActor>* Class, bool bSpawnOnlyOnAuthority);
};

class UGameplayTask_TimeLimitedExecution: public UGameplayTask {
  /* offset=0x0048 flags=0x0010000010080200 */ FTaskFinishDelegate OnFinished;
  /* offset=0x0054 flags=0x0010000010080200 */ FTaskFinishDelegate OnTimeExpired;
};

class UGameplayTask_WaitDelay: public UGameplayTask {
  /* offset=0x0048 flags=0x0010000010080200 */ FTaskDelayDelegate OnFinish;

  void TaskDelayDelegate__DelegateSignature();
  UGameplayTask_WaitDelay* TaskWaitDelay(UInterface<UGameplayTaskOwnerInterface>* TaskOwner, float Time, uint8 Priority);
};

class UGameplayTasksComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x0020080100000220 */ TArray<UGameplayTask*> SimulatedTasks;
  /* offset=0x00bc flags=0x0020080000000200 */ TArray<UGameplayTask*> TaskPriorityQueue;
  /* offset=0x00d4 flags=0x0020080000000200 */ TArray<UGameplayTask*> TickingTasks;
  /* offset=0x00e0 flags=0x0020080000002200 */ TArray<UGameplayTask*> KnownTasks;
  /* offset=0x00f0 flags=0x0010000000080204 */ FOnClaimedResourcesChangeSignature OnClaimedResourcesChange;

  enum EGameplayTaskRunResult K2_RunGameplayTask(UInterface<UGameplayTaskOwnerInterface>* TaskOwner, UGameplayTask* Task, uint8 Priority, TArray<UClass<UGameplayTaskResource>*> AdditionalRequiredResources, TArray<UClass<UGameplayTaskResource>*> AdditionalClaimedResources);
  void OnRep_SimulatedTasks();
};

class UGarbageCollectionSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0028081040004201 */ float TimeBetweenPurgingPendingKillObjects;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 FlushStreamingOnGC:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 AllowParallelGC:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 CreateGCClusters:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 MergeGCClusters:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 ActorClusteringEnabled:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 BlueprintClusteringEnabled:1;
  /* offset=0x0034 flags=0x0028081000004001 */ uint8 UseDisregardForGCOnDedicatedServers:1;
  /* offset=0x0038 flags=0x0028081040004201 */ int32 NumRetriesBeforeForcingGC;
  /* offset=0x003c flags=0x0028081040004201 */ int32 MinActorNumForCluster;
  /* offset=0x0040 flags=0x0028081040004201 */ int32 MaxObjectsNotConsideredByGC;
  /* offset=0x0044 flags=0x0028081040004201 */ int32 SizeOfPermanentObjectPool;
  /* offset=0x0048 flags=0x0028081040004201 */ int32 MaxObjectsInGame;
  /* offset=0x004c flags=0x0028081040004201 */ int32 MaxObjectsInEditor;
};

class UGeneralEngineSettings: public UObject {
};

class UGeneralPopupNotice_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button01;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button02;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button03;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Btn01Name;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Btn02Name;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Btn03Name;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x0258 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_TipsContent;
  /* offset=0x025c flags=0x0000000000010205 */ TArray<UTextBlock*> ButtonNameArray;
  /* offset=0x0268 flags=0x0000000000010205 */ TArray<FString> CallbackArray;
  /* offset=0x0274 flags=0x0008001040010a05 */ Abp_popup_notice_C* Manager;

  void BndEvt__Button01_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button02_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button03_K2Node_ComponentBoundEvent_35_OnButtonClickedEvent__DelegateSignature();
  void CheckNext(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void Construct();
  void ExecuteUbergraph_GeneralPopupNotice_BP(int32 EntryPoint, TArray<UTextBlock*> K2Node_MakeArray_Array, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, FString CallFunc_Array_Get_Item, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_popup_notice_C* K2Node_DynamicCast_AsBp_Popup_Notice, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3);
  void FetchFromStack(int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, struct FBP_STRUCT_MessageBoxData CallFunc_Array_Get_Item);
  void FillData(struct FBP_STRUCT_MessageBoxData MessageBoxData, int32 ___int_Array_Index_Variable, struct FBP_STRUCT_MessageBoxButton CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue, UTextBlock* CallFunc_Array_Get_Item2, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void SetBtnStatus(int32 Btn ShowType, bool K2Node_SwitchInteger_CmpSuccess);
  void ShowMessageBox();
};

class UGeneralProjectSettings: public UObject {
  /* offset=0x001c flags=0x0018000000004201 */ FString CompanyName;
  /* offset=0x0028 flags=0x0018000000004201 */ FString CompanyDistinguishedName;
  /* offset=0x0034 flags=0x0018000000004201 */ FString CopyrightNotice;
  /* offset=0x0040 flags=0x0018000000004201 */ FString Description;
  /* offset=0x004c flags=0x0018000000004201 */ FString Homepage;
  /* offset=0x0058 flags=0x0018000000004201 */ FString LicensingTerms;
  /* offset=0x0064 flags=0x0018000000004201 */ FString PrivacyPolicy;
  /* offset=0x0070 flags=0x0018001040004001 */ struct FGuid ProjectID;
  /* offset=0x0080 flags=0x0018000000004201 */ FString ProjectName;
  /* offset=0x008c flags=0x0018000000004201 */ FString ProjectVersion;
  /* offset=0x0098 flags=0x0018000000004201 */ FString SupportContact;
  /* offset=0x00a4 flags=0x0010000000004001 */ FText ProjectDisplayedTitle;
  /* offset=0x00b0 flags=0x0010000000004001 */ FText ProjectDebugTitleInfo;
  /* offset=0x00bc flags=0x0018001040004201 */ bool bShouldWindowPreserveAspectRatio;
  /* offset=0x00bd flags=0x0018001040004201 */ bool bUseBorderlessWindow;
  /* offset=0x00be flags=0x0018001040004201 */ bool bStartInVR;
  /* offset=0x00bf flags=0x0018001040004201 */ bool bStartInAR;
  /* offset=0x00c0 flags=0x0018001040004201 */ bool bAllowWindowResize;
  /* offset=0x00c1 flags=0x0018001040004201 */ bool bAllowClose;
  /* offset=0x00c2 flags=0x0018001040004201 */ bool bAllowMaximize;
  /* offset=0x00c3 flags=0x0018001040004201 */ bool bAllowMinimize;
};

class AGeneratedMeshAreaLight: public ASpotLight {
};

class UGeneratorActorAIInterface: public UInterface {
  void RegisterAIPickupPoint(int32 AIGroup, AActor* PickUpActor);
};

class UGeneratorActorInterface: public UInterface {
  void InitData(USpotSceneComponent* GenerateSpotComponent, int32 ItemCount);
};

class UGeneratorVehicleInterface: public UInterface {
  void InitVehicle(int32 FuelPercent, bool bEngineOn);
};

class UGenericTeamAgentInterface: public UInterface {
};

class UGeometryCache: public UObject {
  /* offset=0x0020 flags=0x0010000000020201 */ TArray<UMaterialInterface*> Materials;
  /* offset=0x002c flags=0x0010000000020201 */ TArray<UGeometryCacheTrack*> Tracks;
};

class AGeometryCacheActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UGeometryCacheComponent* GeometryCacheComponent;

  UGeometryCacheComponent* GetGeometryCacheComponent();
};

class UGeometryCacheComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0018001040000215 */ UGeometryCache* GeometryCache;
  /* offset=0x05e0 flags=0x0028081240000205 */ bool bRunning;
  /* offset=0x05e1 flags=0x0028081240000205 */ bool bLooping;
  /* offset=0x05e4 flags=0x0028081240000205 */ float StartTimeOffset;
  /* offset=0x05e8 flags=0x0028081240000205 */ float PlaybackSpeed;
  /* offset=0x05ec flags=0x0028081040020201 */ int32 NumTracks;
  /* offset=0x05f0 flags=0x0028081040020201 */ float ElapsedTime;

  float GetPlaybackSpeed();
  float GetStartTimeOffset();
  bool IsLooping();
  bool IsPlaying();
  bool IsPlayingReversed();
  void Pause();
  void Play();
  void PlayFromStart();
  void PlayReversed();
  void PlayReversedFromEnd();
  bool SetGeometryCache(UGeometryCache* NewGeomCache);
  void SetLooping(bool bNewLooping);
  void SetPlaybackSpeed(float NewPlaybackSpeed);
  void SetStartTimeOffset(float NewStartTimeOffset);
  void Stop();
};

class UGeometryCacheTrack: public UObject {
};

class UGeometryCacheTrack_FlipbookAnimation: public UGeometryCacheTrack {
  /* offset=0x0038 flags=0x0048001040020201 */ uint32 NumMeshSamples;

  void AddMeshSample(struct FGeometryCacheMeshData MeshData, float SampleTime);
};

class UGeometryCacheTrack_TransformAnimation: public UGeometryCacheTrack {
  void SetMesh(struct FGeometryCacheMeshData NewMeshData);
};

class UGeometryCacheTrack_TransformGroupAnimation: public UGeometryCacheTrack {
  void SetMesh(struct FGeometryCacheMeshData NewMeshData);
};

class UGlobalBattleUIFunctionLibrary_C: public UBlueprintFunctionLibrary {
  void CreateUAEUserWidget(UClass<UUAEUserWidget>* Class, UUAEUserWidget* Parent, UObject* __WorldContext, UUAEUserWidget* Widget, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUAEUserWidget* CallFunc_Create_ReturnValue);
  void GetLocalizeText(FString Key, UObject* __WorldContext, FString Text, FName CallFunc_Conv_StringToName_ReturnValue, UUAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void LoadUIElemLayoutSG(UObject* __WorldContext, UBP_SAVEGAME_UIElemLayout_C* UIElemSaveGame, USaveGame* CallFunc_LoadGameFromSlot_ReturnValue, UBP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, UBP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess);
  bool SaveUIElemLayoutSG(USaveGame* SaveGameObject, UObject* __WorldContext, bool CallFunc_SaveGameToSlot_ReturnValue);
};

class AGlobalConfigActor: public AActor {
  /* offset=0x02ac flags=0x0028081040000200 */ bool bInitComponents;

  void Init();
};

class AGlobalLevelLogicActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040000215 */ bool bEnableGroundWaterFogSwitch;
  /* offset=0x02b0 flags=0x0018001040000215 */ FName GroundFogTag;
  /* offset=0x02b8 flags=0x0018001040000215 */ FName WaterFogTag;
  /* offset=0x02c0 flags=0x0018001040000215 */ float SeaLvel;
  /* offset=0x02c4 flags=0x0028081040000200 */ AExponentialHeightFog* GroundFog;
  /* offset=0x02c8 flags=0x0028081040000200 */ AExponentialHeightFog* WaterFog;
};

class UGlobalUIContainer_BP_C: public UUAEWidgetContainer {
  /* offset=0x0240 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCanvasPanel* CanvasContainer;

  void AddWidgetInternal(UUAEUserWidget* Widget);
  void ExecuteUbergraph_GlobalUIContainer_BP(int32 EntryPoint, UUAEUserWidget* K2Node_Event_Widget, UUAEUserWidget* K2Node_Event_Widget2, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, struct FAnchors K2Node_MakeStruct_Anchors, struct FMargin K2Node_MakeStruct_Margin);
  void RemoveWidgetInternal(UUAEUserWidget* Widget);
};

class UGlobalUIEventDispatcher_BP_C: public UObject {
  /* offset=0x0020 flags=0x0000100010010205 */ FWardrobePutDownEvent WardrobePutDownEvent;

  void WardrobePutDownEvent__DelegateSignature(int32 PutonID, int32 resID);
};

class UGlobalUIFunctionLibrary_C: public UBlueprintFunctionLibrary {
  void BoolToVisible(bool visible, bool collapse, bool isButton, UObject* __WorldContext, enum ESlateVisibility Visibility);
  void CheckIfMenuOpen(int32 MenuId, UObject* __WorldContext, bool ret, Abp_global_C* CallFunc_GetGlobalData_globalObj);
  void CloseItemTips(UObject* __WorldContext, Abp_global_C* CallFunc_GetGlobalData_globalObj);
  void CreateUAEUserWidget(UClass<UUAEUserWidget>* Class, UUAEUserWidget* Parent, UObject* __WorldContext, UUAEUserWidget* Widget, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUAEUserWidget* CallFunc_Create_ReturnValue);
  void GetBpLuaObject(FName bp_name, UObject* __WorldContext, ALuaClassObj* Lua obj, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue);
  void GetGlobalData(UObject* __WorldContext, Abp_global_C* globalObj, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess3);
  void GetGlobalUIEventDispatcher(UFrontendHUD* FrontendHUD, UObject* __WorldContext, UGlobalUIEventDispatcher_BP_C* NewParam, UFrontendUtils* CallFunc_GetUtils_ReturnValue, UObject* CallFunc_GetGlobalUIEventDispatcher_ReturnValue, UGlobalUIEventDispatcher_BP_C* K2Node_DynamicCast_AsGlobal_UIEvent_Dispatcher_BP, bool K2Node_DynamicCast_bSuccess);
  void GetItemTimeS(int32 res_id, int32 FirstTimeNum, UObject* __WorldContext, FString time_s, bool is_have_limit, struct FBP_STRUCT_Item_type CallFunc_GetItemTableRow_Item, FString CallFunc_TimeNumToTimeS_time_s, FString CallFunc_GetLocalizeString_textValue, int32 CallFunc_Len_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Replace_ReturnValue, FString CallFunc_GetLocalizeString_textValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2);
  void GetItemTimeS_Server(int32 expire_ts, int32 valid_hours, UObject* __WorldContext, FString time_s, bool is_have_limit, FString CallFunc_TimeNumToTimeS_time_s, FString CallFunc_GetLocalizeString_textValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);
  void GetLocalizeString(int32 ID, FString string1, FString string2, FString string3, UObject* __WorldContext, FString TextValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FName CallFunc_Conv_StringToName_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, UUAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue4, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);
  void GetTextLength(FString Text, bool ChineseSensity, UObject* __WorldContext, int32 Length, int32 TextLength, int32 CallFunc_Len_ReturnValue, TArray<FString> CallFunc_GetCharacterArrayFromString_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_IsSpace_Result, bool CallFunc_IsNumeric_ReturnValue, bool CallFunc_IsEnglish_isEnglish, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3);
  void GetValidString(int32 maxLength, FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeSpace, bool CanBeChinese, bool ChineseSensity, UObject* __WorldContext, FString validText, FString ValidResultText, int32 CallFunc_Len_ReturnValue, int32 CallFunc_GetTextLength_length, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Left_ReturnValue, int32 CallFunc_Len_ReturnValue2, TArray<FString> CallFunc_GetCharacterArrayFromString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Replace_ReturnValue, bool CallFunc_IsValidChar_Result, int32 CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void GetValidStringAll(FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeSpace, bool CanBeChinese, UObject* __WorldContext, FString validText, FString ValidResultText, bool ___bool_True_if_break_was_hit_Variable, int32 CallFunc_Len_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<FString> CallFunc_GetCharacterArrayFromString_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_IsValidChar_Result, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Replace_ReturnValue);
  void InvoleBpFunction(FName bp_name, FString func_name, UObject* __WorldContext, FString funcname, FName bpname, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue);
  void IsChinese(FString Text, UObject* __WorldContext, bool Result, int32 CallFunc_GetCharacterAsNumber_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);
  void IsEnglish(FString Text, UObject* __WorldContext, bool IsEnglish, int32 CallFunc_GetCharacterAsNumber_ReturnValue, int32 CallFunc_GetCharacterAsNumber_ReturnValue2, int32 CallFunc_GetCharacterAsNumber_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_GetCharacterAsNumber_ReturnValue4, int32 CallFunc_GetCharacterAsNumber_ReturnValue5, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_GetCharacterAsNumber_ReturnValue6, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void IsNumber(FString Text, UObject* __WorldContext, bool Result, int32 CallFunc_GetCharacterAsNumber_ReturnValue, int32 CallFunc_GetCharacterAsNumber_ReturnValue2, int32 CallFunc_GetCharacterAsNumber_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void IsSpace(FString Text, UObject* __WorldContext, bool Result, int32 CallFunc_GetCharacterAsNumber_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue);
  void IsValidChar(FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeSpace, bool CanBeChinese, UObject* __WorldContext, bool Result, bool CallFunc_IsChinese_Result, bool CallFunc_IsSpace_Result, bool CallFunc_IsNumber_Result, bool CallFunc_IsEnglish_isEnglish);
  void IsWidgetVisible(UWidget* Widget, UObject* __WorldContext, bool visible, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);
  void OpenURL(FString URL, UObject* __WorldContext, Abp_global_C* CallFunc_GetGlobalData_globalObj);
  void PlaySoundClickButton(UObject* __WorldContext, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void PlaySoundCloseButton(UObject* __WorldContext, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void SendBAReport(int32 ButtonType, int32 Reason, UObject* __WorldContext, Abp_global_C* CallFunc_GetGlobalData_globalObj);
  void ShowEffect(TArray<UWidget*> Widget, bool isShow, UObject* __WorldContext, enum ESlateVisibility Type, int32 ___int_Variable, enum ESlateVisibility CallFunc_BoolToVisible_visibility, int32 CallFunc_Add_IntInt_ReturnValue, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void ShowItemTipsByButton(int32 ItemID, UButton* Button, UObject* __WorldContext, Abp_global_C* LuaRef, Abp_global_C* CallFunc_GetGlobalData_globalObj, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, struct FVector2D CallFunc_GetAbsoluteSize_ReturnValue, struct FVector2D CallFunc_LocalToViewport_PixelPosition, struct FVector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_FTrunc_ReturnValue2, struct FBP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos, struct FBP_STRUCT_GlobalTips_TimeInfo K2Node_MakeStruct_BP_STRUCT_GlobalTips_TimeInfo);
  void ShowItemTipsByPos(int32 ItemID, struct FVector2D Pos, UObject* __WorldContext, Abp_global_C* LuaRef, Abp_global_C* CallFunc_GetGlobalData_globalObj, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_FTrunc_ReturnValue2, struct FBP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos);
  void ShowItemTipsWithItemInfo(UButton* Button, struct FBP_STRUCT_CommonItemData item_info, UObject* __WorldContext, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, struct FVector2D CallFunc_GetAbsoluteSize_ReturnValue, struct FVector2D CallFunc_LocalToViewport_PixelPosition, struct FVector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, int32 CallFunc_FTrunc_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue3, struct FBP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos, int32 CallFunc_FTrunc_ReturnValue4, int32 CallFunc_FTrunc_ReturnValue5, struct FVector2D CallFunc_GetViewportSize_ReturnValue, struct FBP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos2, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, Abp_global_C* CallFunc_GetGlobalData_globalObj, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue5, int32 CallFunc_FTrunc_ReturnValue6, struct FBP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos3, struct FBP_STRUCT_GlobalTips_TimeInfo K2Node_MakeStruct_BP_STRUCT_GlobalTips_TimeInfo);
  void TimeNumToTimeS(int32 time_num, UObject* __WorldContext, FString time_s, FString CallFunc_GetLocalizeString_textValue, FString CallFunc_GetLocalizeString_textValue2, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2);
  void UpdateLobbyRedpointStatus(bool isShow, int32 modeId, UObject* __WorldContext, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess3, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);
  void UpdateRankIcon(UImage* imageObj, int32 Level, UObject* __WorldContext, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void UpdateRankName(UTextBlock* Text, int32 Level, UObject* __WorldContext, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
};

class UGlobal_Bp_C: public UUAEUserWidget {
  void EnterCreateRole(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void EnterCreateRoleDelay(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);
  void EnterFightStopMusic(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void EnterLobby(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);
  void EnterLogin(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);
  void EventAndroidQuitGame(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess);
  void OpenPGUrl();
  void QuitGame(UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);
  void ShowHelpshiftConversion(ALuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2);
};

class UGlobal_Voice_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* btn_mic_off;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* btn_mic_on;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* btn_voice_off;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* btn_voice_on;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0264 flags=0x000a0010c008020c */ UCanvasPanel* lobby_root_anchor;
  /* offset=0x0268 flags=0x000a0010c008020c */ UOverlay* mic_root_anchor;
  /* offset=0x026c flags=0x000a0010c008020c */ UOverlay* voice_root_anchor;
  /* offset=0x0270 flags=0x0008001040010205 */ UGVoiceInterface* GVoiceHandle;
  /* offset=0x0274 flags=0x0008001040010a05 */ Abp_chat_voice_C* LuaObject;
  /* offset=0x0278 flags=0x0008001040010205 */ int32 GVOICE_REALTIME;
  /* offset=0x027c flags=0x0008001040010205 */ int32 GVOICE_OFFLINE;
  /* offset=0x0280 flags=0x0000001040010205 */ bool VoiceMessageInited;
  /* offset=0x0281 flags=0x0000001040010205 */ bool RoleValid;
  /* offset=0x0284 flags=0x0008000000010205 */ FString RoleGID;
  /* offset=0x0290 flags=0x0008001040010205 */ int32 GVoiceResendCounter;
  /* offset=0x0294 flags=0x0008001040010205 */ int32 GVoiceResendRatio;
  /* offset=0x0298 flags=0x0008001040010205 */ int32 GVOICE_TIMER_AUTH;
  /* offset=0x029c flags=0x0008001040010205 */ int32 GVOICE_TIMER_UPLOAD;
  /* offset=0x02a0 flags=0x0008001040010205 */ int32 GVOICE_TIMER_TOTEXT;
  /* offset=0x02a4 flags=0x0008001040010205 */ int32 GVOICE_TIMER_RECORD;
  /* offset=0x02a8 flags=0x0008001040010205 */ int32 GVOICE_TIMER_DOWNLOAD;
  /* offset=0x02ac flags=0x0008001040010205 */ int32 GVOICE_TIMER_PLAYRECORD;
  /* offset=0x02b0 flags=0x0000000000010205 */ TArray<struct FTimerHandle> GVoiceResendStopTimers;
  /* offset=0x02bc flags=0x0000000000010205 */ TArray<struct FTimerHandle> GVoiceResendLoopTimers;
  /* offset=0x02c8 flags=0x0008001040010205 */ float GVoiceOfflineLimit;
  /* offset=0x02cc flags=0x0008001040010205 */ float GVoiceProcedureResendTime;
  /* offset=0x02d0 flags=0x0008000000010205 */ FString lastDownloadRecord;
  /* offset=0x02dc flags=0x0000001040010205 */ bool voiceRecording;
  /* offset=0x02dd flags=0x0000001040010205 */ bool voiceTryDelayRecording;
  /* offset=0x02de flags=0x0000001040010205 */ bool voiceTryDownloading;
  /* offset=0x02df flags=0x0000001040010205 */ bool voiceTryRecording;
  /* offset=0x02e0 flags=0x0000001040010205 */ bool voiceUploading;
  /* offset=0x02e1 flags=0x0000001040010205 */ bool isTeamup;
  /* offset=0x02e4 flags=0x0008001040010205 */ USettingConfig_C* userSetting;
  /* offset=0x02e8 flags=0x0000001040010205 */ bool userVoiceOn;
  /* offset=0x02e9 flags=0x0000001040010205 */ bool userMicOn;
  /* offset=0x02ea flags=0x0000001040010205 */ bool userSpeakerOn;
  /* offset=0x02ec flags=0x0008001040010205 */ int32 lastBGMVolume;
  /* offset=0x02f0 flags=0x0000001040010205 */ bool lastBGMFade;
  /* offset=0x02f4 flags=0x0008001040010205 */ float thisRecordTime;
  /* offset=0x02f8 flags=0x0000001040010205 */ bool micOpened;
  /* offset=0x02f9 flags=0x0000001040010205 */ bool speakerOpened;
  /* offset=0x0300 flags=0x0000001000010005 */ struct FTimerHandle tickTimer;

  void AddProcedureTimer(struct FTimerHandle Handle, int32 resendType, bool isStop);
  void BndEvt__btn_mic_off_K2Node_ComponentBoundEvent_104_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_mic_on_K2Node_ComponentBoundEvent_58_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_voice_off_K2Node_ComponentBoundEvent_41_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_voice_on_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();
  void ChangeMicState(bool State, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void ChangeSpeakerState(bool Open, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void CheckLbsState(bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int32 CallFunc_OpenIngameMicphone_ReturnValue);
  void CheckVoiceMessageInited(bool ret);
  void ClearAllTimers(struct FTimerHandle CallFunc_GetProcedureTimer_output, struct FTimerHandle CallFunc_GetProcedureTimer_output2, struct FTimerHandle CallFunc_GetProcedureTimer_output3, struct FTimerHandle CallFunc_GetProcedureTimer_output4, struct FTimerHandle CallFunc_GetProcedureTimer_output5, struct FTimerHandle CallFunc_GetProcedureTimer_output6, struct FTimerHandle CallFunc_GetProcedureTimer_output7, struct FTimerHandle CallFunc_GetProcedureTimer_output8, struct FTimerHandle CallFunc_GetProcedureTimer_output9, struct FTimerHandle CallFunc_GetProcedureTimer_output10, struct FTimerHandle CallFunc_GetProcedureTimer_output11, struct FTimerHandle CallFunc_GetProcedureTimer_output12);
  void ClearGVoiceAuthResendEntry(struct FTimerHandle CallFunc_GetProcedureTimer_output);
  void ClearGVoiceSpeechToTextResendEntry(struct FTimerHandle CallFunc_GetProcedureTimer_output);
  void ClearGVoiceUploadResendEntry(struct FTimerHandle CallFunc_GetProcedureTimer_output);
  void ClearResendProcedure();
  void Construct();
  void ExecuteUbergraph_Global_Voice(int32 EntryPoint, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate2, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_NotEqual_StrStr_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue2, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue3, struct FTimerHandle CallFunc_GetProcedureTimer_output, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_chat_voice_C* K2Node_DynamicCast_AsBp_Chat_Voice, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool K2Node_CustomEvent_BoolValue3, bool K2Node_CustomEvent_BoolValue2, bool K2Node_CustomEvent_BoolValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_NotEqual_BoolBool_ReturnValue, struct FTimerHandle CallFunc_GetProcedureTimer_output2, float CallFunc_Multiply_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret2, USaveGame* CallFunc_GetUserSettings_ReturnValue, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_CheckVoiceMessageInited_ret3, bool CallFunc_CheckVoiceMessageInited_ret4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue2, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  void FadeInBGM(int32 thisVolume, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue);
  void FadeOutBGM(int32 thisVolume, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue);
  void GetProcedureTimer(int32 Type, bool stopTimer, struct FTimerHandle Output);
  void LeaveGVoiceOffline();
  void OnAfterRequireAuth();
  void OnAfterRequireSpeechToText();
  void OnAfterRequireUpload();
  void OnApplicationDeactivated();
  void OnApplyMessageKeyComplete();
  void OnClearAuthResend();
  void OnClearDownloadFailedNotify();
  void OnClearRoleInfo();
  void OnClearSpeechToTextResend();
  void OnClearUploadResend();
  void OnClickMicOff(bool CallFunc_BooleanOR_ReturnValue);
  void OnClickMicOn();
  void OnClickSpeakerOff();
  void OnClickSpeakerOn(bool CallFunc_BooleanAND_ReturnValue);
  void OnDownloadFileComplete();
  void OnGVoiceInited();
  void OnGameStageChanged();
  void OnJoinVoiceRoomSuccess();
  void OnMicSwitcherChanged(bool BoolValue);
  void OnQuitVoiceRoomSuccess();
  void OnRequireAuthResend();
  void OnRequireSpeechToTextResend();
  void OnRequireUploadResend();
  void OnResetRoleInfo();
  void OnSpeakerSwitcherChanged(bool BoolValue);
  void OnTeamStateChanged();
  void OnTeamVoiceRoomChanged();
  void OnTryCancelRecordVoice();
  void OnTryCloseMic();
  void OnTryDownloadVoiceRecord();
  void OnTryStartRecordVoice();
  void OnTryStopPlayRecordVoice();
  void OnTryStopRecordVoice();
  void OnUploadRecordFailed();
  void OnUploadRecordFileComplete();
  void OnUploadSpeechToTextComplete();
  void OnVoiceMicOpenChanged();
  void OnVoiceModeChanged();
  void OnVoiceSpeakerOpenChanged();
  void OnVoiceSwitcherChanged(bool BoolValue);
  void PlayDownloadFile(struct FBP_STRUCT_GlobalChatvoiceDownloadData thisDownload, bool CallFunc_CheckVoiceMessageInited_ret, float CallFunc_Conv_IntToFloat_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void ProcessVoiceProcedure(bool Output, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void RecoverGVoiceRealtime(bool CallFunc_NotEqual_StrStr_ReturnValue);
  void RefreshLobbyUI();
  void RefreshMicUI();
  void RefreshSpeakerUI();
  void RefreshStageUI(bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void RefreshTeamUI();
  void RequireGVoiceAuth(bool CallFunc_ProcessVoiceProcedure_output);
  void RequireGVoiceAuthEntry();
  void RequireGVoiceDownload(struct FBP_STRUCT_GlobalChatvoiceDownloadData thisDownload, bool CallFunc_CheckVoiceMessageInited_ret, bool CallFunc_NotEqual_StrStr_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void RequireGVoiceSpeechToText(bool CallFunc_ProcessVoiceProcedure_output);
  void RequireGVoiceSpeechToTextEntry();
  void RequireGVoiceUpload(float CallFunc_GetVoiceLength_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, float CallFunc_GetVoiceLength_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_FFloor_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_ProcessVoiceProcedure_output, FString CallFunc_Concat_StrStr_ReturnValue5);
  void RequireGVoiceUploadEntry(struct FTimerHandle CallFunc_GetProcedureTimer_output, struct FTimerHandle CallFunc_GetProcedureTimer_output2);
  void ResetGVoiceMode(int32 Mode, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);
  void ResetTeamVoice(bool CallFunc_NotEqual_StrStr_ReturnValue);
  void RetrieveGVoiceOffline();
  void StartRecordVoice(bool CallFunc_CheckVoiceMessageInited_ret, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void StopPlayRecordFile(bool CallFunc_CheckVoiceMessageInited_ret, struct FTimerHandle CallFunc_GetProcedureTimer_output);
  void StopPlayRecordFileAndRecoverBGM();
  void StopRecordVoice(bool cancel, bool isCancel, bool CallFunc_CheckVoiceMessageInited_ret, struct FTimerHandle CallFunc_GetProcedureTimer_output, struct FTimerHandle CallFunc_GetProcedureTimer_output2, float CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);
  void SyncLuaData();
  void SyncPushLuaData();
  void SyncTeamupState();
  void TickVoiceRoom();
  void UIHide();
  void UIShow();
};

class UGrenadeAimBtn_C: public UCustomUserWidget {
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Profile;
  /* offset=0x023c flags=0x0000100010010205 */ FGrenadeTriggerHit GrenadeTriggerHit;
  /* offset=0x0248 flags=0x0000100010010205 */ FGrenadeThrown GrenadeThrown;

  void GrenadeThrown__DelegateSignature();
  void GrenadeTriggerHit__DelegateSignature();
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void SwitchCamera(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
};

class UGrenadeList_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* Extend;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_CurrentUseGrenade;
  /* offset=0x023c flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot1;
  /* offset=0x0240 flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot2;
  /* offset=0x0244 flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot3;
  /* offset=0x0248 flags=0x000a0010c008020c */ UBorder* Border_InteractivePanel;
  /* offset=0x024c flags=0x000a0010c008020c */ UGridPanel* CurrentUseGrenade;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* CurUseBG;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* CurUseBtn;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* CurUseGrenadeCountText;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* CurUseGrenadeImage;
  /* offset=0x0260 flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot1;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* GrenadeSlot1BG;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* GrenadeSlot1Btn;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot1CountText;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* GrenadeSlot1Image;
  /* offset=0x0274 flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot2;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* GrenadeSlot2BG;
  /* offset=0x027c flags=0x000a0010c008020c */ UButton* GrenadeSlot2Btn;
  /* offset=0x0280 flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot2CountText;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* GrenadeSlot2Image;
  /* offset=0x0288 flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot3;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* GrenadeSlot3BG;
  /* offset=0x0290 flags=0x000a0010c008020c */ UButton* GrenadeSlot3Btn;
  /* offset=0x0294 flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot3CountText;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* GrenadeSlot3Image;
  /* offset=0x029c flags=0x000a0010c008020c */ UGridPanel* GrenadeSlotPanel;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_StandCrouchGrovelPanel;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* InteractiveBG;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* InteractiveTriangleToDown;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* InteractiveTriangleToUp;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UButton* InterativeBtn;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UGridPanel* MeleeExtraSlot;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* Slot4BG;
  /* offset=0x02bc flags=0x000a0010c008020c */ UBorder* Slot4Border;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UButton* Slot4Btn;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UGridPanel* Slot4Grid;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UImage* Slot4Image;
  /* offset=0x02cc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_CurBG;
  /* offset=0x02d8 flags=0x0000000000010005 */ struct FSlateBrush FragGrenadeNormal;
  /* offset=0x0340 flags=0x0000000000010005 */ struct FSlateBrush FragGrenadeHightLight;
  /* offset=0x03a8 flags=0x0000000000010005 */ struct FSlateBrush StunGrenadeNormal;
  /* offset=0x0410 flags=0x0000000000010005 */ struct FSlateBrush StunGrenadeHightLight;
  /* offset=0x0478 flags=0x0000000000010005 */ struct FSlateBrush SmokeGrenadeNormal;
  /* offset=0x04e0 flags=0x0000000000010005 */ struct FSlateBrush SmokeGrenadeHightLight;
  /* offset=0x0548 flags=0x0000000000010005 */ struct FSlateBrush FireGrenadeNormal;
  /* offset=0x05b0 flags=0x0000000000010005 */ struct FSlateBrush FireGrenadeHightLight;
  /* offset=0x0618 flags=0x0000000000010005 */ struct FSlateBrush BtnNormalBG;
  /* offset=0x0680 flags=0x0000000000010005 */ struct FSlateBrush BtnHightLightBG;
  /* offset=0x06e8 flags=0x0000001000010005 */ struct FGrenadeSlotData CurUseGrenadeData;
  /* offset=0x06f0 flags=0x0000001000010005 */ struct FGrenadeSlotData Slot1Data;
  /* offset=0x06f8 flags=0x0000001000010005 */ struct FGrenadeSlotData Slot2Data;
  /* offset=0x0700 flags=0x0000001000010005 */ struct FGrenadeSlotData Slot3Data;
  /* offset=0x0708 flags=0x0000001040010205 */ bool IsListExpand;
  /* offset=0x0710 flags=0x0000000000010005 */ struct FSlateBrush InteractiveNormalBG;
  /* offset=0x0778 flags=0x0000000000010005 */ struct FSlateBrush InteractiveHighLightBG;
  /* offset=0x07e0 flags=0x0000001040010205 */ bool IsAutoCollapseInterupted;
  /* offset=0x07e4 flags=0x0008001040000205 */ float AutoCollapsedTime;
  /* offset=0x07e8 flags=0x0000100010010205 */ FOnUseGrenade OnUseGrenade;
  /* offset=0x07f4 flags=0x0000100010010205 */ FOnGrenadeEmpty OnGrenadeEmpty;
  /* offset=0x0800 flags=0x0008001040010a05 */ ASTExtraPlayerCharacter* STExtraPlayerCharacter;
  /* offset=0x0804 flags=0x0000000000000205 */ TArray<struct FDestroyWeaponReplicatedToOwnerData> AutoCollapsedTime;
  /* offset=0x0810 flags=0x0000000000010205 */ TMap<int32, struct FBP_STRUCT_Item_type> GrenadeAndMeleeWeaponDataTable;
  /* offset=0x084c flags=0x0008001040010205 */ int32 GrenadeSubType;
  /* offset=0x0850 flags=0x0008001040010205 */ int32 MeleeSubType;
  /* offset=0x0854 flags=0x0000000000010205 */ TArray<struct FBattleItemData> GrenadeAndMeleeDataArray;
  /* offset=0x0860 flags=0x0008001040010205 */ int32 MeleeItemIDMin;
  /* offset=0x0864 flags=0x0008001040010205 */ int32 MeleeItemIDMax;
  /* offset=0x0868 flags=0x0008001040010205 */ int32 GrenadeItemIDMin;
  /* offset=0x086c flags=0x0008001040010205 */ int32 GrenadeItemIDMax;
  /* offset=0x0870 flags=0x0000000000010005 */ struct FSlateBrush MacheteNormal;
  /* offset=0x08d8 flags=0x0000000000010005 */ struct FSlateBrush MacheteHighLight;
  /* offset=0x0940 flags=0x0000000000010005 */ struct FSlateBrush CowbarNormal;
  /* offset=0x09a8 flags=0x0000000000010005 */ struct FSlateBrush CowbarHighLight;
  /* offset=0x0a10 flags=0x0000000000010005 */ struct FSlateBrush PanNormal;
  /* offset=0x0a78 flags=0x0000000000010005 */ struct FSlateBrush PanHighLight;
  /* offset=0x0ae0 flags=0x0000000000010005 */ struct FSlateBrush SickleNormal;
  /* offset=0x0b48 flags=0x0000000000010005 */ struct FSlateBrush SickleHighLight;
  /* offset=0x0bb0 flags=0x0000001000010005 */ struct FGrenadeSlotData Slot4Data;
  /* offset=0x0bb8 flags=0x0000100010010205 */ FOnUseMelee OnUseMelee;
  /* offset=0x0bc4 flags=0x0000001040010205 */ bool bIsUsingGrenade;
  /* offset=0x0bc5 flags=0x0008001040010205 */ uint8 LastTimeUsingGrenadeType;
  /* offset=0x0bc8 flags=0x0000100010010205 */ FOnUseFist OnUseFist;
  /* offset=0x0bd4 flags=0x0000000000010205 */ TMap<uint8, FString> GrenadeToSlotIndexDict;
  /* offset=0x0c10 flags=0x0008001040010205 */ int32 NewVar;

  void AutoCollapseGrenadeSlot();
  void AutoSwitchGrenadeToCurUse(bool SwitchSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3);
  void BndEvt__CurUseBtn_K2Node_ComponentBoundEvent_806_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__CurUseBtn_K2Node_ComponentBoundEvent_825_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot1Btn_K2Node_ComponentBoundEvent_1510_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot1Btn_K2Node_ComponentBoundEvent_1531_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot2Btn_K2Node_ComponentBoundEvent_1440_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot2Btn_K2Node_ComponentBoundEvent_1459_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot3Btn_K2Node_ComponentBoundEvent_665_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__GrenadeSlot3Btn_K2Node_ComponentBoundEvent_674_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__InterativeBtn_K2Node_ComponentBoundEvent_757_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__InterativeBtn_K2Node_ComponentBoundEvent_767_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Slot4Btn_K2Node_ComponentBoundEvent_35_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Slot4Btn_K2Node_ComponentBoundEvent_58_OnButtonReleasedEvent__DelegateSignature();
  void ChangeGrenadeVisibilityByGrenadeCounts();
  void ExecuteUbergraph_GrenadeList(int32 EntryPoint, TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetGrenadeAndMeleeWeaponDataTableMap_DataTableRowMap, TArray<int32> CallFunc_Map_Keys_Keys, FChangeCurrentUsingWeaponDelegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, bool CallFunc_Not_PreBool_ReturnValue, bool ___bool_Has_Been_Initd_Variable, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_IsValid_ReturnValue, bool ___bool_IsClosed_Variable, uint8 K2Node_CustomEvent_TargetChangeSlot, bool K2Node_SwitchEnum_CmpSuccess, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue3);
  void GetBtnIncludeWidgetByIndex(int32 Index, UImage* BG, UImage* GrenadeImage, UButton* GrenadeBtn, UTextBlock* Text, UGridPanel* Grid, UBorder* Border, bool K2Node_SwitchInteger_CmpSuccess);
  void GetGrenadeAndMeleeWeaponDataArray(TArray<struct FBattleItemData> GrenadeAndMelee, uint8 CurFirstType, TArray<struct FComparableGrenadeItemType> ComparableGrenadeList, struct FBattleItemData CurUseWeaponBattleItemData, int32 CurUseWeaponSpecificID, bool bHasMelee, struct FBattleItemData CurBattleItemData, struct FBattleItemData MeleeAsLastWeaponData, struct FBP_STRUCT_Item_type CurItemDataTableRow, TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetGrenadeAndMeleeWeaponDataTableMap_DataTableRowMap, int32 CallFunc_GetGrenadePriorityByType_Priority, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, struct FComparableGrenadeItemType K2Node_MakeStruct_ComparableGrenadeItemType, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Add_ReturnValue, int32 ___int_Array_Index_Variable2, TArray<struct FComparableGrenadeItemType> CallFunc_SortGrenadeItemArray_ReturnValue, struct FComparableGrenadeItemType CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Add_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, uint8 CallFunc_GetGrenadeTypeByItemID_Type, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, uint8 CallFunc_GetGrenadeTypeByItemID_Type2, ASTExtraPlayerCharacter* CallFunc_GetPlayerCharacter_PlayerCharacter, int32 CallFunc_GetGrenadePriorityByType_Priority2, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, struct FComparableGrenadeItemType K2Node_MakeStruct_ComparableGrenadeItemType2, TArray<struct FBattleItemData> CallFunc_GetAllItemsInBackpack_ReturnValue, int32 CallFunc_Array_Add_ReturnValue3, struct FBattleItemData CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);
  void GetGrenadeAndMeleeWeaponDataTableMap(TMap<int32, struct FBP_STRUCT_Item_type> DataTableRowMap, int32 ___int_Array_Index_Variable, int32 CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void GetGrenadeIconByType(uint8 InputType, struct FSlateBrush Normal, struct FSlateBrush HightLight, bool K2Node_SwitchEnum_CmpSuccess);
  void GetGrenadePriorityByType(uint8 Type, int32 Priority, int32 CallFunc_MakeLiteralInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int32 CallFunc_MakeLiteralInt_ReturnValue2, int32 CallFunc_MakeLiteralInt_ReturnValue3, int32 CallFunc_MakeLiteralInt_ReturnValue4, int32 CallFunc_MakeLiteralInt_ReturnValue5, int32 CallFunc_MakeLiteralInt_ReturnValue6);
  void GetGrenadeSlotDataIndexByIndex(int32 Index, struct FGrenadeSlotData Data, bool K2Node_SwitchInteger_CmpSuccess);
  void GetGrenadeTypeByItemID(int32 ItemID, uint8 Type, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4);
  void GetIsAGrenadeByItemID(int32 ItemID, bool IsAGrenade, bool bIsGrenade, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4);
  void GetIsArrayHasGrenade(bool HasGrenade, bool LocalHasGrenade, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3);
  void GetPlayerCharacter(ASTExtraPlayerCharacter* PlayerCharacter, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue);
  void GetPlayerEquipWeaponBySlot(uint8 Slot, ASTExtraWeapon* Weapon, uint8 CurSlot, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetPlayerCharacter_PlayerCharacter, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue);
  void GetSlateBrushByItemID(int32 ItemID, struct FSlateBrush WeaponSlateBrushNormal, struct FSlateBrush WeaponSlateBrushHightLight, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue8);
  void HandleBackPackItemUpdate(bool CallFunc_GetIsArrayHasGrenade_HasGrenade, TArray<struct FBattleItemData> CallFunc_GetGrenadeAndMeleeWeaponDataArray_GrenadeAndMelee);
  void HandleItemUpdate();
  void HandleSlotChosen(int32 Index, int32 SlotIndex, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_GetIsAGrenadeByItemID_IsAGrenade, uint8 CallFunc_GetGrenadeTypeByItemID_Type, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue);
  void IsGrenadeCountZero(bool IsZero, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);
  void MarkDownUsingStatus(uint8 Slot, bool K2Node_SwitchEnum_CmpSuccess, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_GetIsAGrenadeByItemID_IsAGrenade, uint8 CallFunc_GetGrenadeTypeByItemID_Type);
  void OnGrenadeEmpty__DelegateSignature();
  void OnUseFist__DelegateSignature();
  void OnUseGrenade__DelegateSignature(uint8 grenadeType);
  void OnUseMelee__DelegateSignature();
  void PreConstruct(bool IsDesignTime);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState();
  void SetAutoCollapse(FString AutoCollapseFunctionName, bool CallFunc_K2_TimerExists_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void SetGrenadeOrder(TArray<struct FBattleItemData> Array, int32 FirstGrenadeID, int32 GrenadeIndex, int32 CopyIndex, uint8 CopyType, TArray<uint8> GrenadeTypeOrderArray, int32 CallFunc_Array_Length_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, struct FBattleItemData CallFunc_Array_Get_Item, uint8 CallFunc_GetGrenadeTypeByItemID_Type, bool CallFunc_GetIsAGrenadeByItemID_IsAGrenade, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void SetGrenadeSlotDataByIndex(struct FGrenadeSlotData InputData, int32 Index, struct FGrenadeSlotData Data, bool K2Node_SwitchInteger_CmpSuccess);
  void SetGrenadeVisibilityByCurStatus();
  void SetInteractiveTriangleByCurStatus();
  void SimulateExpand();
  void SortUnUseSlot(struct FGrenadeSlotData TempData, bool CallFunc_Greater_ByteByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue2, bool CallFunc_Greater_ByteByte_ReturnValue3);
  void SwitchSloatDataWithCurUse(int32 Index, struct FGrenadeSlotData TempSlotData, struct FGrenadeSlotData CallFunc_GetGrenadeSlotDataIndexByIndex_Data);
  void SwitchToFistIfCurGrenadeCountIsZero(bool bIsNeedChangeToFist, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, uint8 CallFunc_GetGrenadeTypeByItemID_Type, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GetIsAGrenadeByItemID_IsAGrenade, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);
  void UpdateDataToSlot(int32 CurIndex, struct FBattleItemData CurBattleItemData, UImage* CallFunc_GetBtnIncludeWidgetByIndex_BG, UImage* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeImage, UButton* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeBtn, UTextBlock* CallFunc_GetBtnIncludeWidgetByIndex_Text, UGridPanel* CallFunc_GetBtnIncludeWidgetByIndex_Grid, UBorder* CallFunc_GetBtnIncludeWidgetByIndex_Border, UImage* CallFunc_GetBtnIncludeWidgetByIndex_BG2, UImage* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeImage2, UButton* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeBtn2, UTextBlock* CallFunc_GetBtnIncludeWidgetByIndex_Text2, UGridPanel* CallFunc_GetBtnIncludeWidgetByIndex_Grid2, UBorder* CallFunc_GetBtnIncludeWidgetByIndex_Border2, int32 ___int_Variable, FText CallFunc_Conv_IntToText_ReturnValue, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushNormal, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushHightLight, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushNormal2, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushHightLight2, bool CallFunc_GetIsAGrenadeByItemID_IsAGrenade, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void UpdateGrenadeBtnBGAndImage(int32 Index, bool IsHighLight, bool highLight, UImage* CallFunc_GetBtnIncludeWidgetByIndex_BG, UImage* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeImage, UButton* CallFunc_GetBtnIncludeWidgetByIndex_GrenadeBtn, UTextBlock* CallFunc_GetBtnIncludeWidgetByIndex_Text, UGridPanel* CallFunc_GetBtnIncludeWidgetByIndex_Grid, UBorder* CallFunc_GetBtnIncludeWidgetByIndex_Border, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushNormal, struct FSlateBrush CallFunc_GetSlateBrushByItemID_WeaponSlateBrushHightLight);
  void UpdateGrenadeImageAndCounts(FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2, struct FSlateBrush CallFunc_GetGrenadeIconByType_Normal, struct FSlateBrush CallFunc_GetGrenadeIconByType_HightLight, struct FSlateBrush CallFunc_GetGrenadeIconByType_Normal2, struct FSlateBrush CallFunc_GetGrenadeIconByType_HightLight2, FText CallFunc_Conv_IntToText_ReturnValue3, FText CallFunc_Conv_IntToText_ReturnValue4, struct FSlateBrush CallFunc_GetGrenadeIconByType_Normal3, struct FSlateBrush CallFunc_GetGrenadeIconByType_HightLight3, struct FSlateBrush CallFunc_GetGrenadeIconByType_Normal4, struct FSlateBrush CallFunc_GetGrenadeIconByType_HightLight4);
  void WeaponChange(uint8 TargetChangeSlot);
};

class AGrenadePredictLine: public AActor {
  /* offset=0x02a8 flags=0x0018001040000005 */ struct FVector HighThrowOffset;
  /* offset=0x02b4 flags=0x0018001040000005 */ struct FVector LowThrowOffset;
  /* offset=0x02c0 flags=0x0018001040000205 */ uint8 ThrowMode;
  /* offset=0x02c4 flags=0x0018001040010205 */ float PredictLineVelocityScale;
  /* offset=0x02c8 flags=0x0018001040010205 */ float MaxSimTime;
  /* offset=0x02cc flags=0x0010000000000014 */ struct FGrenadePredictResult GrenadePredictResult;
  /* offset=0x02f4 flags=0x0019001040000204 */ float GrenadeRadius;
  /* offset=0x02f8 flags=0x0019001040000004 */ struct FVector PredictLineStartLocation;
  /* offset=0x0304 flags=0x0019001040000004 */ struct FVector PredictLineStartVelocity;
};

class UGridPanel: public UPanelWidget {
  /* offset=0x00d8 flags=0x0010000000000215 */ TArray<float> ColumnFill;
  /* offset=0x00e4 flags=0x0010000000000215 */ TArray<float> RowFill;

  UGridSlot* AddChildToGrid(UWidget* content);
};

class AGridPathAIController: public AAIController {
};

class UGridPathFollowingComponent: public UPathFollowingComponent {
  /* offset=0x031c flags=0x0028081040002200 */ UNavLocalGridManager* GridManager;
};

class UGridSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;
  /* offset=0x0038 flags=0x0018001040000215 */ int32 Row;
  /* offset=0x003c flags=0x0018001040000215 */ int32 RowSpan;
  /* offset=0x0040 flags=0x0018001040000215 */ int32 Column;
  /* offset=0x0044 flags=0x0018001040000215 */ int32 ColumnSpan;
  /* offset=0x0048 flags=0x0018001040000215 */ int32 Layer;
  /* offset=0x004c flags=0x0018001040000015 */ struct FVector2D Nudge;

  void SetColumn(int32 InColumn);
  void SetColumnSpan(int32 InColumnSpan);
  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetLayer(int32 InLayer);
  void SetPadding(struct FMargin InPadding);
  void SetRow(int32 InRow);
  void SetRowSpan(int32 InRowSpan);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UGroundPickUpListPanel_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UVerticalBox* PickableActorList;

  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UWidgetDarg_C* K2Node_DynamicCast_AsWidget_Darg, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void UpdateData(int32 LastIndex);
};

class UGroupSpotSceneComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ uint8 GroupType;
  /* offset=0x0271 flags=0x0018001040000205 */ bool bNearItem;
  /* offset=0x0274 flags=0x0018001040000200 */ int32 WorldCompositionID;
  /* offset=0x0278 flags=0x0028081040000214 */ bool bIsValidGroup;

  int32 FindWorldCompositionID();
  bool IsValidGroup();
  void SetGroupValid(bool Valid);
};

class AHUD: public AActor {
  /* offset=0x02a8 flags=0x0018001040000214 */ APlayerController* PlayerOwner;
  /* offset=0x02ac flags=0x0018001000000014 */ uint8 bLostFocusPaused:1;
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bShowHUD:1;
  /* offset=0x02ac flags=0x0018001000000004 */ uint8 bShowDebugInfo:1;
  /* offset=0x02ac flags=0x0018001000000004 */ uint8 bShowHitBoxDebugInfo:1;
  /* offset=0x02ac flags=0x0018001000000004 */ uint8 bShowOverlays:1;
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bEnableDebugTextShadow:1;
  /* offset=0x02b0 flags=0x0010000000000200 */ TArray<AActor*> PostRenderedActors;
  /* offset=0x02c4 flags=0x0010000000044200 */ TArray<FName> DebugDisplay;
  /* offset=0x02d0 flags=0x0010000000044200 */ TArray<FName> ToggledDebugCategories;
  /* offset=0x02dc flags=0x0028081040000200 */ UCanvas* Canvas;
  /* offset=0x02e0 flags=0x0028081040000200 */ UCanvas* DebugCanvas;
  /* offset=0x02e4 flags=0x0020080000000200 */ TArray<struct FDebugTextInfo> DebugTextList;
  /* offset=0x02f0 flags=0x004c001040000200 */ UClass<AActor>* ShowDebugTargetDesiredClass;
  /* offset=0x02f4 flags=0x0048001040000200 */ AActor* ShowDebugTargetActor;

  /* CL  */ void AddDebugText(FString DebugText, AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow);
  void AddHitBox(struct FVector2D Position, struct FVector2D Size, FName InName, bool bConsumesInput, int32 Priority);
  void Deproject(float ScreenX, float ScreenY, struct FVector WorldPosition, struct FVector WorldDirection);
  void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness);
  void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot);
  void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
  void DrawMaterialTriangle(UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color);
  void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
  void DrawText(FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition);
  void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, uint8 BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot);
  void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
  void GetActorsInSelectionRectangle(UClass<AActor>* ClassFilter, struct FVector2D FirstPoint, struct FVector2D SecondPoint, TArray<AActor*> OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
  APawn* GetOwningPawn();
  APlayerController* GetOwningPlayerController();
  void GetTextSize(FString Text, float OutWidth, float OutHeight, UFont* Font, float Scale);
  struct FVector Project(struct FVector Location);
  void ReceiveDrawHUD(int32 SizeX, int32 SizeY);
  void ReceiveHitBoxBeginCursorOver(FName BoxName);
  void ReceiveHitBoxClick(FName BoxName);
  void ReceiveHitBoxEndCursorOver(FName BoxName);
  void ReceiveHitBoxRelease(FName BoxName);
  /* CL  */ void RemoveAllDebugStrings();
  /* CL  */ void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText);
  void ShowDebug(FName DebugType);
  void ShowDebugForReticleTargetToggle(UClass<AActor>* DesiredClass);
  void ShowDebugToggleSubCategory(FName Category);
  void ShowHUD();
};

class UHandlerComponentFactory: public UObject {
};

class UHapticFeedbackEffect_Base: public UObject {
};

class UHapticFeedbackEffect_Buffer: public UHapticFeedbackEffect_Base {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<uint8> Amplitudes;
  /* offset=0x0028 flags=0x0018001040000201 */ int32 SampleRate;
};

class UHapticFeedbackEffect_Curve: public UHapticFeedbackEffect_Base {
  /* offset=0x001c flags=0x0010000000000001 */ struct FHapticFeedbackDetails_Curve HapticDetails;
};

class UHapticFeedbackEffect_SoundWave: public UHapticFeedbackEffect_Base {
  /* offset=0x001c flags=0x0018001040000201 */ USoundWave* SoundWave;
};

class UHeadMountedDisplayFunctionLibrary: public UBlueprintFunctionLibrary {
  bool EnableHMD(bool bEnable);
  void EnableLowPersistenceMode(bool bEnable);
  FName GetHMDDeviceName();
  uint8 GetHMDWornState();
  int32 GetNumOfTrackingSensors();
  void GetOrientationAndPosition(struct FRotator DeviceRotation, struct FVector DevicePosition);
  void GetPositionalTrackingCameraParameters(struct FVector CameraOrigin, struct FRotator CameraRotation, float HFOV, float VFOV, float CameraDistance, float NearPlane, float FarPlane);
  float GetScreenPercentage();
  uint8 GetTrackingOrigin();
  void GetTrackingSensorParameters(struct FVector Origin, struct FRotator Rotation, float LeftFOV, float RightFOV, float TopFOV, float BottomFOV, float Distance, float NearPlane, float FarPlane, bool IsActive, int32 Index);
  void GetVRFocusState(bool bUseFocus, bool bHasFocus);
  float GetWorldToMetersScale(UObject* WorldContext);
  bool HasValidTrackingPosition();
  bool IsHeadMountedDisplayConnected();
  bool IsHeadMountedDisplayEnabled();
  bool IsInLowPersistenceMode();
  bool IsSpectatorScreenModeControllable();
  void ResetOrientationAndPosition(float Yaw, uint8 Options);
  void SetClippingPlanes(float Near, float Far);
  void SetSpectatorScreenMode(enum ESpectatorScreenMode Mode);
  void SetSpectatorScreenModeTexturePlusEyeLayout(struct FVector2D EyeRectMin, struct FVector2D EyeRectMax, struct FVector2D TextureRectMin, struct FVector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack);
  void SetSpectatorScreenTexture(UTexture* InTexture);
  void SetTrackingOrigin(uint8 Origin);
  void SetWorldToMetersScale(UObject* WorldContext, float NewScale);
};

class UHelpshiftUE4Settings: public UObject {
  /* offset=0x001c flags=0x0018000000004201 */ FString APIKey;
  /* offset=0x0028 flags=0x0018000000004201 */ FString DomainName;
  /* offset=0x0034 flags=0x0018000000004201 */ FString AppID_iOS;
  /* offset=0x0040 flags=0x0018000000004201 */ FString AppID_Android;
  /* offset=0x004c flags=0x0018001040004201 */ bool FirebaseIntegration;
};

class UHierarchicalInstancedStaticMeshComponent: public UInstancedStaticMeshComponent {
  /* offset=0x06d4 flags=0x0010000000000200 */ TArray<int32> SortedInstances;
  /* offset=0x06e0 flags=0x0018001040000200 */ int32 NumBuiltInstances;
  /* offset=0x06e8 flags=0x0010001040000000 */ struct FBox BuiltInstanceBounds;
  /* offset=0x0704 flags=0x0010001040000000 */ struct FBox UnbuiltInstanceBounds;
  /* offset=0x0720 flags=0x0010000000000200 */ TArray<struct FBox> UnbuiltInstanceBoundsList;
  /* offset=0x072c flags=0x0010000000000200 */ TArray<int32> UnbuiltInstanceIndexList;
  /* offset=0x0738 flags=0x0018001000000000 */ uint8 bEnableDensityScaling:1;
  /* offset=0x0758 flags=0x0018001040000200 */ int32 OcclusionLayerNumNodes;
  /* offset=0x075c flags=0x0010001040000000 */ struct FBoxSphereBounds CacheMeshExtendedBounds;
  /* offset=0x077d flags=0x0018001040000200 */ bool bDisableCollision;
  /* offset=0x0780 flags=0x0018001040000215 */ int32 MinInstancesToSplitNode;

  bool RemoveInstances(TArray<int32> InstancesToRemove);
};

class UHorizontalBox: public UPanelWidget {
  UHorizontalBoxSlot* AddChildToHorizontalBox(UWidget* content);
};

class UHorizontalBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0010001000000015 */ struct FSlateChildSize Size;
  /* offset=0x003c flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x003d flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetSize(struct FSlateChildSize InSize);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UHotUpdater: public UObject {
  void OnDownloadedOneFile(bool Successful, FString FileURL, TArray<uint8> Data);
  void OnGetVersionData(bool Successful, FString FileURL, TArray<uint8> Data);
};

class UHudSettings: public UObject {
  /* offset=0x001c flags=0x0018001000004001 */ uint8 bShowHUD:1;
  /* offset=0x0020 flags=0x0010000000044201 */ TArray<FName> DebugDisplay;
};

class UIMSDKHelper: public UObject {
  /* offset=0x001c flags=0x0018001040000215 */ bool isBindFB;
  /* offset=0x001d flags=0x0018001040000215 */ bool isBindGPGC;
  /* offset=0x001e flags=0x0018001040000215 */ bool isBindGP;
  /* offset=0x001f flags=0x0018001040000215 */ bool isBindGC;
  /* offset=0x0020 flags=0x0018001040000215 */ int32 iBindFBRetCode;
  /* offset=0x0024 flags=0x0018001040000215 */ int32 iBindFBThirdRetCode;
  /* offset=0x0028 flags=0x0018000000000215 */ FString strBindFBUserName;
  /* offset=0x0034 flags=0x0018001040000215 */ int32 iBindGPGCRetCode;
  /* offset=0x0038 flags=0x0018001040000215 */ int32 iBindGPGCThirdRetCode;
  /* offset=0x003c flags=0x0018000000000215 */ FString strBindGPGCUserName;
  /* offset=0x0048 flags=0x0018001040000215 */ int32 iDeleteAccountRetCode;
  /* offset=0x004c flags=0x0018001040000215 */ int32 iGenerateTransferCodeRetCode;
  /* offset=0x0050 flags=0x0018000000000215 */ FString GeneratedTransferCode;
  /* offset=0x005c flags=0x0018001040000215 */ int32 iTransferRetCode;
  /* offset=0x0060 flags=0x0018001040000215 */ int32 iTransferThirdRetCode;
  /* offset=0x0064 flags=0x0018000000000205 */ FString inputTransferCode;
  /* offset=0x0070 flags=0x0018001040000215 */ int32 iSwitchAccountFBRetCode;
  /* offset=0x0074 flags=0x0018001040000215 */ int32 iSwitchAccountFBThirdRetCode;
  /* offset=0x0078 flags=0x0018001040000215 */ int32 iSwitchAccountGPGCRetCode;
  /* offset=0x007c flags=0x0018001040000215 */ int32 iSwitchAccountGPGCThirdRetCode;
  /* offset=0x0080 flags=0x0018001040000215 */ bool bGCQuietSwitchAccount;

  void BindFB();
  void BindGPGC();
  void CopyTransferCodeToClipboard();
  void GenerateTransferCode();
  void GetBindFBRetCode();
  UIMSDKHelper* GetInstance();
  enum EIMSDKPlatformType GetPlatformType();
  bool IsAlreadyBindFB();
  void ReqBindInfo();
  void StartNewGame();
  void SwitchAccountFB();
  void SwitchAccountFBWithoutSignOut();
  void SwitchAccountGPGC();
  void Transfer();
  FString getOpenID();
  bool isBindFBOrGPGC();
};

class UIMSDKNotice: public UObject {
  UIMSDKNotice* GetInstance();
  TArray<struct FIMSDKNoticeInfo> GetNotice(FString Scene);
};

class UIdleWeaponState: public UWeaponStateBase {
  /* offset=0x00f0 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
};

class UImage: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000015 */ struct FSlateBrush Brush;
  /* offset=0x0130 flags=0x0010001000080200 */ FGetSlateBrush BrushDelegate;
  /* offset=0x0140 flags=0x0018001040000015 */ struct FLinearColor ColorAndOpacity;
  /* offset=0x0150 flags=0x0010001000080200 */ FGetLinearColor ColorAndOpacityDelegate;
  /* offset=0x0160 flags=0x0010001000080201 */ FOnPointerEvent OnMouseButtonDownEvent;

  UMaterialInstanceDynamic* GetDynamicMaterial();
  void SetBrush(struct FSlateBrush InBrush);
  void SetBrushFromAsset(USlateBrushAsset* Asset);
  void SetBrushFromMaterial(UMaterialInterface* Material);
  void SetBrushFromTexture(UTexture2D* Texture, bool bMatchSize);
  void SetBrushFromTextureDynamic(UTexture2DDynamic* Texture, bool bMatchSize);
  void SetColorAndOpacity(struct FLinearColor InColorAndOpacity);
  void SetOpacity(float InOpacity);
};

class UImageCaptureSettings: public UFrameGrabberProtocolSettings {
  /* offset=0x0024 flags=0x0018001040004201 */ int32 CompressionQuality;
};

class UImageDownloader: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FImageDownloaderDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FImageDownloaderDelegate OnFail;
  /* offset=0x0034 flags=0x0018000000000214 */ FString FileURL;
  /* offset=0x0040 flags=0x0018000000000214 */ FString FileSavePath;
  /* offset=0x004c flags=0x0018000000000214 */ FString UrlHash;
  /* offset=0x0058 flags=0x0018001040000204 */ int32 DiskFileValidHour;
  /* offset=0x005c flags=0x0018001040000214 */ bool InvalidImageFormat;

  UImageDownloader* MakeDownloader();
  void Start(FString URL);
};

class UImgMediaSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ float DefaultFps;
  /* offset=0x0020 flags=0x0018001040004201 */ float CacheBehindPercentage;
  /* offset=0x0024 flags=0x0018001040004201 */ float CacheSizeGB;
  /* offset=0x0028 flags=0x0018001040004201 */ uint32 ExrDecoderThreads;
  /* offset=0x002c flags=0x0048000000004201 */ FString DefaultProxy;
  /* offset=0x0038 flags=0x0048001040004201 */ bool UseDefaultProxy;
};

class UImgMediaSource: public UBaseMediaSource {
  /* offset=0x0028 flags=0x0018041040000205 */ float FramesPerSecondOverride;
  /* offset=0x002c flags=0x0018040000000205 */ FString ProxyOverride;
  /* offset=0x0038 flags=0x0020080000000015 */ struct FDirectoryPath SequencePath;

  void GetProxies(TArray<FString> OutProxies);
  FString GetSequencePath();
  void SetSequencePath(FString Path);
};

class UImportanceSamplingLibrary: public UBlueprintFunctionLibrary {
  void BreakImportanceTexture(struct FImportanceTexture ImportanceTexture, UTexture2D* Texture, uint8 WeightingFunc);
  void ImportanceSample(struct FImportanceTexture Texture, struct FVector2D Rand, int32 Samples, float Intensity, struct FVector2D SamplePosition, struct FLinearColor SampleColor, float SampleIntensity, float SampleSize);
  struct FImportanceTexture MakeImportanceTexture(UTexture2D* Texture, uint8 WeightingFunc);
  struct FVector2D NextSobolCell2D(int32 Index, int32 NumCells, struct FVector2D PreviousValue);
  struct FVector NextSobolCell3D(int32 Index, int32 NumCells, struct FVector PreviousValue);
  float NextSobolFloat(int32 Index, int32 Dimension, float PreviousValue);
  struct FVector2D RandomSobolCell2D(int32 Index, int32 NumCells, struct FVector2D Cell, struct FVector2D Seed);
  struct FVector RandomSobolCell3D(int32 Index, int32 NumCells, struct FVector Cell, struct FVector Seed);
  float RandomSobolFloat(int32 Index, int32 Dimension, float Seed);
};

class UImportantToggleSettingInterface: public UInterface {
};

class UInAppPurchaseCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FInAppPurchaseResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FInAppPurchaseResult OnFailure;

  UInAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(APlayerController* PlayerController, struct FInAppPurchaseProductRequest ProductRequest);
};

class UInAppPurchaseQueryCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FInAppPurchaseQueryResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FInAppPurchaseQueryResult OnFailure;

  UInAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(APlayerController* PlayerController, TArray<FString> ProductIdentifiers);
};

class UInAppPurchaseRestoreCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FInAppPurchaseRestoreResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FInAppPurchaseRestoreResult OnFailure;

  UInAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(TArray<struct FInAppPurchaseProductRequest> ConsumableProductFlags, APlayerController* PlayerController);
};

class UInGameAdManager: public UPlatformInterfaceBase {
  /* offset=0x0028 flags=0x0018001000000000 */ uint8 bShouldPauseWhileAdOpen:1;
  /* offset=0x002c flags=0x0010008000000200 */ TArray<FOnUserClickedBanner> ClickedBannerDelegates;
  /* offset=0x0038 flags=0x0010008000000200 */ TArray<FOnUserClosedAdvertisement> ClosedAdDelegates;
};

class UInGameReconnectingInterface: public UInterface {
  void RecoverStatusAfterReconnecting();
  void RetriveDataAfterReconnecting();
};

class UInGameUIManager: public UGameBusinessManager {
  /* offset=0x00c0 flags=0x0010000000000205 */ TArray<UClass<UObject>*> InGameUIList;

  void HandleUIMessage(FString UIMessage);
  void SubUIWidgetList(TArray<struct FGameWidgetConfig> InWidgetConfigList, TArray<FString> GameStatusStrList, bool InPersistentUI, bool InUsedByControler);
};

class UInactiveWeaponState: public UWeaponStateBase {
};

class UInfiniteSystemComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ bool UpdateInEditor;
  /* offset=0x0271 flags=0x0018001040000205 */ uint8 FollowMethod;
  /* offset=0x0274 flags=0x0018001040000205 */ float GridSnapSize;
  /* offset=0x0278 flags=0x0018001040000205 */ float MaxLookAtDistance;
  /* offset=0x027c flags=0x0018001040000205 */ bool ScaleByDistance;
  /* offset=0x0280 flags=0x0018001040000205 */ float ScaleDistanceFactor;
  /* offset=0x0284 flags=0x0018001040000205 */ float ScaleStartDistance;
  /* offset=0x0288 flags=0x0018001040000205 */ float ScaleMin;
  /* offset=0x028c flags=0x0018001040000205 */ float ScaleMax;
};

class AInfo: public AActor {
};

class UIngame_TeamItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Talk;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_AllSet;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* GridPanel_PlayerVoiceIcon;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_Dead_IDBG;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_IDBG;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_No1;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_No2;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_No3;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image_No4;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image_Parachute;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_PlayerDead;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image_PlayerDriving;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image_PlayerFallToTheGround;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Image_PlayerMark01;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Image_PlayerOffOnline;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* Image_PlayerVoiceIcon;
  /* offset=0x0274 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_PlayerHP;
  /* offset=0x0278 flags=0x000a0010c008020c */ USizeBox* SizeBox_HP;
  /* offset=0x027c flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName;
  /* offset=0x0280 flags=0x000a0010c008020c */ UTextBlock* TextBlock_TeamIdx;
  /* offset=0x0284 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_BG;
  /* offset=0x0288 flags=0x0008001040010005 */ struct FLinearColor FullColor;
  /* offset=0x0298 flags=0x0008001040010005 */ struct FLinearColor HpColor_Phase1;
  /* offset=0x02a8 flags=0x0008001040010005 */ struct FLinearColor HpColor_Phase2;
  /* offset=0x02b8 flags=0x0008001040010005 */ struct FLinearColor HpColor_Phase3;
  /* offset=0x02c8 flags=0x0008001040000a05 */ ASTExtraPlayerState* PlayerState;
  /* offset=0x02cc flags=0x0008001040010005 */ struct FLinearColor Player01Color;
  /* offset=0x02dc flags=0x0008001040010005 */ struct FLinearColor Player02Color;
  /* offset=0x02ec flags=0x0008001040010005 */ struct FLinearColor Player03Color;
  /* offset=0x02fc flags=0x0008001040010005 */ struct FLinearColor Player04Color;
  /* offset=0x030c flags=0x0008001040010005 */ struct FLinearColor DeadColor;
  /* offset=0x031c flags=0x0000001040010205 */ bool isLostOrExit;
  /* offset=0x0320 flags=0x0008001040010205 */ int32 PlayerId;
  /* offset=0x0324 flags=0x0008001040010205 */ int32 PlayerKey;
  /* offset=0x0328 flags=0x0000000000010005 */ struct FSlateColor IdxColor1;
  /* offset=0x0344 flags=0x0000000000010005 */ struct FSlateColor IdxColor2;

  void ExecuteUbergraph_Ingame_TeamItem_BP(int32 EntryPoint);
  void SetBreathHP(float HP);
  void SetHP(float percent, bool bIsDying, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue3);
  void SetPlayerName(FString Name, int32 Index, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetState(enum ExtraPlayerLiveState State, bool K2Node_SwitchEnum_CmpSuccess);
  void SetTextAlpha(bool isDead, struct FLinearColor K2Node_MakeStruct_LinearColor, struct FSlateColor K2Node_MakeStruct_SlateColor, struct FLinearColor K2Node_MakeStruct_LinearColor2, struct FSlateColor K2Node_MakeStruct_SlateColor2);
  void UpdateVoice(int32 status, bool CallFunc_NotEqual_IntInt_ReturnValue);
};

class UIngame_TeamPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UIngame_TeamItem_BP_C* Ingame_TeamItem_BP;
  /* offset=0x0238 flags=0x000a0010c008020c */ UIngame_TeamItem_BP_C* Ingame_TeamItem_BP_C;
  /* offset=0x023c flags=0x000a0010c008020c */ UIngame_TeamItem_BP_C* Ingame_TeamItem_BP_C;
  /* offset=0x0240 flags=0x000a0010c008020c */ UIngame_TeamItem_BP_C* Ingame_TeamItem_BP_C;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTeammatePositionItem_BP_C* TeammatePositionItem_BP_C;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTeammatePositionItem_BP_C* TeammatePositionItem_BP_C;
  /* offset=0x024c flags=0x000a0010c008020c */ UTeammatePositionItem_BP_C* TeammatePositionItem_BP_C;
  /* offset=0x0250 flags=0x0000000000010205 */ TArray<UIngame_TeamItem_BP_C*> IngameTeamItemList;
  /* offset=0x025c flags=0x0000000000010205 */ TArray<UTeammatePositionItem_BP_C*> TeammatePosList;
  /* offset=0x0268 flags=0x0008001040010205 */ int32 ShowMateCount1;
  /* offset=0x026c flags=0x0008001040010205 */ UTeammatePositionItem_BP_C* CurTeammateItem;

  void ClearAllMark(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void ClearAllPlayerItems(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, UTeammatePositionItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2);
  void CollectWidgets(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Loop_Counter_Variable2, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, TArray<UTeammatePositionItem_BP_C*> K2Node_MakeArray_Array, TArray<UIngame_TeamItem_BP_C*> K2Node_MakeArray_Array2);
  void Construct();
  void Event_OnExitGame();
  void Event_OnLostDelegate();
  void Event_OnReconnected();
  void Event_OnTeammateHPChange();
  void Event_UpdatePlayerState(enum ExtraPlayerLiveState State, ACharacter* OwnerCharacter);
  void ExecuteUbergraph_Ingame_TeamPanel_BP(int32 EntryPoint, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FOnMapMarkChangeDelegate K2Node_CreateDelegate_OutputDelegate, FOnTeammateHPChangeDelegate K2Node_CreateDelegate_OutputDelegate2, FOnExitGame K2Node_CreateDelegate_OutputDelegate3, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate4, bool K2Node_Event_IsDesignTime, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, enum ExtraPlayerLiveState K2Node_CustomEvent_State, ACharacter* K2Node_CustomEvent_OwnerCharacter, APlayerController* CallFunc_GetPlayerController_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, FText CallFunc_Conv_ByteToText_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FOnReconnected K2Node_CreateDelegate_OutputDelegate5, FOnLostConnection K2Node_CreateDelegate_OutputDelegate6, APlayerController* CallFunc_GetPlayerController_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, int32 K2Node_CustomEvent_TeamMateSerialNumber, FOnRepPlayerState K2Node_CreateDelegate_OutputDelegate7, FOnCharacterStateChangeDelegate K2Node_CreateDelegate_OutputDelegate8);
  void HideTeamMateDistance();
  void IngameTeam_ShowHideSelfMark(int32 CurPlayerIndex, bool CallFunc_NotEqual_IntInt_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, int32 CallFunc_Array_Find_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue);
  void Init(int32 ShowMateCount, ASTExtraPlayerState* LocalOwnerPlayerstate, int32 ___int_Loop_Counter_Variable, int32 ___int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, ASTExtraPlayerState* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, int32 ___int_Array_Index_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, FName CallFunc_Array_Get_Item2, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item3, UTeammatePositionItem_BP_C* CallFunc_Array_Get_Item4, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_Array_IsValidIndex_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item5, bool CallFunc_IsValid_ReturnValue4, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_Array_IsValidIndex_ReturnValue2);
  void OnLostDelegate(APlayerState* PlayerState, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue);
  void OnMemberVoice(int32 PlayerId, int32 status, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void OnPlayerEnterFlying();
  void OnPlayerExitGame(APlayerState* PlayerState, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, int32 ___int_Array_Index_Variable, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, int32 CallFunc_Array_Get_Item, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, UTeammatePositionItem_BP_C* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item3, bool CallFunc_Array_IsValidIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);
  void OnReconnected(APlayerState* PlayerState, int32 ___int_Array_Index_Variable, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, FString CallFunc_Conv_ColorToString_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue);
  void PreConstruct(bool IsDesignTime);
  void ReceivePlayerStateData();
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState();
  void ResetTeamPosImage(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UTeammatePositionItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void UpdateMapMark(int32 TeamMateSerialNumber);
  void UpdateTeamMateBreath(int32 status, float Ratio, ACharacter* Character, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
  void UpdateTeamMateHP(UIngame_TeamItem_BP_C* NewLocalVar, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetBreathPercentage_ReturnValue, float CallFunc_GetPlayerMaxHealth_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetPlayerHealth_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2);
  void UpdateTeamMateMapMark(int32 Index, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, ASTExtraPlayerState* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue2);
  void UpdateTeamMateState(ACharacter* TargetCharacter, enum ExtraPlayerLiveState State, int32 tempMateCount, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable2, bool CallFunc_Not_PreBool_ReturnValue, bool ___bool_True_if_break_was_hit_Variable2, UTeammatePositionItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, UIngame_TeamItem_BP_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2);
};

class UInheritableComponentHandler: public UObject {
  /* offset=0x001c flags=0x0040008000000200 */ TArray<struct FComponentOverrideRecord> Records;
  /* offset=0x0028 flags=0x0040008000002208 */ TArray<UActorComponent*> UnnecessaryComponents;
};

class UInputActionDelegateBinding: public UInputDelegateBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;
};

class UInputAxisDelegateBinding: public UInputDelegateBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;
};

class UInputAxisKeyDelegateBinding: public UInputDelegateBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;
};

class UInputComponent: public UActorComponent {
  float GetControllerAnalogKeyState(struct FKey Key);
  void GetControllerAnalogStickState(uint8 WhichStick, float StickX, float StickY);
  float GetControllerKeyTimeDown(struct FKey Key);
  void GetControllerMouseDelta(float DeltaX, float DeltaY);
  struct FVector GetControllerVectorKeyState(struct FKey Key);
  void GetTouchState(int32 FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);
  bool IsControllerKeyDown(struct FKey Key);
  bool WasControllerKeyJustPressed(struct FKey Key);
  bool WasControllerKeyJustReleased(struct FKey Key);
};

class UInputCoreTypes: public UObject {
};

class UInputDelegateBinding: public UDynamicBlueprintBinding {
};

class UInputKeyDelegateBinding: public UInputDelegateBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;
};

class UInputKeySelector: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000005 */ struct FButtonStyle WidgetStyle;
  /* offset=0x02c0 flags=0x0010000000000005 */ struct FTextBlockStyle TextStyle;
  /* offset=0x0438 flags=0x0018000000000014 */ struct FInputChord SelectedKey;
  /* offset=0x0450 flags=0x0018000020000000 */ struct FSlateFontInfo Font;
  /* offset=0x0490 flags=0x0010001000000015 */ struct FMargin Margin;
  /* offset=0x04a0 flags=0x0018001060000000 */ struct FLinearColor ColorAndOpacity;
  /* offset=0x04b0 flags=0x0010000000000015 */ FText KeySelectionText;
  /* offset=0x04bc flags=0x0010000000000015 */ FText NoKeySpecifiedText;
  /* offset=0x04c8 flags=0x0018001040000215 */ bool bAllowModifierKeys;
  /* offset=0x04c9 flags=0x0018001040000215 */ bool bAllowGamepadKeys;
  /* offset=0x04cc flags=0x0010000000000215 */ TArray<struct FKey> EscapeKeys;
  /* offset=0x04d8 flags=0x0010000010080200 */ FOnKeySelected OnKeySelected;
  /* offset=0x04e4 flags=0x0010000010080200 */ FOnIsSelectingKeyChanged OnIsSelectingKeyChanged;

  bool GetIsSelectingKey();
  void OnIsSelectingKeyChanged__DelegateSignature();
  void OnKeySelected__DelegateSignature(struct FInputChord SelectedKey);
  void SetAllowGamepadKeys(bool bInAllowGamepadKeys);
  void SetAllowModifierKeys(bool bInAllowModifierKeys);
  void SetKeySelectionText(FText InKeySelectionText);
  void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);
  void SetSelectedKey(struct FInputChord InSelectedKey);
  void SetTextBlockVisibility(enum ESlateVisibility InVisibility);
};

class UInputSettings: public UObject {
  /* offset=0x001c flags=0x0010040000004241 */ TArray<struct FInputAxisConfigEntry> AxisConfig;
  /* offset=0x0028 flags=0x0018041000004001 */ uint8 bAltEnterTogglesFullscreen:1;
  /* offset=0x0028 flags=0x0018041000004001 */ uint8 bF11TogglesFullscreen:1;
  /* offset=0x0028 flags=0x0018001000004001 */ uint8 bUseMouseForTouch:1;
  /* offset=0x0028 flags=0x0018041000004001 */ uint8 bEnableMouseSmoothing:1;
  /* offset=0x0028 flags=0x0018041000004001 */ uint8 bEnableFOVScaling:1;
  /* offset=0x002c flags=0x0018041040004201 */ float FOVScale;
  /* offset=0x0030 flags=0x0018041040004201 */ float DoubleClickTime;
  /* offset=0x0034 flags=0x0018001040004201 */ bool bCaptureMouseOnLaunch;
  /* offset=0x0035 flags=0x0018001040004201 */ enum EMouseCaptureMode DefaultViewportMouseCaptureMode;
  /* offset=0x0036 flags=0x0018001060004200 */ bool bDefaultViewportMouseLock;
  /* offset=0x0037 flags=0x0018001040004201 */ enum EMouseLockMode DefaultViewportMouseLockMode;
  /* offset=0x0038 flags=0x0010000000004201 */ TArray<struct FInputActionKeyMapping> ActionMappings;
  /* offset=0x0044 flags=0x0010000000004201 */ TArray<struct FInputAxisKeyMapping> AxisMappings;
  /* offset=0x0050 flags=0x0018001040004201 */ bool bAlwaysShowTouchInterface;
  /* offset=0x0051 flags=0x0018001040004201 */ bool bShowConsoleOnFourFingerTap;
  /* offset=0x0058 flags=0x0018000000004001 */ struct FSoftObjectPath DefaultTouchInterface;
  /* offset=0x0070 flags=0x0018000020004000 */ struct FKey ConsoleKey;
  /* offset=0x0080 flags=0x0010000000004201 */ TArray<struct FKey> ConsoleKeys;

  void AddActionMapping(struct FInputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);
  void AddAxisMapping(struct FInputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);
  void ForceRebuildKeymaps();
  void GetActionMappingByName(FName InActionName, TArray<struct FInputActionKeyMapping> OutMappings);
  void GetActionNames(TArray<FName> ActionNames);
  void GetAxisMappingByName(FName InAxisName, TArray<struct FInputAxisKeyMapping> OutMappings);
  void GetAxisNames(TArray<FName> AxisNames);
  UInputSettings* GetInputSettings();
  void RemoveActionMapping(struct FInputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);
  void RemoveAxisMapping(struct FInputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);
  void SaveKeyMappings();
};

class UInputTouchDelegateBinding: public UInputDelegateBinding {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;
};

class UInputVectorAxisDelegateBinding: public UInputAxisKeyDelegateBinding {
};

class AInstancedFoliageActor: public AActor {
};

class UInstancedStaticMeshComponent: public UStaticMeshComponent {
  /* offset=0x0628 flags=0x0090000000000201 */ TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;
  /* offset=0x0634 flags=0x0018001040000205 */ int32 InstancingRandomSeed;
  /* offset=0x0638 flags=0x0018001040000215 */ int32 InstanceStartCullDistance;
  /* offset=0x063c flags=0x0018001040000215 */ int32 InstanceEndCullDistance;
  /* offset=0x0640 flags=0x0010000000000200 */ TArray<int32> InstanceReorderTable;
  /* offset=0x064c flags=0x0010000000000200 */ TArray<int32> RemovedInstances;
  /* offset=0x0658 flags=0x0018001040000205 */ bool UseDynamicInstanceBuffer;
  /* offset=0x0659 flags=0x0018001040000205 */ bool KeepInstanceBufferCPUAccess;
  /* offset=0x06b8 flags=0x0018001040080208 */ UPhysicsSerializer* PhysicsSerializer;
  /* offset=0x06bc flags=0x0028481040202200 */ int32 NumPendingLightmaps;
  /* offset=0x06c0 flags=0x0020480000202200 */ TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;

  int32 AddInstance(struct FTransform InstanceTransform);
  int32 AddInstanceWorldSpace(struct FTransform WorldTransform);
  void ClearInstances();
  int32 GetInstanceCount();
  bool GetInstanceTransform(int32 InstanceIndex, struct FTransform OutInstanceTransform, bool bWorldSpace);
  TArray<int32> GetInstancesOverlappingBox(struct FBox Box, bool bBoxInWorldSpace);
  TArray<int32> GetInstancesOverlappingSphere(struct FVector Center, float Radius, bool bSphereInWorldSpace);
  bool RemoveInstance(int32 InstanceIndex);
  void SetCullDistances(int32 StartCullDistance, int32 EndCullDistance);
  bool UpdateInstanceTransform(int32 InstanceIndex, struct FTransform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
};

class UInt16Property: public UNumericProperty {
};

class UInt32Binding: public UPropertyBinding {
  int32 GetValue();
};

class UInt64Property: public UNumericProperty {
};

class UInt8Property: public UNumericProperty {
};

class UIntProperty: public UNumericProperty {
};

class UIntSerialization: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ uint16 UnsignedInt16Variable;
  /* offset=0x0020 flags=0x0018001040000200 */ uint32 UnsignedInt32Variable;
  /* offset=0x0028 flags=0x0018001040000200 */ uint64 UnsignedInt64Variable;
  /* offset=0x0030 flags=0x0018001040000200 */ int8 SignedInt8Variable;
  /* offset=0x0032 flags=0x0018001040000200 */ int16 SignedInt16Variable;
  /* offset=0x0038 flags=0x0018001040000200 */ int64 SignedInt64Variable;
  /* offset=0x0040 flags=0x0018001040000200 */ uint8 UnsignedInt8Variable;
  /* offset=0x0044 flags=0x0018001040000200 */ int32 SignedInt32Variable;
};

class AInteractiveFoliageActor: public AStaticMeshActor {
  /* offset=0x02b0 flags=0x0048001040080208 */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02b4 flags=0x0048001040002000 */ struct FVector TouchingActorEntryPosition;
  /* offset=0x02c0 flags=0x0048001040002000 */ struct FVector FoliageVelocity;
  /* offset=0x02cc flags=0x0048001040002000 */ struct FVector FoliageForce;
  /* offset=0x02d8 flags=0x0048001040002000 */ struct FVector FoliagePosition;
  /* offset=0x02e4 flags=0x0018001040000205 */ float FoliageDamageImpulseScale;
  /* offset=0x02e8 flags=0x0018001040000205 */ float FoliageTouchImpulseScale;
  /* offset=0x02ec flags=0x0018001040000205 */ float FoliageStiffness;
  /* offset=0x02f0 flags=0x0018001040000205 */ float FoliageStiffnessQuadratic;
  /* offset=0x02f4 flags=0x0018001040000205 */ float FoliageDamping;
  /* offset=0x02f8 flags=0x0018001040000205 */ float MaxDamageImpulse;
  /* offset=0x02fc flags=0x0018001040000205 */ float MaxTouchImpulse;
  /* offset=0x0300 flags=0x0018001040000205 */ float MaxForce;
  /* offset=0x0304 flags=0x0018001040000200 */ float Mass;

  void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult OverlapInfo);
};

class UInteractiveFoliageComponent: public UStaticMeshComponent {
};

class UInterface: public UObject {
};

class UInterfaceProperty: public UProperty {
};

class UInterface_AssetUserData: public UInterface {
};

class UInterface_CollisionDataProvider: public UInterface {
};

class UInterface_PostProcessVolume: public UInterface {
};

class UInterpCurveEdSetup: public UObject {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<struct FCurveEdTab> Tabs;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 ActiveTab;
};

class UInterpData: public UObject {
  /* offset=0x001c flags=0x0018001040020215 */ float InterpLength;
  /* offset=0x0020 flags=0x0018001040000200 */ float PathBuildTime;
  /* offset=0x0024 flags=0x001000000000021c */ TArray<UInterpGroup*> InterpGroups;
  /* offset=0x0030 flags=0x0018001040000208 */ UInterpCurveEdSetup* CurveEdSetup;
  /* offset=0x0034 flags=0x0018001040000200 */ float EdSectionStart;
  /* offset=0x0038 flags=0x0018001040000200 */ float EdSectionEnd;
  /* offset=0x003c flags=0x0018001000000001 */ uint8 bShouldBakeAndPrune:1;
  /* offset=0x0040 flags=0x0018001040002200 */ UInterpGroupDirector* CachedDirectorGroup;
  /* offset=0x0044 flags=0x0010000000000200 */ TArray<FName> AllEventNames;
};

class UInterpFilter: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString Caption;
};

class UInterpFilter_Classes: public UInterpFilter {
};

class UInterpFilter_Custom: public UInterpFilter {
};

class UInterpGroup: public UObject {
  /* offset=0x0020 flags=0x001000000000021c */ TArray<UInterpTrack*> InterpTracks;
  /* offset=0x0030 flags=0x0018001040000200 */ FName GroupName;
  /* offset=0x0038 flags=0x0018001040000001 */ struct FColor GroupColor;
  /* offset=0x003c flags=0x0018001000000000 */ uint8 bCollapsed:1;
  /* offset=0x003c flags=0x0018001000002000 */ uint8 bVisible:1;
  /* offset=0x003c flags=0x0018001000000000 */ uint8 bIsFolder:1;
  /* offset=0x003c flags=0x0018001000000000 */ uint8 bIsParented:1;
  /* offset=0x003c flags=0x0048001000002000 */ uint8 bIsSelected:1;
};

class UInterpGroupCamera: public UInterpGroup {
  /* offset=0x0040 flags=0x0018001040002200 */ UCameraAnim* CameraAnimInst;
  /* offset=0x0044 flags=0x0018001040000201 */ float CompressTolerance;
};

class UInterpGroupDirector: public UInterpGroup {
};

class UInterpGroupInst: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UInterpGroup* Group;
  /* offset=0x0020 flags=0x0018001040000200 */ AActor* GroupActor;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<UInterpTrackInst*> TrackInst;
};

class UInterpGroupInstCamera: public UInterpGroupInst {
};

class UInterpGroupInstDirector: public UInterpGroupInst {
};

class UInterpToMovementComponent: public UMovementComponent {
  /* offset=0x00e4 flags=0x0018001040000205 */ float Duration;
  /* offset=0x00e8 flags=0x0018001000000005 */ uint8 bPauseOnImpact:1;
  /* offset=0x00e9 flags=0x0018001040000205 */ enum EInterpToBehaviourType BehaviourType;
  /* offset=0x00ea flags=0x0018001000000005 */ uint8 bForceSubStepping:1;
  /* offset=0x00ec flags=0x0010000010080200 */ FOnInterpToReverseDelegate OnInterpToReverse;
  /* offset=0x00f8 flags=0x0010000010080200 */ FOnInterpToStopDelegate OnInterpToStop;
  /* offset=0x0104 flags=0x0010000010080200 */ FOnInterpToWaitBeginDelegate OnWaitBeginDelegate;
  /* offset=0x0110 flags=0x0010000010080200 */ FOnInterpToWaitEndDelegate OnWaitEndDelegate;
  /* offset=0x011c flags=0x0010000010080200 */ FOnInterpToResetDelegate OnResetDelegate;
  /* offset=0x0128 flags=0x0018001040000205 */ float MaxSimulationTimeStep;
  /* offset=0x012c flags=0x0018001040000205 */ int32 MaxSimulationIterations;
  /* offset=0x0130 flags=0x0010000000000205 */ TArray<struct FInterpControlPoint> ControlPoints;

  void FinaliseControlPoints();
  void OnInterpToResetDelegate__DelegateSignature(struct FHitResult ImpactResult, float Time);
  void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult ImpactResult, float Time);
  void OnInterpToStopDelegate__DelegateSignature(struct FHitResult ImpactResult, float Time);
  void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult ImpactResult, float Time);
  void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult ImpactResult, float Time);
  void RestartMovement(float InitialDirection);
  void StopSimulating(struct FHitResult HitResult);
};

class UInterpTrack: public UObject {
  /* offset=0x0024 flags=0x0010000000000214 */ TArray<UInterpTrack*> SubTracks;
  /* offset=0x0030 flags=0x001c001040000200 */ UClass<UInterpTrackInst>* TrackInstClass;
  /* offset=0x0034 flags=0x0018001040000201 */ uint8 ActiveCondition;
  /* offset=0x0038 flags=0x0018000000000200 */ FString TrackTitle;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bOnePerGroup:1;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bDirGroupOnly:1;
  /* offset=0x0044 flags=0x0048001000000000 */ uint8 bDisableTrack:1;
  /* offset=0x0044 flags=0x0048001000002000 */ uint8 bIsSelected:1;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bIsAnimControlTrack:1;
  /* offset=0x0044 flags=0x0018001000000000 */ uint8 bSubTrackOnly:1;
  /* offset=0x0044 flags=0x0018001000002000 */ uint8 bVisible:1;
  /* offset=0x0044 flags=0x0018001000002000 */ uint8 bIsRecording:1;
};

class UInterpTrackAkAudioEvent: public UInterpTrackVectorBase {
  /* offset=0x0060 flags=0x0010000000000200 */ TArray<struct FAkAudioEventTrackKey> Events;
  /* offset=0x006c flags=0x0018001000000005 */ uint8 bContinueEventOnMatineeEnd:1;
};

class UInterpTrackAkAudioRTPC: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018000000000205 */ FString Param;
  /* offset=0x006c flags=0x0018001000000005 */ uint8 bPlayOnReverse:1;
  /* offset=0x006c flags=0x0018001000000005 */ uint8 bContinueRTPCOnMatineeEnd:1;
};

class UInterpTrackAnimControl: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001040000201 */ FName SlotName;
  /* offset=0x0068 flags=0x0010000000000200 */ TArray<struct FAnimControlTrackKey> AnimSeqs;
  /* offset=0x0074 flags=0x0018001000000001 */ uint8 bSkipAnimNotifiers:1;
};

class UInterpTrackAudioMaster: public UInterpTrackVectorBase {
};

class UInterpTrackBoolProp: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FBoolTrackKey> BoolTrack;
  /* offset=0x0058 flags=0x0018001040020201 */ FName PropertyName;
};

class UInterpTrackColorProp: public UInterpTrackVectorBase {
  /* offset=0x0060 flags=0x0018001040020201 */ FName PropertyName;
};

class UInterpTrackColorScale: public UInterpTrackVectorBase {
};

class UInterpTrackDirector: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FDirectorTrackCut> CutTrack;
  /* offset=0x0054 flags=0x0048001000000001 */ uint8 bSimulateCameraCutsOnClients:1;
};

class UInterpTrackEvent: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FEventTrackKey> EventTrack;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenForwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenBackwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenJumpingForwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bUseCustomEventName:1;
};

class UInterpTrackFade: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bPersistFade:1;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bFadeAudio:1;
  /* offset=0x0064 flags=0x0018001040000001 */ struct FLinearColor FadeColor;
};

class UInterpTrackFloatAnimBPParam: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001040000201 */ UClass<UObject>* AnimBlueprintClass;
  /* offset=0x0064 flags=0x001c001040000201 */ UClass<UAnimInstance>* AnimClass;
  /* offset=0x0068 flags=0x0018001040000201 */ FName ParamName;
};

class UInterpTrackFloatBase: public UInterpTrack {
  /* offset=0x0048 flags=0x0018000000000000 */ struct FInterpCurveFloat FloatTrack;
  /* offset=0x005c flags=0x0018001040000201 */ float CurveTension;
};

class UInterpTrackFloatMaterialParam: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<UMaterialInterface*> TargetMaterials;
  /* offset=0x0070 flags=0x0018001040000201 */ FName ParamName;
};

class UInterpTrackFloatParticleParam: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001040000201 */ FName ParamName;
};

class UInterpTrackFloatProp: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001040020201 */ FName PropertyName;
};

class UInterpTrackInst: public UObject {
};

class UInterpTrackInstAkAudioEvent: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float LastUpdatePosition;
};

class UInterpTrackInstAkAudioRTPC: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float LastUpdatePosition;
};

class UInterpTrackInstAnimControl: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040002200 */ float LastUpdatePosition;
};

class UInterpTrackInstAudioMaster: public UInterpTrackInst {
};

class UInterpTrackInstBoolProp: public UInterpTrackInstProperty {
  /* offset=0x0028 flags=0x0018001040002200 */ UBoolProperty* BoolProperty;
  /* offset=0x002c flags=0x0018001040000200 */ bool ResetBool;
};

class UInterpTrackInstColorProp: public UInterpTrackInstProperty {
  /* offset=0x0028 flags=0x0018001040000000 */ struct FColor ResetColor;
};

class UInterpTrackInstColorScale: public UInterpTrackInst {
};

class UInterpTrackInstDirector: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ AActor* OldViewTarget;
};

class UInterpTrackInstEvent: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float LastUpdatePosition;
};

class UInterpTrackInstFade: public UInterpTrackInst {
};

class UInterpTrackInstFloatAnimBPParam: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040002200 */ UAnimInstance* AnimScriptInstance;
  /* offset=0x0020 flags=0x0018001040002200 */ float ResetFloat;
};

class UInterpTrackInstFloatMaterialParam: public UInterpTrackInst {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<UMaterialInstanceDynamic*> MaterialInstances;
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<float> ResetFloats;
  /* offset=0x0034 flags=0x0010008000000200 */ TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs;
  /* offset=0x0040 flags=0x0018001040000200 */ UInterpTrackFloatMaterialParam* InstancedTrack;
};

class UInterpTrackInstFloatParticleParam: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float ResetFloat;
};

class UInterpTrackInstFloatProp: public UInterpTrackInstProperty {
  /* offset=0x0028 flags=0x0018001040000200 */ float ResetFloat;
};

class UInterpTrackInstLinearColorProp: public UInterpTrackInstProperty {
  /* offset=0x0028 flags=0x0018001040000000 */ struct FLinearColor ResetColor;
};

class UInterpTrackInstMove: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000000 */ struct FVector ResetLocation;
  /* offset=0x0028 flags=0x0010001040000000 */ struct FRotator ResetRotation;
};

class UInterpTrackInstParticleReplay: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float LastUpdatePosition;
};

class UInterpTrackInstProperty: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ UProperty* InterpProperty;
  /* offset=0x0020 flags=0x0018001040000200 */ UObject* PropertyOuterObjectInst;
};

class UInterpTrackInstSlomo: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float OldTimeDilation;
};

class UInterpTrackInstSound: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000200 */ float LastUpdatePosition;
  /* offset=0x0020 flags=0x0018001040082208 */ UAudioComponent* PlayAudioComp;
};

class UInterpTrackInstToggle: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000201 */ uint8 Action;
  /* offset=0x0020 flags=0x0018001040000200 */ float LastUpdatePosition;
  /* offset=0x0024 flags=0x0018001000000000 */ uint8 bSavedActiveState:1;
};

class UInterpTrackInstVectorMaterialParam: public UInterpTrackInst {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<UMaterialInstanceDynamic*> MaterialInstances;
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<struct FVector> ResetVectors;
  /* offset=0x0034 flags=0x0010008000000200 */ TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs;
  /* offset=0x0040 flags=0x0018001040000200 */ UInterpTrackVectorMaterialParam* InstancedTrack;
};

class UInterpTrackInstVectorProp: public UInterpTrackInstProperty {
  /* offset=0x0028 flags=0x0018001040000000 */ struct FVector ResetVector;
};

class UInterpTrackInstVisibility: public UInterpTrackInst {
  /* offset=0x001c flags=0x0018001040000201 */ uint8 Action;
  /* offset=0x0020 flags=0x0018001040000200 */ float LastUpdatePosition;
};

class UInterpTrackLinearColorBase: public UInterpTrack {
  /* offset=0x0048 flags=0x0018000000000000 */ struct FInterpCurveLinearColor LinearColorTrack;
  /* offset=0x005c flags=0x0018001040000201 */ float CurveTension;
};

class UInterpTrackLinearColorProp: public UInterpTrackLinearColorBase {
  /* offset=0x0060 flags=0x0018001040020201 */ FName PropertyName;
};

class UInterpTrackMove: public UInterpTrack {
  /* offset=0x0048 flags=0x0018000000000014 */ struct FInterpCurveVector PosTrack;
  /* offset=0x005c flags=0x0018000000000000 */ struct FInterpCurveVector EulerTrack;
  /* offset=0x0070 flags=0x0010000000000000 */ struct FInterpLookupTrack LookupTrack;
  /* offset=0x0080 flags=0x0018001040000201 */ FName LookAtGroupName;
  /* offset=0x0088 flags=0x0018001040000201 */ float LinCurveTension;
  /* offset=0x008c flags=0x0018001040000201 */ float AngCurveTension;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bUseQuatInterpolation:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bShowArrowAtKeys:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bDisableMovement:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bShowTranslationOnCurveEd:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bShowRotationOnCurveEd:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bHide3DTrack:1;
  /* offset=0x0091 flags=0x0018001040000201 */ uint8 RotMode;
};

class UInterpTrackMoveAxis: public UInterpTrackFloatBase {
  /* offset=0x0060 flags=0x0018001040000200 */ uint8 MoveAxis;
  /* offset=0x0064 flags=0x0010000000000000 */ struct FInterpLookupTrack LookupTrack;
};

class UInterpTrackParticleReplay: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FParticleReplayTrackKey> TrackKeys;
};

class UInterpTrackSlomo: public UInterpTrackFloatBase {
};

class UInterpTrackSound: public UInterpTrackVectorBase {
  /* offset=0x0060 flags=0x0010000000000200 */ TArray<struct FSoundTrackKey> Sounds;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bPlayOnReverse:1;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bContinueSoundOnMatineeEnd:1;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bSuppressSubtitles:1;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bTreatAsDialogue:1;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bAttach:1;
};

class UInterpTrackToggle: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FToggleTrackKey> ToggleTrack;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bActivateSystemEachUpdate:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bActivateWithJustAttachedFlag:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenForwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenBackwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenJumpingForwards:1;
};

class UInterpTrackVectorBase: public UInterpTrack {
  /* offset=0x0048 flags=0x0018000000000000 */ struct FInterpCurveVector VectorTrack;
  /* offset=0x005c flags=0x0018001040000201 */ float CurveTension;
};

class UInterpTrackVectorMaterialParam: public UInterpTrackVectorBase {
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<UMaterialInterface*> TargetMaterials;
  /* offset=0x0070 flags=0x0018001040000201 */ FName ParamName;
};

class UInterpTrackVectorProp: public UInterpTrackVectorBase {
  /* offset=0x0060 flags=0x0018001040020201 */ FName PropertyName;
};

class UInterpTrackVisibility: public UInterpTrack {
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FVisibilityTrackKey> VisibilityTrack;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenForwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenBackwards:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bFireEventsWhenJumpingForwards:1;
};

class UIntlHelper: public UBlueprintFunctionLibrary {
  int32 GetLocalTimezone();
  FString GetLocalizationString(FString Key);
  FString GetLocalizationStringWithID(int32 ID);
  FString GetSavedXGLanguageTag();
  FString GetSavedXGTimezoneTag();
  void HelpshiftShowConversion();
  void HelpshiftShowConversionWithInfo(FString Name, FString Level, FString gold);
  void HelpshiftUploadLog();
  void OnChoosingZone(int32 ZoneID, FString AddrIP);
  void OnSwitchLanguage();
  void SaveXGTags(FString Language, FString timezone);
};

class UInvalidationBox: public UContentWidget {
  /* offset=0x00d5 flags=0x0028081040000201 */ bool bCanCache;
  /* offset=0x00d6 flags=0x0028081040000215 */ bool CacheRelativeTransforms;

  bool GetCanCache();
  void InvalidateCache();
  void SetCanCache(bool CanCache);
};

class UInventoryListItem_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008021c */ UWidgetAnimation* SwipeLeft;
  /* offset=0x01b8 flags=0x000a0010c008021c */ UWidgetAnimation* SwipeBackToNormal;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCanvasPanel* AbandonPanel;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UTextBlock* DescriptionLbl;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UCanvasPanel* ItemPanel;
  /* offset=0x01cc flags=0x000a0010c008020c */ UTextBlock* NameLbl;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UTextBlock* NumLbl;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UProgressBar* UseItemCDProgress;
  /* offset=0x01dc flags=0x0008001040000205 */ int32 TargetItemID;
  /* offset=0x01e0 flags=0x0008001040010205 */ float SwipeStart;
  /* offset=0x01e4 flags=0x0008001040000205 */ float SwipeDistance;
  /* offset=0x01e8 flags=0x0000001040010205 */ bool bIsSwiped;
  /* offset=0x01e9 flags=0x0000001040010205 */ bool bIsMoveStart;
  /* offset=0x01ea flags=0x0008001040010205 */ uint8 SwipeInput;
  /* offset=0x01eb flags=0x0008001040010205 */ uint8 InteractionState;
  /* offset=0x01ec flags=0x0008001040010205 */ float ItemInitialXPosition;
  /* offset=0x01f0 flags=0x0008001040010205 */ float AbandonInitialXPosition;

  void BndEvt__Button_131_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();
  void CancelOthersChosenItem();
  void ChoseItem(UObject* BackPackMgr);
  void CollapseOthersItem();
  void Construct();
  void ExecuteUbergraph_InventoryListItem(int32 EntryPoint, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void IsItemUsing(bool IsUsing);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, bool CallFunc_IsItemUsing_IsUsing, struct FEventReply CallFunc_Handled_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool K2Node_SwitchEnum3_CmpSuccess, bool K2Node_SwitchEnum4_CmpSuccess, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FEventReply CallFunc_Unhandled_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed);
  void ResetStateOnBackPackExit(bool K2Node_SwitchEnum_CmpSuccess);
  void ResetSwipe();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateData(int32 ID);
};

class UInventoryListPanel_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UVerticalBox* PickableActorList;

  void AllItemBackToNormal(int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, UInventoryListItem_C* K2Node_DynamicCast_AsInventory_List_Item, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_GetPosition_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FVector2D CallFunc_MakeVector2D_ReturnValue2);
  void CollapseOthers(int32 ItemID, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UInventoryListItem_C* K2Node_DynamicCast_AsInventory_List_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void UnChoseAllItem(int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UInventoryListItem_C* K2Node_DynamicCast_AsInventory_List_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void UpdateData(int32 LastIndex);
};

class UIpConnection: public UNetConnection {
};

class UIpNetDriver: public UNetDriver {
  /* offset=0x0350 flags=0x0018001000004000 */ uint8 LogPortUnreach:1;
  /* offset=0x0350 flags=0x0018001000004000 */ uint8 AllowPlayerPortUnreach:1;
  /* offset=0x0354 flags=0x0018001040004200 */ uint32 MaxPortCountToTry;
  /* offset=0x0364 flags=0x0048001040004200 */ uint32 ServerDesiredSocketReceiveBufferBytes;
  /* offset=0x0368 flags=0x0048001040004200 */ uint32 ServerDesiredSocketSendBufferBytes;
  /* offset=0x036c flags=0x0048001040004200 */ uint32 ClientDesiredSocketReceiveBufferBytes;
  /* offset=0x0370 flags=0x0048001040004200 */ uint32 ClientDesiredSocketSendBufferBytes;
};

class UItemConfigActorComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0020080000000205 */ TArray<struct FItemSpawnData> ItemSpawnDatas;
  /* offset=0x00b8 flags=0x0020088000000200 */ TMap<int32, struct FGroupTypeSceneComponents> AllSpotGroups;

  TArray<struct FItemSpawnClass> GetItemSpawnClass(struct FItemSpawnData Data);
  UClass<UObject>* LoadActorClass(FString Path);
  USceneComponent* RandomGroupSceneComponent(TArray<USceneComponent*> AllGroups);
  TArray<USceneComponent*> RandomGroupSceneComponents(int32 GroupType, int32 Persent);
  TArray<struct FItemSpawnClass> RandomItemSpawnClass(FString ItemValue, FString ItemCategory);
  void RegisterGroupSceneComponent(int32 GroupType, USceneComponent* GroupSceneComponent);
};

class UItemContainerInterface: public UInterface {
  TArray<struct FItemDefineID> GetItemDefineIDList();
  UItemHandleBase* GetItemHandleByDefineID(struct FItemDefineID DefineID);
  TArray<UItemHandleBase*> GetItemHandleListByDefineID(struct FItemDefineID DefineID);
  UObject* GetOwningObject();
};

class UItemFactoryInterface: public UInterface {
};

class AItemGeneratorBase: public AActor {
  /* offset=0x02a8 flags=0x0018001040010201 */ UCurveFloat* UpdateOverlapCurve;
  /* offset=0x02ac flags=0x0018001040010201 */ float ShowWrapperMeshDistance;
  /* offset=0x02b0 flags=0x0018001040010201 */ float IsGenerateOverlapEventsForceUpdateTime;
  /* offset=0x02b4 flags=0x0018001040010001 */ struct FVector BoxOverlapCheckExtent;
  /* offset=0x02c0 flags=0x0018001040010201 */ bool bShowCheckPropsMeshVisibleBox;
  /* offset=0x02c4 flags=0x0018001040010201 */ float ShowCheckPropsMeshVisibleBoxTime;
  /* offset=0x02d8 flags=0x0028081040000200 */ ASTExtraPlayerController* PlayerController;

  void ForceUpdate();
};

class UItemGeneratorComponent: public UBaseGeneratorComponent {
  /* offset=0x00f8 flags=0x0018001040000015 */ struct FVector ItemGenerateOffset;
  /* offset=0x0104 flags=0x0018001040000215 */ uint8 BornIslandGroupType;
  /* offset=0x0105 flags=0x0018001040000205 */ bool bStatisticsValid;
  /* offset=0x0106 flags=0x0018001040000205 */ bool bWorldTileGenerator;
  /* offset=0x0108 flags=0x0010000000000000 */ struct FItemGenerateStatisticsData ItemStatisticsData;
  /* offset=0x01cc flags=0x0020080000000215 */ TArray<struct FSpotGroupProperty> SpotGroupPropertys;
  /* offset=0x01d8 flags=0x0020080000000200 */ TMap<FString, struct FItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;
  /* offset=0x0214 flags=0x0020088000000200 */ TMap<int32, struct FWorldTileSpotArray> WorldTileSpots;
  /* offset=0x0250 flags=0x0020080000000200 */ TArray<AActor*> BornIslandItems;
  /* offset=0x025c flags=0x0020088000000208 */ TArray<UItemGroupSpotSceneComponent*> AllValidGroups;
  /* offset=0x0268 flags=0x0028081040000200 */ bool bIsGenerateBornIslandItems;
  /* offset=0x0269 flags=0x0028081040000200 */ bool bIsGenerateMainlandItems;
  /* offset=0x026a flags=0x0028081040000200 */ bool bIsGenerateWorldTileItems;
  /* offset=0x0270 flags=0x0028081000000000 */ struct FDateTime GenerateBornIslandTime;
  /* offset=0x0278 flags=0x0028081000000000 */ struct FDateTime GenerateMainlandTime;

  void CheckTileLevelsVisible();
  void DeleteBornIslandItems();
  void DeleteValidGroups();
  void GenerateSpotOnTick();
  void GeneratorWorldTileSpots(struct FWorldTileSpotArray SpotArray);
  bool GetRandomItemClassArray(FString Value, FString Category, TArray<struct FItemGenerateSpawnClass> Results);
  void LoadItemGenerateTable();
  void RandomBornIslandGroups();
  void RandomGroups();
  void RandomGroupsByType(struct FSpotGroupProperty GroupProperty);
  struct FItemGenerateSpawnData RandomItemGenerateSpawnData(TArray<struct FItemGenerateSpawnData> Items);
  UItemGroupSpotSceneComponent* RandomSingleGroup(TArray<UGroupSpotSceneComponent*> Groups, struct FSpotGroupProperty GroupProperty);
  void RegisterBornIslandItem(AActor* Item);
  void RegisterItemGenerateSpawnData(struct FItemGenerateSpawnData Data);
  void RegisterWorldTileSpot(UItemSpotSceneComponent* Spot);
  void WriteAllStatisticsDatas();
  void WriteBuildingStatisticsDatas();
  void WriteGroupStatisticsDatas();
  void WriteItemClassStatisticsDatas();
};

class UItemGroupSpotSceneComponent: public UGroupSpotSceneComponent {
  /* offset=0x027c flags=0x002808104008021c */ UItemGeneratorComponent* ItemGenerator;

  void RandomSingleSpot(TArray<UItemSpotSceneComponent*> Spots, struct FSpotTypeProperty Property);
  void RandomSpotByType(uint8 SpotType, TArray<UItemSpotSceneComponent*> AllSpots, struct FSpotTypeProperty Property);
  void SetGroupProperty(struct FSpotGroupProperty Property);
};

class UItemHandleBase: public UObject {
  /* offset=0x001c flags=0x0018001040000204 */ int32 Count;
  /* offset=0x0020 flags=0x0018001040000204 */ int32 MaxCount;
  /* offset=0x0024 flags=0x0018001040000204 */ bool bUnique;
  /* offset=0x0025 flags=0x0018001040000204 */ bool bStackable;
  /* offset=0x0028 flags=0x0040000000000200 */ TMap<FName, struct FItemAssociation> AssociationMap;
  /* offset=0x0068 flags=0x0048001000000000 */ struct FItemDefineID DefineID;

  void AddAssociation(FName Name, struct FItemAssociation Association);
  struct FItemAssociation GetAssociation(FName Name);
  struct FItemAssociation GetAssociationByTargetDefineID(struct FItemDefineID TargetDefineID);
  TArray<struct FItemAssociation> GetAssociationListByTargetType(int32 Type);
  TMap<FName, struct FItemAssociation> GetAssociationMap();
  struct FItemDefineID GetDefineID();
  void Init(struct FItemDefineID InDefineID);
  void RemoveAssociation(FName Name);
  void SetAssociation(FName Name, struct FItemAssociation Association);
};

class UItemPopUpNotice_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Tips;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Tips;
  /* offset=0x023c flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_Msg;

  void BndEvt__DX_Tips_1_K2Node_ComponentBoundEvent_0_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
  void BndEvt__DX_Tips_K2Node_ComponentBoundEvent_0_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
  void ExecuteUbergraph_ItemPopUpNotice_BP(int32 EntryPoint);
  void SetFastNotice(FString Text, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetNotice(FString msg, FText CallFunc_Conv_StringToText_ReturnValue);
};

class UItemSpotSceneComponent: public USpotSceneComponent {
  /* offset=0x0280 flags=0x0018001040000205 */ int32 AIGroupID;
  /* offset=0x0285 flags=0x0028081040000200 */ uint8 SpotGroupType;
  /* offset=0x0288 flags=0x0028081040080208 */ UItemGeneratorComponent* ItemGenerator;
  /* offset=0x028c flags=0x0020080000000000 */ struct FSpotTypeProperty Property;

  void GenerateItems(TArray<struct FItemGenerateSpawnClass> AllItemClass);
  void GenerateSpot();
  void SetSpotProperty(int32 CompositionID, uint8 GroupType, UItemGeneratorComponent* Generator, struct FSpotTypeProperty Property);
};

class UJoinSessionCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UJoinSessionCallbackProxy* JoinSession(UObject* WorldContextObject, APlayerController* PlayerController, struct FBlueprintSessionResult SearchResult);
};

class UJsonUtilitiesDummyObject: public UObject {
};

class UKillInfoItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* NewAnimation;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* Mode2_anima;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* Mode1_anima;
  /* offset=0x0240 flags=0x000a0010c008020c */ UBorder* Border_ColorSet;
  /* offset=0x0244 flags=0x000a0010c008020c */ UBorder* Border_SetColor;
  /* offset=0x0248 flags=0x000a0010c008020c */ UGridPanel* GridPanel_main;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_KillType;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_WeaponIcon;
  /* offset=0x0254 flags=0x000a0010c008020c */ USizeBox* SizeBox_killtype;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName01;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName02;
  /* offset=0x0260 flags=0x0000001040010205 */ bool IsMode2;
  /* offset=0x0264 flags=0x0000000000010205 */ TMap<uint8, UTexture2D*> DamageTypeMapIcon;

  void Construct();
  void ExecuteUbergraph_KillInfoItem_BP(int32 EntryPoint);
  void FileItem(struct FClientFatalDamageRecordData NewParam, UTexture2D* CallFunc_GetWeapIcon_AsTexture_2D, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue2);
  void GetIconByItemID(int32 inInt, bool HasFound, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);
  void GetIsDeadIcon(bool IsHeadshot, int32 HealthStatus, uint8 CallFunc_Conv_IntToByte_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void GetWeapIcon(int32 DamageType, int32 AdditionalParam, int32 PreviousHealthStatus, UTexture2D* AsTexture 2D, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_GetIconByItemID_HasFound, uint8 CallFunc_GetValidValue_ReturnValue, bool CallFunc_GetIconByItemID_HasFound2, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, uint8 CallFunc_Conv_IntToByte_ReturnValue2, uint8 CallFunc_GetValidValue_ReturnValue2, bool K2Node_SwitchEnum2_CmpSuccess, UTexture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void RefreshWeaponIcon(UObject* NewParam, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void SwitchToMode2();
};

class AKillZVolume: public APhysicsVolume {
};

class UKilledTipsPanel_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* NewAnimation;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* textAnimation;
  /* offset=0x023c flags=0x000a0010c008020c */ UCanvasPanel* Panel;
  /* offset=0x0240 flags=0x000a0010c008020c */ UTextBlock* tips0;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* tips1;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* tips2;
  /* offset=0x024c flags=0x0000000000010005 */ FText lastTips;
  /* offset=0x0258 flags=0x0000000000010205 */ TArray<FText> TipsQueue;
  /* offset=0x0264 flags=0x0000001040010205 */ bool NeedPlayAgain;

  void AssignToText(int32 Position, FText inputText, UWidget* CallFunc_GetChildAt_ReturnValue, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess);
  void ExecuteUbergraph_KilledTipsPanel(int32 EntryPoint, bool CallFunc_Has_Empty_Position_Has_Empty, int32 CallFunc_Has_Empty_Position_EmptyPosition, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Has_Used_Position_result, bool CallFunc_IsAnimationPlaying_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void Has Empty Position(bool Has Empty, int32 EmptyPosition, int32 Position, bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue);
  void Has Used Position(bool Result, UWidget* CallFunc_GetChildAt_ReturnValue, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue);
  void Remove First Item(UWidget* CallFunc_GetChildAt_ReturnValue, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess);
  void RemoveFirst();
  void ResetPositionAndContent(UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue3, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetText_ReturnValue2);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void Updata(FString new killed tips, bool Tips Is Used, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
};

class UKismetAnimationLibrary: public UBlueprintFunctionLibrary {
  struct FTransform K2_LookAt(struct FTransform CurrentTransform, struct FVector TargetPosition, struct FVector LookAtVector, bool bUseUpVector, struct FVector UpVector, float ClampConeInDegree);
  void K2_TwoBoneIK(struct FVector RootPos, struct FVector JointPos, struct FVector EndPos, struct FVector JointTarget, struct FVector Effector, struct FVector OutJointPos, struct FVector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);
};

class UKismetArrayLibrary: public UBlueprintFunctionLibrary {
  int32 Array_Add(TArray<int32> TargetArray, int32 NewItem);
  int32 Array_AddUnique(TArray<int32> TargetArray, int32 NewItem);
  void Array_Append(TArray<int32> TargetArray, TArray<int32> SourceArray);
  void Array_Clear(TArray<int32> TargetArray);
  bool Array_Contains(TArray<int32> TargetArray, int32 ItemToFind);
  int32 Array_Find(TArray<int32> TargetArray, int32 ItemToFind);
  void Array_Get(TArray<int32> TargetArray, int32 Index, int32 Item);
  void Array_Insert(TArray<int32> TargetArray, int32 NewItem, int32 Index);
  bool Array_IsValidIndex(TArray<int32> TargetArray, int32 IndexToTest);
  int32 Array_LastIndex(TArray<int32> TargetArray);
  int32 Array_Length(TArray<int32> TargetArray);
  void Array_Remove(TArray<int32> TargetArray, int32 IndexToRemove);
  bool Array_RemoveItem(TArray<int32> TargetArray, int32 Item);
  void Array_Resize(TArray<int32> TargetArray, int32 Size);
  void Array_Set(TArray<int32> TargetArray, int32 Index, int32 Item, bool bSizeToFit);
  void Array_Shuffle(TArray<int32> TargetArray);
  void Array_Swap(TArray<int32> TargetArray, int32 FirstIndex, int32 SecondIndex);
  void FilterArray(TArray<AActor*> TargetArray, UClass<AActor>* FilterClass, TArray<AActor*> FilteredArray);
  void SetArrayPropertyByName(UObject* Object, FName PropertyName, TArray<int32> Value);
};

class UKismetGuidLibrary: public UBlueprintFunctionLibrary {
  FString Conv_GuidToString(struct FGuid InGuid);
  bool EqualEqual_GuidGuid(struct FGuid A, struct FGuid B);
  void Invalidate_Guid(struct FGuid InGuid);
  bool IsValid_Guid(struct FGuid InGuid);
  struct FGuid NewGuid();
  bool NotEqual_GuidGuid(struct FGuid A, struct FGuid B);
  void Parse_StringToGuid(FString GuidString, struct FGuid OutGuid, bool Success);
};

class UKismetInputLibrary: public UBlueprintFunctionLibrary {
  void CalibrateTilt();
  bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B);
  bool EqualEqual_KeyKey(struct FKey A, struct FKey B);
  float GetAnalogValue(struct FAnalogInputEvent Input);
  struct FKey GetKey(struct FKeyEvent Input);
  int32 GetUserIndex(struct FKeyEvent Input);
  bool InputEvent_IsAltDown(struct FInputEvent Input);
  bool InputEvent_IsCommandDown(struct FInputEvent Input);
  bool InputEvent_IsControlDown(struct FInputEvent Input);
  bool InputEvent_IsLeftAltDown(struct FInputEvent Input);
  bool InputEvent_IsLeftCommandDown(struct FInputEvent Input);
  bool InputEvent_IsLeftControlDown(struct FInputEvent Input);
  bool InputEvent_IsLeftShiftDown(struct FInputEvent Input);
  bool InputEvent_IsRepeat(struct FInputEvent Input);
  bool InputEvent_IsRightAltDown(struct FInputEvent Input);
  bool InputEvent_IsRightCommandDown(struct FInputEvent Input);
  bool InputEvent_IsRightControlDown(struct FInputEvent Input);
  bool InputEvent_IsRightShiftDown(struct FInputEvent Input);
  bool InputEvent_IsShiftDown(struct FInputEvent Input);
  FText Key_GetDisplayName(struct FKey Key);
  bool Key_IsFloatAxis(struct FKey Key);
  bool Key_IsGamepadKey(struct FKey Key);
  bool Key_IsKeyboardKey(struct FKey Key);
  bool Key_IsModifierKey(struct FKey Key);
  bool Key_IsMouseButton(struct FKey Key);
  bool Key_IsVectorAxis(struct FKey Key);
  struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent Input);
  struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent Input);
  struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent Input);
  enum ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent Input);
  struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent Input);
  int32 PointerEvent_GetPointerIndex(struct FPointerEvent Input);
  struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent Input);
  int32 PointerEvent_GetTouchpadIndex(struct FPointerEvent Input);
  int32 PointerEvent_GetUserIndex(struct FPointerEvent Input);
  float PointerEvent_GetWheelDelta(struct FPointerEvent Input);
  bool PointerEvent_IsMouseButtonDown(struct FPointerEvent Input, struct FKey MouseButton);
  bool PointerEvent_IsTouchEvent(struct FPointerEvent Input);
};

class UKismetInternationalizationLibrary: public UBlueprintFunctionLibrary {
  void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);
  FString GetCurrentAssetGroupCulture(FName AssetGroup);
  FString GetCurrentCulture();
  FString GetCurrentLanguage();
  FString GetCurrentLocale();
  bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);
  bool SetCurrentCulture(FString Culture, bool SaveToConfig);
  bool SetCurrentLanguage(FString Culture, bool SaveToConfig);
  bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);
  bool SetCurrentLocale(FString Culture, bool SaveToConfig);
};

class UKismetMaterialLibrary: public UBlueprintFunctionLibrary {
  UMaterialInstanceDynamic* CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent);
  float GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName);
  struct FLinearColor GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName);
  void SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);
  void SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, struct FLinearColor ParameterValue);
};

class UKismetMathLibrary: public UBlueprintFunctionLibrary {
  float Abs(float A);
  int32 Abs_Int(int32 A);
  float Acos(float A);
  uint8 Add_ByteByte(uint8 A, uint8 B);
  struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B);
  float Add_FloatFloat(float A, float B);
  int32 Add_IntInt(int32 A, int32 B);
  struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  struct FVector2D Add_Vector2DFloat(struct FVector2D A, float B);
  struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B);
  struct FVector Add_VectorFloat(struct FVector A, float B);
  struct FVector Add_VectorInt(struct FVector A, int32 B);
  struct FVector Add_VectorVector(struct FVector A, struct FVector B);
  int32 And_IntInt(int32 A, int32 B);
  float Asin(float A);
  float Atan(float A);
  float Atan2(float A, float B);
  uint8 BMax(uint8 A, uint8 B);
  uint8 BMin(uint8 A, uint8 B);
  bool BooleanAND(bool A, bool B);
  bool BooleanNAND(bool A, bool B);
  bool BooleanNOR(bool A, bool B);
  bool BooleanOR(bool A, bool B);
  bool BooleanXOR(bool A, bool B);
  void BreakColor(struct FLinearColor InColor, float R, float G, float B, float A);
  void BreakDateTime(struct FDateTime InDateTime, int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond);
  void BreakRandomStream(struct FRandomStream InRandomStream, int32 InitialSeed);
  void BreakRotIntoAxes(struct FRotator InRot, struct FVector X, struct FVector Y, struct FVector Z);
  void BreakRotator(struct FRotator InRot, float Roll, float Pitch, float Yaw);
  void BreakTimespan(struct FTimespan InTimespan, int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds);
  void BreakTimespan2(struct FTimespan InTimespan, int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano);
  void BreakTransform(struct FTransform InTransform, struct FVector Location, struct FRotator Rotation, struct FVector Scale);
  void BreakVector(struct FVector InVec, float X, float Y, float Z);
  void BreakVector2D(struct FVector2D InVec, float X, float Y);
  struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed);
  int32 Clamp(int32 Value, int32 Min, int32 Max);
  float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
  float ClampAxis(float Angle);
  struct FVector ClampVectorSize(struct FVector A, float Min, float Max);
  bool ClassIsChildOf(UClass<UObject>* TestClass, UClass<UObject>* ParentClass);
  struct FRotator ComposeRotators(struct FRotator A, struct FRotator B);
  struct FTransform ComposeTransforms(struct FTransform A, struct FTransform B);
  uint8 Conv_BoolToByte(bool InBool);
  float Conv_BoolToFloat(bool InBool);
  int32 Conv_BoolToInt(bool InBool);
  float Conv_ByteToFloat(uint8 InByte);
  int32 Conv_ByteToInt(uint8 InByte);
  struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor);
  struct FLinearColor Conv_FloatToLinearColor(float InFloat);
  struct FVector Conv_FloatToVector(float InFloat);
  bool Conv_IntToBool(int32 inInt);
  uint8 Conv_IntToByte(int32 inInt);
  float Conv_IntToFloat(int32 inInt);
  struct FIntVector Conv_IntToIntVector(int32 inInt);
  struct FVector Conv_IntVectorToVector(struct FIntVector InIntVector);
  struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor);
  struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor);
  struct FVector Conv_RotatorToVector(struct FRotator InRot);
  struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z);
  struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec);
  struct FRotator Conv_VectorToRotator(struct FVector InVec);
  struct FTransform Conv_VectorToTransform(struct FVector InLocation);
  struct FVector2D Conv_VectorToVector2D(struct FVector InVector);
  struct FTransform ConvertTransformToRelative(struct FTransform Transform, struct FTransform ParentTransform);
  float Cos(float A);
  struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
  float CrossProduct2D(struct FVector2D A, struct FVector2D B);
  struct FVector Cross_VectorVector(struct FVector A, struct FVector B);
  bool DateTimeFromIsoString(FString IsoString, struct FDateTime Result);
  bool DateTimeFromString(FString DateTimeString, struct FDateTime Result);
  struct FDateTime DateTimeMaxValue();
  struct FDateTime DateTimeMinValue();
  int32 DaysInMonth(int32 Year, int32 Month);
  int32 DaysInYear(int32 Year);
  float DegAcos(float A);
  float DegAsin(float A);
  float DegAtan(float A);
  float DegAtan2(float A, float B);
  float DegCos(float A);
  float DegSin(float A);
  float DegTan(float A);
  float DegreesToRadians(float A);
  uint8 Divide_ByteByte(uint8 A, uint8 B);
  float Divide_FloatFloat(float A, float B);
  int32 Divide_IntInt(int32 A, int32 B);
  struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar);
  struct FVector2D Divide_Vector2DFloat(struct FVector2D A, float B);
  struct FVector2D Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B);
  struct FVector Divide_VectorFloat(struct FVector A, float B);
  struct FVector Divide_VectorInt(struct FVector A, int32 B);
  struct FVector Divide_VectorVector(struct FVector A, struct FVector B);
  float DotProduct2D(struct FVector2D A, struct FVector2D B);
  float Dot_VectorVector(struct FVector A, struct FVector B);
  float Ease(float A, float B, float Alpha, uint8 EasingFunc, float BlendExp, int32 Steps);
  bool EqualEqual_BoolBool(bool A, bool B);
  bool EqualEqual_ByteByte(uint8 A, uint8 B);
  bool EqualEqual_ClassClass(UClass<UObject>* A, UClass<UObject>* B);
  bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool EqualEqual_FloatFloat(float A, float B);
  bool EqualEqual_IntInt(int32 A, int32 B);
  bool EqualEqual_NameName(FName A, FName B);
  bool EqualEqual_ObjectObject(UObject* A, UObject* B);
  bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance);
  bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  bool EqualEqual_TransformTransform(struct FTransform A, struct FTransform B);
  bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance);
  bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance);
  float Exp(float A);
  int32 FCeil(float A);
  float FClamp(float Value, float Min, float Max);
  int32 FFloor(float A);
  float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
  float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
  float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
  float FMax(float A, float B);
  float FMin(float A, float B);
  int32 FMod(float Dividend, float Divisor, float Remainder);
  int32 FTrunc(float A);
  struct FIntVector FTruncVector(struct FVector InVector);
  struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection);
  struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd);
  struct FRotator FindLookAtRotation(struct FVector Start, struct FVector Target);
  void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector Segment1Point, struct FVector Segment2Point);
  float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
  float FloatSpringInterp(float Current, float Target, struct FFloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
  float Fraction(float A);
  struct FTimespan FromDays(float Days);
  struct FTimespan FromHours(float Hours);
  struct FTimespan FromMilliseconds(float Milliseconds);
  struct FTimespan FromMinutes(float Minutes);
  struct FTimespan FromSeconds(float Seconds);
  void GetAxes(struct FRotator A, struct FVector X, struct FVector Y, struct FVector Z);
  void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform ReferenceFrame, float Azimuth, float Elevation);
  struct FDateTime GetDate(struct FDateTime A);
  int32 GetDay(struct FDateTime A);
  int32 GetDayOfYear(struct FDateTime A);
  int32 GetDays(struct FTimespan A);
  struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To);
  struct FTimespan GetDuration(struct FTimespan A);
  struct FVector GetForwardVector(struct FRotator InRot);
  int32 GetHour(struct FDateTime A);
  int32 GetHour12(struct FDateTime A);
  int32 GetHours(struct FTimespan A);
  float GetMaxElement(struct FVector A);
  int32 GetMillisecond(struct FDateTime A);
  int32 GetMilliseconds(struct FTimespan A);
  float GetMinElement(struct FVector A);
  int32 GetMinute(struct FDateTime A);
  int32 GetMinutes(struct FTimespan A);
  int32 GetMonth(struct FDateTime A);
  float GetPI();
  float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection);
  float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd);
  struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal);
  struct FVector GetRightVector(struct FRotator InRot);
  int32 GetSecond(struct FDateTime A);
  int32 GetSeconds(struct FTimespan A);
  float GetTAU();
  struct FTimespan GetTimeOfDay(struct FDateTime A);
  float GetTotalDays(struct FTimespan A);
  float GetTotalHours(struct FTimespan A);
  float GetTotalMilliseconds(struct FTimespan A);
  float GetTotalMinutes(struct FTimespan A);
  float GetTotalSeconds(struct FTimespan A);
  struct FVector GetUpVector(struct FRotator InRot);
  struct FVector GetVectorArrayAverage(TArray<struct FVector> Vectors);
  void GetYawPitchFromVector(struct FVector InVec, float Yaw, float Pitch);
  int32 GetYear(struct FDateTime A);
  bool GreaterEqual_ByteByte(uint8 A, uint8 B);
  bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool GreaterEqual_FloatFloat(float A, float B);
  bool GreaterEqual_IntInt(int32 A, int32 B);
  bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B);
  bool Greater_ByteByte(uint8 A, uint8 B);
  bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool Greater_FloatFloat(float A, float B);
  bool Greater_IntInt(int32 A, int32 B);
  bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  float GridSnap_Float(float Location, float GridSize);
  struct FLinearColor HSVToRGB(float H, float S, float V, float A);
  void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor RGB);
  float Hypotenuse(float Width, float Height);
  bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
  bool InRange_IntInt(int32 Value, int32 Min, int32 Max, bool InclusiveMin, bool InclusiveMax);
  float InverseLerp(float A, float B, float Value);
  struct FVector InverseTransformDirection(struct FTransform T, struct FVector Direction);
  struct FVector InverseTransformLocation(struct FTransform T, struct FVector Location);
  struct FRotator InverseTransformRotation(struct FTransform T, struct FRotator Rotation);
  struct FTransform InvertTransform(struct FTransform T);
  bool IsAfternoon(struct FDateTime A);
  bool IsLeapYear(int32 Year);
  bool IsMorning(struct FDateTime A);
  bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent);
  bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform BoxWorldTransform, struct FVector BoxExtent);
  float Lerp(float A, float B, float Alpha);
  bool LessEqual_ByteByte(uint8 A, uint8 B);
  bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool LessEqual_FloatFloat(float A, float B);
  bool LessEqual_IntInt(int32 A, int32 B);
  bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B);
  bool Less_ByteByte(uint8 A, uint8 B);
  bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool Less_FloatFloat(float A, float B);
  bool Less_IntInt(int32 A, int32 B);
  bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  bool LinePlaneIntersection(struct FVector LineStart, struct FVector LineEnd, struct FPlane APlane, float T, struct FVector Intersection);
  bool LinePlaneIntersection_OriginNormal(struct FVector LineStart, struct FVector LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float T, struct FVector Intersection);
  struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha);
  struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha);
  float Log(float A, float Base);
  float Loge(float A);
  struct FBox MakeBox(struct FVector Min, struct FVector Max);
  struct FBox2D MakeBox2D(struct FVector2D Min, struct FVector2D Max);
  struct FLinearColor MakeColor(float R, float G, float B, float A);
  struct FDateTime MakeDateTime(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond);
  struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal);
  float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
  struct FRandomStream MakeRandomStream(int32 InitialSeed);
  struct FRotator MakeRotFromX(struct FVector X);
  struct FRotator MakeRotFromXY(struct FVector X, struct FVector Y);
  struct FRotator MakeRotFromXZ(struct FVector X, struct FVector Z);
  struct FRotator MakeRotFromY(struct FVector Y);
  struct FRotator MakeRotFromYX(struct FVector Y, struct FVector X);
  struct FRotator MakeRotFromYZ(struct FVector Y, struct FVector Z);
  struct FRotator MakeRotFromZ(struct FVector Z);
  struct FRotator MakeRotFromZX(struct FVector Z, struct FVector X);
  struct FRotator MakeRotFromZY(struct FVector Z, struct FVector Y);
  struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up);
  struct FRotator MakeRotator(float Roll, float Pitch, float Yaw);
  struct FTimespan MakeTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds);
  struct FTimespan MakeTimespan2(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano);
  struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale);
  struct FVector MakeVector(float X, float Y, float Z);
  struct FVector2D MakeVector2D(float X, float Y);
  float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
  float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
  int32 Max(int32 A, int32 B);
  void MaxOfByteArray(TArray<uint8> ByteArray, int32 IndexOfMaxValue, uint8 MaxValue);
  void MaxOfFloatArray(TArray<float> FloatArray, int32 IndexOfMaxValue, float MaxValue);
  void MaxOfIntArray(TArray<int32> IntArray, int32 IndexOfMaxValue, int32 MaxValue);
  int32 Min(int32 A, int32 B);
  void MinOfByteArray(TArray<uint8> ByteArray, int32 IndexOfMinValue, uint8 MinValue);
  void MinOfFloatArray(TArray<float> FloatArray, int32 IndexOfMinValue, float MinValue);
  void MinOfIntArray(TArray<int32> IntArray, int32 IndexOfMinValue, int32 MinValue);
  void MinimumAreaRectangle(UObject* WorldContextObject, TArray<struct FVector> InVerts, struct FVector SampleSurfaceNormal, struct FVector OutRectCenter, struct FRotator OutRectRotation, float OutSideLengthX, float OutSideLengthY, bool bDebugDraw);
  struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal);
  float MultiplyByPi(float Value);
  float MultiplyMultiply_FloatFloat(float Base, float Exp);
  uint8 Multiply_ByteByte(uint8 A, uint8 B);
  float Multiply_FloatFloat(float A, float B);
  float Multiply_IntFloat(int32 A, float B);
  int32 Multiply_IntInt(int32 A, int32 B);
  struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B);
  struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B);
  struct FRotator Multiply_RotatorFloat(struct FRotator A, float B);
  struct FRotator Multiply_RotatorInt(struct FRotator A, int32 B);
  struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar);
  struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, float B);
  struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B);
  struct FVector Multiply_VectorFloat(struct FVector A, float B);
  struct FVector Multiply_VectorInt(struct FVector A, int32 B);
  struct FVector Multiply_VectorVector(struct FVector A, struct FVector B);
  bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
  bool NearlyEqual_TransformTransform(struct FTransform A, struct FTransform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
  struct FRotator NegateRotator(struct FRotator A);
  struct FVector NegateVector(struct FVector A);
  struct FVector Normal(struct FVector A);
  struct FVector2D Normal2D(struct FVector2D A);
  float NormalizeAxis(float Angle);
  float NormalizeToRange(float Value, float RangeMin, float RangeMax);
  struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B);
  bool NotEqual_BoolBool(bool A, bool B);
  bool NotEqual_ByteByte(uint8 A, uint8 B);
  bool NotEqual_ClassClass(UClass<UObject>* A, UClass<UObject>* B);
  bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  bool NotEqual_FloatFloat(float A, float B);
  bool NotEqual_IntInt(int32 A, int32 B);
  bool NotEqual_NameName(FName A, FName B);
  bool NotEqual_ObjectObject(UObject* A, UObject* B);
  bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance);
  bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance);
  bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance);
  int32 Not_Int(int32 A);
  bool Not_PreBool(bool A);
  struct FDateTime Now();
  int32 Or_IntInt(int32 A, int32 B);
  uint8 Percent_ByteByte(uint8 A, uint8 B);
  float Percent_FloatFloat(float A, float B);
  int32 Percent_IntInt(int32 A, int32 B);
  bool PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
  struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal);
  struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal);
  struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target);
  struct FRotator REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, uint8 EasingFunc, float BlendExp, int32 Steps);
  void RGBToHSV(struct FLinearColor InColor, float H, float S, float V, float A);
  void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor HSV);
  struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed);
  struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed);
  struct FRotator RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath);
  float RadiansToDegrees(float A);
  bool RandomBool();
  bool RandomBoolFromStream(struct FRandomStream Stream);
  bool RandomBoolWithWeight(float Weight);
  bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream RandomStream);
  float RandomFloat();
  float RandomFloatFromStream(struct FRandomStream Stream);
  float RandomFloatInRange(float Min, float Max);
  float RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream Stream);
  int32 RandomInteger(int32 Max);
  int32 RandomIntegerFromStream(int32 Max, struct FRandomStream Stream);
  int32 RandomIntegerInRange(int32 Min, int32 Max);
  int32 RandomIntegerInRangeFromStream(int32 Min, int32 Max, struct FRandomStream Stream);
  struct FVector RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent);
  struct FRotator RandomRotator(bool bRoll);
  struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream Stream);
  struct FVector RandomUnitVector();
  struct FVector RandomUnitVectorFromStream(struct FRandomStream Stream);
  struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees);
  struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream Stream);
  struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians);
  struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector ConeDir, float ConeHalfAngleInRadians, struct FRandomStream Stream);
  struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
  struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream Stream);
  struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
  struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream Stream);
  void ResetFloatSpringState(struct FFloatSpringState SpringState);
  void ResetRandomStream(struct FRandomStream Stream);
  void ResetVectorSpringState(struct FVectorSpringState SpringState);
  struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis);
  struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle);
  int32 Round(float A);
  void SeedRandomStream(struct FRandomStream Stream);
  UClass<UObject>* SelectClass(UClass<UObject>* A, UClass<UObject>* B, bool bSelectA);
  struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA);
  float SelectFloat(float A, float B, bool bPickA);
  int32 SelectInt(int32 A, int32 B, bool bPickA);
  UObject* SelectObject(UObject* A, UObject* B, bool bSelectA);
  struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA);
  FString SelectString(FString A, FString B, bool bPickA);
  struct FTransform SelectTransform(struct FTransform A, struct FTransform B, bool bPickA);
  struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA);
  void SetRandomStreamSeed(struct FRandomStream Stream, int32 NewSeed);
  float SignOfFloat(float A);
  int32 SignOfInteger(int32 A);
  float Sin(float A);
  float Sqrt(float A);
  float Square(float A);
  uint8 Subtract_ByteByte(uint8 A, uint8 B);
  struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B);
  struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B);
  float Subtract_FloatFloat(float A, float B);
  int32 Subtract_IntInt(int32 A, int32 B);
  struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B);
  struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, float B);
  struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B);
  struct FVector Subtract_VectorFloat(struct FVector A, float B);
  struct FVector Subtract_VectorInt(struct FVector A, int32 B);
  struct FVector Subtract_VectorVector(struct FVector A, struct FVector B);
  struct FTransform TEase(struct FTransform A, struct FTransform B, float Alpha, uint8 EasingFunc, float BlendExp, int32 Steps);
  struct FTransform TInterpTo(struct FTransform Current, struct FTransform Target, float DeltaTime, float InterpSpeed);
  struct FTransform TLerp(struct FTransform A, struct FTransform B, float Alpha, uint8 InterpMode);
  float Tan(float A);
  bool TimespanFromString(FString TimespanString, struct FTimespan Result);
  struct FTimespan TimespanMaxValue();
  struct FTimespan TimespanMinValue();
  float TimespanRatio(struct FTimespan A, struct FTimespan B);
  struct FTimespan TimespanZeroValue();
  struct FDateTime Today();
  struct FVector TransformDirection(struct FTransform T, struct FVector Direction);
  struct FVector TransformLocation(struct FTransform T, struct FVector Location);
  struct FRotator TransformRotation(struct FTransform T, struct FRotator Rotation);
  struct FDateTime UtcNow();
  struct FVector VEase(struct FVector A, struct FVector B, float Alpha, uint8 EasingFunc, float BlendExp, int32 Steps);
  struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed);
  struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed);
  struct FVector VLerp(struct FVector A, struct FVector B, float Alpha);
  float VSize(struct FVector A);
  float VSize2D(struct FVector2D A);
  float VSize2DSquared(struct FVector2D A);
  float VSizeSquared(struct FVector A);
  struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed);
  struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed);
  struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
  int32 Xor_IntInt(int32 A, int32 B);
};

class UKismetNodeHelperLibrary: public UBlueprintFunctionLibrary {
  bool BitIsMarked(int32 Data, int32 Index);
  void ClearAllBits(int32 Data);
  void ClearBit(int32 Data, int32 Index);
  FName GetEnumeratorName(UEnum* Enum, uint8 EnumeratorValue);
  FString GetEnumeratorUserFriendlyName(UEnum* Enum, uint8 EnumeratorValue);
  uint8 GetEnumeratorValueFromIndex(UEnum* Enum, uint8 EnumeratorIndex);
  int32 GetFirstUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
  int32 GetRandomUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
  int32 GetUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, bool bRandom);
  uint8 GetValidValue(UEnum* Enum, uint8 EnumeratorValue);
  bool HasMarkedBit(int32 Data, int32 NumBits);
  bool HasUnmarkedBit(int32 Data, int32 NumBits);
  void MarkBit(int32 Data, int32 Index);
};

class UKismetRenderingLibrary: public UBlueprintFunctionLibrary {
  void BeginDrawCanvasToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UCanvas* Canvas, struct FVector2D Size, struct FDrawToRenderTargetContext Context);
  void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3);
  void ClearRenderTarget2D(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor);
  void ConvertRenderTargetToTexture2DEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2D* RenderTarget, UTexture2D* Texture);
  UTextureRenderTarget2D* CreateRenderTarget2D(UObject* WorldContextObject, int32 Width, int32 Height, uint8 Format);
  void DrawMaterialToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UMaterialInterface* Material);
  void EndDrawCanvasToRenderTarget(UObject* WorldContextObject, struct FDrawToRenderTargetContext Context);
  void ExportRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);
  void ExportTexture2D(UObject* WorldContextObject, UTexture2D* Texture, FString FilePath, FString Filename);
  struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3);
  void ReleaseRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget);
  UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D* RenderTarget, FString Name, uint8 CompressionSettings, uint8 MipSettings);
};

class UKismetStringLibrary: public UBlueprintFunctionLibrary {
  FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);
  FString BuildString_Color(FString AppendTo, FString Prefix, struct FLinearColor InColor, FString Suffix);
  FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);
  FString BuildString_Int(FString AppendTo, FString Prefix, int32 inInt, FString Suffix);
  FString BuildString_IntVector(FString AppendTo, FString Prefix, struct FIntVector InIntVector, FString Suffix);
  FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);
  FString BuildString_Object(FString AppendTo, FString Prefix, UObject* InObj, FString Suffix);
  FString BuildString_Rotator(FString AppendTo, FString Prefix, struct FRotator InRot, FString Suffix);
  FString BuildString_Vector(FString AppendTo, FString Prefix, struct FVector InVector, FString Suffix);
  FString BuildString_Vector2d(FString AppendTo, FString Prefix, struct FVector2D InVector2D, FString Suffix);
  FString Concat_StrStr(FString A, FString B);
  bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);
  FString Conv_BoolToString(bool InBool);
  FString Conv_ByteToString(uint8 InByte);
  FString Conv_ColorToString(struct FLinearColor InColor);
  FString Conv_FloatToString(float InFloat);
  FString Conv_IntToString(int32 inInt);
  FString Conv_IntVectorToString(struct FIntVector InIntVec);
  FString Conv_NameToString(FName InName);
  FString Conv_ObjectToString(UObject* InObj);
  FString Conv_RotatorToString(struct FRotator InRot);
  void Conv_StringToColor(FString inString, struct FLinearColor OutConvertedColor, bool OutIsValid);
  float Conv_StringToFloat(FString inString);
  int32 Conv_StringToInt(FString inString);
  FName Conv_StringToName(FString inString);
  void Conv_StringToRotator(FString inString, struct FRotator OutConvertedRotator, bool OutIsValid);
  void Conv_StringToVector(FString inString, struct FVector OutConvertedVector, bool OutIsValid);
  void Conv_StringToVector2D(FString inString, struct FVector2D OutConvertedVector2D, bool OutIsValid);
  FString Conv_TransformToString(struct FTransform InTrans);
  FString Conv_Vector2dToString(struct FVector2D InVec);
  FString Conv_VectorToString(struct FVector InVec);
  int32 CullArray(FString SourceString, TArray<FString> inArray);
  bool EndsWith(FString SourceString, FString InSuffix, uint8 SearchCase);
  bool EqualEqual_StrStr(FString A, FString B);
  bool EqualEqual_StriStri(FString A, FString B);
  int32 FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32 StartPosition);
  TArray<FString> GetCharacterArrayFromString(FString SourceString);
  int32 GetCharacterAsNumber(FString SourceString, int32 Index);
  FString GetSubstring(FString SourceString, int32 StartIndex, int32 Length);
  bool IsNumeric(FString SourceString);
  FString JoinStringArray(TArray<FString> SourceArray, FString Separator);
  FString Left(FString SourceString, int32 Count);
  FString LeftChop(FString SourceString, int32 Count);
  FString LeftPad(FString SourceString, int32 ChCount);
  int32 Len(FString S);
  bool MatchesWildcard(FString SourceString, FString Wildcard, uint8 SearchCase);
  FString Mid(FString SourceString, int32 Start, int32 Count);
  bool NotEqual_StrStr(FString A, FString B);
  bool NotEqual_StriStri(FString A, FString B);
  TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);
  FString Replace(FString SourceString, FString From, FString To, uint8 SearchCase);
  int32 ReplaceInline(FString SourceString, FString SearchText, FString ReplacementText, uint8 SearchCase);
  FString Reverse(FString SourceString);
  FString Right(FString SourceString, int32 Count);
  FString RightChop(FString SourceString, int32 Count);
  FString RightPad(FString SourceString, int32 ChCount);
  bool Split(FString SourceString, FString InStr, FString LeftS, FString RightS, uint8 SearchCase, uint8 SearchDir);
  bool StartsWith(FString SourceString, FString InPrefix, uint8 SearchCase);
  FString TimeSecondsToString(float InSeconds);
  FString ToLower(FString SourceString);
  FString ToUpper(FString SourceString);
  FString Trim(FString SourceString);
  FString TrimTrailing(FString SourceString);
};

class UKismetStringTableLibrary: public UBlueprintFunctionLibrary {
  TArray<FString> GetKeysFromStringTable(FName TableId);
  TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);
  TArray<FName> GetRegisteredStringTables();
  FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId);
  FString GetTableEntrySourceString(FName TableId, FString Key);
  FString GetTableNamespace(FName TableId);
  bool IsRegisteredTableEntry(FName TableId, FString Key);
  bool IsRegisteredTableId(FName TableId);
};

class UKismetSystemLibrary: public UBlueprintFunctionLibrary {
  struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory FloatHistory);
  bool BoxOverlapActors(UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, TArray<uint8> ObjectTypes, UClass<UObject>* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*> OutActors);
  bool BoxOverlapComponents(UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, TArray<uint8> ObjectTypes, UClass<UObject>* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*> OutComponents);
  bool BoxTraceMulti(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool BoxTraceMultiByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool BoxTraceMultiForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool BoxTraceSingle(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool BoxTraceSingleByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool BoxTraceSingleForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, FString PathString);
  bool CanLaunchURL(FString URL);
  bool CapsuleOverlapActors(UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, TArray<uint8> ObjectTypes, UClass<UObject>* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*> OutActors);
  bool CapsuleOverlapComponents(UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, TArray<uint8> ObjectTypes, UClass<UObject>* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*> OutComponents);
  bool CapsuleTraceMulti(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool CapsuleTraceMultiByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool CapsuleTraceSingle(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool CapsuleTraceSingleByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  void CollectGarbage();
  bool ComponentOverlapActors(UPrimitiveComponent* Component, struct FTransform ComponentTransform, TArray<uint8> ObjectTypes, UClass<UObject>* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*> OutActors);
  bool ComponentOverlapComponents(UPrimitiveComponent* Component, struct FTransform ComponentTransform, TArray<uint8> ObjectTypes, UClass<UObject>* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*> OutComponents);
  void ControlScreensaver(bool bAllowScreenSaver);
  UClass<UObject>* Conv_ClassToSoftClassReference(UClass<UObject>* Class);
  UObject* Conv_InterfaceToObject(UInterface<UInterface>* Interface);
  UObject* Conv_ObjectToSoftObjectReference(UObject* Object);
  FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId);
  FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType);
  UClass<UObject>* Conv_SoftClassReferenceToClass(UClass<UObject>* SoftClass);
  FString Conv_SoftClassReferenceToString(UClass<UObject>* SoftClassReference);
  UObject* Conv_SoftObjectReferenceToObject(UObject* SoftObject);
  FString Conv_SoftObjectReferenceToString(UObject* SoftObjectReference);
  void CreateCopyForUndoBuffer(UObject* ObjectToModify);
  void Delay(UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo);
  bool DoesImplementInterface(UObject* TestObject, UClass<UInterface>* Interface);
  void DrawDebugArrow(UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugBox(UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness);
  void DrawDebugCamera(ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration);
  void DrawDebugCapsule(UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugCircle(UObject* WorldContextObject, struct FVector Center, float Radius, int32 NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis);
  void DrawDebugCone(UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugConeInDegrees(UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugCoordinateSystem(UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness);
  void DrawDebugCylinder(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32 Segments, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, struct FDebugFloatHistory FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration);
  void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, struct FDebugFloatHistory FloatHistory, struct FTransform DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration);
  void DrawDebugFrustum(UObject* WorldContextObject, struct FTransform FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness);
  void DrawDebugLine(UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugPlane(UObject* WorldContextObject, struct FPlane PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration);
  void DrawDebugPoint(UObject* WorldContextObject, struct FVector Position, float Size, struct FLinearColor PointColor, float Duration);
  void DrawDebugSphere(UObject* WorldContextObject, struct FVector Center, float Radius, int32 Segments, struct FLinearColor LineColor, float Duration, float Thickness);
  void DrawDebugString(UObject* WorldContextObject, struct FVector TextLocation, FString Text, AActor* TestBaseActor, struct FLinearColor TextColor, float Duration);
  bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B);
  bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B);
  bool EqualEqual_SoftClassReference(UClass<UObject>* A, UClass<UObject>* B);
  bool EqualEqual_SoftObjectReference(UObject* A, UObject* B);
  void ExecuteConsoleCommand(UObject* WorldContextObject, FString Command, APlayerController* SpecificPlayer);
  void FlushDebugStrings(UObject* WorldContextObject);
  void FlushPersistentDebugLines(UObject* WorldContextObject);
  void ForceCloseAdBanner();
  void GetActorBounds(AActor* Actor, struct FVector Origin, struct FVector BoxExtent);
  void GetActorListFromComponentList(TArray<UPrimitiveComponent*> ComponentList, UClass<UObject>* ActorClassFilter, TArray<AActor*> OutActorList);
  int32 GetAdIDCount();
  FString GetClassDisplayName(UClass<UObject>* Class);
  UClass<UObject>* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId);
  FString GetCommandLine();
  void GetComponentBounds(USceneComponent* Component, struct FVector Origin, struct FVector BoxExtent, float SphereRadius);
  bool GetConvenientWindowedResolutions(TArray<struct FIntPoint> Resolutions);
  bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName> OutBundles);
  FString GetDefaultLanguage();
  FString GetDefaultLocale();
  FString GetDeviceId();
  FString GetDisplayName(UObject* Object);
  FString GetEngineVersion();
  FString GetGameBundleId();
  FString GetGameName();
  float GetGameTimeInSeconds(UObject* WorldContextObject);
  FString GetLocalCurrencyCode();
  FString GetLocalCurrencySymbol();
  int32 GetMinYResolutionFor3DView();
  int32 GetMinYResolutionForUI();
  UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId);
  FString GetObjectName(UObject* Object);
  FString GetPathName(UObject* Object);
  FString GetPlatformUserName();
  TArray<FString> GetPreferredLanguages();
  struct FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass<UObject>* Class);
  struct FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject* Object);
  struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(UClass<UObject>* SoftClassReference);
  struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(UObject* SoftObjectReference);
  void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList);
  void GetPrimaryAssetsWithBundleState(TArray<FName> RequiredBundles, TArray<FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList);
  int32 GetRenderingDetailMode();
  int32 GetRenderingMaterialQualityLevel();
  UClass<UObject>* GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId);
  UObject* GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId);
  bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint> Resolutions);
  FString GetUniqueDeviceId();
  bool GetVolumeButtonsHandledBySystem();
  void HideAdBanner();
  bool IsControllerAssignedToGamepad(int32 ControllerId);
  bool IsDedicatedServer(UObject* WorldContextObject);
  bool IsInterstitialAdAvailable();
  bool IsInterstitialAdRequested();
  bool IsLoggedIn(APlayerController* SpecificPlayer);
  bool IsPackagedForDistribution();
  bool IsServer(UObject* WorldContextObject);
  bool IsStandalone(UObject* WorldContextObject);
  bool IsValid(UObject* Object);
  bool IsValidClass(UClass<UObject>* Class);
  bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId);
  bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType);
  bool IsValidSoftClassReference(UClass<UObject>* SoftClassReference);
  bool IsValidSoftObjectReference(UObject* SoftObjectReference);
  void K2_ClearAndInvalidateTimerHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  void K2_ClearTimer(UObject* Object, FString FunctionName);
  void K2_ClearTimerDelegate(FTimerDynamicDelegate Delegate);
  void K2_ClearTimerHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  float K2_GetTimerElapsedTime(UObject* Object, FString FunctionName);
  float K2_GetTimerElapsedTimeDelegate(FTimerDynamicDelegate Delegate);
  float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  float K2_GetTimerRemainingTime(UObject* Object, FString FunctionName);
  float K2_GetTimerRemainingTimeDelegate(FTimerDynamicDelegate Delegate);
  float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle Handle);
  bool K2_IsTimerActive(UObject* Object, FString FunctionName);
  bool K2_IsTimerActiveDelegate(FTimerDynamicDelegate Delegate);
  bool K2_IsTimerActiveHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  bool K2_IsTimerPaused(UObject* Object, FString FunctionName);
  bool K2_IsTimerPausedDelegate(FTimerDynamicDelegate Delegate);
  bool K2_IsTimerPausedHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  bool K2_IsValidTimerHandle(struct FTimerHandle Handle);
  void K2_PauseTimer(UObject* Object, FString FunctionName);
  void K2_PauseTimerDelegate(FTimerDynamicDelegate Delegate);
  void K2_PauseTimerHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  struct FTimerHandle K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping);
  struct FTimerHandle K2_SetTimerDelegate(FTimerDynamicDelegate Delegate, float Time, bool bLooping);
  bool K2_TimerExists(UObject* Object, FString FunctionName);
  bool K2_TimerExistsDelegate(FTimerDynamicDelegate Delegate);
  bool K2_TimerExistsHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  void K2_UnPauseTimer(UObject* Object, FString FunctionName);
  void K2_UnPauseTimerDelegate(FTimerDynamicDelegate Delegate);
  void K2_UnPauseTimerHandle(UObject* WorldContextObject, struct FTimerHandle Handle);
  void LaunchURL(FString URL);
  bool LineTraceMulti(UObject* WorldContextObject, struct FVector Start, struct FVector End, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool LineTraceMultiByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool LineTraceMultiForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool LineTraceSingle(UObject* WorldContextObject, struct FVector Start, struct FVector End, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool LineTraceSingleByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool LineTraceSingleForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  void LoadAsset(UObject* WorldContextObject, UObject* Asset, FOnAssetLoaded OnLoaded, struct FLatentActionInfo LatentInfo);
  void LoadAssetClass(UObject* WorldContextObject, UClass<UObject>* AssetClass, FOnAssetClassLoaded OnLoaded, struct FLatentActionInfo LatentInfo);
  void LoadInterstitialAd(int32 AdIdIndex);
  bool MakeLiteralBool(bool Value);
  uint8 MakeLiteralByte(uint8 Value);
  float MakeLiteralFloat(float Value);
  int32 MakeLiteralInt(int32 Value);
  FName MakeLiteralName(FName Value);
  FString MakeLiteralString(FString Value);
  FText MakeLiteralText(FText Value);
  struct FSoftObjectPath MakeSoftObjectPath(FString PathString);
  void MoveComponentTo(USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, uint8 MoveAction, struct FLatentActionInfo LatentInfo);
  bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B);
  bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B);
  bool NotEqual_SoftClassReference(UClass<UObject>* A, UClass<UObject>* B);
  bool NotEqual_SoftObjectReference(UObject* A, UObject* B);
  void OnAssetClassLoaded__DelegateSignature(UClass<UObject>* Loaded);
  void OnAssetLoaded__DelegateSignature(UObject* Loaded);
  void PrintString(UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration);
  void PrintText(UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration);
  void PrintWarning(FString inString);
  void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, uint8 QuitPreference);
  void RegisterForRemoteNotifications();
  void ResetGamepadAssignmentToController(int32 ControllerId);
  void ResetGamepadAssignments();
  void RetriggerableDelay(UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo);
  void SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value);
  void SetBytePropertyByName(UObject* Object, FName PropertyName, uint8 Value);
  void SetClassPropertyByName(UObject* Object, FName PropertyName, UClass<UObject>* Value);
  void SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, struct FCollisionProfileName Value);
  void SetFloatPropertyByName(UObject* Object, FName PropertyName, float Value);
  void SetIntPropertyByName(UObject* Object, FName PropertyName, int32 Value);
  void SetInterfacePropertyByName(UObject* Object, FName PropertyName, UInterface<UInterface>* Value);
  void SetLinearColorPropertyByName(UObject* Object, FName PropertyName, struct FLinearColor Value);
  void SetNamePropertyByName(UObject* Object, FName PropertyName, FName Value);
  void SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value);
  void SetRotatorPropertyByName(UObject* Object, FName PropertyName, struct FRotator Value);
  void SetSoftClassPropertyByName(UObject* Object, FName PropertyName, UClass<UObject>* Value);
  void SetSoftObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value);
  void SetStringPropertyByName(UObject* Object, FName PropertyName, FString Value);
  void SetStructurePropertyByName(UObject* Object, FName PropertyName, struct FGenericStruct Value);
  void SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState);
  void SetTextPropertyByName(UObject* Object, FName PropertyName, FText Value);
  void SetTransformPropertyByName(UObject* Object, FName PropertyName, struct FTransform Value);
  void SetUserActivity(struct FUserActivity UserActivity);
  void SetVectorPropertyByName(UObject* Object, FName PropertyName, struct FVector Value);
  void SetVolumeButtonsHandledBySystem(bool bEnabled);
  void SetWindowTitle(FText Title);
  void ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen);
  void ShowInterstitialAd();
  void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer);
  void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);
  bool SphereOverlapActors(UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, TArray<uint8> ObjectTypes, UClass<UObject>* ActorClassFilter, TArray<AActor*> ActorsToIgnore, TArray<AActor*> OutActors);
  bool SphereOverlapComponents(UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, TArray<uint8> ObjectTypes, UClass<UObject>* ComponentClassFilter, TArray<AActor*> ActorsToIgnore, TArray<UPrimitiveComponent*> OutComponents);
  bool SphereTraceMulti(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool SphereTraceMultiByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool SphereTraceMultiForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, TArray<struct FHitResult> OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool SphereTraceSingle(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, uint8 TraceChannel, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool SphereTraceSingleByProfile(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  bool SphereTraceSingleForObjects(UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, TArray<uint8> ObjectTypes, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, uint8 DrawDebugType, struct FHitResult OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime);
  void StackTrace();
  void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId);
  void UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList);
  void UnregisterForRemoteNotifications();
};

class UKismetTextLibrary: public UBlueprintFunctionLibrary {
  FText AsCurrencyBase(int32 BaseValue, FString CurrencyCode);
  FText AsCurrency_Float(float Value, uint8 RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, FString CurrencyCode);
  FText AsCurrency_Integer(int32 Value, uint8 RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, FString CurrencyCode);
  FText AsDateTime_DateTime(struct FDateTime In);
  FText AsDate_DateTime(struct FDateTime InDateTime);
  FText AsPercent_Float(float Value, uint8 RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
  FText AsTimeZoneDateTime_DateTime(struct FDateTime InDateTime, FString InTimeZone);
  FText AsTimeZoneDate_DateTime(struct FDateTime InDateTime, FString InTimeZone);
  FText AsTimeZoneTime_DateTime(struct FDateTime InDateTime, FString InTimeZone);
  FText AsTime_DateTime(struct FDateTime In);
  FText AsTimespan_Timespan(struct FTimespan InTimespan);
  FText Conv_BoolToText(bool InBool);
  FText Conv_ByteToText(uint8 Value);
  FText Conv_ColorToText(struct FLinearColor InColor);
  FText Conv_FloatToText(float Value, uint8 RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
  FText Conv_IntToText(int32 Value, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);
  FText Conv_NameToText(FName InName);
  FText Conv_ObjectToText(UObject* InObj);
  FText Conv_RotatorToText(struct FRotator InRot);
  FText Conv_StringToText(FString inString);
  FString Conv_TextToString(FText InText);
  FText Conv_TransformToText(struct FTransform InTrans);
  FText Conv_Vector2dToText(struct FVector2D InVec);
  FText Conv_VectorToText(struct FVector InVec);
  bool EqualEqual_IgnoreCase_TextText(FText A, FText B);
  bool EqualEqual_TextText(FText A, FText B);
  bool FindTextInLocalizationTable(FString Namespace, FString Key, FText OutText);
  FText Format(FText InPattern, TArray<struct FFormatArgumentData> InArgs);
  FText GetEmptyText();
  bool NotEqual_IgnoreCase_TextText(FText A, FText B);
  bool NotEqual_TextText(FText A, FText B);
  bool StringTableIdAndKeyFromText(FText Text, FName OutTableId, FString OutKey);
  FText TextFromStringTable(FName TableId, FString Key);
  bool TextIsCultureInvariant(FText InText);
  bool TextIsEmpty(FText InText);
  bool TextIsFromStringTable(FText Text);
  bool TextIsTransient(FText InText);
  FText TextToLower(FText InText);
  FText TextToUpper(FText InText);
  FText TextTrimPreceding(FText InText);
  FText TextTrimPrecedingAndTrailing(FText InText);
  FText TextTrimTrailing(FText InText);
};

class ALODActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a0209 */ UStaticMeshComponent* StaticMeshComponent;
  /* offset=0x02ac flags=0x0010000000020201 */ TArray<AActor*> SubActors;
  /* offset=0x02b8 flags=0x0018001040000200 */ float LODDrawDistance;
  /* offset=0x02bc flags=0x0018001040020201 */ int32 LODLevel;
  /* offset=0x02c0 flags=0x0010000000020201 */ TArray<UObject*> SubObjects;
};

class ULagCompensationComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000000205 */ TArray<struct FServerCheckBox> PoseCheckBoxesCfg;
  /* offset=0x00b8 flags=0x0018001040004205 */ bool bDebugShoot;
  /* offset=0x00b9 flags=0x0018001040004205 */ bool bVerifyShootPoint;
  /* offset=0x00bc flags=0x0018001040004205 */ float TolerateShootPointDistanceSqured;
  /* offset=0x00c0 flags=0x0018001040004205 */ float TolerateShootPointDistanceVehicleSqured;
  /* offset=0x00c4 flags=0x0018001040004205 */ float TolerateSimulatedDelayTime;
  /* offset=0x00c8 flags=0x0018001040004205 */ bool bVerifyMuzzle;
  /* offset=0x00c9 flags=0x0018001040004205 */ bool bVerifyShootRange;
  /* offset=0x00cc flags=0x0018001040004205 */ float TolerateMuzzleDistanceSqured;
  /* offset=0x00d0 flags=0x0018001040004205 */ float TolerateShootHitAngle;
  /* offset=0x00d4 flags=0x0018001040004205 */ float TolerateShootRange;
  /* offset=0x00d8 flags=0x0010040000000205 */ TArray<uint8> TraceObjectTypes;

  float SimulatedCharacterServerTime();
};

class ULandScapeLODByHeight: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000000201 */ TArray<struct FHeightLOD> heightLODMapping;
  /* offset=0x00b8 flags=0x0018001040000201 */ int32 CheckInternal;
  /* offset=0x00bc flags=0x0018001040030205 */ float CurrentGroundHeight;
  /* offset=0x00c8 flags=0x0048001040000200 */ APlayerController* Player;

  void MappingLODByHeight();
  void Start();
  void Stop();
};

class ALandscape: public ALandscapeProxy {
};

class ULandscapeComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040020215 */ int32 SectionBaseX;
  /* offset=0x05c4 flags=0x0018001040020215 */ int32 SectionBaseY;
  /* offset=0x05c8 flags=0x0018001040000200 */ int32 ComponentSizeQuads;
  /* offset=0x05cc flags=0x0018001040000200 */ int32 SubsectionSizeQuads;
  /* offset=0x05d0 flags=0x0018001040000200 */ int32 NumSubsections;
  /* offset=0x05d4 flags=0x0018001040000205 */ UMaterialInterface* OverrideMaterial;
  /* offset=0x05d8 flags=0x0018041040000205 */ UMaterialInterface* OverrideHoleMaterial;
  /* offset=0x05dc flags=0x0010400000000200 */ TArray<UMaterialInstanceConstant*> MaterialInstances;
  /* offset=0x05e8 flags=0x0010000000000200 */ TArray<struct FWeightmapLayerAllocationInfo> WeightmapLayerAllocations;
  /* offset=0x05f4 flags=0x0010400000000200 */ TArray<UTexture2D*> WeightmapTextures;
  /* offset=0x0600 flags=0x0018401040000200 */ UTexture2D* XYOffsetmapTexture;
  /* offset=0x0610 flags=0x0018001040000000 */ struct FVector4 WeightmapScaleBias;
  /* offset=0x0620 flags=0x0018001040000200 */ float WeightmapSubsectionOffset;
  /* offset=0x0630 flags=0x0018001040000000 */ struct FVector4 HeightmapScaleBias;
  /* offset=0x0640 flags=0x0018401040000200 */ UTexture2D* HeightmapTexture;
  /* offset=0x0644 flags=0x0010001040000000 */ struct FBox CachedLocalBox;
  /* offset=0x0660 flags=0x001c001040080008 */ ULandscapeHeightfieldCollisionComponent* CollisionComponent;
  /* offset=0x067c flags=0x0018001040000000 */ struct FGuid MapBuildDataId;
  /* offset=0x068c flags=0x0010000020000200 */ TArray<struct FGuid> IrrelevantLights;
  /* offset=0x0698 flags=0x0018001040000201 */ int32 CollisionMipLevel;
  /* offset=0x069c flags=0x0018001040000201 */ int32 SimpleCollisionMipLevel;
  /* offset=0x06a0 flags=0x0018001040000201 */ float NegativeZBoundsExtension;
  /* offset=0x06a4 flags=0x0018001040000201 */ float PositiveZBoundsExtension;
  /* offset=0x06a8 flags=0x0018001040000201 */ float StaticLightingResolution;
  /* offset=0x06ac flags=0x0018001040000215 */ int32 ForcedLOD;
  /* offset=0x06b0 flags=0x0018001040000215 */ int32 LODBias;
  /* offset=0x06b4 flags=0x0018001040000000 */ struct FGuid stateID;
  /* offset=0x06c4 flags=0x0018001040000000 */ struct FGuid BakedTextureMaterialGuid;
  /* offset=0x06d4 flags=0x0018001040020215 */ UTexture2D* GIBakedBaseColorTexture;
  /* offset=0x06d8 flags=0x0018001040000200 */ uint8 MobileBlendableLayerMask;
  /* offset=0x06dc flags=0x0018801040000200 */ UMaterialInterface* MobileMaterialInterface;
  /* offset=0x06e0 flags=0x0018801040000200 */ UTexture2D* MobileWeightNormalmapTexture;
  /* offset=0x06e4 flags=0x0010000000000200 */ TArray<uint16> CachedHeightData;
};

class ALandscapeGizmoActiveActor: public ALandscapeGizmoActor {
};

class ALandscapeGizmoActor: public AActor {
};

class ULandscapeGizmoRenderComponent: public UPrimitiveComponent {
};

class ULandscapeGrassType: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FGrassVariety> GrassVarieties;
  /* offset=0x0028 flags=0x0018001060000200 */ UStaticMesh* GrassMesh;
  /* offset=0x002c flags=0x0018001060000200 */ float GrassDensity;
  /* offset=0x0030 flags=0x0018001060000200 */ float PlacementJitter;
  /* offset=0x0034 flags=0x0018001060000200 */ int32 StartCullDistance;
  /* offset=0x0038 flags=0x0018001060000200 */ int32 EndCullDistance;
  /* offset=0x003c flags=0x0018001060000200 */ bool RandomRotation;
  /* offset=0x003d flags=0x0018001060000200 */ bool AlignToSurface;
};

class ULandscapeHeightfieldCollisionComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0010000000000200 */ TArray<ULandscapeLayerInfoObject*> ComponentLayerInfos;
  /* offset=0x05cc flags=0x0018001040000200 */ int32 SectionBaseX;
  /* offset=0x05d0 flags=0x0018001040000200 */ int32 SectionBaseY;
  /* offset=0x05d4 flags=0x0018001040000200 */ int32 CollisionSizeQuads;
  /* offset=0x05d8 flags=0x0018001040000200 */ float CollisionScale;
  /* offset=0x05dc flags=0x0018001040000200 */ int32 SimpleCollisionSizeQuads;
  /* offset=0x05e0 flags=0x0010000000000200 */ TArray<uint8> CollisionQuadFlags;
  /* offset=0x05ec flags=0x0018001040000000 */ struct FGuid HeightfieldGuid;
  /* offset=0x05fc flags=0x0010001040000000 */ struct FBox CachedLocalBox;
  /* offset=0x0618 flags=0x001c001040080008 */ ULandscapeComponent* RenderComponent;
  /* offset=0x0640 flags=0x0010000000000200 */ TArray<UPhysicalMaterial*> CookedPhysicalMaterials;
};

class ULandscapeInfo: public UObject {
  /* offset=0x001c flags=0x001c001040000000 */ ALandscape* LandscapeActor;
  /* offset=0x0038 flags=0x0018001040000000 */ struct FGuid LandscapeGuid;
  /* offset=0x0048 flags=0x0018001040000200 */ int32 ComponentSizeQuads;
  /* offset=0x004c flags=0x0018001040000200 */ int32 SubsectionSizeQuads;
  /* offset=0x0050 flags=0x0018001040000200 */ int32 ComponentNumSubsections;
  /* offset=0x0054 flags=0x0018001040000000 */ struct FVector DrawScale;
  /* offset=0x009c flags=0x0010000000000200 */ TSet<ALandscapeStreamingProxy*> Proxies;
};

class ULandscapeInfoMap: public UObject {
};

class ULandscapeLayerInfoObject: public UObject {
  /* offset=0x0020 flags=0x0018011040020201 */ FName LayerName;
  /* offset=0x0028 flags=0x0018001040000201 */ UPhysicalMaterial* PhysMaterial;
  /* offset=0x002c flags=0x0018001040000201 */ float Hardness;
  /* offset=0x0030 flags=0x0018001040000001 */ struct FLinearColor LayerUsageDebugColor;
};

class ULandscapeMaterialInstanceConstant: public UMaterialInstanceConstant {
  /* offset=0x0114 flags=0x0018001000000000 */ uint8 bIsLayerThumbnail:1;
  /* offset=0x0114 flags=0x0018001000000000 */ uint8 bDisableTessellation:1;
};

class ULandscapeMeshCollisionComponent: public ULandscapeHeightfieldCollisionComponent {
  /* offset=0x0680 flags=0x0018001040000000 */ struct FGuid MeshGuid;
};

class ALandscapeMeshProxyActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ ULandscapeMeshProxyComponent* LandscapeMeshProxyComponent;
};

class ULandscapeMeshProxyComponent: public UStaticMeshComponent {
  /* offset=0x0628 flags=0x0048001040000000 */ struct FGuid LandscapeGuid;
  /* offset=0x0638 flags=0x0040000000000200 */ TArray<struct FIntPoint> ProxyComponentBases;
  /* offset=0x0644 flags=0x0048001040000200 */ int8 ProxyLOD;
};

class ALandscapeProxy: public AActor {
  /* offset=0x02a8 flags=0x0018001040080208 */ ULandscapeSplinesComponent* SplineComponent;
  /* offset=0x02ac flags=0x0028081040000000 */ struct FGuid LandscapeGuid;
  /* offset=0x02bc flags=0x0018001040000000 */ struct FIntPoint LandscapeSectionOffset;
  /* offset=0x02c4 flags=0x0018001040000201 */ int32 MaxLODLevel;
  /* offset=0x02c8 flags=0x0018001040000201 */ float LODDistanceFactor;
  /* offset=0x02cc flags=0x0018001040000201 */ uint8 LODFalloff;
  /* offset=0x02d0 flags=0x0018001040000201 */ int32 StaticLightingLOD;
  /* offset=0x02d4 flags=0x0018001040000201 */ UPhysicalMaterial* DefaultPhysMaterial;
  /* offset=0x02d8 flags=0x0018001040000201 */ float StreamingDistanceMultiplier;
  /* offset=0x02dc flags=0x0018001000000001 */ uint8 bCacheHeightData:1;
  /* offset=0x02e0 flags=0x0018001040000201 */ UMaterialInterface* LandscapeMaterial;
  /* offset=0x02e4 flags=0x0018041040000201 */ UMaterialInterface* LandscapeHoleMaterial;
  /* offset=0x02e8 flags=0x0018001040000201 */ float NegativeZBoundsExtension;
  /* offset=0x02ec flags=0x0018001040000201 */ float PositiveZBoundsExtension;
  /* offset=0x02f0 flags=0x0010008000000208 */ TArray<ULandscapeComponent*> LandscapeComponents;
  /* offset=0x02fc flags=0x0010008000000208 */ TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents;
  /* offset=0x0308 flags=0x0010008000202208 */ TArray<UHierarchicalInstancedStaticMeshComponent*> FoliageComponents;
  /* offset=0x035c flags=0x0018001040000200 */ bool bHasLandscapeGrass;
  /* offset=0x0360 flags=0x0018001040000201 */ float StaticLightingResolution;
  /* offset=0x0364 flags=0x0018001000000001 */ uint8 bCastStaticShadow:1;
  /* offset=0x0364 flags=0x0018041000000001 */ uint8 bCastShadowAsTwoSided:1;
  /* offset=0x0364 flags=0x0018041000000001 */ uint8 bCastFarShadow:1;
  /* offset=0x0365 flags=0x0010041000000015 */ struct FLightingChannels LightingChannels;
  /* offset=0x0366 flags=0x0018041000000001 */ uint8 bUseMaterialPositionOffsetInStaticLighting:1;
  /* offset=0x0366 flags=0x0018041000000015 */ uint8 bRenderCustomDepth:1;
  /* offset=0x0368 flags=0x0018041040000215 */ int32 CustomDepthStencilValue;
  /* offset=0x036c flags=0x0010001000000001 */ struct FLightmassPrimitiveSettings LightmassSettings;
  /* offset=0x0384 flags=0x0018001040000201 */ int32 CollisionMipLevel;
  /* offset=0x0388 flags=0x0018001040000201 */ int32 SimpleCollisionMipLevel;
  /* offset=0x038c flags=0x0018001040000201 */ float CollisionThickness;
  /* offset=0x0390 flags=0x0010000000000015 */ struct FBodyInstance BodyInstance;
  /* offset=0x0580 flags=0x0018001000000015 */ uint8 bGenerateOverlapEvents:1;
  /* offset=0x0580 flags=0x0018041000000001 */ uint8 bBakeMaterialPositionOffsetIntoCollision:1;
  /* offset=0x0584 flags=0x0018001040000200 */ int32 ComponentSizeQuads;
  /* offset=0x0588 flags=0x0018001040000200 */ int32 SubsectionSizeQuads;
  /* offset=0x058c flags=0x0018001040000200 */ int32 NumSubsections;
  /* offset=0x0590 flags=0x0018001000000001 */ uint8 bUsedForNavigation:1;
  /* offset=0x0591 flags=0x0018041040000201 */ enum ENavDataGatheringMode NavigationGeometryGatheringMode;
  /* offset=0x0592 flags=0x0018001040000201 */ bool bUseLandscapeForCullingInvisibleHLODVertices;

  void ChangeLODDistanceFactor(float InLODDistanceFactor);
  void EditorApplySpline(USplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int32 NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, ULandscapeLayerInfoObject* PaintLayer);
};

class ULandscapeSplineControlPoint: public UObject {
  /* offset=0x001c flags=0x0018001040000001 */ struct FVector Location;
  /* offset=0x0028 flags=0x0010001040000001 */ struct FRotator Rotation;
  /* offset=0x0034 flags=0x0018001040000201 */ float Width;
  /* offset=0x0038 flags=0x0018001040000201 */ float SideFalloff;
  /* offset=0x003c flags=0x0018001040000201 */ float EndFalloff;
  /* offset=0x0040 flags=0x0010400000000200 */ TArray<struct FLandscapeSplineConnection> ConnectedSegments;
  /* offset=0x004c flags=0x0020080000000200 */ TArray<struct FLandscapeSplineInterpPoint> Points;
  /* offset=0x0058 flags=0x0020081040000000 */ struct FBox Bounds;
  /* offset=0x0074 flags=0x0028481040080208 */ UControlPointMeshComponent* LocalMeshComponent;
};

class ULandscapeSplineSegment: public UObject {
  /* offset=0x0020 flags=0x0010001000000041 */ struct FLandscapeSplineSegmentConnection Connections;
  /* offset=0x0040 flags=0x0028080000000000 */ struct FInterpCurveVector SplineInfo;
  /* offset=0x0054 flags=0x0020080000000200 */ TArray<struct FLandscapeSplineInterpPoint> Points;
  /* offset=0x0060 flags=0x0020081040000000 */ struct FBox Bounds;
  /* offset=0x007c flags=0x0020488000000208 */ TArray<USplineMeshComponent*> LocalMeshComponents;
};

class ULandscapeSplinesComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0020480000000200 */ TArray<ULandscapeSplineControlPoint*> ControlPoints;
  /* offset=0x05cc flags=0x0020480000000200 */ TArray<ULandscapeSplineSegment*> Segments;
  /* offset=0x05d8 flags=0x0020488000000208 */ TArray<UMeshComponent*> CookedForeignMeshComponents;
};

class ALandscapeStreamingProxy: public ALandscapeProxy {
  /* offset=0x060c flags=0x001c001040000001 */ ALandscape* LandscapeActor;
};

class ULayer: public UObject {
  /* offset=0x0020 flags=0x0018001040000200 */ FName LayerName;
  /* offset=0x0028 flags=0x0018001000000000 */ uint8 bIsVisible:1;
  /* offset=0x002c flags=0x0010000000002200 */ TArray<struct FLayerActorStats> ActorStats;
};

class ULazyObjectProperty: public UObjectPropertyBase {
};

class ULeaderboardBlueprintLibrary: public UBlueprintFunctionLibrary {
  bool WriteLeaderboardInteger(APlayerController* PlayerController, FName StatName, int32 StatValue);
};

class ULeaderboardFlushCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FOnLeaderboardFlushed OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnLeaderboardFlushed OnFailure;

  ULeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(APlayerController* PlayerController, FName SessionName);
};

class ULeaderboardQueryCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FLeaderboardQueryResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FLeaderboardQueryResult OnFailure;

  ULeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(APlayerController* PlayerController, FName StatName);
};

class ULevel: public UObject {
  /* offset=0x0088 flags=0x0018001040002200 */ UWorld* OwningWorld;
  /* offset=0x008c flags=0x0018001040000200 */ UModel* Model;
  /* offset=0x0090 flags=0x0010008000000208 */ TArray<UModelComponent*> ModelComponents;
  /* offset=0x009c flags=0x0018001440282208 */ ULevelActorContainer* ActorCluster;
  /* offset=0x00a0 flags=0x0018001440000200 */ int32 NumTextureStreamingUnbuiltComponents;
  /* offset=0x00a4 flags=0x0018001440000200 */ int32 NumTextureStreamingDirtyResources;
  /* offset=0x00a8 flags=0x0018001440000200 */ ALevelScriptActor* LevelScriptActor;
  /* offset=0x00ac flags=0x0018001040000200 */ ANavigationObjectBase* NavListStart;
  /* offset=0x00b0 flags=0x0018001040000200 */ ANavigationObjectBase* NavListEnd;
  /* offset=0x00b4 flags=0x0010000000000200 */ TArray<UNavigationDataChunk*> NavDataChunks;
  /* offset=0x00c0 flags=0x0018001040020201 */ float LightmapTotalSize;
  /* offset=0x00c4 flags=0x0018001040020201 */ float ShadowmapTotalSize;
  /* offset=0x00c8 flags=0x0010000000000200 */ TArray<struct FVector> StaticNavigableGeometry;
  /* offset=0x00d4 flags=0x0010000000000200 */ TArray<struct FGuid> StreamingTextureGuids;
  /* offset=0x0150 flags=0x0018001040000200 */ bool bIsLightingScenario;
  /* offset=0x0154 flags=0x0018001040000000 */ struct FGuid LevelBuildDataId;
  /* offset=0x0164 flags=0x0018001040000200 */ UMapBuildDataRegistry* MapBuildData;
  /* offset=0x0168 flags=0x0018001040000000 */ struct FIntVector LightBuildLevelOffset;
  /* offset=0x0174 flags=0x0018001000000000 */ uint8 bTextureStreamingRotationChanged:1;
  /* offset=0x0174 flags=0x0018001000002000 */ uint8 bIsVisible:1;
  /* offset=0x0174 flags=0x0018001000000000 */ uint8 bLocked:1;
  /* offset=0x0270 flags=0x0048001040000200 */ AWorldSettings* WorldSettings;
  /* offset=0x0278 flags=0x0020088000000208 */ TArray<UAssetUserData*> AssetUserData;
};

class ULevelActorContainer: public UObject {
  /* offset=0x001c flags=0x0010000000002200 */ TArray<AActor*> Actors;
};

class ALevelBounds: public AActor {
  /* offset=0x02a8 flags=0x0018001040000201 */ bool bAutoUpdateBounds;
};

class ULevelCapture: public UMovieSceneCapture {
  /* offset=0x01d0 flags=0x0018001040000201 */ bool bAutoStartCapture;
  /* offset=0x01dc flags=0x0048001040000000 */ struct FGuid PrerequisiteActorId;
};

class ALevelScriptActor: public AActor {
  /* offset=0x02a8 flags=0x0048001000000000 */ uint8 bInputEnabled:1;

  void LevelReset();
  bool RemoteEvent(FName EventName);
  void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
  void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation);
};

class ULevelScriptBlueprint: public UBlueprint {
};

class ULevelSequence: public UMovieSceneSequence {
  /* offset=0x0278 flags=0x0018001040080208 */ UMovieScene* MovieScene;
  /* offset=0x027c flags=0x0020080000000000 */ struct FLevelSequenceObjectReferenceMap ObjectReferences;
  /* offset=0x02b8 flags=0x0020080000000000 */ struct FLevelSequenceBindingReferences BindingReferences;
  /* offset=0x02f4 flags=0x0020080020000200 */ TMap<FString, struct FLevelSequenceObject> PossessedObjects;
};

class ALevelSequenceActor: public AActor {
  /* offset=0x02ac flags=0x0018001040000215 */ bool bAutoPlay;
  /* offset=0x02b0 flags=0x0010001000000015 */ struct FMovieSceneSequencePlaybackSettings PlaybackSettings;
  /* offset=0x02d0 flags=0x0018001040002214 */ ULevelSequencePlayer* SequencePlayer;
  /* offset=0x02d8 flags=0x0018000000000015 */ struct FSoftObjectPath LevelSequence;
  /* offset=0x02f0 flags=0x0010040000000215 */ TArray<AActor*> AdditionalEventReceivers;
  /* offset=0x02fc flags=0x001a0410400a021d */ ULevelSequenceBurnInOptions* BurnInOptions;
  /* offset=0x0300 flags=0x001a0410400a021d */ UMovieSceneBindingOverrides* BindingOverrides;
  /* offset=0x0304 flags=0x0048001040080208 */ ULevelSequenceBurnIn* BurnInInstance;

  void AddBinding(struct FMovieSceneObjectBindingID Binding, AActor* Actor, bool bAllowBindingsFromAsset);
  ULevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);
  void RemoveBinding(struct FMovieSceneObjectBindingID Binding, AActor* Actor);
  void ResetBinding(struct FMovieSceneObjectBindingID Binding);
  void ResetBindings();
  void SetBinding(struct FMovieSceneObjectBindingID Binding, TArray<AActor*> Actors, bool bAllowBindingsFromAsset);
  void SetEventReceivers(TArray<AActor*> AdditionalReceivers);
  void SetSequence(ULevelSequence* InSequence);
};

class ULevelSequenceBurnIn: public UUserWidget {
  /* offset=0x01ac flags=0x0020088000000014 */ struct FLevelSequencePlayerSnapshot FrameInformation;
  /* offset=0x01dc flags=0x0028081040000214 */ ALevelSequenceActor* LevelSequenceActor;

  UClass<ULevelSequenceBurnInInitSettings>* GetSettingsClass();
  void SetSettings(UObject* InSettings);
};

class ULevelSequenceBurnInInitSettings: public UObject {
};

class ULevelSequenceBurnInOptions: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ bool bUseBurnIn;
  /* offset=0x0020 flags=0x0010000000000001 */ struct FSoftClassPath BurnInClass;
  /* offset=0x0038 flags=0x001a001040080209 */ ULevelSequenceBurnInInitSettings* Settings;
};

class ULevelSequencePlayer: public UMovieSceneSequencePlayer {
  /* offset=0x06a0 flags=0x0010000010080200 */ FOnLevelSequencePlayerCameraCutEvent OnCameraCut;
  /* offset=0x06d8 flags=0x0020080000002200 */ TArray<UObject*> AdditionalEventReceivers;

  ULevelSequencePlayer* CreateLevelSequencePlayer(UObject* WorldContextObject, ULevelSequence* LevelSequence, struct FMovieSceneSequencePlaybackSettings Settings, ALevelSequenceActor* OutActor);
};

class ULevelStreaming: public UObject {
  /* offset=0x0020 flags=0x0018001060000200 */ FName PackageName;
  /* offset=0x0028 flags=0x004c000000020015 */ UWorld* WorldAsset;
  /* offset=0x0050 flags=0x0018001040000200 */ FName PackageNameToLoad;
  /* offset=0x0058 flags=0x0010000000000200 */ TArray<FName> LODPackageNames;
  /* offset=0x0070 flags=0x0010001040000005 */ struct FTransform LevelTransform;
  /* offset=0x00a0 flags=0x0018001000000000 */ uint8 bShouldBeVisibleInEditor:1;
  /* offset=0x00a0 flags=0x0018001000000000 */ uint8 bLocked:1;
  /* offset=0x00a0 flags=0x0018001000000004 */ uint8 bShouldBeLoaded:1;
  /* offset=0x00a0 flags=0x0018001000000004 */ uint8 bShouldBeVisible:1;
  /* offset=0x00a0 flags=0x0018001000010001 */ uint8 bIsStatic:1;
  /* offset=0x00a1 flags=0x0018001000000004 */ uint8 bShouldBlockOnLoad:1;
  /* offset=0x00a4 flags=0x0018001040002204 */ int32 LevelLODIndex;
  /* offset=0x00a8 flags=0x0018001000002004 */ uint8 bDisableDistanceStreaming:1;
  /* offset=0x00a8 flags=0x0018041000000001 */ uint8 bDrawOnLevelStatusMap:1;
  /* offset=0x00ac flags=0x0018001060000000 */ struct FColor DrawColor;
  /* offset=0x00b0 flags=0x0018001040000001 */ struct FLinearColor LevelColor;
  /* offset=0x00c0 flags=0x0010000000000201 */ TArray<ALevelStreamingVolume*> EditorStreamingVolumes;
  /* offset=0x00cc flags=0x0018041040000201 */ float MinTimeBetweenVolumeUnloadRequests;
  /* offset=0x00d4 flags=0x0010000000000200 */ TArray<FString> Keywords;
  /* offset=0x00e0 flags=0x0010000010080200 */ FLevelStreamingLoadedStatus OnLevelLoaded;
  /* offset=0x00ec flags=0x0010000010080200 */ FLevelStreamingLoadedStatus OnLevelUnloaded;
  /* offset=0x00f8 flags=0x0010000010080200 */ FLevelStreamingVisibilityStatus OnLevelShown;
  /* offset=0x0104 flags=0x0010000010080200 */ FLevelStreamingVisibilityStatus OnLevelHidden;
  /* offset=0x0110 flags=0x0048001040002200 */ ULevel* LoadedLevel;
  /* offset=0x0114 flags=0x0048001040002200 */ ULevel* PendingUnloadLevel;

  ULevelStreaming* CreateInstance(FString UniqueInstanceName);
  ALevelScriptActor* GetLevelScriptActor();
  FName GetWorldAssetPackageFName();
  bool IsLevelLoaded();
  bool IsLevelVisible();
  bool IsStreamingStatePending();
};

class ULevelStreamingAlwaysLoaded: public ULevelStreaming {
};

class ULevelStreamingKismet: public ULevelStreaming {
  /* offset=0x0128 flags=0x0018001000000001 */ uint8 bInitiallyLoaded:1;
  /* offset=0x0128 flags=0x0018001000000001 */ uint8 bInitiallyVisible:1;

  ULevelStreamingKismet* LoadLevelInstance(UObject* WorldContextObject, FString LevelName, struct FVector Location, struct FRotator Rotation, bool bOutSuccess);
};

class ULevelStreamingPersistent: public ULevelStreaming {
};

class ALevelStreamingVolume: public AVolume {
  /* offset=0x02d0 flags=0x0010000000020215 */ TArray<FName> StreamingLevelNames;
  /* offset=0x02dc flags=0x0018001000000005 */ uint8 bEditorPreVisOnly:1;
  /* offset=0x02dc flags=0x0018001000000005 */ uint8 bDisabled:1;
  /* offset=0x02dd flags=0x0018001040000205 */ uint8 StreamingUsage;
};

class ALight: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ ULightComponent* LightComponent;
  /* offset=0x02ac flags=0x0018001100000020 */ uint8 bEnabled:1;

  float GetBrightness();
  struct FLinearColor GetLightColor();
  bool IsEnabled();
  void OnRep_bEnabled();
  void SetAffectTranslucentLighting(bool bNewValue);
  void SetBrightness(float NewBrightness);
  void SetCastShadows(bool bNewValue);
  void SetEnabled(bool bSetEnabled);
  void SetLightColor(struct FLinearColor NewLightColor);
  void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
  void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);
  void SetLightFunctionScale(struct FVector NewLightFunctionScale);
  void ToggleEnabled();
};

class ULightComponent: public ULightComponentBase {
  /* offset=0x0298 flags=0x0018001240000215 */ float Temperature;
  /* offset=0x029c flags=0x0018001040000201 */ float MaxDrawDistance;
  /* offset=0x02a0 flags=0x0018001040000201 */ float MaxDistanceFadeRange;
  /* offset=0x02a4 flags=0x0018001000000015 */ uint8 bUseTemperature:1;
  /* offset=0x02a8 flags=0x0018001060000200 */ int32 ShadowMapChannel;
  /* offset=0x02b0 flags=0x0018041040000215 */ float MinRoughness;
  /* offset=0x02b4 flags=0x0018041040000215 */ float ShadowResolutionScale;
  /* offset=0x02b8 flags=0x0018041040000215 */ float ShadowBias;
  /* offset=0x02bc flags=0x0018041040000215 */ float ShadowSharpen;
  /* offset=0x02c0 flags=0x0018041040000215 */ float ContactShadowLength;
  /* offset=0x02c4 flags=0x0018001020000000 */ uint8 InverseSquaredFalloff:1;
  /* offset=0x02c4 flags=0x0018041000000015 */ uint8 CastTranslucentShadows:1;
  /* offset=0x02c4 flags=0x0018041000000015 */ uint8 bCastShadowsFromCinematicObjectsOnly:1;
  /* offset=0x02c4 flags=0x0018041000000015 */ uint8 bAffectDynamicIndirectLighting:1;
  /* offset=0x02c5 flags=0x0010041000000015 */ struct FLightingChannels LightingChannels;
  /* offset=0x02c8 flags=0x0018001040000215 */ UMaterialInterface* LightFunctionMaterial;
  /* offset=0x02cc flags=0x0018001040000015 */ struct FVector LightFunctionScale;
  /* offset=0x02d8 flags=0x0018001040000215 */ UTextureLightProfile* IESTexture;
  /* offset=0x02dc flags=0x0018001000000015 */ uint8 bUseIESBrightness:1;
  /* offset=0x02e0 flags=0x0018001240000215 */ float IESBrightnessScale;
  /* offset=0x02e4 flags=0x0018001040000215 */ float LightFunctionFadeDistance;
  /* offset=0x02e8 flags=0x0018001040000215 */ float DisabledBrightness;
  /* offset=0x02ec flags=0x0018001000000015 */ uint8 bEnableLightShaftBloom:1;
  /* offset=0x02f0 flags=0x0018001040000215 */ float BloomScale;
  /* offset=0x02f4 flags=0x0018001040000215 */ float BloomThreshold;
  /* offset=0x02f8 flags=0x0018001040000015 */ struct FColor BloomTint;
  /* offset=0x02fc flags=0x0018001040000215 */ bool bUseRayTracedDistanceFieldShadows;
  /* offset=0x0300 flags=0x0018041040000215 */ float RayStartOffsetDepthScale;

  void SetAffectDynamicIndirectLighting(bool bNewValue);
  void SetAffectTranslucentLighting(bool bNewValue);
  void SetBloomScale(float NewValue);
  void SetBloomThreshold(float NewValue);
  void SetBloomTint(struct FColor NewValue);
  void SetEnableLightShaftBloom(bool bNewValue);
  void SetIESTexture(UTextureLightProfile* NewValue);
  void SetIndirectLightingIntensity(float NewIntensity);
  void SetIntensity(float NewIntensity);
  void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB);
  void SetLightFunctionDisabledBrightness(float NewValue);
  void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
  void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial);
  void SetLightFunctionScale(struct FVector NewLightFunctionScale);
  void SetShadowBias(float NewValue);
  void SetTemperature(float NewTemperature);
  void SetVolumetricScatteringIntensity(float NewIntensity);
};

class ULightComponentBase: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000000 */ struct FGuid LightGuid;
  /* offset=0x0280 flags=0x0018001060000200 */ float Brightness;
  /* offset=0x0284 flags=0x0018001240000215 */ float Intensity;
  /* offset=0x0288 flags=0x0018001240000015 */ struct FColor LightColor;
  /* offset=0x028c flags=0x0018001000000015 */ uint8 bAffectsWorld:1;
  /* offset=0x028c flags=0x0018001000000015 */ uint8 CastShadows:1;
  /* offset=0x028c flags=0x0018041000000015 */ uint8 CastStaticShadows:1;
  /* offset=0x028c flags=0x0018041000000015 */ uint8 CastDynamicShadows:1;
  /* offset=0x028c flags=0x0018041000000015 */ uint8 bAffectTranslucentLighting:1;
  /* offset=0x028c flags=0x0018041000000015 */ uint8 bCastVolumetricShadow:1;
  /* offset=0x0290 flags=0x0018001240000215 */ float IndirectLightingIntensity;
  /* offset=0x0294 flags=0x0018001240000215 */ float VolumetricScatteringIntensity;

  struct FLinearColor GetLightColor();
  void SetCastShadows(bool bNewValue);
  void SetCastVolumetricShadow(bool bNewValue);
};

class ULightMapTexture2D: public UTexture2D {
};

class ULightmappedSurfaceCollection: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ UModel* SourceModel;
  /* offset=0x0020 flags=0x0010000000000201 */ TArray<int32> Surfaces;
};

class ALightmassCharacterIndirectDetailVolume: public AVolume {
};

class ALightmassImportanceVolume: public AVolume {
};

class ALightmassPortal: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ ULightmassPortalComponent* PortalComponent;
};

class ULightmassPortalComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040080208 */ UBoxComponent* PreviewBox;
};

class ULightmassPrimitiveSettingsObject: public UObject {
  /* offset=0x001c flags=0x0010001000000001 */ struct FLightmassPrimitiveSettings LightmassSettings;
};

class ULineBatchComponent: public UPrimitiveComponent {
};

class ULinkerPlaceholderClass: public UClass {
};

class ULinkerPlaceholderExportObject: public UObject {
};

class ULinkerPlaceholderFunction: public UFunction {
};

class UListView: public UTableViewBase {
  /* offset=0x00c8 flags=0x0018001040000201 */ float ItemHeight;
  /* offset=0x00cc flags=0x0010000000000205 */ TArray<UObject*> Items;
  /* offset=0x00d8 flags=0x0018001040000201 */ uint8 SelectionMode;
  /* offset=0x00e0 flags=0x0010001000080201 */ FOnGenerateRowUObject OnGenerateRowEvent;
};

class ULiveBraodcast_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UImage* BG;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCommon_UIPanelBG_C* Common_UIPanelBG;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* HotBtn;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* HotLine;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* HotSelectState;
  /* offset=0x0244 flags=0x000a0010c008020c */ UWidgetSwitcher* HotWidgetSwitcher;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* LiveBtn;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* LiveLine;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* LiveSelectState;
  /* offset=0x025c flags=0x000a0010c008020c */ UWidgetSwitcher* LiveWidgetSwitcher;
  /* offset=0x0260 flags=0x000a0010c008020c */ UCanvasPanel* Return;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* ReturnBtn;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0278 flags=0x000a0010c008020c */ UButton* VideoBtn;
};

class ULiveBroadcast: public UObject {
  void C2JSetIndex(int32 Index);
  void CloseWebView();
  ULiveBroadcast* GetInstance();
  void OpenLiveBroadcast(FString URL);
};

class ULiveBroadcast_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULiveBraodcast_UIBP_C* LiveBraodcast_UIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_live_broadcast_C* bp_livebroadcast;
  /* offset=0x023c flags=0x0008001040010205 */ ULiveBroadcast* LiveBroadcastInstance;
  /* offset=0x0240 flags=0x0008001040010205 */ USettingConfig_C* SettingConfig;
  /* offset=0x0244 flags=0x0008001040010205 */ UWidgetSwitcher* LastSelectSwitcher;

  void ClickHotBtn();
  void ClickLiveBtn();
  void ClickReturnBtn();
  void ClickVideoBtn();
  void CloseMusic();
  void Construct();
  void ExecuteUbergraph_LiveBroadcast_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, ULiveBroadcast* CallFunc_GetInstance_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_live_broadcast_C* K2Node_DynamicCast_AsBp_Live_Broadcast, bool K2Node_DynamicCast_bSuccess);
  void OpenMusic(float CallFunc_Multiply_IntFloat_ReturnValue);
  void PlaySoundClick(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void PlaySoundClose(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void PlaySoundTab(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void SetSettingConfig(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void SwitchBtnState(UWidgetSwitcher* NewSelectSwitcher, bool CallFunc_IsValid_ReturnValue);
  void UIShow();
};

class ULoadTexture: public UBlueprintFunctionLibrary {
  UTexture2D* GetTexture2DFromDiskFile(FString FilePath);
  UTexture2D* LoadTexture2D(FString imagePath, bool IsValid, int32 OutWidth, int32 OutHeight);
};

class ULoadedClassManager_BP_C: public UUAELoadedClassManager {
  /* offset=0x01c8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;

  void ExecuteUbergraph_LoadedClassManager_BP(int32 EntryPoint);
  void InitBPTableMap();
  void LoadAvatarBPTable(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBPTable* CallFunc_CreateAndAddBPTable_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_AvatarBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FBPTableItem K2Node_MakeStruct_BPTableItem);
  void LoadConsumableBPTable(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBPTable* CallFunc_CreateAndAddBPTable_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_ConsumableBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FBPTableItem K2Node_MakeStruct_BPTableItem);
  void LoadGameModeBPTable(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBPTable* CallFunc_CreateAndAddBPTable_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_GameModeBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FBPTableItem K2Node_MakeStruct_BPTableItem);
  void LoadWeaponBPTable(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBPTable* CallFunc_CreateAndAddBPTable_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_WeaponBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FBPTableItem K2Node_MakeStruct_BPTableItem);
};

class ULobbyChatEntrance_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_StartEnter;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Out;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Enter;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* btn_friend_redpoint;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* btn_mic_off;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* btn_mic_on;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* btn_open_chat;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* btn_quick_msg;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* btn_show_chat;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* btn_voice_off;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* btn_voice_on;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_OpenChat;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* Button_Recruit;
  /* offset=0x0268 flags=0x000a0010c008020c */ UCanvasPanel* Canvas;
  /* offset=0x026c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0270 flags=0x000a0010c008020c */ UUTRichTextBlock* chat_content;
  /* offset=0x0274 flags=0x000a0010c008020c */ UOverlay* ChatroomRedPointRoot;
  /* offset=0x0278 flags=0x000a0010c008020c */ UVerticalBox* container_quick_msg;
  /* offset=0x027c flags=0x000a0010c008020c */ UOverlay* hover_root_anchor;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x029c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UOverlay* m;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UOverlay* NodeChatRoom;
  /* offset=0x02cc flags=0x000a0010c008020c */ UOverlay* NodePrivate;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UCanvasPanel* NodeRoot;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UOverlay* NodeSys;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UOverlay* NodeTeam;
  /* offset=0x02dc flags=0x000a0010c008020c */ UOverlay* NodeWorld;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UNamedSlot* normalFriendUnreadSlot;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UNamedSlot* normalTagSlot;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UNamedSlot* normalUnreadSlot;
  /* offset=0x02ec flags=0x000a0010c008020c */ UOverlay* Overlay;
  /* offset=0x02f0 flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x02f4 flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x02f8 flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x02fc flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x0300 flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x0304 flags=0x000a0010c008020c */ ULobbyChat_QuickChatItem_BP_C* quick_msg_item;
  /* offset=0x0308 flags=0x000a0010c008020c */ UOverlay* RedPointRoot;
  /* offset=0x030c flags=0x000a0010c008020c */ UTextBlock* RedPointText;
  /* offset=0x0310 flags=0x000a0010c008020c */ UNamedSlot* roomFriendUnreadSlot;
  /* offset=0x0314 flags=0x000a0010c008020c */ UUTRichTextBlock* roomNewMessage;
  /* offset=0x0318 flags=0x000a0010c008020c */ UButton* roomOpenChatBtn;
  /* offset=0x031c flags=0x000a0010c008020c */ UGridPanel* RoomRoot;
  /* offset=0x0320 flags=0x000a0010c008020c */ UNamedSlot* roomTagSlot;
  /* offset=0x0324 flags=0x000a0010c008020c */ UNamedSlot* roomUnreadSlot;
  /* offset=0x0328 flags=0x000a0010c008020c */ UCanvasPanel* Root;
  /* offset=0x032c flags=0x000a0010c008020c */ UOverlay* v;
  /* offset=0x0330 flags=0x0008001040010a05 */ Abp_chat_entrance_C* LuaObject;
  /* offset=0x0334 flags=0x0008001040010205 */ int32 lastChannel;
  /* offset=0x0338 flags=0x0008000000010205 */ FString lastNewMsg;
  /* offset=0x0344 flags=0x0000001040010205 */ bool isTeamup;
  /* offset=0x0348 flags=0x0008001040010205 */ int32 CHANNEL_TYPE_WORLD;
  /* offset=0x034c flags=0x0008001040010205 */ int32 CHANNEL_TYPE_TEAM;
  /* offset=0x0350 flags=0x0008001040010205 */ int32 CHANNEL_TYPE_FRIEND;
  /* offset=0x0354 flags=0x0008001040010205 */ UGVoiceInterface* GVoiceHandle;
  /* offset=0x0358 flags=0x0000001040010205 */ bool GVoiceOpenMic;
  /* offset=0x0359 flags=0x0000001040010205 */ bool GVoiceOpenSpeaker;
  /* offset=0x035a flags=0x0000001040010205 */ bool showQuickMsg;
  /* offset=0x035c flags=0x0000000000010205 */ TMap<int32, FString> QuickMsgList;
  /* offset=0x0398 flags=0x0000000000010205 */ TArray<int32> QuickMsgIdList;
  /* offset=0x03a4 flags=0x0000001040010205 */ bool isQuickInited;
  /* offset=0x03a8 flags=0x0008001040010205 */ int32 CHANNEL_TYPE_CHATROOM;
  /* offset=0x03b0 flags=0x0000001000010005 */ struct FTimerHandle tickBufferTimer;

  void BndEvt__Button_OpenChat_K2Node_ComponentBoundEvent_624_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Recruit_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_friend_redpoint_K2Node_ComponentBoundEvent_30_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_open_chat_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_quick_msg_K2Node_ComponentBoundEvent_149_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btn_show_chat_K2Node_ComponentBoundEvent_358_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__roomOpenChatBtn_K2Node_ComponentBoundEvent_641_OnButtonClickedEvent__DelegateSignature();
  void ChatroomUnreadAppeared();
  void ChatroomUnreadChanged(bool CallFunc_Greater_IntInt_ReturnValue);
  void ChatroomUnreadCleared();
  void ClearNewMsg();
  void ClearSomeonesMsg(bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void Construct();
  void ExecuteUbergraph_LobbyChatEntrance_BP(int32 EntryPoint, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_chat_entrance_C* K2Node_DynamicCast_AsBp_Chat_Entrance, bool K2Node_DynamicCast_bSuccess3);
  void HideAllMsgPreNode(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, TArray<UOverlay*> K2Node_MakeArray_Array, UOverlay* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void InitQuickMsgEvent(FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6);
  void OnAfterShowNewMsg();
  void OnClickQuickMsg(int32 Index, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);
  void OnClickQuickMsg1();
  void OnClickQuickMsg2();
  void OnClickQuickMsg3();
  void OnClickQuickMsg4();
  void OnClickQuickMsg5();
  void OnClickQuickMsg6();
  void OnRefreshMsgBufferState();
  void OnStopMsgTimer();
  void RecoverChannel();
  void RefreshEntrance(UPanelSlot* CallFunc_AddChild_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue2, UPanelSlot* CallFunc_AddChild_ReturnValue3, UPanelSlot* CallFunc_AddChild_ReturnValue4, UPanelSlot* CallFunc_AddChild_ReturnValue5, UPanelSlot* CallFunc_AddChild_ReturnValue6);
  void RefreshFriendRedPoint(FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue);
  void RefreshOpenAndQuickButton();
  void RefreshQuickMsg(int32 NewLocalVar, int32 innerCounter, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Get_Item, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, ULobbyChat_QuickChatItem_BP_C* K2Node_DynamicCast_AsLobby_Chat_Quick_Chat_Item_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void RefreshRoomState();
  void RoomStateChanged();
  void ShowCorrectMsgPreNode(int32 channelIndex, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, TArray<UOverlay*> K2Node_MakeArray_Array, UOverlay* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void ShowNewMsg(FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_NotEqual_StriStri_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void StartTickBuffer(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void StopTickBuffer();
  void SwitchChannel(int32 Channel, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4);
  void SyncLuaData();
  void SyncPushLuaData();
  void TeamStateChanged();
  void TickBufferList();
  void Transitions_Enter();
  void Transitions_Out();
  void UIHide();
  void UIInit();
  void UIRelease();
  void UIShow();
  void YouHaveANewMsg();
  void YourFriendCalledYou();
};

class ULobbyChat_QuickChatItem_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* btn_quick_msg;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UTextBlock* txt_quick_msg;
};

class ULobbyPlayerInfoMenuItem_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button_ClickItem;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* Image_Block;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_GameModeicon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_ItemSelectedBG;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x01c8 flags=0x0000000000010005 */ struct FSlateBrush Brust_PlayerInfo;
  /* offset=0x0230 flags=0x0000000000010005 */ struct FSlateBrush Brust_AddFriend;
  /* offset=0x0298 flags=0x0000000000010005 */ struct FSlateBrush Brust_Kick;
  /* offset=0x0300 flags=0x0000000000010005 */ struct FSlateBrush Brust_ChangeLeader;

  void SetButtonType(int32 Type, FString CallFunc_GetLocalizeString_textValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_GetLocalizeString_textValue2, FString CallFunc_GetLocalizeString_textValue3, FString CallFunc_GetLocalizeString_textValue4);
  void SetShowBrush(struct FSlateBrush Brush);
  void SetShowName(FString showName, FText CallFunc_Conv_StringToText_ReturnValue);
};

class ULobbyPromoterRegFriendItem_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UCommon_Avatar_BP_C* Common_Avatar_BP;
  /* offset=0x0234 flags=0x000a0010c008020c */ UTextBlock* labelName;

  void InitItem(FString iconURL, FString frdName, FText CallFunc_Conv_StringToText_ReturnValue);
};

class ULobbyRankSaveGame_C: public USaveGame {
  /* offset=0x0020 flags=0x0008001040010205 */ int32 UserIndex;
  /* offset=0x0024 flags=0x0008000000010205 */ FString SaveSlotName;
  /* offset=0x0030 flags=0x0008000000010205 */ FString RankChooseZoneId;

  USaveGame* LoadData(USaveGame* CallFunc_LoadGameFromSlot_ReturnValue);
  void SaveData(bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);
};

class ULobbyRenderSettings: public UObject {
  /* offset=0x001c flags=0x0010000000004200 */ TArray<struct FRenderItem> RenderSettingProfile;
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<struct FRenderItem> BackupRenderSettings;
};

class ULobbyRoleInfoSaveGame_C: public USaveGame {
  /* offset=0x0020 flags=0x0008001040010205 */ int32 UserIndex;
  /* offset=0x0024 flags=0x0008000000010205 */ FString SaveSlotName;
  /* offset=0x0030 flags=0x0008000000010205 */ FString RoleInfoChooseZoneId;

  USaveGame* LoadData(USaveGame* CallFunc_LoadGameFromSlot_ReturnValue);
  void SaveData(bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);
};

class ULobbySaveGame_C: public USaveGame {
  /* offset=0x0020 flags=0x0008001040010205 */ int32 UserIndex;
  /* offset=0x0024 flags=0x0008000000010205 */ FString SaveSlotName;
  /* offset=0x0030 flags=0x0008000000010205 */ FString ChoosingZoneId;

  USaveGame* LoadData(USaveGame* CallFunc_LoadGameFromSlot_ReturnValue);
  void SaveData(bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);
};

class ULobbyZoneListItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_bg;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_Selected_BG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Delay;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ZoneText;
  /* offset=0x0248 flags=0x0008001040010205 */ ULobby_TeamModeLogic_BP_C* LobbyTeamModeLogicBP;
  /* offset=0x024c flags=0x0008001040010a05 */ Abp_teamup_C* bp_teamup;
  /* offset=0x0250 flags=0x0008001040010205 */ int32 myZoneId;
  /* offset=0x0254 flags=0x0008000000010205 */ FString myZoneIP;
  /* offset=0x0260 flags=0x0000001040010205 */ bool IsSelected;
  /* offset=0x0264 flags=0x0000000000010005 */ struct FSlateColor ColorWhite;
  /* offset=0x0280 flags=0x0000000000010005 */ struct FSlateColor ColorGreen;
  /* offset=0x029c flags=0x0000000000010005 */ struct FSlateColor ColorYellow;
  /* offset=0x02b8 flags=0x0000000000010005 */ struct FSlateColor ColorRed;
  /* offset=0x02d4 flags=0x0008001040010205 */ float GreenMinDelay;
  /* offset=0x02d8 flags=0x0008001040010205 */ float YellowMinDelay;
  /* offset=0x02dc flags=0x0008001040010205 */ float RedMinDelay;

  void Construct();
  void ExecuteUbergraph_LobbyZoneListItem_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate);
  void OnLanguageChanged(FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_ZoneConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizationString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);
  void SetDelay(float Delay, float TimeOutMilliSecond, bool CallFunc_Greater_FloatFloat_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2);
  void SetSelected(bool bSelect);
  void SetZoneInfo(FString Text, int32 ZoneID, ULobby_TeamModeLogic_BP_C* LobbyTeamModeLogicBP, FString zoneIP, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizationString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void initBpTeamUp(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_C* K2Node_DynamicCast_AsBp_Teamup, bool K2Node_DynamicCast_bSuccess);
  void onClickButton();
};

class ULobby_Activity_BtnItem_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCanvasPanel* Activity;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_Activity;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_Activity;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_RedPoint;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ActivityName;
  /* offset=0x0248 flags=0x0008000000010005 */ struct FBP_STRUCT_ActivityBtnDisplay BtnData;

  void BndEvt__Button_Activity_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_Lobby_Activity_BtnItem(int32 EntryPoint);
  void SetBtnData(struct FBP_STRUCT_ActivityBtnDisplay BtnData, UObject* CallFunc_UIGetResWithPath_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void SetRedPointStatus(bool Show, FString modeId, bool CallFunc_Contains_ReturnValue);
};

class ULobby_AnimBP_C: public UAnimInstance {
  /* offset=0x02f0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02f8 flags=0x0000000000000000 */ struct FAnimNode_Root AnimGraphNode_Root_AFF52F6C457272B774D5C286273B97F4;
  /* offset=0x0330 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_42CA781147EE9629A4B19BA9775B36AD;
  /* offset=0x0390 flags=0x0000000000000000 */ struct FAnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_8DA05499428414A4017E28AC85C92530;
  /* offset=0x03e8 flags=0x0000000000000000 */ struct FAnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A0F09E8C4513293ADF49F582EC9A1217;
  /* offset=0x0448 flags=0x0000000000000000 */ struct FAnimNode_AnimDynamics AnimGraphNode_AnimDynamics_2BE462B7452BD6CC7AA9BEB99A15F46B;
  /* offset=0x0670 flags=0x0000000000000000 */ struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_9A8BCB494C60C4E6B163B69FBF189C85;
  /* offset=0x06a8 flags=0x0000000000000000 */ struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9E8CA6A84B12F57225A6DB8E983D5123;
  /* offset=0x06e0 flags=0x0000001040010205 */ bool Man;
  /* offset=0x06e1 flags=0x0000001040010205 */ bool IsFront;
  /* offset=0x06e2 flags=0x0000001040010205 */ bool IsChange;
  /* offset=0x06e3 flags=0x0000001040010205 */ bool bUseHairAnimDynamics;
  /* offset=0x06e4 flags=0x0000001000010005 */ struct FAnimParamList CharacterAnimParam;

  void BlueprintUpdateAnimation(float DeltaTimeX);
  void EvaluateGraphExposedInputs_ExecuteUbergraph_Lobby_AnimBP_AnimGraphNode_AnimDynamics_2BE462B7452BD6CC7AA9BEB99A15F46B();
  void ExecuteUbergraph_Lobby_AnimBP(int32 EntryPoint, float K2Node_Event_DeltaTimeX, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue);
};

class ULobby_AvatarAnim_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008021c */ UWidgetAnimation* Fade in;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* Fade out;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCommon_UITransitionBG_C* Common_UITransitionBG;

  void UIHide();
  void UIHideAvatarAni(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_createrole_C* K2Node_DynamicCast_AsBp_Createrole, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void UIShowAvatarAni(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UIShowAvatarAniDelay(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
};

class ULobby_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_StartEnter;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Out;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Enter;
  /* offset=0x0240 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Actvity02;
  /* offset=0x0244 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Activity01;
  /* offset=0x0248 flags=0x000a0010c008021c */ UWidgetAnimation* DX_ClikBox;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_Activity;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_ActivityUI;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_buluo;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button_Community;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_DepotSystem;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* Button_FriendSystem;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* Button_GameGroup;
  /* offset=0x026c flags=0x000a0010c008020c */ UButton* Button_Help;
  /* offset=0x0270 flags=0x000a0010c008020c */ UButton* Button_LobbyReportBug;
  /* offset=0x0274 flags=0x000a0010c008020c */ UButton* Button_MailSystem;
  /* offset=0x0278 flags=0x000a0010c008020c */ UButton* Button_PlatIcon;
  /* offset=0x027c flags=0x000a0010c008020c */ UButton* Button_QQCommunity1;
  /* offset=0x0280 flags=0x000a0010c008020c */ UButton* Button_QQgame;
  /* offset=0x0284 flags=0x000a0010c008020c */ UButton* Button_QQhuati;
  /* offset=0x0288 flags=0x000a0010c008020c */ UButton* Button_QQInfoMore;
  /* offset=0x028c flags=0x000a0010c008020c */ UButton* Button_QQlibao;
  /* offset=0x0290 flags=0x000a0010c008020c */ UButton* Button_QQliuliangbao;
  /* offset=0x0294 flags=0x000a0010c008020c */ UButton* Button_QQStart;
  /* offset=0x0298 flags=0x000a0010c008020c */ UButton* Button_QQVIP;
  /* offset=0x029c flags=0x000a0010c008020c */ UButton* Button_QQzhibo;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UButton* Button_RankSystem;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UButton* Button_RoleInfo;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UButton* Button_Season;
  /* offset=0x02ac flags=0x000a0010c008020c */ UButton* Button_Setup;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UButton* Button_ShopSystem;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UButton* Button_SwitchActivityPanel;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UButton* Button_Task;
  /* offset=0x02bc flags=0x000a0010c008020c */ UButton* Button_task1;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UButton* Button_TaskSystem;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UButton* Button_Team;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UButton* Button_TouristAlive;
  /* offset=0x02cc flags=0x000a0010c008020c */ UButton* Button_Tribe;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UButton* Button_WorldView;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UButton* Button_WXCommunity;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UButton* Button_WXhuati;
  /* offset=0x02dc flags=0x000a0010c008020c */ UButton* Button_WXliuliangbao;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UButton* Button_WXmore;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UButton* Button_WXqiedianjing;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UButton* Button_WXstart;
  /* offset=0x02ec flags=0x000a0010c008020c */ UButton* Button_WXxinyuetequan;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UButton* Button_WXyouxiquan;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UButton* Button_WXzhibo;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UButton* Button_xinyuetequan;
  /* offset=0x02fc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ActivityPanel;
  /* offset=0x0300 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ActivityPanelFather;
  /* offset=0x0304 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_AddFriendTips;
  /* offset=0x0308 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_BottomMenu;
  /* offset=0x030c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_CloseList;
  /* offset=0x0310 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_DepotBtn;
  /* offset=0x0314 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x0318 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_LobbyReportBug;
  /* offset=0x031c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_MailBtn;
  /* offset=0x0320 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQ;
  /* offset=0x0324 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQbuluo;
  /* offset=0x0328 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQCommunity;
  /* offset=0x032c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQdianjing;
  /* offset=0x0330 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQhuati;
  /* offset=0x0334 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQlibao;
  /* offset=0x0338 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQliuliangbao;
  /* offset=0x033c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_qqmore;
  /* offset=0x0340 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQmoreBtnPanel;
  /* offset=0x0344 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQStart;
  /* offset=0x0348 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQVip;
  /* offset=0x034c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQxinyuetequan;
  /* offset=0x0350 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QQzhibo;
  /* offset=0x0354 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_RankBtn;
  /* offset=0x0358 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Root;
  /* offset=0x035c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_SetBtn;
  /* offset=0x0360 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ShopBtn;
  /* offset=0x0364 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ShowList;
  /* offset=0x0368 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_TeamBtn;
  /* offset=0x036c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Tourist;
  /* offset=0x0370 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Touristzhibo;
  /* offset=0x0374 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WorldViewBtn;
  /* offset=0x0378 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WX;
  /* offset=0x037c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXBtnPanel;
  /* offset=0x0380 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXCommunity;
  /* offset=0x0384 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXhuati;
  /* offset=0x0388 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXliuliangbao;
  /* offset=0x038c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_wxmore;
  /* offset=0x0390 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXqiedianjing;
  /* offset=0x0394 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXstart;
  /* offset=0x0398 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Wxxinyuetequan;
  /* offset=0x039c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXyouxiquan;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_WXzhibo;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UCommon_Avatar_BP_C* Common_Avatar_BP;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UCustomScrollBox* CustomScrollBox_ActivityBtnList;
  /* offset=0x03ac flags=0x000a0010c008020c */ UGridPanel* frontieraward;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UImage* FX_ClickBOX;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UImage* FX_LightActivity;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Signal;
  /* offset=0x03bc flags=0x000a0010c008020c */ UGridPanel* GridPanel_Wifi;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03d4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03d8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03dc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03e0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x03ec flags=0x000a0010c008020c */ UImage* Image_Activity;
  /* offset=0x03f0 flags=0x000a0010c008020c */ UImage* Image_ActivityNewTips;
  /* offset=0x03f4 flags=0x000a0010c008020c */ UImage* Image_Community;
  /* offset=0x03f8 flags=0x000a0010c008020c */ UImage* Image_CommunityNewTips;
  /* offset=0x03fc flags=0x000a0010c008020c */ UImage* Image_DepotIcon;
  /* offset=0x0400 flags=0x000a0010c008020c */ UImage* Image_DepotNewTips;
  /* offset=0x0404 flags=0x000a0010c008020c */ UImage* Image_FriendSystemNewTips;
  /* offset=0x0408 flags=0x000a0010c008020c */ UImage* Image_MailSystemNewTips;
  /* offset=0x040c flags=0x000a0010c008020c */ UImage* Image_PlatIcon;
  /* offset=0x0410 flags=0x000a0010c008020c */ UImage* Image_QQhuatiNew;
  /* offset=0x0414 flags=0x000a0010c008020c */ UImage* Image_QQmore;
  /* offset=0x0418 flags=0x000a0010c008020c */ UImage* Image_RankIcon;
  /* offset=0x041c flags=0x000a0010c008020c */ UImage* Image_RankListIcon;
  /* offset=0x0420 flags=0x000a0010c008020c */ UImage* Image_RankNewTips;
  /* offset=0x0424 flags=0x000a0010c008020c */ UImage* Image_Searching;
  /* offset=0x0428 flags=0x000a0010c008020c */ UImage* Image_SelectedDepotSystem;
  /* offset=0x042c flags=0x000a0010c008020c */ UImage* Image_SelectedRankSystem;
  /* offset=0x0430 flags=0x000a0010c008020c */ UImage* Image_SelectedShopSystem;
  /* offset=0x0434 flags=0x000a0010c008020c */ UImage* Image_SelectedTeamSystem;
  /* offset=0x0438 flags=0x000a0010c008020c */ UImage* Image_SetupNewTips;
  /* offset=0x043c flags=0x000a0010c008020c */ UImage* Image_ShopIcon;
  /* offset=0x0440 flags=0x000a0010c008020c */ UImage* Image_SignalBad;
  /* offset=0x0444 flags=0x000a0010c008020c */ UImage* Image_SignalGood;
  /* offset=0x0448 flags=0x000a0010c008020c */ UImage* Image_SignalNotGood;
  /* offset=0x044c flags=0x000a0010c008020c */ UImage* Image_Task;
  /* offset=0x0450 flags=0x000a0010c008020c */ UImage* Image_TaskNewTips;
  /* offset=0x0454 flags=0x000a0010c008020c */ UImage* Image_TeamIcon;
  /* offset=0x0458 flags=0x000a0010c008020c */ UImage* Image_TeamNewTips;
  /* offset=0x045c flags=0x000a0010c008020c */ UImage* Image_WifiBad;
  /* offset=0x0460 flags=0x000a0010c008020c */ UImage* Image_WifiGood;
  /* offset=0x0464 flags=0x000a0010c008020c */ UImage* Image_WifiNotGood;
  /* offset=0x0468 flags=0x000a0010c008020c */ UImage* Image_WorldViewNewTips;
  /* offset=0x046c flags=0x000a0010c008020c */ UImage* Image_WXhuatiNew;
  /* offset=0x0470 flags=0x000a0010c008020c */ UImage* Image_WxMore;
  /* offset=0x0474 flags=0x000a0010c008020c */ ULobby_Activity_BtnItem_C* Lobby_Activity_BtnItem;
  /* offset=0x0478 flags=0x000a0010c008020c */ ULobby_Activity_BtnItem_C* Lobby_Activity_BtnItem;
  /* offset=0x047c flags=0x000a0010c008020c */ UOverlay* Overlay_qqbuluofather;
  /* offset=0x0480 flags=0x000a0010c008020c */ UOverlay* Overlay_qqcommunityfather;
  /* offset=0x0484 flags=0x000a0010c008020c */ UOverlay* Overlay_qqdianjingfather;
  /* offset=0x0488 flags=0x000a0010c008020c */ UOverlay* Overlay_qqhuatifather;
  /* offset=0x048c flags=0x000a0010c008020c */ UOverlay* Overlay_QQlibaofather;
  /* offset=0x0490 flags=0x000a0010c008020c */ UOverlay* Overlay_QQliuliangbaofather;
  /* offset=0x0494 flags=0x000a0010c008020c */ UOverlay* Overlay_qqmorefather;
  /* offset=0x0498 flags=0x000a0010c008020c */ UOverlay* Overlay_qqstartfather;
  /* offset=0x049c flags=0x000a0010c008020c */ UOverlay* Overlay_qqvipfather;
  /* offset=0x04a0 flags=0x000a0010c008020c */ UOverlay* Overlay_QQxinyuetequanfather;
  /* offset=0x04a4 flags=0x000a0010c008020c */ UOverlay* Overlay_qqzhibofather;
  /* offset=0x04a8 flags=0x000a0010c008020c */ UOverlay* Overlay_wxcommunityfather;
  /* offset=0x04ac flags=0x000a0010c008020c */ UOverlay* Overlay_wxdianjingfather;
  /* offset=0x04b0 flags=0x000a0010c008020c */ UOverlay* Overlay_wxhuatifather;
  /* offset=0x04b4 flags=0x000a0010c008020c */ UOverlay* Overlay_wxliuliangbaofather;
  /* offset=0x04b8 flags=0x000a0010c008020c */ UOverlay* Overlay_wxmorefather;
  /* offset=0x04bc flags=0x000a0010c008020c */ UOverlay* Overlay_wxstartfather;
  /* offset=0x04c0 flags=0x000a0010c008020c */ UOverlay* Overlay_wxxinyuetequanfather;
  /* offset=0x04c4 flags=0x000a0010c008020c */ UOverlay* Overlay_wxyouxiquanfather;
  /* offset=0x04c8 flags=0x000a0010c008020c */ UOverlay* Overlay_wxzhibofather;
  /* offset=0x04cc flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Battery;
  /* offset=0x04d0 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Exp;
  /* offset=0x04d4 flags=0x000a0010c008020c */ UImage* Redpoint01;
  /* offset=0x04d8 flags=0x000a0010c008020c */ UImage* Redpoint02;
  /* offset=0x04dc flags=0x000a0010c008020c */ UImage* RedPoint03;
  /* offset=0x04e0 flags=0x000a0010c008020c */ UImage* RedPoint04;
  /* offset=0x04e4 flags=0x000a0010c008020c */ UCircularThrobber* Searching;
  /* offset=0x04e8 flags=0x000a0010c008020c */ USpinBox* SpinBox_Control;
  /* offset=0x04ec flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x04f8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Activity;
  /* offset=0x04fc flags=0x000a0010c008020c */ UTextBlock* TextBlock_AddFriendNum;
  /* offset=0x0500 flags=0x000a0010c008020c */ UTextBlock* TextBlock_BPMoney;
  /* offset=0x0504 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Community;
  /* offset=0x0508 flags=0x000a0010c008020c */ UTextBlock* TextBlock_DepotTitle;
  /* offset=0x050c flags=0x000a0010c008020c */ UTextBlock* TextBlock_FPS;
  /* offset=0x0510 flags=0x000a0010c008020c */ UTextBlock* TextBlock_FreeFlowTips;
  /* offset=0x0514 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerLevel;
  /* offset=0x0518 flags=0x000a0010c008020c */ UTextBlock* TextBlock_RankName;
  /* offset=0x051c flags=0x000a0010c008020c */ UTextBlock* TextBlock_RankTitle;
  /* offset=0x0520 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ShopTitle;
  /* offset=0x0524 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Task;
  /* offset=0x0528 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Task_BtnName;
  /* offset=0x052c flags=0x000a0010c008020c */ UTextBlock* TextBlock_team;
  /* offset=0x0530 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0534 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Platform;
  /* offset=0x0538 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_WXorQQ;
  /* offset=0x053c flags=0x0008001040010205 */ float RotateValue;
  /* offset=0x0540 flags=0x0008001040000205 */ float RotateFactor;
  /* offset=0x0544 flags=0x0000000000010005 */ struct FSlateColor BtnColor_G;
  /* offset=0x0560 flags=0x0000000000010005 */ struct FSlateColor BtnColor_W;
  /* offset=0x057c flags=0x0000000000000205 */ TArray<struct FTransform> PlayerTransformList;
  /* offset=0x0588 flags=0x0000000000000a05 */ TArray<ABP_PlayerLobbyPawn_C*> PlayerPawnList;
  /* offset=0x0594 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_TransformUseList> TransformUseList;
  /* offset=0x05a0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SpawnPlayerData> LobbyPlayerDataList;
  /* offset=0x05ac flags=0x0000000000010205 */ TArray<UParticleSystemComponent*> RingParticleList;
  /* offset=0x05b8 flags=0x0000001000010005 */ struct FTimerHandle batteryUpdateTimer;
  /* offset=0x05c0 flags=0x0000001000010005 */ struct FTimerHandle networkUpdateTimer;

  void BndEvt__Button_ActivityUI_K2Node_ComponentBoundEvent_47_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_LobbyReportBug_K2Node_ComponentBoundEvent_56_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Play_K2Node_ComponentBoundEvent_59_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQCommunity1_K2Node_ComponentBoundEvent_226_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQInfoMore_K2Node_ComponentBoundEvent_285_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQStart_K2Node_ComponentBoundEvent_198_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQVIP_K2Node_ComponentBoundEvent_171_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQgame_K2Node_ComponentBoundEvent_255_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQhuati_K2Node_ComponentBoundEvent_120_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQlibao_K2Node_ComponentBoundEvent_145_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQliuliangbao_K2Node_ComponentBoundEvent_96_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_QQzhibo_K2Node_ComponentBoundEvent_73_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SeasonClick_K2Node_ComponentBoundEvent_314_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SwitchActivityPanel_K2Node_ComponentBoundEvent_93_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_TouristAlive_K2Node_ComponentBoundEvent_649_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXCommunity_K2Node_ComponentBoundEvent_348_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXhuati_K2Node_ComponentBoundEvent_609_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXliuliangbao_K2Node_ComponentBoundEvent_570_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXmore_K2Node_ComponentBoundEvent_424_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXqiedianjing_K2Node_ComponentBoundEvent_390_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXstart_K2Node_ComponentBoundEvent_316_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXxinyuetequan_K2Node_ComponentBoundEvent_495_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXyouxiquan_K2Node_ComponentBoundEvent_459_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_WXzhibo_K2Node_ComponentBoundEvent_532_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_buluo_K2Node_ComponentBoundEvent_29_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_xinyuetequan_K2Node_ComponentBoundEvent_50_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__SpinBox_Control_K2Node_ComponentBoundEvent_1_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
  void Construct();
  void ExecuteUbergraph_Lobby_BP(int32 EntryPoint, float K2Node_ComponentBoundEvent_InValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void OnClickPlayBtn(APlayerController* CallFunc_GetPlayerController_ReturnValue, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void SetSpin(float NewValue, float RotateValue);
};

class ALobby_C: public ALevelScriptActor {
  /* offset=0x02b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02b4 flags=0x0008001040000200 */ ACameraActor* LobbyCameraActor2_2_ExecuteUbergraph_Lobby_RefProperty;
  /* offset=0x02b8 flags=0x0008001040000200 */ ACameraActor* LobbyCameraActor1_0_ExecuteUbergraph_Lobby_RefProperty;
  /* offset=0x02bc flags=0x0008001040000200 */ ACameraActor* close_up_ExecuteUbergraph_Lobby_RefProperty;
  /* offset=0x02c0 flags=0x0008001040000200 */ ACameraActor* close_up_all_ExecuteUbergraph_Lobby_RefProperty;
  /* offset=0x02c4 flags=0x0008001040000200 */ ACameraActor* LobbyCameraActor3_ExecuteUbergraph_Lobby_RefProperty;

  void ExecuteUbergraph_Lobby(int32 EntryPoint, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, struct FHitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue2, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, struct FHitResult CallFunc_K2_SetActorTransform_SweepHitResult2, bool CallFunc_K2_SetActorTransform_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue, uint8 K2Node_Event_EndPlayReason, int32 CallFunc_PostEventAtLocation_ReturnValue, struct FKey K2Node_InputKeyEvent_Key, ALuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, struct FKey K2Node_InputKeyEvent_Key2, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess2);
  void InpActEvt_Android_Back_K2Node_InputKeyEvent(struct FKey Key);
  void InpActEvt_E_K2Node_InputKeyEvent(struct FKey Key);
  void ReceiveBeginPlay();
  void ReceiveEndPlay(uint8 EndPlayReason);
};

class ULobby_CreatingRole_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_card;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_CreatedRole;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_gold;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_Language;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_logout;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_OK;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_Random;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_Reset;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_SelectedFemale;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button_SelectedMan;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_SwitchAccount;
  /* offset=0x0264 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Create;
  /* offset=0x0268 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x026c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ResetBtn;
  /* offset=0x0270 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Tips;
  /* offset=0x0274 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_CardInfo;
  /* offset=0x0278 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_CostInfo;
  /* offset=0x027c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* Image_SelectedFemale;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* Image_SelectedMan;
  /* offset=0x0298 flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C0;
  /* offset=0x029c flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C1;
  /* offset=0x02a0 flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C2;
  /* offset=0x02a4 flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C3;
  /* offset=0x02a8 flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C4;
  /* offset=0x02ac flags=0x000a0010c008020c */ ULobby_RoleColorItem_UIBP_C* Lobby_RoleColorItem_UIBP_C5;
  /* offset=0x02b0 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F1;
  /* offset=0x02b4 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F2;
  /* offset=0x02b8 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F3;
  /* offset=0x02bc flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F4;
  /* offset=0x02c0 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F5;
  /* offset=0x02c4 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_F6;
  /* offset=0x02c8 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H1;
  /* offset=0x02cc flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H2;
  /* offset=0x02d0 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H3;
  /* offset=0x02d4 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H4;
  /* offset=0x02d8 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H5;
  /* offset=0x02dc flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H6;
  /* offset=0x02e0 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H7;
  /* offset=0x02e4 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H8;
  /* offset=0x02e8 flags=0x000a0010c008020c */ ULobby_RoleTypeItem_UIBP_C* Lobby_RoleTypeItem_UIBP_H9;
  /* offset=0x02ec flags=0x000a0010c008020c */ UMultiLineEditableTextBox* MultiLineEditableTextBox_PlayerName;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Female;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_HaveCardNum;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemCount;
  /* offset=0x02fc flags=0x000a0010c008020c */ UTextBlock* TextBlock_Male;
  /* offset=0x0300 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Money;
  /* offset=0x0304 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_UIstate;
  /* offset=0x0308 flags=0x000a0010c008020c */ UWrapBox* WrapBox_ColorStyle;
  /* offset=0x030c flags=0x000a0010c008020c */ UWrapBox* WrapBox_HairStytle;
  /* offset=0x0310 flags=0x0008001040010a05 */ Abp_createrole_C* bp_createrole;
  /* offset=0x0314 flags=0x0008001040010a05 */ ABP_PlayerLobbyPawn_C* playerLobbyPawn;
  /* offset=0x0318 flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;

  void AutoCreateRole(float Value);
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CloseUI_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CreatedRole_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OK_K2Node_ComponentBoundEvent_29_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Reset_K2Node_ComponentBoundEvent_46_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SelectedFemale_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SelectedMan_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Selected_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_card_K2Node_ComponentBoundEvent_26_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_card_K2Node_ComponentBoundEvent_44_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_logout_K2Node_ComponentBoundEvent_29_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__MultiLineEditableTextBox_PlayerName_K2Node_ComponentBoundEvent_304_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(FText Text);
  void Construct();
  void CreateAvatar(bool CallFunc_IsValid_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ABP_PlayerLobbyPawn_C* CallFunc_FinishSpawningActor_ReturnValue);
  void EnterLobby(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);
  void ExecuteUbergraph_Lobby_CreatingRole_UIBP(int32 EntryPoint, FText K2Node_ComponentBoundEvent_Text, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_GetText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue3, float K2Node_CustomEvent_Value, bool CallFunc_IsAutoRunTestGame_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_createrole_C* K2Node_DynamicCast_AsBp_Createrole, bool K2Node_DynamicCast_bSuccess, UIMSDKHelper* CallFunc_GetInstance_ReturnValue);
  void HideResetButton();
  void InitHairColor(int32 selectHair);
  void InitHairType(int32 sex);
  void InitRace(int32 sex);
  void PlayFadeIn(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_fade_C* K2Node_DynamicCast_AsBp_Fade, bool K2Node_DynamicCast_bSuccess3);
  void RefreshUI(struct FSlateColor K2Node_MakeStruct_SlateColor, struct FSlateColor K2Node_MakeStruct_SlateColor2, struct FSlateColor K2Node_MakeStruct_SlateColor3, struct FSlateColor K2Node_MakeStruct_SlateColor4, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);
  void SelectFemale();
  void SelectHairColor(int32 SelectColor);
  void SelectHairType(int32 selectrace);
  void SelectMale();
  void ShowResetButton();
  void SwitchCameraClosein(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void SwitchCameraFar(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void SwitchCameraFarImmediate(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void UIHide();
  void UIShow(bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void UpdateAvatar(int32 CallFunc_Subtract_IntInt_ReturnValue);
  void UpdateAvatarModel(int32 sex, int32 Head, int32 face, int32 Cloth, int32 pant, int32 shoe, int32 hari, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue4, bool CallFunc_Greater_IntInt_ReturnValue5, bool CallFunc_PutOnEquipmentByResID_ReturnValue, bool CallFunc_PutOnEquipmentByResID_ReturnValue2, bool CallFunc_PutOnEquipmentByResID_ReturnValue3, bool CallFunc_PutOnEquipmentByResID_ReturnValue4, bool CallFunc_PutOnEquipmentByResID_ReturnValue5);
  void UpdateCost(FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2);
  void UpdatePlayerName(FText CallFunc_Conv_StringToText_ReturnValue);
  void selectrace(int32 selectrace);
};

class ULobby_Exciting8Item_UIBP_C: public UCustomUserWidget {
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* Des;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* ItemDarkBg;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* ItemLightBg;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Join;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Logo;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Logo_Mask;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* NumText;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Over;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* redpoint;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* Time;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* Title;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Unopen;
};

class ULobby_Exciting8UI_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01bc flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01cc flags=0x000a0010c008020c */ UActivityGroupItem_BP_C* ActivityGroupItem_BP_C;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
};

class ULobby_InviteFriendLogic_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_InviteFriend_BP_C* Lobby_InviteFriend_BP;
  /* offset=0x0238 flags=0x0008001040000205 */ UButton* Button_AddFriend_Logic;
  /* offset=0x023c flags=0x0008001040000205 */ UButton* Button_FriendsList_Logic;
  /* offset=0x0240 flags=0x0008001040000205 */ UCustomScrollBox* CustomScrollBox_FriendsList_Logic;
  /* offset=0x0244 flags=0x0008001040000205 */ UCanvasPanel* Friend_List_Logic;
  /* offset=0x0248 flags=0x0008001040000205 */ UTextBlock* TextBlock_CurrentFriendsNum_Logic;
  /* offset=0x024c flags=0x0008001040000205 */ UTextBlock* TextBlock_MaxFriendsNum_Logic;
  /* offset=0x0250 flags=0x0000001040000205 */ bool IsShowList;
  /* offset=0x0254 flags=0x0008001040010a05 */ Abp_teamup_friend_C* TeamUpFriendLua;
  /* offset=0x0258 flags=0x0008001040000205 */ int32 OnLineCount;
  /* offset=0x025c flags=0x0008001040000205 */ UCanvasPanel* ChickenTips;
  /* offset=0x0260 flags=0x0008001040000205 */ int32 CurMenuType;
  /* offset=0x0264 flags=0x0008001040000205 */ UCustomScrollBox* CustomScrollBox_RecentList;
  /* offset=0x0268 flags=0x0008001040000205 */ UCustomScrollBox* CustomScrollBox_NearByList;
  /* offset=0x026c flags=0x0008001040000205 */ UCustomScrollBox* CustomScrollBox_CarTeamList;
  /* offset=0x0270 flags=0x0008001040000205 */ UWidgetSwitcher* MenuSwitcher;
  /* offset=0x0274 flags=0x0008001040000205 */ UButton* Button_Invite_QQ;
  /* offset=0x0278 flags=0x0008001040000205 */ UButton* Button_Invite_WX;
  /* offset=0x027c flags=0x0008001040000205 */ UButton* Button_Menu_Friend;
  /* offset=0x0280 flags=0x0008001040010205 */ UButton* Button_Menu_Recent;
  /* offset=0x0284 flags=0x0008001040010205 */ UButton* Button_Menu_NearBy;
  /* offset=0x0288 flags=0x0008001040000205 */ UImage* ImageListOn;
  /* offset=0x028c flags=0x0008001040000205 */ UImage* ImageListOff;
  /* offset=0x0290 flags=0x0008001040000205 */ UWidgetSwitcher* WidgetSwitcher_WXorQQ;
  /* offset=0x0294 flags=0x0008001040010205 */ UWidgetSwitcher* ListSwitcher;
  /* offset=0x0298 flags=0x0008001040010205 */ UButton* Button_Menu_CarTeam;
  /* offset=0x02a0 flags=0x0000001000010005 */ struct FTimerHandle tickTimer;
  /* offset=0x02a8 flags=0x0008001040010205 */ UReuseList_C* friendReuseList;
  /* offset=0x02ac flags=0x0008001040010205 */ UReuseList_C* recentReuseList;
  /* offset=0x02b0 flags=0x0008001040010205 */ UReuseList_C* carTeamReuseList;
  /* offset=0x02b4 flags=0x0008001040010205 */ int32 LastFriendCount;
  /* offset=0x02b8 flags=0x0008001040010205 */ int32 LastRecentCount;
  /* offset=0x02bc flags=0x0008001040010205 */ int32 LastCarTeamCount;

  void ClickPlatformInviteWXMiniApp();
  void Construct();
  void CreateItem(UFriendsListItem_BP_C* FriendsListItemBp, UFriendsListItem_BP_C* CallFunc_Create_ReturnValue);
  void ExecuteUbergraph_Lobby_InviteFriendLogic_BP(int32 EntryPoint, UUserWidget* K2Node_CustomEvent_Widget, int32 K2Node_CustomEvent_Idx, UFriendsListItem_BP_C* K2Node_DynamicCast_AsFriends_List_Item_BP, bool K2Node_DynamicCast_bSuccess, FOnUpdateItem K2Node_CreateDelegate_OutputDelegate, FOnUpdateItem K2Node_CreateDelegate_OutputDelegate2, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, UUserWidget* K2Node_CustomEvent_Widget2, int32 K2Node_CustomEvent_Idx2, UFriendsListItem_BP_C* K2Node_DynamicCast_AsFriends_List_Item_BP2, bool K2Node_DynamicCast_bSuccess2);
  void HideFriendMenu();
  void InitLogicVar(FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_friend_C* K2Node_DynamicCast_AsBp_Teamup_Friend, bool K2Node_DynamicCast_bSuccess, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate7, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate8);
  void InitPlatformBtnState(Abp_global_C* CallFunc_GetGlobalData_globalObj, bool K2Node_SwitchInteger_CmpSuccess);
  void OnClickBtnAddFriend(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void OnClickBtnInviteQQ();
  void OnClickBtnInviteWX();
  void OnClickMenuButtonCarTeam();
  void OnClickMenuButtonFriend();
  void OnClickMenuButtonNearBy();
  void OnClickMenuButtonRecent();
  void OnUpdateFriendOneItem(UUserWidget* Widget, int32 Idx);
  void OnclickBtnFriendList(int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2);
  void SetChickenTips(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue3);
  void SetUITextCorlor(bool isShow);
  void ShowArrowIcon(bool isShow);
  void ShowFriendMenu();
  void SwitchSubMenu(int32 menuType, bool K2Node_SwitchInteger_CmpSuccess);
  void TickStatus();
  void Transitions_Enter();
  void Transitions_Out();
  void UIHide();
  void UIShow();
  void UpdateAllFriendStausNew();
  void UpdateByCurrentType(bool K2Node_SwitchInteger_CmpSuccess);
  void UpdateCarTeamList();
  void UpdateCarTeamStatus(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UFriendsListItem_BP_C* CallFunc_CreateItem_FriendsListItemBp, UPanelSlot* CallFunc_AddChild_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, UFriendsListItem_BP_C* K2Node_DynamicCast_AsFriends_List_Item_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_InviteFriendProfile CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateFriendList(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void UpdateNearByList();
  void UpdateNearByStatus();
  void UpdateOnLineNum(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, struct FBP_STRUCT_InviteFriendProfile CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue2);
  void UpdateRecentList(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UFriendsListItem_BP_C* CallFunc_CreateItem_FriendsListItemBp, UPanelSlot* CallFunc_AddChild_ReturnValue, struct FBP_STRUCT_InviteFriendProfile CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateRecnentItem(UUserWidget* Widget, int32 Idx);
  void UpdateRencentStatus(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
};

class ULobby_InviteFriend_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_StartEnter;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Out;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Enter;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_AddFriend;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_FriendList;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_FriendsList;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_Nearby;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_QQ;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_Recent;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_Team;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button_WX;
  /* offset=0x0260 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x0264 flags=0x000a0010c008020c */ UCanvasPanel* ChickenTips;
  /* offset=0x0268 flags=0x000a0010c008020c */ UCustomScrollBox* CustomScrollBox_FriendsList;
  /* offset=0x026c flags=0x000a0010c008020c */ UCustomScrollBox* CustomScrollBox_Nearby;
  /* offset=0x0270 flags=0x000a0010c008020c */ UCustomScrollBox* CustomScrollBox_Recent;
  /* offset=0x0274 flags=0x000a0010c008020c */ UCustomScrollBox* CustomScrollBox_TeamList;
  /* offset=0x0278 flags=0x000a0010c008020c */ UReuseList_C* friend_reuse_list;
  /* offset=0x027c flags=0x000a0010c008020c */ UCanvasPanel* FriendList;
  /* offset=0x0280 flags=0x000a0010c008020c */ UCanvasPanel* FriendListGroup;
  /* offset=0x0284 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ChickenTips;
  /* offset=0x0288 flags=0x000a0010c008020c */ UGridPanel* GridPanel_FriendList;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* Image_FriendNewTips;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* Image_Listoff;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* Image_Liston;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image_SelectedState;
  /* offset=0x029c flags=0x000a0010c008020c */ UReuseList_C* recent_reuse_list;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentFriendsNum;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_InviteFriendBtnName;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_jg;
  /* offset=0x02ac flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxFriendsNum;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_tips;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x02bc flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_BtnState;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_ListType;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_TipsType;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_WXorQQ;
  /* offset=0x02cc flags=0x0000001040010205 */ bool IsShowList;
  /* offset=0x02d0 flags=0x0008001040010a05 */ Abp_teamup_friend_C* TeamUpFriendLua;
  /* offset=0x02d4 flags=0x0008001040010205 */ int32 OnLineCount;
  /* offset=0x02d8 flags=0x0000000000010005 */ struct FSlateColor Color1;
  /* offset=0x02f4 flags=0x0000000000010005 */ struct FSlateColor Color2;

  void Construct();
  void ExecuteUbergraph_Lobby_InviteFriend_BP(int32 EntryPoint);
};

class ULobby_InviteFriendsTipsLogic_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0238 flags=0x000a0010c008020c */ ULobby_InviteFriendsTipsUI_BP_C* Lobby_InviteFriendsTipsUI_BP;
  /* offset=0x023c flags=0x0008001040010a05 */ Abp_teamup_C* MyBPTeamUp;
  /* offset=0x0240 flags=0x0008001040010205 */ int32 LogicTimeLeft;

  void BeginCountDown(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void ClickAgree(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void ClickAutoRefuse(bool isCheck);
  void ClickRefuse(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void Construct();
  void EventOnAgree();
  void EventOnAutoRefuse(bool EventisCheck);
  void EventOnRefuse();
  void ExecuteUbergraph_Lobby_InviteFriendsTipsLogic_BP(int32 EntryPoint, FEventDispatcher_Agree K2Node_CreateDelegate_OutputDelegate, FEventDispatcher_Refuse K2Node_CreateDelegate_OutputDelegate2, bool K2Node_CustomEvent_EventisCheck, FEventDispatcher_Auto K2Node_CreateDelegate_OutputDelegate3);
  void HandleCountDown(bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue);
  void HideInviteApplyPanel();
  void HidePanel(TArray<UWidget*> K2Node_MakeArray_Array);
  void InitMyBPTeamUp(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_C* K2Node_DynamicCast_AsBp_Teamup, bool K2Node_DynamicCast_bSuccess);
  void PlayAniIn();
  void PlayAniOut();
  void RefreshInfo(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool K2Node_SwitchInteger_CmpSuccess);
  void SetPlayerName(FString playName, FString actionTip, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_GetLocalizeString_textValue, FText CallFunc_Conv_StringToText_ReturnValue3);
  void SetTimeLeft(FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void ShowPanel(TArray<UWidget*> K2Node_MakeArray_Array);
  void ShowTopTip(int32 CallFunc_PostEventAtLocation_ReturnValue);
  void StopCountDown();
};

class ULobby_InviteFriendsTipsUI_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_InviteFriendTips_OUT;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_InviteFriendTips_IN;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_Agree;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_Refuse;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCheckBox* CheckBox_Refuse;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* FX_FlowLight001;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* FX_Light_L001;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* FX_Line01;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* Text_TimeLeft;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_RefuseTips;
  /* offset=0x025c flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_PlayerNameAndAction;
  /* offset=0x0260 flags=0x0000100010010205 */ FEventDispatcher_Refuse EventDispatcher_Refuse;
  /* offset=0x026c flags=0x0000100010010205 */ FEventDispatcher_Agree EventDispatcher_Agree;
  /* offset=0x0278 flags=0x0000100010010205 */ FEventDispatcher_Auto EventDispatcher_Auto;

  void BndEvt__Button_Agree_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Refuse_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__CheckBox_Refuse_K2Node_ComponentBoundEvent_5_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
  void Construct();
  void EventDispatcher_Agree__DelegateSignature();
  void EventDispatcher_Auto__DelegateSignature(bool isCheck);
  void EventDispatcher_Refuse__DelegateSignature();
  void ExecuteUbergraph_Lobby_InviteFriendsTipsUI_BP(int32 EntryPoint, bool K2Node_ComponentBoundEvent_bIsChecked);
  void Show Effects(bool Is show, enum ESlateVisibility Type);
};

class ULobby_Logic_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_BP_C* Lobby_BP;
  /* offset=0x0238 flags=0x0008001040010205 */ float RotateValue;
  /* offset=0x023c flags=0x0008001040000205 */ float RotateFactor;
  /* offset=0x0240 flags=0x0008001040010005 */ struct FLinearColor BtnColor_G;
  /* offset=0x0250 flags=0x0008001040010005 */ struct FLinearColor BtnColor_Yellow;
  /* offset=0x0260 flags=0x0000000000000205 */ TArray<struct FTransform> PlayerTransformList;
  /* offset=0x026c flags=0x0000000000000a05 */ TArray<ABP_PlayerLobbyPawn_C*> PlayerPawnList;
  /* offset=0x0278 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_TransformUseList> TransformUseList;
  /* offset=0x0284 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SpawnPlayerData> LobbyPlayerDataList;
  /* offset=0x0290 flags=0x0000000000010205 */ TArray<UParticleSystemComponent*> RingParticleList;
  /* offset=0x02a0 flags=0x0000001000010005 */ struct FTimerHandle batteryUpdateTimer;
  /* offset=0x02a8 flags=0x0000001000010005 */ struct FTimerHandle networkUpdateTimer;
  /* offset=0x02b0 flags=0x0000001000010005 */ struct FTimerHandle helpshiftUnreadUpdateTimer;
  /* offset=0x02b8 flags=0x0008001040010205 */ UCanvasPanel* Root;
  /* offset=0x02bc flags=0x0008001040010205 */ UButton* Button_GM;
  /* offset=0x02c0 flags=0x0008001040010205 */ UButton* Button_DepotSystem;
  /* offset=0x02c4 flags=0x0008001040010205 */ UButton* Button_FriendSystem;
  /* offset=0x02c8 flags=0x0008001040010205 */ UButton* Button_Help;
  /* offset=0x02cc flags=0x0008001040010205 */ UButton* Button_MailSystem;
  /* offset=0x02d0 flags=0x0008001040010205 */ UButton* Button_RankSystem;
  /* offset=0x02d4 flags=0x0008001040010205 */ UButton* Button_Setup;
  /* offset=0x02d8 flags=0x0008001040010205 */ UButton* Button_ShopSystem;
  /* offset=0x02dc flags=0x0008001040010205 */ UButton* Button_WorldView;
  /* offset=0x02e0 flags=0x0008001040000205 */ UCommon_Avatar_BP_C* Common_Avatar_BP;
  /* offset=0x02e4 flags=0x0008001040010205 */ UGridPanel* GridPanel_Signal;
  /* offset=0x02e8 flags=0x0008001040010205 */ UGridPanel* GridPanel_Wifi;
  /* offset=0x02ec flags=0x0008001040010205 */ UImage* Image;
  /* offset=0x02f0 flags=0x0008001040010205 */ UImage* Image_DepotNewTips;
  /* offset=0x02f4 flags=0x0008001040010205 */ UImage* Image_FriendSystemNewTips;
  /* offset=0x02f8 flags=0x0008001040010205 */ UImage* Image_MailSystemNewTips;
  /* offset=0x02fc flags=0x0008001040010205 */ UImage* Image_RankIcon;
  /* offset=0x0300 flags=0x0008001040010205 */ UImage* Image_RankNewTips;
  /* offset=0x0304 flags=0x0008001040010205 */ UImage* Image_Searching;
  /* offset=0x0308 flags=0x0008001040010205 */ UImage* Image_SelectedDepotSystem;
  /* offset=0x030c flags=0x0008001040010205 */ UImage* Image_SelectedRankSystem;
  /* offset=0x0310 flags=0x0008001040010205 */ UImage* Image_SelectedShopSystem;
  /* offset=0x0314 flags=0x0008001040010205 */ UImage* Image_SetupNewTips;
  /* offset=0x0318 flags=0x0008001040010205 */ UImage* Image_SignalBad;
  /* offset=0x031c flags=0x0008001040010205 */ UImage* Image_SignalGood;
  /* offset=0x0320 flags=0x0008001040010205 */ UImage* Image_SignalNotGood;
  /* offset=0x0324 flags=0x0008001040010205 */ UImage* Image_WifiBad;
  /* offset=0x0328 flags=0x0008001040010205 */ UImage* Image_WifiGood;
  /* offset=0x032c flags=0x0008001040010205 */ UImage* Image_WifiNotGood;
  /* offset=0x0330 flags=0x0008001040010205 */ UImage* Image_WorldViewNewTips;
  /* offset=0x0334 flags=0x0008001040010205 */ UProgressBar* ProgressBar_Battery;
  /* offset=0x0338 flags=0x0008001040010205 */ UProgressBar* ProgressBar_Exp;
  /* offset=0x033c flags=0x0008001040010205 */ UCircularThrobber* Searching;
  /* offset=0x0340 flags=0x0008001040010205 */ UTextBlock* TextBlock;
  /* offset=0x0344 flags=0x0008001040010205 */ UTextBlock* TextBlock_BPMoney;
  /* offset=0x0348 flags=0x0008001040010205 */ UTextBlock* TextBlock_Depot_BtnName;
  /* offset=0x034c flags=0x0008001040010205 */ UTextBlock* TextBlock_PlayerLevel;
  /* offset=0x0350 flags=0x0008001040010205 */ UTextBlock* TextBlock_Rank_BtnName;
  /* offset=0x0354 flags=0x0008001040010205 */ UTextBlock* TextBlock_RankName;
  /* offset=0x0358 flags=0x0008001040010205 */ UTextBlock* TextBlock_ScrollTips;
  /* offset=0x035c flags=0x0008001040010205 */ UTextBlock* TextBlock_Shop_BtnName;
  /* offset=0x0360 flags=0x0008001040010205 */ UButton* Button_RoleInfo;
  /* offset=0x0364 flags=0x0008001040010205 */ UButton* TestButton;
  /* offset=0x0368 flags=0x0008001040010205 */ UWidgetSwitcher* widgetSwitcher_WXQQ;
  /* offset=0x036c flags=0x0008001040010205 */ UButton* Button_GameGroup;
  /* offset=0x0370 flags=0x0008001040010205 */ UButton* Button_Tribe;
  /* offset=0x0374 flags=0x0008001040010205 */ ULobby_BP_C* NewVar;
  /* offset=0x0378 flags=0x0008001040010205 */ UButton* Button_ActivityUI;
  /* offset=0x037c flags=0x0008001040010205 */ UGridPanel* GridPanel_frontieraward;
  /* offset=0x0380 flags=0x0008001040010205 */ UImage* Image_ShopIcon;
  /* offset=0x0384 flags=0x0008001040010205 */ UImage* Image_RankListIcon;
  /* offset=0x0388 flags=0x0008001040010205 */ UImage* Image_DepotIcon;
  /* offset=0x038c flags=0x0008001040010205 */ UTextBlock* TextBlock_RankTitle;
  /* offset=0x0390 flags=0x0008001040010205 */ UTextBlock* TextBlock_ShopTitle;
  /* offset=0x0394 flags=0x0008001040010205 */ UTextBlock* TextBlock_DepotTitle;
  /* offset=0x0398 flags=0x0000000000010005 */ struct FSlateColor TextColorG;
  /* offset=0x03b4 flags=0x0000000000010005 */ struct FSlateColor TextColorYellow;
  /* offset=0x03d0 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_QQ;
  /* offset=0x03d4 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_WX;
  /* offset=0x03d8 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_Tourist;
  /* offset=0x03dc flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_WxMoreBtnGroup;
  /* offset=0x03e0 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_QQMoreBtnGroup;
  /* offset=0x03e4 flags=0x0008001040010205 */ UButton* Btn_WxMoreBtn;
  /* offset=0x03e8 flags=0x0008001040010205 */ UButton* Btn_QQMoreBtn;
  /* offset=0x03ec flags=0x0008001040010205 */ UWidgetSwitcher* WidgetSwitcher_Platform;
  /* offset=0x03f0 flags=0x0008001040010205 */ UImage* Image_TeamIcon;
  /* offset=0x03f4 flags=0x0008001040010205 */ UButton* Button_Team;
  /* offset=0x03f8 flags=0x0008001040010205 */ UImage* Image_TeamNewTips;
  /* offset=0x03fc flags=0x0008001040010205 */ UTextBlock* TextBlockFreeFlowTips;
  /* offset=0x0400 flags=0x0008001040010205 */ UButton* Btn_WXLiuLiang;
  /* offset=0x0404 flags=0x0008001040010205 */ UButton* Btn_QQLiuLiang;
  /* offset=0x0408 flags=0x0008001040010205 */ UButton* Btn_Task;
  /* offset=0x040c flags=0x0008001040010a05 */ Abp_lobby_C* LuaBpLobby;
  /* offset=0x0410 flags=0x0008001040010205 */ UButton* Btn_Activity;
  /* offset=0x0414 flags=0x0008001040010205 */ UButton* Btn_Community;
  /* offset=0x0418 flags=0x0008001040010205 */ UButton* Btn_Season;
  /* offset=0x041c flags=0x0008001040010205 */ UImage* Image_ActivityNewTips;
  /* offset=0x0420 flags=0x0008001040010205 */ UImage* Image_CommunityNewTips;
  /* offset=0x0424 flags=0x0008001040010205 */ UImage* Image_TaskNewTips;
  /* offset=0x0428 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_QQStart;
  /* offset=0x042c flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_QQVip;
  /* offset=0x0430 flags=0x0008001040010205 */ UButton* BtnQQStart;
  /* offset=0x0434 flags=0x0008001040010205 */ UButton* BtnQQVip;
  /* offset=0x0438 flags=0x0008001040010205 */ UButton* BtnQQhuati;
  /* offset=0x043c flags=0x0008001040010205 */ UImage* Image_QQhuatiNew;
  /* offset=0x0440 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_WXstart;
  /* offset=0x0444 flags=0x0008001040010205 */ UButton* BtnWXStart;
  /* offset=0x0448 flags=0x0008001040010205 */ UButton* BtnWXhuati;
  /* offset=0x044c flags=0x0008001040010205 */ UImage* Image_WXhuatiNew;
  /* offset=0x0450 flags=0x0008001040010205 */ UButton* BtnQQlibao;
  /* offset=0x0454 flags=0x0008001040010205 */ UImage* Image_PlatIcon;
  /* offset=0x0458 flags=0x0008001040010205 */ UButton* BtnPlatIcon;
  /* offset=0x045c flags=0x0008001040010205 */ UButton* Button_OpenActivityPanel;
  /* offset=0x0460 flags=0x0008001040010205 */ UButton* Btn_SwitchActivityPanel;
  /* offset=0x0464 flags=0x0000000000010205 */ TArray<ULobby_Activity_BtnItem_C*> ActivityBtnList;
  /* offset=0x0470 flags=0x0008001040010205 */ UImage* Image_redPointQQMOre;
  /* offset=0x0474 flags=0x0008001040010205 */ UImage* Image_redPointQQXinyue;
  /* offset=0x0478 flags=0x0008001040010205 */ UImage* Image_redPointQQHuati;
  /* offset=0x047c flags=0x0008001040010205 */ UImage* Image_redPointWxMore;
  /* offset=0x0480 flags=0x0008001040010205 */ UImage* Image_redPointWxXinyue;
  /* offset=0x0484 flags=0x0008001040010205 */ UImage* Image_redPointWxHuati;
  /* offset=0x0488 flags=0x0008001040010205 */ UButton* Btn_Wxxinyue;
  /* offset=0x048c flags=0x0008001040010205 */ UButton* Btn_Qqxinyue;
  /* offset=0x0490 flags=0x0008001040010205 */ UImage* Image_QQmore;
  /* offset=0x0498 flags=0x0000000000010005 */ struct FSlateBrush Brush_More_light;
  /* offset=0x0500 flags=0x0000000000010005 */ struct FSlateBrush Brush_More_default;
  /* offset=0x0568 flags=0x0008001040010205 */ UImage* Image_WxMore;
  /* offset=0x056c flags=0x0008001040010205 */ UCanvasPanel* Canvas_OpenActivityPanel;
  /* offset=0x0570 flags=0x0008001040010205 */ UCanvasPanel* Canvas_CloseActivityPanel;
  /* offset=0x0574 flags=0x0008001040010205 */ UCustomScrollBox* Scrollbox_ActivityBtnList;
  /* offset=0x0578 flags=0x0008001040010205 */ UButton* Btn_QQCommunity;
  /* offset=0x057c flags=0x0008001040010205 */ UButton* Btn_WXCommunity;
  /* offset=0x0580 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQCommunity;
  /* offset=0x0584 flags=0x0008001040010205 */ UCanvasPanel* Canvas_WxCommunity;
  /* offset=0x0588 flags=0x0008001040010205 */ UCanvasPanel* Canvas_Wxyouxiquan;
  /* offset=0x058c flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQbuluo;
  /* offset=0x0590 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQzhibo;
  /* offset=0x0594 flags=0x0008001040010205 */ UCanvasPanel* Canvas_WXzhibo;
  /* offset=0x0598 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQdianjing;
  /* offset=0x059c flags=0x0008001040010205 */ UCanvasPanel* Canvas_WXdianjing;
  /* offset=0x05a0 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQXinyue;
  /* offset=0x05a4 flags=0x0008001040010205 */ UCanvasPanel* Canvas_WXXinyue;
  /* offset=0x05a8 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQliuliang;
  /* offset=0x05ac flags=0x0008001040010205 */ UCanvasPanel* Canvas_WXliuliang;
  /* offset=0x05b0 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQhuati;
  /* offset=0x05b4 flags=0x0008001040010205 */ UCanvasPanel* Canvas_WXhuati;
  /* offset=0x05b8 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQlibao;
  /* offset=0x05bc flags=0x0008001040010205 */ UCanvasPanel* Canvas_ActivityPanel;
  /* offset=0x05c0 flags=0x0008001040010205 */ UCanvasPanel* Canvas_Touristzhibo;
  /* offset=0x05c4 flags=0x0008001040010205 */ UCanvasPanel* Canvas_QQmore;
  /* offset=0x05c8 flags=0x0008001040010205 */ UCanvasPanel* Canvas_Wxmore;
  /* offset=0x05cc flags=0x0000001040010205 */ bool IsQQWxStartControl;
  /* offset=0x05cd flags=0x0000001040010205 */ bool isQQVipControl;
  /* offset=0x05d0 flags=0x0008001040010205 */ UButton* Btn_QQDianjing;
  /* offset=0x05d4 flags=0x0008001040010205 */ UButton* Btn_WXDianjing;
  /* offset=0x05d8 flags=0x0008001040010205 */ UCanvasPanel* CanvasPanel_ActivityPanelFather;
  /* offset=0x05dc flags=0x0008001040010205 */ UButton* Btn_reportBug;
  /* offset=0x05e0 flags=0x0008001040010205 */ UOverlay* Overlay_wxstartfather;
  /* offset=0x05e4 flags=0x0008001040010205 */ UOverlay* Overlay_wxxinyuetequanfather;
  /* offset=0x05e8 flags=0x0008001040010205 */ UOverlay* Overlay_wxzhibofather;
  /* offset=0x05ec flags=0x0008001040010205 */ UOverlay* Overlay_wxliuliangbaofather;
  /* offset=0x05f0 flags=0x0008001040010205 */ UOverlay* Overlay_wxhuatifather;
  /* offset=0x05f4 flags=0x0008001040010205 */ UOverlay* Overlay_wxcommunityfather;
  /* offset=0x05f8 flags=0x0008001040010205 */ UOverlay* Overlay_wxyouxiquanfather;
  /* offset=0x05fc flags=0x0008001040010205 */ UOverlay* Overlay_wxdianjingfahter;
  /* offset=0x0600 flags=0x0008001040010205 */ UOverlay* Overlay_wxmorefather;
  /* offset=0x0604 flags=0x0008001040010205 */ UOverlay* Overlay_qqbuluofather;
  /* offset=0x0608 flags=0x0008001040010205 */ UOverlay* Overlay_qqxinyuetequanfahter;
  /* offset=0x060c flags=0x0008001040010205 */ UOverlay* Overlay_qqzhibofather;
  /* offset=0x0610 flags=0x0008001040010205 */ UOverlay* Overlay_QQliuliangbaofather;
  /* offset=0x0614 flags=0x0008001040010205 */ UOverlay* Overlay_qqhuatifather;
  /* offset=0x0618 flags=0x0008001040010205 */ UOverlay* Overlay_qqcommunityfather;
  /* offset=0x061c flags=0x0008001040010205 */ UOverlay* Overlay_QQlibaofather;
  /* offset=0x0620 flags=0x0008001040010205 */ UOverlay* Overlay_qqvipfather;
  /* offset=0x0624 flags=0x0008001040010205 */ UOverlay* Overlay_qqstartfather;
  /* offset=0x0628 flags=0x0008001040010205 */ UOverlay* Overlay_qqdianjingfather;
  /* offset=0x062c flags=0x0008001040010205 */ UOverlay* Overlay_qqmorefather;
  /* offset=0x0630 flags=0x0008001040010205 */ UButton* Btn_Task1;
  /* offset=0x0634 flags=0x0008001040010205 */ UImage* Image_TaskNewTips1;

  void CanOpenUrl(bool canOpen, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);
  void CheckCollectEquipRedPoint(bool ret, bool retVal, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, struct FDateTime CallFunc_Now_ReturnValue, int32 CallFunc_BreakDateTime_Year, int32 CallFunc_BreakDateTime_Month, int32 CallFunc_BreakDateTime_Day, int32 CallFunc_BreakDateTime_Hour, int32 CallFunc_BreakDateTime_Minute, int32 CallFunc_BreakDateTime_Second, int32 CallFunc_BreakDateTime_Millisecond, struct FDateTime CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FDateTime CallFunc_MakeDateTime_ReturnValue, bool CallFunc_Less_DateTimeDateTime_ReturnValue);
  void CheckHuatiRedPoint(bool ret, bool retVal, struct FDateTime CallFunc_Now_ReturnValue, int32 CallFunc_BreakDateTime_Year, int32 CallFunc_BreakDateTime_Month, int32 CallFunc_BreakDateTime_Day, int32 CallFunc_BreakDateTime_Hour, int32 CallFunc_BreakDateTime_Minute, int32 CallFunc_BreakDateTime_Second, int32 CallFunc_BreakDateTime_Millisecond, struct FDateTime CallFunc_MakeDateTime_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, struct FDateTime CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_DateTimeDateTime_ReturnValue);
  void ClickActivitiyBtn();
  void ClickQQmoreBtn();
  void ClickShareTips();
  void ClickTeamBtn();
  void ClickWxmoreBtn();
  void ClickXinyueBtn();
  void CloseMenuHandle(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);
  void CloseOtherMenu(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);
  void ConfigClick();
  void Construct();
  void CreateRings(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 ___int_Loop_Counter_Variable3, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Array_Index_Variable3, int32 ___int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue4, UParticleSystemComponent* CallFunc_Array_Get_Item, UParticleSystemComponent* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int32 ___int_Variable2, struct FVector CallFunc_TransformLocation_ReturnValue, UParticleSystemComponent* CallFunc_Array_Get_Item3, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue5, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, struct FBP_STRUCT_SpawnPlayerData CallFunc_Array_Get_Item4, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item5, int32 CallFunc_Array_Length_ReturnValue4, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue3);
  void DelPlayer(int32 transformindex, int32 delIndex, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, struct FBP_STRUCT_TransformUseList K2Node_MakeStruct_BP_STRUCT_TransformUseList, struct FBP_STRUCT_SpawnPlayerData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item2, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void DepotSystemClick();
  void ExecuteUbergraph_Lobby_Logic_BP(int32 EntryPoint, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue5, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby2, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue3, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby3, bool K2Node_DynamicCast_bSuccess3, int32 CallFunc_PostEventAtLocation_ReturnValue6, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue4, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby4, bool K2Node_DynamicCast_bSuccess4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue5, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby5, bool K2Node_DynamicCast_bSuccess5, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue6, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby6, bool K2Node_DynamicCast_bSuccess6, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue7, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue8, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby7, bool K2Node_DynamicCast_bSuccess7, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby8, bool K2Node_DynamicCast_bSuccess8, int32 CallFunc_PostEventAtLocation_ReturnValue7, int32 CallFunc_PostEventAtLocation_ReturnValue8, int32 CallFunc_PostEventAtLocation_ReturnValue9, int32 CallFunc_PostEventAtLocation_ReturnValue10, bool CallFunc_CanOpenUrl_canOpen, bool CallFunc_CanOpenUrl_canOpen2, bool CallFunc_CanOpenUrl_canOpen3, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue9, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby9, bool K2Node_DynamicCast_bSuccess9, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue10, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue11, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby10, bool K2Node_DynamicCast_bSuccess10, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby11, bool K2Node_DynamicCast_bSuccess11, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue12, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby12, bool K2Node_DynamicCast_bSuccess12, Abp_global_C* CallFunc_GetGlobalData_globalObj, int32 CallFunc_PostEventAtLocation_ReturnValue11, int32 CallFunc_PostEventAtLocation_ReturnValue12, int32 CallFunc_PostEventAtLocation_ReturnValue13, Abp_global_C* CallFunc_GetGlobalData_globalObj2, int32 CallFunc_PostEventAtLocation_ReturnValue14, Abp_global_C* CallFunc_GetGlobalData_globalObj3, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue13, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby13, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_CanOpenUrl_canOpen4, bool CallFunc_CanOpenUrl_canOpen5, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue14, bool CallFunc_CanOpenUrl_canOpen6, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby14, bool K2Node_DynamicCast_bSuccess14, int32 CallFunc_PostEventAtLocation_ReturnValue15, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue15, int32 CallFunc_PostEventAtLocation_ReturnValue16, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby15, bool K2Node_DynamicCast_bSuccess15, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue16, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby16, bool K2Node_DynamicCast_bSuccess16, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue17, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess17, int32 CallFunc_LocalRoleInfoSaveData_RoleInfoChooseZoneId, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess18, int32 CallFunc_PostEventAtLocation_ReturnValue18, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue19, Abp_lobby_reportbug_C* K2Node_DynamicCast_AsBp_Lobby_Reportbug, bool K2Node_DynamicCast_bSuccess19, int32 CallFunc_LoadRankInfoSaveData_RoleInfoChooseZoneId);
  void FriendSystemClick();
  void GMClick();
  void GameGroupClick();
  void GetAwardClick();
  void GetEmptyTransform(struct FTransform EmptyTransform, int32 TransIndex, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_TransformUseList CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FTransform CallFunc_Array_Get_Item2);
  void GetExpProgress(int32 Level, int32 nowexp, float Progress, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, struct FBP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue);
  void GetFriendProfile(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);
  void HavePlatformRedpointsActive(bool Show, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void HelpClick();
  void HideActivityBtnList();
  void HideActivityRedPoint();
  void HideGmButton();
  void HidePlayers(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, struct FTransform CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FVector CallFunc_BreakTransform_Location, struct FRotator CallFunc_BreakTransform_Rotation, struct FVector CallFunc_BreakTransform_Scale, bool CallFunc_Less_IntInt_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, struct FHitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult);
  void InitActivityList(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, UPanelSlot* CallFunc_AddChild_ReturnValue, struct FBP_STRUCT_ActivityBtnDisplay CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, ULobby_Activity_BtnItem_C* K2Node_DynamicCast_AsLobby_Activity_Btn_Item, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Add_ReturnValue);
  void InitPlayerData(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_GetExpProgress_progress, FText CallFunc_Conv_IntToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue);
  void InitXinyueRedPoint(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, struct FDateTime CallFunc_Now_ReturnValue, int32 CallFunc_BreakDateTime_Year, int32 CallFunc_BreakDateTime_Month, int32 CallFunc_BreakDateTime_Day, int32 CallFunc_BreakDateTime_Hour, int32 CallFunc_BreakDateTime_Minute, int32 CallFunc_BreakDateTime_Second, int32 CallFunc_BreakDateTime_Millisecond, bool CallFunc_Not_PreBool_ReturnValue, struct FDateTime CallFunc_MakeDateTime_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, struct FDateTime CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_DateTimeDateTime_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void InitialTranform(bool initFalse, struct FTransform CallFunc_MakeTransform_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue2, struct FTransform CallFunc_MakeTransform_ReturnValue3, int32 ___int_Variable, struct FBP_STRUCT_TransformUseList K2Node_MakeStruct_BP_STRUCT_TransformUseList, bool CallFunc_LessEqual_IntInt_ReturnValue, struct FBP_STRUCT_TransformUseList K2Node_SetFieldsInStruct_StructOut, int32 CallFunc_Add_IntInt_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5);
  void LoadRankInfoSaveData(int32 RoleInfoChooseZoneId, ULobbyRankSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, USaveGame* CallFunc_LoadData_ReturnValue, ULobbyRankSaveGame_C* K2Node_DynamicCast_AsLobby_Rank_Save_Game, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Conv_StringToInt_ReturnValue);
  void LocalRoleInfoSaveData(int32 RoleInfoChooseZoneId, ULobbyRoleInfoSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, USaveGame* CallFunc_LoadData_ReturnValue, ULobbyRoleInfoSaveGame_C* K2Node_DynamicCast_AsLobby_Role_Info_Save_Game, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Conv_StringToInt_ReturnValue);
  void MailSystemClick();
  void MenuBtnStatus(int32 BtnIdx, bool K2Node_SwitchInteger_CmpSuccess);
  void On7DayBtnClick();
  void On8DayBtnClick();
  void OnActiviyBtnClick();
  void OnClickBtnBugReport();
  void OnClickPlayBtn(APlayerController* CallFunc_GetPlayerController_ReturnValue, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void OnClickSwitchActivityPanel();
  void OnClickWxDianjing();
  void OnClickqqDianjing();
  void OnCollectEquipmentBtnClick();
  void OnExcitingFeastBtnClick();
  void OnFirstChargeBtnClick();
  void OnHuatiBtnClick();
  void OnOpenCommunity();
  void OnOpenFreeDataUrl();
  void OnPlatIconClick();
  void OnQQStartBtnClick();
  void OnQQVipBtnClick();
  void OnQQlibaoBtnClick();
  void OnSeasonBtnClick();
  void OnShareAwardBtnClick();
  void OnTaskBtnClick();
  void OnWXStartBtnClick();
  void OpenFrontierAward(bool CallFunc_CanOpenUrl_canOpen, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void PlayFadeIn(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_fade_C* K2Node_DynamicCast_AsBp_Fade, bool K2Node_DynamicCast_bSuccess3);
  void PutOnAvatar(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, struct FBP_STRUCT_SpawnPlayerData CallFunc_Array_Get_Item, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item2, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_PutOnEquipmentByResID_ReturnValue);
  void PutoffAvatar(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, struct FBP_STRUCT_SpawnPlayerData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item2, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_PutOffEquimentByResID_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void RankSystemClick();
  void RefreshCollectEquipOpenTime(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, struct FDateTime CallFunc_Now_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void RefreshHuatiOpenTime(struct FDateTime CallFunc_Now_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void RefreshTimer(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue2, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue3);
  void RefreshXinyueOpenTime(struct FDateTime CallFunc_Now_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void ReleaseData(int32 ___int_Array_Index_Variable, bool CallFunc_K2_TimerExistsHandle_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue2, bool CallFunc_K2_TimerExistsHandle_ReturnValue3, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void ResetBtnSprites();
  void ResetNetworkSprites();
  void RoleInfoClick();
  void SetActivityEnterStatus(int32 WXPlatformMoreHideNum, int32 QQPlatformMoreHideNum, int32 ___int_Array_Index_Variable, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, Abp_global_C* CallFunc_GetGlobalData_globalObj, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue2, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, int32 CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void SetNetworkSprites(int32 status, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_HasActiveWiFiConnection_ReturnValue);
  void SetPlatIcon(FString icon_name, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, UObject* CallFunc_UIGetResWithPath_ReturnValue, UPaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);
  void SetSpriteVisibility(UImage* imageObj, bool Show);
  void SetTribeandGroupStatus(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess3, bool K2Node_SwitchInteger_CmpSuccess);
  void SetUIComponets(FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate7, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate8, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate9, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate10, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate11, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate12, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate13, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate14, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate15, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate16, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate17, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate18, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate19, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate20, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate21, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate22, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate23, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate24, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate25, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate26, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate27, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate28, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate29, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate30, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate31, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate32, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate33, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate34, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate35, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate36, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate37);
  void ShopClick();
  void ShowActivityBtnList();
  void ShowActivityRedPoint();
  void ShowGmButton();
  void ShowPlayers(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, struct FTransform CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FVector CallFunc_BreakTransform_Location, struct FRotator CallFunc_BreakTransform_Rotation, struct FVector CallFunc_BreakTransform_Scale, bool CallFunc_Less_IntInt_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FTransform CallFunc_MakeTransform_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, ABP_PlayerLobbyPawn_C* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, struct FHitResult CallFunc_K2_AddActorWorldOffset_SweepHitResult);
  void SpawnPlayer(int32 ___int_Array_Index_Variable, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue3, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby2, bool K2Node_DynamicCast_bSuccess2, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby3, bool K2Node_DynamicCast_bSuccess3, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Loop_Counter_Variable, struct FTransform CallFunc_GetEmptyTransform_EmptyTransform, int32 CallFunc_GetEmptyTransform_TransIndex, struct FBP_STRUCT_SpawnPlayerData K2Node_MakeStruct_BP_STRUCT_SpawnPlayerData, struct FBP_STRUCT_TransformUseList K2Node_MakeStruct_BP_STRUCT_TransformUseList, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ABP_PlayerLobbyPawn_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UCharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_PutOnEquipmentByResID_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2);
  void SwitchCamera_CloseMenu(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void SwitchCamera_OpenMenu(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void Transitions_Enter();
  void Transitions_Out();
  void TribeClick();
  void UIHide();
  void UIShow(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void UIShowFromAvatarReset(UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UFrontendUtils* CallFunc_GetUtils_ReturnValue);
  void UpdateActivityListRedpoints(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ULobby_Activity_BtnItem_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateBattery(int32 battery, int32 CallFunc_GetBatteryLevel_ReturnValue, struct FLinearColor CallFunc_MakeColor_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, struct FLinearColor CallFunc_MakeColor_ReturnValue2, struct FLinearColor CallFunc_MakeColor_ReturnValue3);
  void UpdateCollectEquipRedPoint(bool CallFunc_CheckCollectEquipRedPoint_ret);
  void UpdateFreeDataState(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess);
  void UpdateFriendList(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UpdateHelpshiftUnread(ALuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, Abp_setting_C* K2Node_DynamicCast_AsBp_Setting, bool K2Node_DynamicCast_bSuccess);
  void UpdateHuatiRedPoint(bool CallFunc_CheckHuatiRedPoint_ret);
  void UpdateNetworkStatus(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void UpdateNormalMenuRedpoints(bool K2Node_SwitchInteger_CmpSuccess);
  void UpdatePlatformMoreRedpoint(bool CallFunc_HavePlatformRedpointsActive_show);
  void UpdatePlatformRedpoints(bool K2Node_SwitchInteger_CmpSuccess);
  void UpdatePlatformRight(Abp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
  void UpdateRedPointStatus(bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2);
  void UpdateSystemMessageCount(FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Greater_IntInt_ReturnValue);
  void WorldViewClick();
};

class ULobby_PlayerHeadNameItemLogic_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_PlayerHeadNameItem_BP_C* Lobby_PlayerHeadNameItem_BP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_teamup_C* MyBPTeamUp;
  /* offset=0x023c flags=0x0008001040010205 */ ULobby_TeamModeLogic_BP_C* Parent;
  /* offset=0x0240 flags=0x0008000000010005 */ struct FBP_STRUCT_TeamUpMenuInfo MenuInfo;
  /* offset=0x0278 flags=0x0000001040010205 */ bool menuVisible;
  /* offset=0x0280 flags=0x0000001000010005 */ struct FTimerHandle quickMsgHandle;
  /* offset=0x0288 flags=0x0000000000010005 */ struct FSlateColor off_line;
  /* offset=0x02a4 flags=0x0000000000010005 */ struct FSlateColor In_game;

  void BindClickEvent(FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4);
  void CheckRight(bool hasRight);
  void ClearQuickMsg();
  void ClickAddFriend();
  void ClickButtonInfo(bool LastVisible, bool CallFunc_Not_PreBool_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, enum ESlateVisibility CallFunc_BoolToVisible_visibility2);
  void ClickButtonLeaveTeam();
  void ClickChangeLeader(bool CallFunc_CheckRight_hasRight);
  void ClickKick(bool CallFunc_CheckRight_hasRight);
  void ClickPlayerInfo();
  void Construct();
  void DoShowMenuVisibility(bool visible, enum ESlateVisibility CallFunc_BoolToVisible_visibility);
  void ExecuteUbergraph_Lobby_PlayerHeadNameItemLogic_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2);
  void IsHost(FString PlayerId, bool isHost1, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void SetButtonInfo(bool isFriend, bool CallFunc_Not_PreBool_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility, enum ESlateVisibility CallFunc_BoolToVisible_visibility2);
  void SetOnlineStatus(bool isOnline, int32 GameStart, FString carteamName, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility);
  void SetPlayerButton(FString PlayerId, int32 playerStatus, bool Online, int32 GameStart, FString carteamName, bool CallFunc_IsHost_isHost1, bool CallFunc_IsSelf_isSelf, enum ESlateVisibility CallFunc_BoolToVisible_visibility, enum ESlateVisibility CallFunc_BoolToVisible_visibility2, bool CallFunc_Not_PreBool_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility3);
  void SetPlayerName(FString PlayerName, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetReadyStatus(int32 playerStatus, bool IsHost, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility);
  void SetVoiceStaus(bool isOpenVoice, bool isSpeaking);
  void ShowMenuInfo(ULobby_TeamModeLogic_BP_C* Parent, struct FBP_STRUCT_TeamUpMenuInfo MenuInfo, Abp_teamup_C* bpTeamUp, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisible_visibility);
  void UpdateVoiceStatus(struct FBP_STRUCT_TeamUpMenuInfo MenuInfo);
  void isSelf(FString PlayerId, bool isSelf, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void showQuickMsg(FString content, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
};

class ULobby_PlayerHeadNameItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_Info;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_LeaveTeam;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* GridPanel_PlayerInfoMenu;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_bg;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_PlayerReady;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_PlayerStatus;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_VoiceIcon;
  /* offset=0x0250 flags=0x000a0010c008020c */ ULobbyPlayerInfoMenuItem_BP_C* LobbyPlayerInfoMenuItem_BP;
  /* offset=0x0254 flags=0x000a0010c008020c */ ULobbyPlayerInfoMenuItem_BP_C* LobbyPlayerInfoMenuItem_BP;
  /* offset=0x0258 flags=0x000a0010c008020c */ ULobbyPlayerInfoMenuItem_BP_C* LobbyPlayerInfoMenuItem_BP_C;
  /* offset=0x025c flags=0x000a0010c008020c */ ULobbyPlayerInfoMenuItem_BP_C* LobbyPlayerInfoMenuItem_BP_C;
  /* offset=0x0260 flags=0x000a0010c008020c */ UCanvasPanel* other_msg_root;
  /* offset=0x0264 flags=0x000a0010c008020c */ UGridPanel* quick_msg_root;
  /* offset=0x0268 flags=0x000a0010c008020c */ UUTRichTextBlock* quick_msg_txt;
  /* offset=0x026c flags=0x000a0010c008020c */ UGridPanel* RootPanel;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Offline;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName;
  /* offset=0x0278 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_VoiceState;

  void Construct();
  void ExecuteUbergraph_Lobby_PlayerHeadNameItem_BP(int32 EntryPoint);
};

class ULobby_ResetRole_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_Reset;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* FX_LineDown;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* FX_LineUP;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_card;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_gold;
  /* offset=0x0248 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemCount;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Money;
  /* offset=0x0254 flags=0x0008001040010a05 */ Abp_createrole_C* bp_createrole;

  void BndEvt__Button_Reset_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_Lobby_ResetRole_UIBP(int32 EntryPoint, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void Show Effects(bool Is show, enum ESlateVisibility Type);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIHideResetAvatar();
  void UIShowResetAvatar(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UIShowResetAvatarDelay(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_createrole_C* K2Node_DynamicCast_AsBp_Createrole, bool K2Node_DynamicCast_bSuccess);
  void UpdateCost(bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
  void UpdateOneAnchorPosition(APlayerController* CallFunc_GetPlayerController_ReturnValue, struct FTransform CallFunc_GetTransform_ReturnValue, struct FVector CallFunc_BreakTransform_Location, struct FRotator CallFunc_BreakTransform_Rotation, struct FVector CallFunc_BreakTransform_Scale, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, struct FWidgetTransform K2Node_MakeStruct_WidgetTransform);
};

class ULobby_RoleColorItem_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_item;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_ItemColorIcon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_NormalStateBox;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image_Selected;
  /* offset=0x01c4 flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01c8 flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01cc flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01d0 flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01d4 flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01d8 flags=0x0008001040010205 */ UTexture2D* HairColor;
  /* offset=0x01dc flags=0x0008001040010205 */ int32 rolehaircolor;
  /* offset=0x01e0 flags=0x0008001040010a05 */ Abp_createrole_C* bp_createrole;

  void BndEvt__Button_Item_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_Lobby_RoleColorItem_UIBP(int32 EntryPoint, bool K2Node_SwitchInteger_CmpSuccess);
  void RefreshUI(int32 SelectColor, bool K2Node_SwitchInteger_CmpSuccess);
  void initRoleHairColor(int32 HairColor, Abp_createrole_C* bp_createrole);
  void refreshSelect(int32 SelectColor, bool CallFunc_EqualEqual_IntInt_ReturnValue);
};

class ULobby_RoleTypeItem_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_ItemIcon;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_NormalStateBox;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image_Selected;
  /* offset=0x01c4 flags=0x0008001040010205 */ UTexture2D* Face1;
  /* offset=0x01c8 flags=0x0008001040010205 */ UTexture2D* Face1;
  /* offset=0x01cc flags=0x0008001040010205 */ UTexture2D* Face2;
  /* offset=0x01d0 flags=0x0008001040010205 */ UTexture2D* Face2;
  /* offset=0x01d4 flags=0x0008001040010205 */ UTexture2D* Face3;
  /* offset=0x01d8 flags=0x0008001040010205 */ UTexture2D* Face3;
  /* offset=0x01dc flags=0x0008001040010205 */ UTexture2D* Face4;
  /* offset=0x01e0 flags=0x0008001040010205 */ UTexture2D* Face4;
  /* offset=0x01e4 flags=0x0008001040010205 */ UTexture2D* Face5;
  /* offset=0x01e8 flags=0x0008001040010205 */ UTexture2D* Face5;
  /* offset=0x01ec flags=0x0008001040010205 */ UTexture2D* Face6;
  /* offset=0x01f0 flags=0x0008001040010205 */ UTexture2D* Face6;
  /* offset=0x01f4 flags=0x0008001040010205 */ int32 rolesex;
  /* offset=0x01f8 flags=0x0008001040010205 */ int32 rolerace;
  /* offset=0x01fc flags=0x0008001040010205 */ int32 rolehair;
  /* offset=0x0200 flags=0x0008001040010a05 */ Abp_createrole_C* bp_createrole;
  /* offset=0x0204 flags=0x0008001040010205 */ UTexture2D* Hair_1;
  /* offset=0x0208 flags=0x0008001040010205 */ UTexture2D* Hair_2;
  /* offset=0x020c flags=0x0008001040010205 */ UTexture2D* Hair_3;
  /* offset=0x0210 flags=0x0008001040010205 */ UTexture2D* Hair_4;
  /* offset=0x0214 flags=0x0008001040010205 */ UTexture2D* Hair_5;
  /* offset=0x0218 flags=0x0008001040010205 */ UTexture2D* Hair_6;
  /* offset=0x021c flags=0x0008001040010205 */ UTexture2D* Hair_7;
  /* offset=0x0220 flags=0x0008001040010205 */ UTexture2D* Hair_8;
  /* offset=0x0224 flags=0x0008001040010205 */ UTexture2D* Hair_9;
  /* offset=0x0228 flags=0x0008001040010205 */ UTexture2D* Hair_1;
  /* offset=0x022c flags=0x0008001040010205 */ UTexture2D* Hair_2;
  /* offset=0x0230 flags=0x0008001040010205 */ UTexture2D* Hair_3;
  /* offset=0x0234 flags=0x0008001040010205 */ UTexture2D* Hair_4;
  /* offset=0x0238 flags=0x0008001040010205 */ UTexture2D* Hair_5;
  /* offset=0x023c flags=0x0008001040010205 */ UTexture2D* Hair_6;
  /* offset=0x0240 flags=0x0008001040010205 */ UTexture2D* Hair_7;
  /* offset=0x0244 flags=0x0008001040010205 */ UTexture2D* Hair_8;
  /* offset=0x0248 flags=0x0008001040010205 */ UTexture2D* Hair_9;
  /* offset=0x024c flags=0x0008001040010205 */ int32 IconType;

  void BndEvt__Button_ItemIcon_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_Lobby_RoleTypeItem_UIBP(int32 EntryPoint, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool K2Node_SwitchInteger3_CmpSuccess);
  void InitRace(int32 sex, int32 race, Abp_createrole_C* bp_createrole);
  void initHair(int32 sex, int32 hair, Abp_createrole_C* bp_createrole);
  void refreshHairSelectUI(int32 selectHair, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void refreshHairUI(int32 selectHair, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void refreshRaceSelectUI(int32 selectrace, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void refreshRaceUI(int32 selectrace, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);
};

class ULobby_TaskTips_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UTextBlock* ContainText;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UTextBlock* DetailText;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Icon;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UCanvasPanel* Panel;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UTextBlock* TitleText;
};

class ULobby_TeamModeLogic_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_TeamModeUI_BP_C* Lobby_TeamModeUI_BP;
  /* offset=0x0238 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x023c flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x0240 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x0244 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x0248 flags=0x000a0010c008020c */ UGridPanel* Root;
  /* offset=0x024c flags=0x0008001040010a05 */ Abp_teamup_C* MyBPTeamUp;
  /* offset=0x0250 flags=0x0008001040010205 */ ULobby_PlayerHeadNameItemLogic_BP_C* TeamUpMenu1;
  /* offset=0x0254 flags=0x0008001040010205 */ ULobby_PlayerHeadNameItemLogic_BP_C* TeamUpMenu2;
  /* offset=0x0258 flags=0x0008001040010205 */ ULobby_PlayerHeadNameItemLogic_BP_C* TeamUpMenu3;
  /* offset=0x025c flags=0x0008001040010205 */ ULobby_PlayerHeadNameItemLogic_BP_C* TeamUpMenu4;
  /* offset=0x0260 flags=0x0000001040010205 */ bool HasMenu;
  /* offset=0x0264 flags=0x0008001040010005 */ struct FVector AnchorWordPosition0;
  /* offset=0x0270 flags=0x0008001040010005 */ struct FVector AnchorWordPosition1;
  /* offset=0x027c flags=0x0008001040010005 */ struct FVector AnchorWordPosition2;
  /* offset=0x0288 flags=0x0008001040010005 */ struct FVector AnchorWordPosition3;
  /* offset=0x0294 flags=0x0008001040010005 */ struct FVector AnchorOffset0;
  /* offset=0x02a0 flags=0x0008001040010005 */ struct FVector AnchorOffset1;
  /* offset=0x02ac flags=0x0008001040010005 */ struct FVector AnchorOffset2;
  /* offset=0x02b8 flags=0x0008001040010005 */ struct FVector AnchorOffset3;
  /* offset=0x02c4 flags=0x0008001040010005 */ struct FVector AnchorBubleOffset0;
  /* offset=0x02d0 flags=0x0008001040010005 */ struct FVector AnchorBubleOffset1;
  /* offset=0x02dc flags=0x0008001040010005 */ struct FVector AnchorBubleOffset2;
  /* offset=0x02e8 flags=0x0008001040010005 */ struct FVector AnchorBubleOffset3;
  /* offset=0x02f4 flags=0x0000001040010205 */ bool IsGuideShow;
  /* offset=0x02f8 flags=0x0008001040010205 */ float UDPPingStartTime;
  /* offset=0x02fc flags=0x0008001040010205 */ float UDPPingIntervalTime;
  /* offset=0x0300 flags=0x0008001040010205 */ float UDPPingTimeoutSecond;
  /* offset=0x0304 flags=0x0008001040010205 */ float RefreshUIIntervalTime;
  /* offset=0x0308 flags=0x0008001040010205 */ int32 myChoosedZoneId;
  /* offset=0x030c flags=0x0008000000010205 */ FString ChoosingZoneIP;
  /* offset=0x0318 flags=0x0008000000010205 */ FString ChoosingZonePort;
  /* offset=0x0324 flags=0x0000001040010205 */ bool isScrollviewInited;
  /* offset=0x0325 flags=0x0000001040010205 */ bool HasSetZoneAtLestOnce;
  /* offset=0x0328 flags=0x0008000000010205 */ FString MinDelayOfAllZoneIP;
  /* offset=0x0334 flags=0x0000001040010205 */ bool IsLocalZoneIdVaild;

  void AppendZoneStringText(int32 ZoneID, FString ModeText, FString RetStr, FString CallFunc_GetLocalizationString_ReturnValue);
  void AutoChooseDefaultZone(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int32 CallFunc_GetMinDealyAddress_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);
  void AutoSelectSolo();
  void BPEventQueryMatchZoneList();
  void BoolToVisibility(bool isShow, enum ESlateVisibility Visibility);
  void CanZoneListVisible(bool canshowZoneList, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void CheckRight(bool hasRight);
  void CheckZoneItemSeleced(bool hasAtLestOneItemSelected, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, ULobbyZoneListItem_BP_C* K2Node_DynamicCast_AsLobby_Zone_List_Item_BP, bool K2Node_DynamicCast_bSuccess);
  void ChooseZoneOnLogin(int32 ___int_Array_Index_Variable, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 ___int_Loop_Counter_Variable, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LoadLocalGameData_bSccuss, int32 CallFunc_LoadLocalGameData_LocalSavedZoneId, struct FBP_STRUCT_ChooseZoneInfo CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ClickAutoMatch(bool CallFunc_IsChecked_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckRight_hasRight, int32 CallFunc_Conv_BoolToInt_ReturnValue);
  void ClickCreateRoomBtn();
  void ClickDoubleMenu();
  void ClickExpandButton(bool CallFunc_IsModelListShowing_showing, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckRight_hasRight);
  void ClickQuadMenu();
  void ClickSelectMode();
  void ClickSelectServerButton(bool CallFunc_isZoneListVisible_visible, bool CallFunc_CheckRight_hasRight);
  void ClickSoloMenu();
  void ClickTeamType(int32 Type, int32 CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void ClickTrainingBtn();
  void Construct();
  void CreateFourHeadMenu(ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_CreateOneHeadMenu_menu, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_CreateOneHeadMenu_menu2, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_CreateOneHeadMenu_menu3, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_CreateOneHeadMenu_menu4);
  void CreateOneHeadMenu(USizeBox* anchor, ULobby_PlayerHeadNameItemLogic_BP_C* menu, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, ULobby_PlayerHeadNameItemLogic_BP_C* K2Node_DynamicCast_AsLobby_Player_Head_Name_Item_Logic_BP, bool K2Node_DynamicCast_bSuccess, UPanelSlot* CallFunc_AddChild_ReturnValue);
  void CreateOrUpdateFourHeadMenu();
  void DX_MicroTip(int32 times);
  void DoUpdateFourAnchorPosition();
  void ExecuteUbergraph_Lobby_TeamModeLogic_BP(int32 EntryPoint, FOnWidgetAnimationPlaybackStatusChanged K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate7, FOnCheckBoxComponentStateChanged K2Node_CreateDelegate_OutputDelegate8, Abp_global_C* CallFunc_GetGlobalData_globalObj, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void GetAnchorByPosition(int32 Position, UPanelWidget* menu, bool K2Node_SwitchInteger_CmpSuccess);
  void GetMenuByPosition(int32 Position, ULobby_PlayerHeadNameItemLogic_BP_C* menu, bool K2Node_SwitchInteger_CmpSuccess);
  void GetPosMatchMobile(struct FVector offsetPos, struct FVector resultPos, struct FVector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue);
  void HandleCameraSwitchCountDown(bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue);
  void HideAll();
  void HideAllHeadMenu();
  void HideAllMenu();
  void HideIfLessOneZone(bool CallFunc_CanZoneListVisible_canshowZoneList);
  void InitForChooseZoneIntl(USaveGame* CallFunc_CreateSaveGameObject_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate);
  void InitModeItemNameList(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3);
  void InitMyBPTeamUp(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_C* K2Node_DynamicCast_AsBp_Teamup, bool K2Node_DynamicCast_bSuccess);
  void InitScrollView(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, int32 CallFunc_Add_IntInt_ReturnValue, ULobbyZoneListItem_BP_C* K2Node_DynamicCast_AsLobby_Zone_List_Item_BP, bool K2Node_DynamicCast_bSuccess, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_ChooseZoneInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_ZoneConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizationString_ReturnValue);
  void InitUDPPingCollector(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);
  void IsModelListShowing(bool showing, int32 CallFunc_GetActiveWidgetIndex_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);
  void LoadLocalGameData(bool bSccuss, int32 LocalSavedZoneId, bool CallFunc_Greater_IntInt_ReturnValue, ULobbySaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, USaveGame* CallFunc_LoadData_ReturnValue, ULobbySaveGame_C* K2Node_DynamicCast_AsLobby_Save_Game, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Conv_StringToInt_ReturnValue);
  void NotifyUDPPingChoosingZone(int32 ChooingZoneids, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, struct FBP_STRUCT_ChooseZoneInfo CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void OnAutoMatchStateChange(bool isCheck);
  void OnCameraSwitch(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void OnChoosingOneZone(int32 choosingZoneIds, FString CallFunc_Conv_IntToString_ReturnValue);
  void OnDomicroFinish();
  void OnLanguageChanged(int32 ___int_Variable, FString CallFunc_GetLocalizationStringWithID_ReturnValue, FString CallFunc_AppendZoneStringText_RetStr, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, ULobbyZoneListItem_BP_C* K2Node_DynamicCast_AsLobby_Zone_List_Item_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);
  void OnServerChooseZoneItem(bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue);
  void OnShowqueryZoneList(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void OpenExpandPanel(bool CallFunc_CanZoneListVisible_canshowZoneList, bool CallFunc_isZoneListVisible_visible);
  void RefreshChoosingZoneUI(FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_ZoneConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizationString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void RefreshGameModeName(FString CallFunc_GetLocalizationStringWithID_ReturnValue, FString CallFunc_AppendZoneStringText_RetStr, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3);
  void RefreshServerList(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void RefreshZoneItemPing(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, ULobbyZoneListItem_BP_C* K2Node_DynamicCast_AsLobby_Zone_List_Item_BP, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetZoneServerDelay_ReturnValue);
  void SaveLocalGameData(ULobbySaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_SaveData_SaveDataState, FString CallFunc_Conv_IntToString_ReturnValue);
  void SetMatchVisibility(bool CallFunc_IsModelListShowing_showing, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum ESlateVisibility CallFunc_BoolToVisibility_visibility);
  void SetMenuByPosition(int32 postiion, ULobby_PlayerHeadNameItemLogic_BP_C* menu, bool K2Node_SwitchInteger_CmpSuccess);
  void SetModeText(int32 Zone, FString CallFunc_GetLocalizationStringWithID_ReturnValue, FString CallFunc_GetLocalizationStringWithID_ReturnValue2, FString CallFunc_AppendZoneStringText_RetStr, FString CallFunc_AppendZoneStringText_RetStr2, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetLocalizationStringWithID_ReturnValue3, FString CallFunc_AppendZoneStringText_RetStr3, FText CallFunc_Conv_StringToText_ReturnValue3);
  void SetModelListVisibility(bool isShow, bool PlaySound, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_Conv_BoolToInt_ReturnValue);
  void SetOneItemSelection(UImage* unselectIcon, UImage* selectIcon, bool IsSelected, UTextBlock* txtName, bool isLock, UImage* lockIcon);
  void SetOneSelectIcon(UImage* unselectIcon, UImage* selectIcon, UImage* lockIcon, bool IsSelected, bool isLock);
  void SetOneSelectTextColor(UTextBlock* textName, bool IsSelect);
  void SetRoomButton(bool CallFunc_CheckIfMenuOpen_ret, bool CallFunc_CheckIfMenuOpen_ret2);
  void SetZoneItemUISelected(int32 selectZoneids, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, ULobbyZoneListItem_BP_C* K2Node_DynamicCast_AsLobby_Zone_List_Item_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void SetZonelistToZoneCollector(int32 ___int_Array_Index_Variable, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_ChooseZoneInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void ShowAll();
  void ShowNewteachingGuide(int32 guideFlagNum, UStatManager* CallFunc_GetInstance_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_C* K2Node_DynamicCast_AsBp_Teamup, bool K2Node_DynamicCast_bSuccess);
  void StopCameraSwitchCountDown();
  void TeamInfoRefresh(bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);
  void TeamTypeChange();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void TickCallUDPPing();
  void Transitions_Enter();
  void Transitions_Out();
  void Transitions_starEnter();
  void UIHide();
  void UIShow(ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_teamup_C* K2Node_DynamicCast_AsBp_Teamup, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAutoRunTestGame_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
  void UpdateFourAnchorPosition();
  void UpdateFourHeadMenu(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_TeamUpMenuInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateOneAnchorPosition(UPanelWidget* anchor, struct FVector Position, struct FVector Offset, APlayerController* CallFunc_GetPlayerController_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, struct FWidgetTransform K2Node_MakeStruct_WidgetTransform);
  void UpdateOneHeadMenu(struct FBP_STRUCT_TeamUpMenuInfo Data, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_GetMenuByPosition_menu);
  void UpdateQuickMsg(struct FBP_STRUCT_TeamUpMenuInfo NewLocalVar, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_GetMenuByPosition_menu, bool CallFunc_EqualEqual_StrStr_ReturnValue, struct FBP_STRUCT_TeamUpMenuInfo CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateShieldMenu(bool CallFunc_IsModelListShowing_showing);
  void VoiceRefresh(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FBP_STRUCT_TeamUpMenuInfo CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ULobby_PlayerHeadNameItemLogic_BP_C* CallFunc_GetMenuByPosition_menu);
  void isZoneListVisible(bool visible, bool CallFunc_IsVisible_ReturnValue);
  void setZoneListVisible(bool isShow, bool PlaySound, bool CallFunc_CanZoneListVisible_canshowZoneList, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2);
};

class ULobby_TeamModeUI_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008021c */ UWidgetAnimation* DX_MicroTip;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_StartEnter;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Out;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Enter;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Aroow02;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Arrow01;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Arrow03;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Arrow04;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_AutoMatch;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* Button_SelectMode;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* Button_ShowGameModeList;
  /* offset=0x026c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x0270 flags=0x000a0010c008020c */ UCheckBox* CheckBox_AutoMatch;
  /* offset=0x0274 flags=0x000a0010c008020c */ UGridPanel* ChooseZoneGridPanel;
  /* offset=0x0278 flags=0x000a0010c008020c */ UCustomizeModeListItem_BP_C* CustomizeModeListItem_BP;
  /* offset=0x027c flags=0x000a0010c008020c */ UCustomizeModeListItem_BP_C* CustomizeModeListItem_BP_C;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* FX_Line01;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* FX_Line02;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* FX_LineLight01;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* FX_LineLight02;
  /* offset=0x0290 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x0294 flags=0x000a0010c008020c */ UCanvasPanel* GridPanel_MatchTips;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x029c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image_ItemSelectedBG;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* Image_ItemSelectedBG_Double;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* Image_ItemSelectedBG_Quad;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* Image_ItemUnSelectedBG;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* Image_ItemUnSelectedBG_Double;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* Image_ItemUnSelectedBG_Quad;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UImage* Image_Mode01Lock;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UImage* Image_Mode02Lock;
  /* offset=0x02cc flags=0x000a0010c008020c */ UImage* Image_Mode03Lock;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UImage* Image_Mode1BtnBG;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UImage* Image_Mode2BtnBG;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UImage* Image_Mode3BtnBG;
  /* offset=0x02dc flags=0x000a0010c008020c */ UImage* Image_ShowList;
  /* offset=0x02e0 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x02e4 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x02e8 flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x02ec flags=0x000a0010c008020c */ USizeBox* MenuAnchor_4;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UCanvasPanel* NewteachingGuide;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UCanvasPanel* NewteachingGuide;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UOverlay* Overlay_teachingGuide_2Father;
  /* offset=0x02fc flags=0x000a0010c008020c */ UScrollBox* ScrollBox_ZoneList;
  /* offset=0x0300 flags=0x000a0010c008020c */ UTextBlock* Text_chooseZone;
  /* offset=0x0304 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0308 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x030c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0310 flags=0x000a0010c008020c */ UTextBlock* TextBlock_1PLockTips;
  /* offset=0x0314 flags=0x000a0010c008020c */ UTextBlock* TextBlock_2PLockTips;
  /* offset=0x0318 flags=0x000a0010c008020c */ UTextBlock* TextBlock_4PLockTips;
  /* offset=0x031c flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentGameModeName;
  /* offset=0x0320 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemName;
  /* offset=0x0324 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ModeName;
  /* offset=0x0328 flags=0x000a0010c008020c */ UVerticalBox* VerticalBox;
  /* offset=0x032c flags=0x000a0010c008020c */ UVerticalBox* VerticalBox_ModeBtnGroup;
  /* offset=0x0330 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_ListStatus;
  /* offset=0x0334 flags=0x0000001040010205 */ bool IsModelPanelShowing;
  /* offset=0x0338 flags=0x0000000000010005 */ struct FSlateBrush BrushSolo;
  /* offset=0x03a0 flags=0x0000000000010005 */ struct FSlateBrush BrushDouble;
  /* offset=0x0408 flags=0x0000000000010005 */ struct FSlateBrush BrushQuad;
  /* offset=0x0470 flags=0x0000000000010005 */ struct FSlateBrush Brust_Training;
  /* offset=0x04d8 flags=0x0000000000010005 */ struct FSlateColor Color_Select;
  /* offset=0x04f4 flags=0x0000000000010005 */ struct FSlateColor Color_UnSelect;
  /* offset=0x0510 flags=0x0008001040010005 */ struct FVector AnchorWordPosition1;
  /* offset=0x051c flags=0x0008001040010005 */ struct FVector AnchorWordPosition2;
  /* offset=0x0528 flags=0x0008001040010005 */ struct FVector AnchorWordPosition3;
  /* offset=0x0534 flags=0x0008001040010005 */ struct FVector AnchorOffset0;
  /* offset=0x0540 flags=0x0008001040010005 */ struct FVector AnchorOffset1;
  /* offset=0x054c flags=0x0008001040010005 */ struct FVector AnchorOffset2;
  /* offset=0x0558 flags=0x0008001040010005 */ struct FVector AnchorOffset3;
  /* offset=0x0564 flags=0x0008001040010205 */ int32 TimeLeftCamera;

  void ShowEffects(bool Is show, enum ESlateVisibility Type);
};

class ULobby_poster_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* haibao;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UButton* UrlBtn;
};

class ULobbypromoterFriendinvitation_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCanvasPanel* empty;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UWrapBox* friendBox;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UTextBlock* labelFriendNum;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;

  void Construct();
  void ExecuteUbergraph_LobbypromoterFriendinvitation_UIBP(int32 EntryPoint, FString CallFunc_GetLocalizeString_textValue, FText CallFunc_Conv_StringToText_ReturnValue);
};

class ULobbypromoters_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* BtnClose;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* BtnRule;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* BtnView;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCommon_HelpTips_UIBP_C* Common_HelpTips;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UTextBlock* helpText;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UCanvasPanel* helpTip;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UUTRichTextBlock* labelDesc;
  /* offset=0x01dc flags=0x000a0010c008020c */ UTextBlock* labelInviteNum;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UTextBlock* labelNeed1;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UTextBlock* labelNeed2;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UTextBlock* labelNeed3;
  /* offset=0x01ec flags=0x000a0010c008020c */ UTextBlock* labelTitle;
  /* offset=0x01f0 flags=0x000a0010c008020c */ ULobbypromotersfriend_UIBP_C* Lobbypromotersfriend_UIBP;
  /* offset=0x01f4 flags=0x000a0010c008020c */ ULobbypromotersfriend_UIBP_C* Lobbypromotersfriend_UIBP;
  /* offset=0x01f8 flags=0x000a0010c008020c */ ULobbypromotersfriend_UIBP_C* Lobbypromotersfriend_UIBP;
  /* offset=0x01fc flags=0x000a0010c008020c */ ULobbypromotersfriend_UIBP_C* Lobbypromotersfriend_UIBP;
  /* offset=0x0200 flags=0x000a0010c008020c */ ULobbypromotersfriend_UIBP_C* Lobbypromotersfriend_UIBP;
  /* offset=0x0204 flags=0x000a0010c008020c */ ULobbypromotersitem_UIBP_C* Lobbypromotersitem_UIBP;
  /* offset=0x0208 flags=0x000a0010c008020c */ ULobbypromotersitem_UIBP_C* Lobbypromotersitem_UIBP;
  /* offset=0x020c flags=0x000a0010c008020c */ ULobbypromotersitem_UIBP_C* Lobbypromotersitem_UIBP;
  /* offset=0x0210 flags=0x000a0010c008020c */ UProgressBar* Progress;
  /* offset=0x0214 flags=0x000a0010c008020c */ USlider* slider_pro;
};

class ULobbypromotersfriend_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* BtnHasInvited;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* BtnInvited;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCommon_Avatar_BP_C* headIcon;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UCanvasPanel* InviteScucc;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UTextBlock* labelName;
};

class ULobbypromotersitem_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UButton* BtnShareGet;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* BtnTip;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* hasGot;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCommon_Item_BP_C* iconItem;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBtnShare;
};

class ULocalMessage: public UObject {
};

class ULocalPlayer: public UPlayer {
  /* offset=0x0038 flags=0x0018001040000200 */ UGameViewportClient* ViewportClient;
  /* offset=0x0058 flags=0x0018001040004200 */ uint8 AspectRatioAxisConstraint;
  /* offset=0x005c flags=0x001c001040000200 */ UClass<APlayerController>* PendingLevelPlayerControllerClass;
  /* offset=0x0060 flags=0x0018001000022001 */ uint8 bSentSplitJoin:1;
  /* offset=0x00a0 flags=0x0048001040000200 */ int32 ControllerId;
};

class ULocalizedOverlays: public UOverlays {
  /* offset=0x001c flags=0x0018001040000201 */ UBasicOverlays* DefaultOverlays;
  /* offset=0x0020 flags=0x0010000000000201 */ TMap<FString, UBasicOverlays*> LocaleToOverlaysMap;
};

class ULogicManagerBase: public UObject {
  /* offset=0x0028 flags=0x0048001040000200 */ UFrontendHUD* OwningFrontendHUD;
  /* offset=0x002c flags=0x0018001040000200 */ bool bPersistentUI;
  /* offset=0x002d flags=0x0018001040000200 */ bool bDynamicWidget;
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<FName> GameStatusList;
  /* offset=0x0048 flags=0x0020088000000208 */ TArray<UUAEUserWidget*> WidgetList;
  /* offset=0x0060 flags=0x0020080000000200 */ TArray<UObject*> DelayMessage_Obj;

  void DispatchUIMessage(FString UIMessage, UObject* Source, UUAEUserWidget* Target);
  UFrontendHUD* GetOwningFrontendHUD();
};

class ULogin_Loading_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* Loading_anima;
  /* offset=0x0238 flags=0x000a0010c008020c */ UWeakRefImage* BackImage;
  /* offset=0x023c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0240 flags=0x000a0010c008020c */ UGridPanel* GridPanel_root;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0248 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Loading;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock_LoadingTips;
  /* offset=0x0250 flags=0x0008001040010205 */ float SliderPercent;
  /* offset=0x0254 flags=0x0000001040010205 */ bool TimerSwitch;
  /* offset=0x0258 flags=0x0008001040010205 */ float BreakMinValue;
  /* offset=0x025c flags=0x0008001040010a05 */ Abp_loading_C* bp_loading;
  /* offset=0x0260 flags=0x0008001040010205 */ int32 imgIndex;

  void Construct();
  void DelayShowLoading();
  void ExecuteUbergraph_Login_Loading_UIBP(int32 EntryPoint, bool CallFunc_Less_FloatFloat_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_loading_C* K2Node_DynamicCast_AsBp_Loading, bool K2Node_DynamicCast_bSuccess);
  void FinishLoading();
  void InitLoading(FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_RandomIntegerInRange_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeText_Text, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FText CallFunc_Conv_StringToText_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_RandomIntegerInRange_ReturnValue3, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
  void RefreshLoading();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIHide();
  void UIShow();
};

class ULogoutCallbackProxy: public UBlueprintAsyncActionBase {
  /* offset=0x001c flags=0x0010000010080200 */ FOnlineLogoutResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnlineLogoutResult OnFailure;

  ULogoutCallbackProxy* Logout(UObject* WorldContextObject, APlayerController* PlayerController);
};

class ALuaClassBaseObj: public AActor {
  FString GetGameStatus();
  void HandleUIMessage(FString UIMessage);
  FString ItsATest(struct FPlayerInfo Player1, TArray<int32> nums, int32 X, FString Q, TArray<struct FPlayerInfo> Player2);
};

class ALuaClassObj: public ALuaContext {
  /* offset=0x02b4 flags=0x0048001040002200 */ UGameBusinessManager* pManager;

  FString GetGameStatus();
  void HandleDynamicCreation();
  void HandleUIMessage(FString UIMessage);
  void SubCollapseWidgetList(FString RootWidgetName, TArray<FString> ChildWidgetNames);
  void SubUIWidgetList(TArray<struct FGameWidgetConfig> InWidgetConfigList, TArray<FString> GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget);
};

class ALuaContext: public AActor {
  /* offset=0x02a8 flags=0x0028081040002200 */ ULuaStateWrapper* OwningLuaStateWrapper;
  /* offset=0x02ac flags=0x0028081040002200 */ UObject* OwningObject;
  /* offset=0x02b0 flags=0x0028081040080208 */ UScriptContextComponent* ScriptContextComponent;
};

class ULuaStateWrapper: public UObject {
};

class UMINIMapWidget: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0018001040000005 */ struct FVector2D PlayerCoords;
  /* offset=0x0238 flags=0x0018001040000005 */ struct FVector2D WhiteCircleCenter;
  /* offset=0x0240 flags=0x0018001040000005 */ struct FVector2D BlueCircleCenter;
  /* offset=0x0248 flags=0x0018001040000205 */ float WhiteCircleRadius;
  /* offset=0x024c flags=0x0018001040000205 */ float BlueCircleRadius;
  /* offset=0x0250 flags=0x0018001040000205 */ float MinimapWindowExtent;
  /* offset=0x0254 flags=0x0018001040000205 */ float LevelLandScapeExtent;
  /* offset=0x0258 flags=0x0018001040000205 */ float MapImageExtent;
  /* offset=0x025c flags=0x0018001040000205 */ float LevelToMapScale;
  /* offset=0x0260 flags=0x0018001040000005 */ struct FVector MapCenterToPlayerMarker;
  /* offset=0x026c flags=0x0018001040000005 */ struct FVector MapCenterToBlueCircleCenter;
  /* offset=0x0278 flags=0x0018001040000005 */ struct FVector LevelLandScapeCenter;
  /* offset=0x0284 flags=0x0018001040000005 */ struct FVector MapCenterToWhiteCircleCenter;
  /* offset=0x0290 flags=0x0018001040000005 */ struct FVector MapCenterToPinMarker;
  /* offset=0x029c flags=0x0018001040000205 */ uint8 PlayerOperation;
  /* offset=0x02a0 flags=0x001800104008020d */ UImage* PinMarker;
  /* offset=0x02a4 flags=0x001800104008020d */ UCanvasPanelSlot* MapCanvasPanelSlot;
  /* offset=0x02a8 flags=0x001800104008020d */ UCanvasPanelSlot* PlayerMarkerPanelSlot;
  /* offset=0x02ac flags=0x001800104008020d */ UImage* PlayerMarkerImage;
  /* offset=0x02b0 flags=0x001800104008020d */ UImage* PinMarkerPanelSlot;
  /* offset=0x02b4 flags=0x0018001040000205 */ bool IsDrawInMiniMap;
  /* offset=0x02b5 flags=0x0018001040000205 */ uint8 TestMap;
};

class UMRMeshComponent: public UPrimitiveComponent {
  /* offset=0x05c4 flags=0x0048001040000201 */ UMaterialInterface* Material;
  /* offset=0x05c8 flags=0x0048001040000201 */ UMeshReconstructorBase* MeshReconstructor;
  /* offset=0x05cc flags=0x0048001040000201 */ bool bEnableCollision;
  /* offset=0x05d0 flags=0x0040000000002200 */ TArray<UBodySetup*> BodySetups;

  void ConnectReconstructor(UMeshReconstructorBase* Reconstructor);
  UMeshReconstructorBase* GetReconstructor();
};

class UMainBackPackDiscardPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBackPackBigItem_BP_C* BackPackBigItem_BP;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBackPackBigItem_BP_C* BackPackBigItem_BP_C;
  /* offset=0x023c flags=0x000a0010c008020c */ UBackPackBigItem_BP_C* BackPackBigItem_BP_C;
  /* offset=0x0240 flags=0x000a0010c008020c */ UBackPackBigItem_BP_C* BackPackBigItem_BP_C;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_Cancel;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_Confirm;
  /* offset=0x024c flags=0x000a0010c008020c */ UGridPanel* GridPanel_AkeyDiscardedPanel;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Btn01Name;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Btn02Name;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x025c flags=0x000a0010c008020c */ UWrapBox* WrapBox_ItemList;

  void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_MainBackPackDiscardPanel_BP(int32 EntryPoint);
  void HideSelf();
  void ShowDeleteList();
};

class UMainBackPackPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBackPackArmorSlot_BP_C* ArmorSlotItem_ArmoredVest;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBackPackArmorSlot_BP_C* ArmorSlotItem_Helmet;
  /* offset=0x023c flags=0x000a0010c008020c */ UBackPackArmorSlot_BP_C* ArmorSlotItem_Package;
  /* offset=0x0240 flags=0x000a0010c008020c */ UProgressBar* BackPackCapacity_Bar;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_AddItem;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_AllItem;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_Cancel;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_CloseBackPackUI;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_Clothing;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_Consumption;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button_DeleteAll;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_OK;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* Button_ReduceItem;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* Button_WeaponFit;
  /* offset=0x026c flags=0x000a0010c008020c */ UBackPackClothSlot_BP_C* ClothingSlotItem_Cap;
  /* offset=0x0270 flags=0x000a0010c008020c */ UBackPackClothSlot_BP_C* ClothingSlotItem_Jacket;
  /* offset=0x0274 flags=0x000a0010c008020c */ UBackPackClothSlot_BP_C* ClothingSlotItem_Mask;
  /* offset=0x0278 flags=0x000a0010c008020c */ UBackPackClothSlot_BP_C* ClothingSlotItem_Shoe;
  /* offset=0x027c flags=0x000a0010c008020c */ UBackPackClothSlot_BP_C* ClothingSlotItem_Trouser;
  /* offset=0x0280 flags=0x000a0010c008020c */ UGridPanel* GridPanel_BackPackBtnGroup;
  /* offset=0x0284 flags=0x000a0010c008020c */ UGridPanel* GridPanel_BackPackList;
  /* offset=0x0288 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ClothingGroup;
  /* offset=0x028c flags=0x000a0010c008020c */ UGridPanel* GridPanel_DeleteItemIfno;
  /* offset=0x0290 flags=0x000a0010c008020c */ UGridPanel* GridPanel_List;
  /* offset=0x0294 flags=0x000a0010c008020c */ UGridPanel* GridPanel_WeaponInfo;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image_All;
  /* offset=0x029c flags=0x000a0010c008020c */ UImage* Image_AvatraIcon;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* Image_Cloth;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* Image_Highlight;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* Image_SelectedAllItem;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image_SelectedClothing;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* Image_SelectedConsumption;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* Image_SelectedWeaponFit;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* Image_TopLeft;
  /* offset=0x02bc flags=0x000a0010c008020c */ UMeleeInfoItem_BP_C* MeleeInfoItem_BP;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UPickUpItemTips_BP_C* PickUpItemTips_BP;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UPistolInfoItem_BP_C* PistolInfoItem_BP;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_DeleteItemNum;
  /* offset=0x02cc flags=0x000a0010c008020c */ UScrollBox* ScrollBox_ItemList;
  /* offset=0x02d0 flags=0x000a0010c008020c */ USlider* Slider_DeleteItemNum;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UTextBlock* T;
  /* offset=0x02dc flags=0x000a0010c008020c */ UTextBlock* TextBlock_Attach;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Cloth;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Consumption;
  /* offset=0x02e8 flags=0x000a0010c0080208 */ UTextBlock* TextBlock_CurrentDeleteItemNum;
  /* offset=0x02ec flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentItemNum;
  /* offset=0x02f0 flags=0x000a0010c0080208 */ UTextBlock* TextBlock_MaxDeleteItemNum;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxItemNum;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UUniformGridPanel* UniformGridPanel_Armor;
  /* offset=0x02fc flags=0x000a0010c008020c */ UMainWeaponInfoItem_BP_C* WeaponInfoItem_Weapon1;
  /* offset=0x0300 flags=0x000a0010c008020c */ UMainWeaponInfoItem_BP_C* WeaponInfoItem_Weapon2;
  /* offset=0x0304 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0308 flags=0x0008001040010205 */ uint8 CurChosenTab;
  /* offset=0x030c flags=0x0000000000010205 */ TArray<struct FBP_STRUCT_Item_type> WeaponDataRowInList;
  /* offset=0x0318 flags=0x0000001040010205 */ bool bIsDroppingStuff;
  /* offset=0x0320 flags=0x0000000000010005 */ struct FBattleItemData ChosenToDropStuff;
  /* offset=0x03a0 flags=0x0008001040010205 */ int32 MaxThrowCount;
  /* offset=0x03a4 flags=0x0000000000010205 */ TArray<struct FItemAssociation> CacheAssociation;
  /* offset=0x03b0 flags=0x0008001040010205 */ UBackPackItem_BP_C* CrtClickItem;
  /* offset=0x03b8 flags=0x0000000000010005 */ struct FBattleItemData ItemBeDragged;
  /* offset=0x0438 flags=0x0000000000010205 */ TArray<int32> WeaponAmmoUtilizableList;
  /* offset=0x0444 flags=0x0008001040010205 */ int32 CrtThrowCount;
  /* offset=0x0448 flags=0x0008001040010205 */ UMainBackPackDiscardPanel_BP_C* SelectDeletePanel;
  /* offset=0x044c flags=0x0000001040010205 */ bool isBindWeaponMsg;
  /* offset=0x0450 flags=0x0000001000010005 */ struct FTimerHandle BindDelHandle;
  /* offset=0x0458 flags=0x0000000000010205 */ TArray<UMainWeaponInfoItem_BP_C*> WeaponInfoItemArray;
  /* offset=0x0464 flags=0x0000000000010205 */ TArray<UBackPackClothSlot_BP_C*> ClothPlotItemArray;
  /* offset=0x0470 flags=0x0000000000010205 */ TArray<UBackPackArmorSlot_BP_C*> ArmorPlotItemArray;
  /* offset=0x047c flags=0x0008001040010205 */ uint8 DragItemOrigin;
  /* offset=0x0480 flags=0x0000100010010205 */ FCloseBackPack CloseBackPack;
  /* offset=0x048c flags=0x0000001040010205 */ bool IsItemBeClicked;

  void BindBackPackCompEvents(FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void BindWeaponMsgEvent();
  void BndEvt__Button_AddItem_K2Node_ComponentBoundEvent_358_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_AllItem_K2Node_ComponentBoundEvent_82_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_277_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CloseBackPackUI_K2Node_ComponentBoundEvent_250_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Clothing_K2Node_ComponentBoundEvent_111_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_DeleteAll_K2Node_ComponentBoundEvent_220_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Fitting_K2Node_ComponentBoundEvent_64_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Medicine_K2Node_ComponentBoundEvent_47_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OK_K2Node_ComponentBoundEvent_304_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_ReduceItem_K2Node_ComponentBoundEvent_371_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Slider_DeleteItemNum_K2Node_ComponentBoundEvent_236_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void ChangeDropCountSliderValue(int32 NewParam, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue);
  void ClickCloseBackpack();
  void CloseBackPack__DelegateSignature();
  void ClothArmerType2Enum(int32 SubType, uint8 ClothEnum, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);
  void CustomEvent();
  void DelayEnableCharacterTouch();
  void DelayStopFire();
  void DropDraggedIem(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsGun_isGun);
  void EquipDraggedItem(uint8 TargetWeapon, bool CallFunc_EqualEqual_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget);
  void ExecuteUbergraph_MainBackPackPanel_BP(int32 EntryPoint, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Array_Index_Variable3, float K2Node_ComponentBoundEvent_Value, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_ShouldDropItemFunc_OK, float CallFunc_Multiply_IntFloat_ReturnValue, int32 CallFunc_Round_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue2, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess3, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 K2Node_CustomEvent_TargetChangeSlot2, uint8 K2Node_CustomEvent_TargetChangeSlot, TArray<UMainWeaponInfoItem_BP_C*> K2Node_MakeArray_Array, TArray<UBackPackClothSlot_BP_C*> K2Node_MakeArray_Array2, TArray<UBackPackArmorSlot_BP_C*> K2Node_MakeArray_Array3, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate2, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate3, FItemBeDragCancelled K2Node_CreateDelegate_OutputDelegate4, FItemBeDragCancelled K2Node_CreateDelegate_OutputDelegate5, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate6, FItemBeDragCancelled K2Node_CreateDelegate_OutputDelegate7, FItemBeDragCancelled K2Node_CreateDelegate_OutputDelegate8, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, int32 ___int_Loop_Counter_Variable3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess5, int32 CallFunc_Add_IntInt_ReturnValue3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_GetControlLookPoint_HitTaget, struct FVector CallFunc_GetControlLookPoint_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue4, FString CallFunc_Conv_VectorToString_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, UBackPackArmorSlot_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UBackPackClothSlot_BP_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, UMainWeaponInfoItem_BP_C* CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, FChangeCurrentUsingWeaponDelegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, FChangeInventoryDataDelegate K2Node_CreateDelegate_OutputDelegate10, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_NotEqual_ByteByte_ReturnValue4, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate11, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void Get Weapon Attach IDBy Specific ID(int32 inInt, TArray<int32> AvailableWeaponAttachment, TArray<int32> ItemBPIDs, TArray<int32> K2Node_MakeArray_Array, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_WeaponAttachments_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, TArray<int32> K2Node_MakeArray_Array2);
  void GetArmorClothDataDict(TArray<struct FBattleItemData> InputPin, TMap<uint8, struct FBattleItemData> ClothArmDataDict, TMap<uint8, struct FBattleItemData> DataTable, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, struct FBattleItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, uint8 CallFunc_ClothArmerType2Enum_ClothEnum);
  void GetWeaponAttach(ASTExtraPlayerCharacter* MyPlayerExtraCharacter, int32 ___int_Loop_Counter_Variable, int32 ___int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Array_Index_Variable2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue2, TArray<int32> CallFunc_Get_Weapon_Attach_IDBy_Specific_ID_AvailableWeaponAttachment, TArray<int32> CallFunc_Get_Weapon_Attach_IDBy_Specific_ID_AvailableWeaponAttachment2, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Get_Item2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, int32 CallFunc_Array_AddUnique_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2);
  void GetWeaponDataBySlot(uint8 SlotIndex, TArray<struct FBattleItemData> weaponList, struct FBattleItemData BattleData, struct FBP_STRUCT_Item_type Record, UWeaponManagerComponent* weaponMgr, struct FBattleItemData LoopBattleData, struct FItemDefineID SlotWeaponDefineID, TArray<struct FBattleItemData> CurWeaponList, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataTableRowByItemID_Result, bool CallFunc_GetWeaponDataTableRowByItemID_Found, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Array_Index_Variable2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataTableRowByItemID_Result2, bool CallFunc_GetWeaponDataTableRowByItemID_Found2, bool CallFunc_IsSameInstance_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, struct FBattleItemData CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2);
  void GetWeaponDataTableRow(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void GetWeaponDataTableRowByItemID(int32 ItemID, struct FBP_STRUCT_Item_type Result, bool Found, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void GetWeaponSlotEnumByName(FName Name, uint8 Slot, bool Found, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  float Get_ProgressBar_DeleteItemNum_Percent(float CallFunc_GetValue_ReturnValue);
  FText Get_TextBlock_CurrentDeleteItemNum_Text(FText CallFunc_Conv_IntToText_ReturnValue);
  FText Get_TextBlock_MaxDeleteItemNum_Text(FText CallFunc_Conv_IntToText_ReturnValue);
  void HideDropCountSlider();
  void HideSelf(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void HideToolTips();
  void HighLightChosenTab(struct FLinearColor K2Node_MakeStruct_LinearColor, struct FSlateColor K2Node_MakeStruct_SlateColor, struct FSlateColor K2Node_MakeStruct_SlateColor2, bool K2Node_SwitchEnum_CmpSuccess);
  void HightLightAttachSlots(struct FBattleItemData ItemData, int32 ___int_Array_Index_Variable, bool CallFunc_IsAttach_isAttach, int32 ___int_Loop_Counter_Variable, UMainWeaponInfoItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void IsDifferentToCache(struct FItemAssociation Association, bool bDifferent, uint8 Slot, int32 SpecificID, FName AssociationName, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, uint8 CallFunc_GetWeaponSlotEnumByName_Slot, bool CallFunc_GetWeaponSlotEnumByName_Found, uint8 CallFunc_GetWeaponSlotEnumByName_Slot2, bool CallFunc_GetWeaponSlotEnumByName_Found2, struct FItemAssociation CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, uint8 CallFunc_GetWeaponSlotEnumByName_Slot3, bool CallFunc_GetWeaponSlotEnumByName_Found3, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue);
  bool IsLocalpositionInBorder(struct FVector2D LocalCoordinate, UWidget* Border, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* K2Node_DynamicCast_AsBack_Pack_Drag_Drop_Opt_BP, bool K2Node_DynamicCast_bSuccess, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue);
  void OnEventTakeDamageForUI();
  void OnItemDragBegin(struct FBattleItemData ItemBeDragged, uint8 DragOrigin, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void OnItemDragCancelled(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2);
  void OnItemDragDrop(struct FBattleItemData ItemData, uint8 DragItemOrigin, struct FVector2D Location, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_IsLocalpositionInBorder_ReturnValue, bool CallFunc_IsLocalpositionInBorder_ReturnValue2, bool CallFunc_IsLocalpositionInBorder_ReturnValue3, bool CallFunc_IsLocalpositionInBorder_ReturnValue4, bool CallFunc_IsLocalpositionInBorder_ReturnValue5, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue3);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  void ReceivedInitWidget();
  void RecordClickItem(UBackPackItem_BP_C* ItemBeClicked, bool IsClicked, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
  void ResetAttachSlots(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UMainWeaponInfoItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void ResetSelectItem(bool CallFunc_IsValid_ReturnValue);
  void SetArmorSlot(UBackPackArmorSlot_BP_C* ArmorSlot, TMap<uint8, struct FBattleItemData> NewParam, struct FBattleItemData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void SetClothSlot(UBackPackClothSlot_BP_C* ClothingSlot, TMap<uint8, struct FBattleItemData> NewParam, struct FBattleItemData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void ShouldDropItemFunc(struct FItemDefineID DefineID, bool OK, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_ShouldDropBagItem_ReturnValue);
  void ShowDropCountSliderByStuff(struct FBattleItemData Stuff, bool ForceDrop, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ShouldDropItemFunc_OK, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSameInstance_ReturnValue);
  void ShowSelf(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void ShowToolTips(FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void UnBindBackPackCompEvents(FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void UnEquipDraggedItem(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void UpdateArmor(TArray<struct FBattleItemData> BattleItemData, TMap<uint8, struct FBattleItemData> CallFunc_GetArmorClothDataDict_ClothArmDataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UBackPackArmorSlot_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateCloth(TArray<struct FBattleItemData> BattleItemData, TMap<uint8, struct FBattleItemData> CallFunc_GetArmorClothDataDict_ClothArmDataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UBackPackClothSlot_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateScrollItemList(enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetClothingAndArmorInBackpack_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetAllItemsInBackpack_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetClothingAndArmorInBackpack_ReturnValue2, TArray<struct FBattleItemData> CallFunc_GetWeaponAttachmentsInBackpack_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue2, TArray<struct FBattleItemData> CallFunc_GetConsumablesInBackpack_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, int32 CallFunc_FCeil_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
  void UpdateScrollItemListItems(TArray<struct FBattleItemData> BackpackItemDataArray, bool IsUseless, UBackPackItem_BP_C* ListItemBP, struct FBattleItemData CurData, int32 LastIndex, TArray<struct FBattleItemData> ItemDataArray, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FHandleBtnsStateChange K2Node_CreateDelegate_OutputDelegate, FItemBeDropped K2Node_CreateDelegate_OutputDelegate2, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate3, FItemBeDragCancelled K2Node_CreateDelegate_OutputDelegate4, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue, UBackPackItem_BP_C* K2Node_DynamicCast_AsBack_Pack_Item_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RemoveChild_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, int32 ___int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue3, UWidget* CallFunc_GetChildAt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, UBackPackItem_BP_C* K2Node_DynamicCast_AsBack_Pack_Item_BP2, bool K2Node_DynamicCast_bSuccess2, UBackPackItem_BP_C* CallFunc_Create_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateShootingPanelWeaponIcon(UObject* ImageObject, FName SlotName, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, struct FBattleItemData CallFunc_GetCharacterVirtualItemInBackpack_ReturnValue, bool CallFunc_IsValid_ReturnValue3, struct FItemAssociation CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsDifferentToCache_bDifferent, uint8 CallFunc_IsDifferentToCache_Slot, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataTableRowByItemID_Result, bool CallFunc_GetWeaponDataTableRowByItemID_Found, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, bool CallFunc_IsValid_ReturnValue4);
  void UpdateWeaponBySlot(uint8 slot_, float ExecuteTime, uint8 LoopWeaponSlotEnum, TArray<struct FBattleItemData> CurWeaponList, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData2, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record2, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData3, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record3, bool K2Node_SwitchEnum_CmpSuccess, int32 CallFunc_Array_Length_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue);
  void UpdateWeaponBySlot1(uint8 TargetChangeSlot);
  void UpdateWeaponBySlot2(uint8 TargetChangeSlot);
  void UpdateWeaponItems(TArray<struct FBattleItemData> WeaponItemDataArray, uint8 LoopWeaponSlotEnum, TArray<struct FBattleItemData> CurWeaponList, int32 ___int_Variable, int32 ___int_Variable2, uint8 CallFunc_Conv_IntToByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue2, uint8 CallFunc_GetEnumeratorValueFromIndex_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int32 CallFunc_MakeLiteralInt_ReturnValue, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record, bool CallFunc_Less_IntInt_ReturnValue, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData2, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record2, struct FBattleItemData CallFunc_GetWeaponDataBySlot_battleData3, struct FBP_STRUCT_Item_type CallFunc_GetWeaponDataBySlot_record3, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void UseDraggedIem(struct FItemDefineID K2Node_MakeStruct_ItemDefineID, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, struct FBattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
};

class UMainBackpackPanel_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* BackgroundImg;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* CloseBtn;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Consume;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot1;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot2;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot3;
  /* offset=0x01cc flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot4;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot5;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UPlayerEquipmentSlot_C* EquipmentSlot6;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UGroundPickUpListPanel_C* GroundPickUpList;
  /* offset=0x01dc flags=0x000a0010c008020c */ UProgressBar* HealthBar;
  /* offset=0x01e0 flags=0x000a0010c0080208 */ UTextBlock* HealthValueText;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01ec flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01fc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0200 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0204 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0208 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x020c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0210 flags=0x000a0010c008020c */ UInventoryListPanel_C* InventoryList;
  /* offset=0x0214 flags=0x000a0010c008020c */ UTextBlock* MainWeapon1CurUse;
  /* offset=0x0218 flags=0x000a0010c008020c */ UTextBlock* MainWeapon1Name;
  /* offset=0x021c flags=0x000a0010c008020c */ UImage* MainWeapon1Selector;
  /* offset=0x0220 flags=0x000a0010c008020c */ UCanvasPanel* MainWeapon1SelectorPanel;
  /* offset=0x0224 flags=0x000a0010c008020c */ UTextBlock* MainWeapon1SerialNumber;
  /* offset=0x0228 flags=0x000a0010c008020c */ UTextBlock* MainWeapon2CurUse;
  /* offset=0x022c flags=0x000a0010c008020c */ UTextBlock* MainWeapon2Name;
  /* offset=0x0230 flags=0x000a0010c008020c */ UImage* MainWeapon2Selector;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCanvasPanel* MainWeapon2SelectorPanel;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* MainWeapon2SerialNumber;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* MainWeapon2SerialNumberBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UMainWeaponSlot_C* MainWeaponSlot1;
  /* offset=0x0244 flags=0x000a0010c008020c */ UMainWeaponSlot_C* MainWeaponSlot2;
  /* offset=0x0248 flags=0x000a0010c0080208 */ UTextBlock* PlayerNameText;
  /* offset=0x024c flags=0x000a0010c008020c */ UProgressBar* ProgressBar;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* SubWeaponCurUse;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* SubWeaponName;
  /* offset=0x0258 flags=0x000a0010c008020c */ UCanvasPanel* SubWeaponSelectorPanel;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* SubWeaponSelectorTrigger;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* SubWeaponSerialNumber;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* SubWeaponSerialNumberBG;
  /* offset=0x0268 flags=0x000a0010c008020c */ USubWeaponSlot_C* SubWeaponSlot;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Weapon1SerialNumberBG;
  /* offset=0x0270 flags=0x0008000000010205 */ FString PlayerName;
  /* offset=0x027c flags=0x0008000000010205 */ FString PlayerHealthText;
  /* offset=0x0288 flags=0x0008001040010205 */ int32 InventoryItemID;
  /* offset=0x0290 flags=0x0000000000010005 */ struct FBackpackItemData InventoryItem;
  /* offset=0x03a8 flags=0x0000100010010205 */ FWeaponStateChange WeaponStateChange;

  void AbandonItem(int32 InventoryID);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_91_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__CloseBtn_K2Node_ComponentBoundEvent_121_OnButtonClickedEvent__DelegateSignature();
  void CancelHighLightWeapon();
  void ClearInventoryItem();
  void Construct();
  void Destruct();
  void ExecuteUbergraph_MainBackpackPanel(int32 EntryPoint, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_PostEvent_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, FWeaponStateChange K2Node_CreateDelegate_OutputDelegate);
  void GetPlayerEquipmentSlots(TArray<UPlayerEquipmentSlot_C*> ret, TArray<UPlayerEquipmentSlot_C*> K2Node_MakeArray_Array);
  void InitDelegate(FOnCharacterHPChangeDelegate K2Node_CreateDelegate_OutputDelegate, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue);
  void OnAbandonItem();
  void OnCloseBackPack();
  void OnConsumeItem();
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnEquipItem(uint8 WeaponPropSlot, uint8 WeaponComponentType);
  void OnOpenBackpack();
  void OnUpdateHP(float currentHP, float ratioHP, ACharacter* Character, float red, float pink, float CallFunc_FClamp_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void OnWeaponStateChange();
  struct FEventReply On_MainWeapon1Selector_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply On_MainWeapon2Selector_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply On_SubWeaponSelectorTrigger_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  void ResetInteractiveUI();
  void SetInventoryItem(int32 InventoryItemID, struct FBackpackItemData InventoryItem, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void SetWeaponName(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3);
  void ShowInteractiveUI(uint8 WeaponComponentType, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, struct FWeaponComponentDataTableRow CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void TryAbandonItem(bool CallFunc_Greater_IntInt_ReturnValue);
  void TryConsumeItem(bool CallFunc_Greater_IntInt_ReturnValue);
  void TryEquipItem(uint8 MainWeaponID, uint8 WeaponComponentSlotID);
  void UnInitDelegate();
  void UpdateData(int32 ___int_Array_Index_Variable, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, TArray<UPlayerEquipmentSlot_C*> CallFunc_GetPlayerEquipmentSlots_Ret, UPlayerEquipmentSlot_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void UpdateWeaponSlotInfo(UObject* BackPackManager);
  void WeaponStateChange__DelegateSignature();
};

class UMainControlBaseUI_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Arrow;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* BottomTips01_anima_Ver1;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_RunLock;
  /* offset=0x0240 flags=0x000a0010c008021c */ UWidgetAnimation* TipsText01;
  /* offset=0x0244 flags=0x000a0010c008021c */ UWidgetAnimation* TopTips02_anima;
  /* offset=0x0248 flags=0x000a0010c008021c */ UWidgetAnimation* TopTips01_anima;
  /* offset=0x024c flags=0x000a0010c008021c */ UWidgetAnimation* BottomTips01_anima;
  /* offset=0x0250 flags=0x000a0010c008021c */ UWidgetAnimation* AutoSprintCountDown;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Armor_BG;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Armor_Image;
  /* offset=0x025c flags=0x000a0010c008020c */ UInvalidationBox* Armor_InvalidationBox;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Armor_Level;
  /* offset=0x0264 flags=0x000a0010c008020c */ UProgressBar* Armor_RuinPercentage;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* ArrowLight01;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* ArrowLight02;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* AutoSprintImage;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* AutoSprintImage_Light;
  /* offset=0x0278 flags=0x000a0010c008020c */ UBorder* Backpack_Border;
  /* offset=0x027c flags=0x000a0010c008020c */ UImage* Backpack_Level;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* BackpackBG;
  /* offset=0x0284 flags=0x000a0010c008020c */ UButton* BackpackButton;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* BackpackImage;
  /* offset=0x028c flags=0x000a0010c008020c */ UBackPackPickUpPanel_BP_C* BackPackPickUpPanel_BP;
  /* offset=0x0290 flags=0x000a0010c008020c */ UBasicSkillsMenu_BP_C* BasicSkillsMenu_BP;
  /* offset=0x0294 flags=0x000a0010c008020c */ UBorder* Border_AutoNavigate;
  /* offset=0x0298 flags=0x000a0010c008020c */ UBorder* Border_SetBottomTipsColor;
  /* offset=0x029c flags=0x000a0010c008020c */ UBorder* Border_SetTopTipsColor;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UButton* Button_Microphone;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UButton* Button_ReportBug;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UButton* Button_Voice;
  /* offset=0x02ac flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ArrowVfxGroup;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_AutoJoinPanel;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_AutoNavigate;
  /* offset=0x02bc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_BackpackPanel;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_CircleTipsPanel;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_FreeCamera;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_HItTips;
  /* offset=0x02cc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IslandPeople;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_MiniMapAndSetting;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Navigating;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_NumOfPeopleInAircraft;
  /* offset=0x02dc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ParachutingMsg;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_RunState;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasQuickMenu;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UImage* CarTips;
  /* offset=0x02ec flags=0x000a0010c008020c */ UCDBarUI_BP_C* CDBarUI_BP;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UCircleChasingProgress_C* CircleChasingProgress;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UTextBlock* CircleTips;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UImage* CircleTipsBG;
  /* offset=0x02fc flags=0x000a0010c008020c */ UImage* CommonBG;
  /* offset=0x0300 flags=0x000a0010c008020c */ UGridPanel* CommonBtn;
  /* offset=0x0304 flags=0x000a0010c008020c */ UImage* CommonIcon;
  /* offset=0x0308 flags=0x000a0010c008020c */ UTextBlock* CommonText;
  /* offset=0x030c flags=0x000a0010c008020c */ UImage* DX_Light_C01;
  /* offset=0x0310 flags=0x000a0010c008020c */ UImage* DX_Light_C02;
  /* offset=0x0314 flags=0x000a0010c008020c */ UImage* DX_Light_C03;
  /* offset=0x0318 flags=0x000a0010c008020c */ UImage* DX_Light_C04;
  /* offset=0x031c flags=0x000a0010c008020c */ UImage* DX_Light_C05;
  /* offset=0x0320 flags=0x000a0010c008020c */ UImage* DX_Light_C06;
  /* offset=0x0324 flags=0x000a0010c008020c */ UImage* DX_Light_C07;
  /* offset=0x0328 flags=0x000a0010c008020c */ UButton* EntireMapTrigger;
  /* offset=0x032c flags=0x000a0010c008020c */ UImage* FakeOceanImage;
  /* offset=0x0330 flags=0x000a0010c008020c */ UImage* footTips;
  /* offset=0x0334 flags=0x000a0010c008020c */ UImage* FX_Scaleimage;
  /* offset=0x0338 flags=0x000a0010c008020c */ UImage* GetInCarBG;
  /* offset=0x033c flags=0x000a0010c008020c */ UImage* GetInCarIcon;
  /* offset=0x0340 flags=0x000a0010c008020c */ UGridPanel* GetInCarPanel;
  /* offset=0x0344 flags=0x000a0010c008020c */ UImage* GetOutCarBG;
  /* offset=0x0348 flags=0x000a0010c008020c */ UImage* GetOutCarIcon;
  /* offset=0x034c flags=0x000a0010c008020c */ UGridPanel* GridPanel_Armor;
  /* offset=0x0350 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ArrowVfxGroup;
  /* offset=0x0354 flags=0x000a0010c008020c */ UGridPanel* GridPanel_AutoNavigate;
  /* offset=0x0358 flags=0x000a0010c008020c */ UGridPanel* GridPanel_GetOutCarPanel;
  /* offset=0x035c flags=0x000a0010c008020c */ UGridPanel* GridPanel_Helmet;
  /* offset=0x0360 flags=0x000a0010c008020c */ UGridPanel* GridPanel_HelpBtn;
  /* offset=0x0364 flags=0x000a0010c008020c */ UGridPanel* GridPanel_NavigateCD;
  /* offset=0x0368 flags=0x000a0010c008020c */ UGridPanel* GridPanel_RunState;
  /* offset=0x036c flags=0x000a0010c008020c */ UImage* Helmet_BG;
  /* offset=0x0370 flags=0x000a0010c008020c */ UImage* Helmet_Image;
  /* offset=0x0374 flags=0x000a0010c008020c */ UInvalidationBox* Helmet_InvalidationBox;
  /* offset=0x0378 flags=0x000a0010c008020c */ UImage* Helmet_Level;
  /* offset=0x037c flags=0x000a0010c008020c */ UProgressBar* Helmet_RuinPercentage;
  /* offset=0x0380 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_KeepRunningTips;
  /* offset=0x0384 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_NavigatingTips;
  /* offset=0x0388 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x038c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0390 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0394 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0398 flags=0x000a0010c008020c */ UImage* Image_4GBad;
  /* offset=0x039c flags=0x000a0010c008020c */ UImage* Image_4GGood;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UImage* Image_4GNotGood;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UImage* Image_BackPackCDBar;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UImage* Image_FullStatus;
  /* offset=0x03ac flags=0x000a0010c008020c */ UImage* Image_HelpBG;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UImage* Image_HelpIcon;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UImage* Image_Microphone;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UImage* Image_MicrophoneDisabled;
  /* offset=0x03bc flags=0x000a0010c008020c */ UImage* Image_SettingConsoleBtn;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UImage* Image_Voice;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UImage* Image_VoiceDisabled;
  /* offset=0x03c8 flags=0x000a0010c008020c */ UImage* Image_WifiBad;
  /* offset=0x03cc flags=0x000a0010c008020c */ UImage* Image_WifiGood;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UImage* Image_WifiNotGood;
  /* offset=0x03d4 flags=0x000a0010c008020c */ UIngame_TeamPanel_BP_C* Ingame_TeamPanel_BP;
  /* offset=0x03d8 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x03dc flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox_GM;
  /* offset=0x03e0 flags=0x000a0010c008020c */ UTextBlock* IslandSurviveCountText;
  /* offset=0x03e4 flags=0x000a0010c008020c */ UUTRichTextBlock* KilledByOtherTipContent;
  /* offset=0x03e8 flags=0x000a0010c008020c */ UUTRichTextBlock* KilledTipCommon;
  /* offset=0x03ec flags=0x000a0010c008020c */ UUTRichTextBlock* KillNum;
  /* offset=0x03f0 flags=0x000a0010c008020c */ UUTRichTextBlock* KillOtherTipContent;
  /* offset=0x03f4 flags=0x000a0010c008020c */ UGridPanel* KillTipContainer;
  /* offset=0x03f8 flags=0x000a0010c008020c */ UImage* MicrophoneBG;
  /* offset=0x03fc flags=0x000a0010c008020c */ UBorder* MiniMapAndSettingBorder;
  /* offset=0x0400 flags=0x000a0010c008020c */ UWidgetSwitcher* MobileSignalWidgetSwitcher;
  /* offset=0x0404 flags=0x000a0010c008020c */ UGridPanel* Navigating;
  /* offset=0x0408 flags=0x000a0010c008020c */ UNavigatorPanel_C* NavigatorPanel;
  /* offset=0x040c flags=0x000a0010c008020c */ UNewEntireMap_C* NewEntireMap;
  /* offset=0x0410 flags=0x000a0010c008020c */ UFreeCameraBtn_C* NewFreeCameraBtn;
  /* offset=0x0414 flags=0x000a0010c008020c */ UNewMiniMap_C* NewMiniMap;
  /* offset=0x0418 flags=0x000a0010c008020c */ UNewParachutingPanel_C* NewParachutingPanel;
  /* offset=0x041c flags=0x000a0010c008020c */ UGridPanel* ParachutingMsgPanel;
  /* offset=0x0420 flags=0x000a0010c008020c */ UPlayerInfoPanel_C* PlayerInfoPanel;
  /* offset=0x0424 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Battery;
  /* offset=0x0428 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_NavigateCD;
  /* offset=0x042c flags=0x000a0010c008020c */ UUTRichTextBlock* PutDownByOtherTipContent;
  /* offset=0x0430 flags=0x000a0010c008020c */ UUTRichTextBlock* PutDownOtherTipContent;
  /* offset=0x0434 flags=0x000a0010c008020c */ UQuickMenu_BP_C* QuickMenu_BP;
  /* offset=0x0438 flags=0x000a0010c008020c */ UImage* ReportingBG;
  /* offset=0x043c flags=0x000a0010c008020c */ UTextBlock* ReportingText;
  /* offset=0x0440 flags=0x000a0010c008020c */ UImage* SettingBG;
  /* offset=0x0444 flags=0x000a0010c008020c */ UImage* SettingConsole;
  /* offset=0x0448 flags=0x000a0010c008020c */ UImage* shotTips;
  /* offset=0x044c flags=0x000a0010c008020c */ UWidgetSwitcher* SignalWidgetSwitcher;
  /* offset=0x0450 flags=0x000a0010c008020c */ UImage* SlienceTips;
  /* offset=0x0454 flags=0x000a0010c008020c */ UImage* SpeakerBG;
  /* offset=0x0458 flags=0x000a0010c008020c */ USurviveInfoPanel_C* SurviveInfoPanel;
  /* offset=0x045c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0460 flags=0x000a0010c008020c */ UTextBlock* TextBlock_BID;
  /* offset=0x0464 flags=0x000a0010c008020c */ UTextBlock* TextBlock_FPS;
  /* offset=0x0468 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Hour;
  /* offset=0x046c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Minute;
  /* offset=0x0470 flags=0x000a0010c008020c */ UTextBlock* TextBlock_NumOfPeopleInAircraft;
  /* offset=0x0474 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Ping;
  /* offset=0x0478 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WaitingTips;
  /* offset=0x047c flags=0x000a0010c008020c */ UTextBlock* TextGameStartCountDown;
  /* offset=0x0480 flags=0x000a0010c008020c */ UKilledTipsPanel_C* TipsPanel;
  /* offset=0x0484 flags=0x000a0010c008020c */ UUTRichTextBlock* TopTipsCommon;
  /* offset=0x0488 flags=0x000a0010c008020c */ UUTRichTextBlock* TopTipsDanger;
  /* offset=0x048c flags=0x000a0010c008020c */ UUTRichTextBlock* TopTipsWaining;
  /* offset=0x0490 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_KillTips;
  /* offset=0x0494 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Run;
  /* offset=0x0498 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_TopTips;
  /* offset=0x049c flags=0x000a0010c008020c */ UWidgetSwitcher* WifiSignalWidgetSwitcher;
  /* offset=0x04a0 flags=0x0008001040010a05 */ ASTExtraPlayerController* STExtraPlayerController;
  /* offset=0x04a4 flags=0x0000001040010205 */ bool Marker;
  /* offset=0x04a5 flags=0x0008001040010205 */ enum ESlateVisibility EnterCarShow;
  /* offset=0x04a6 flags=0x0008001040010205 */ enum ESlateVisibility ExitCarShow;
  /* offset=0x04a8 flags=0x0008001040010205 */ UMainControlPanelTochButton_C* MainControl;
  /* offset=0x04ac flags=0x0000100010010205 */ FED_EnterExitCar ED_EnterExitCar;
  /* offset=0x04b8 flags=0x0000100010010205 */ FED_DriveCar ED_DriveCar;
  /* offset=0x04c4 flags=0x0008000000010205 */ FString KillTipsValue;
  /* offset=0x04d0 flags=0x0000000000010005 */ FText circleInfo;
  /* offset=0x04dc flags=0x0008001040010205 */ enum ESlateVisibility CircleInfoShow;
  /* offset=0x04e0 flags=0x0008001040010205 */ UGMUI_C* GMUI;
  /* offset=0x04e4 flags=0x0008000000010205 */ FString DamageTextValue;
  /* offset=0x04f0 flags=0x0008001040010a05 */ ASTExtraGameStateBase* STExtraGameStateBase;
  /* offset=0x04f4 flags=0x0000000000010005 */ FText AirAttackWarningText;
  /* offset=0x0500 flags=0x0000000000010005 */ struct FSlateBrush BlueWarningBrush;
  /* offset=0x0568 flags=0x0000000000010005 */ struct FSlateBrush RedWarningBrush;
  /* offset=0x05d0 flags=0x0008001040010205 */ float NavigateCorrecteAngle;
  /* offset=0x05d4 flags=0x0000100010010205 */ FED_CommonBtn ED_CommonBtn;
  /* offset=0x05e0 flags=0x0008001040000205 */ uint8 CommonBtnType;
  /* offset=0x05e4 flags=0x0000000000000205 */ TArray<struct FSlateBrush> CommonBtnType_brush;
  /* offset=0x05f0 flags=0x0008001040010a05 */ ASTExtraPlayerState* STExtraPlyaerState;
  /* offset=0x05f4 flags=0x0000001040010205 */ bool IsShowingCountDown;
  /* offset=0x05f8 flags=0x0008001040010205 */ int32 FatalDamageCount;
  /* offset=0x05fc flags=0x0008001040010205 */ UKillInfoItem_BP_C* CurFatalDamageWidget;
  /* offset=0x0600 flags=0x0008001040010205 */ float FatalDamageElapsedTime;
  /* offset=0x0604 flags=0x0008001040010205 */ UKillInfoItem_BP_C* PrevFatalDamageWidget;
  /* offset=0x0608 flags=0x0000001000010005 */ struct FTimerHandle CurFatalDamageClearTimer;
  /* offset=0x0610 flags=0x0008001040010205 */ UUserWidget* BackToLobbyBox;
  /* offset=0x0614 flags=0x0008001040010205 */ float Init Item CDTime;
  /* offset=0x0618 flags=0x0008001040010205 */ float ItemCDCurTime;
  /* offset=0x061c flags=0x0000001040010205 */ bool ShowItem CD;
  /* offset=0x0620 flags=0x0008001040010205 */ float UpdateBatteryAndSignalElapsedTime;
  /* offset=0x0624 flags=0x0008001040010205 */ int32 DebugPing;
  /* offset=0x0628 flags=0x0008001040010205 */ USettingConfig_C* SettingConfig;
  /* offset=0x062c flags=0x0000001040010205 */ bool PingDebug;
  /* offset=0x0630 flags=0x0000000000010205 */ TMap<int32, struct FBP_STRUCT_Item_type> EquipmentDataRowArray;
  /* offset=0x066c flags=0x0008001040010205 */ int32 BagSubType;
  /* offset=0x0670 flags=0x0008001040010205 */ int32 HelmetSubType;
  /* offset=0x0674 flags=0x0008001040010205 */ int32 ArmorSubType;
  /* offset=0x0678 flags=0x0000000000010005 */ struct FBattleItemData BagItemInBag;
  /* offset=0x06f8 flags=0x0000000000010005 */ struct FBattleItemData HelmetItemInBag;
  /* offset=0x0778 flags=0x0000000000010005 */ struct FBattleItemData ArmorItemInBag;
  /* offset=0x07f8 flags=0x0000000000010005 */ struct FSlateBrush Level1Image;
  /* offset=0x0860 flags=0x0000000000010005 */ struct FSlateBrush Level2Image;
  /* offset=0x08c8 flags=0x0000000000010005 */ struct FSlateBrush HelmetLevel1Image;
  /* offset=0x0930 flags=0x0000000000010005 */ struct FSlateBrush Level3Image;
  /* offset=0x0998 flags=0x0008001040010205 */ float CacheCapacity;
  /* offset=0x09a0 flags=0x0008001000010005 */ struct FItemDefineID CacheHelmetDefineID;
  /* offset=0x09b8 flags=0x0008001000010005 */ struct FItemDefineID CacheArmorDefineID;
  /* offset=0x09d0 flags=0x0008001040010205 */ int32 CacheArmorDurability;
  /* offset=0x09d4 flags=0x0008001040010205 */ int32 CacheHelmetDurability;
  /* offset=0x09d8 flags=0x0000000000010005 */ struct FSlateBrush HelmetLevel2Image;
  /* offset=0x0a40 flags=0x0000000000010005 */ struct FSlateBrush HelmetLevel3Image;
  /* offset=0x0aa8 flags=0x0000000000010005 */ struct FSlateBrush ArmorLevel1Image;
  /* offset=0x0b10 flags=0x0000000000010005 */ struct FSlateBrush ArmorLevel2Image;
  /* offset=0x0b78 flags=0x0000000000010005 */ struct FSlateBrush ArmorLevel3Image;
  /* offset=0x0be0 flags=0x0008001040010205 */ UUIVoiceCheckObject_C* VoiceCheckObject;
  /* offset=0x0be8 flags=0x0000000000010005 */ struct FSlateBrush BackpackLevel1Image;
  /* offset=0x0c50 flags=0x0000000000010005 */ struct FSlateBrush BackpackLevel2Image;
  /* offset=0x0cb8 flags=0x0000000000010005 */ struct FSlateBrush BackpackLevel3Image;
  /* offset=0x0d20 flags=0x0000000000010005 */ struct FSlateBrush BackpackDefaultImage;

  void AddNewFatalDamageInfo(int32 CallFunc_Add_IntInt_ReturnValue);
  void AddOneNewItem();
  void AlivePlayerNumForMainUI();
  void ApplyCustomUIPosition(TArray<struct FDragableBtnPositionDataStruct> CustomUI, struct FVector2D ViewportPosition);
  void AutoSprintActive();
  void BackPackCDBar(float CD, UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);
  void BindBackpackUpdate();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_77_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_21_K2Node_ComponentBoundEvent_210_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Microphone_K2Node_ComponentBoundEvent_101_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_ReportBug_K2Node_ComponentBoundEvent_51_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Voice_K2Node_ComponentBoundEvent_78_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__EntireMapTrigger_K2Node_ComponentBoundEvent_78_OnButtonClickedEvent__DelegateSignature();
  void ClearCurFatalDamagetWidget();
  void CloseMicphone(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue);
  void CloseSpeaker(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue);
  void Construct();
  void CustomEvent(bool IsShowPrompt, float LastTime, FString PromptText);
  void Destruct();
  void DidplayCircleTip(FText msg);
  void DisplayAirAttackTip(struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void DisplayGameTipWithMsgID(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void DisplayGameTipWithMsgIDAndParam(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5);
  void DisplayKillOrPutDownMessage(struct FKillOrPutDownMessage MsgData, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void ED_CommonBtn__DelegateSignature(uint8 commontype);
  void ED_DriveCar__DelegateSignature(int32 Direction);
  void ED_EnterExitCar__DelegateSignature(bool IsIn);
  void EnterFightingSetUI(FString CallFunc_Concat_StrStr_ReturnValue);
  void EnterJumping();
  void EnterJumpingSetUI();
  void ExecuteUbergraph_MainControlBaseUI(int32 EntryPoint, FOnGameStartCountDownDelegate K2Node_CreateDelegate_OutputDelegate, FOnWidgetAnimationPlaybackStatusChanged K2Node_CreateDelegate_OutputDelegate2, FOnShowSkillPromptDelegate K2Node_CreateDelegate_OutputDelegate3, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate4, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate5, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, FBindEventToBackpackComponent K2Node_CreateDelegate_OutputDelegate6, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float K2Node_CustomEvent_CountDownTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, float K2Node_CustomEvent_damageToOther, AGameStateBase* CallFunc_GetGameState_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, uint8 K2Node_CustomEvent_airattacktype, int32 K2Node_CustomEvent_waveindex, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess3, FOnPlayerNumChangeDelegate K2Node_CreateDelegate_OutputDelegate7, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess4, TArray<ABP_MiniMapStandardPoint_C*> CallFunc_GetAllActorsOfClass_OutActors, ABP_MiniMapStandardPoint_C* CallFunc_Array_Get_Item, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate8, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsPlayerCanSeeWidget_cansee, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate9, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float K2Node_CustomEvent_DamageAngel, APlayerController* CallFunc_GetOwningPlayer_ReturnValue4, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, FOnAutoSprintActive K2Node_CreateDelegate_OutputDelegate10, APlayerController* CallFunc_GetOwningPlayer_ReturnValue5, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float K2Node_CustomEvent_Delta, bool CallFunc_IsValid_ReturnValue5, UKillInfoItem_BP_C* CallFunc_GetFatalDamageWidget_KillInfoItem_BP, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue3, FOnInterruptAutoSprintCountDown K2Node_CreateDelegate_OutputDelegate11, bool K2Node_CustomEvent_IsShowPrompt, float K2Node_CustomEvent_LastTime, FString K2Node_CustomEvent_PromptText, FString CallFunc_GetLocalizationString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate12, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue2, bool CallFunc_IsShowingRescueingUI_NewParam, APlayerController* CallFunc_GetOwningPlayer_ReturnValue6, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess6, UInterface<UCustomUIPositionInterface_C>* K2Node_DynamicCast_AsCustom_UIPosition_Interface, bool K2Node_DynamicCast_bSuccess7, FOnStartAutoSprintCountDown K2Node_CreateDelegate_OutputDelegate13, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue3, FOnRepPlayerState K2Node_CreateDelegate_OutputDelegate14, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess8, int32 CallFunc_PostEventAtLocation_ReturnValue, bool K2Node_CustomEvent_BoolValue, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate15, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail, bool CallFunc_GetLayoutDetailByType_IsFound, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail2, bool CallFunc_GetLayoutDetailByType_IsFound2, struct FLinearColor K2Node_MakeStruct_LinearColor, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail3, bool CallFunc_GetLayoutDetailByType_IsFound3, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_NotEqual_FloatFloat_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue7, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue3, UUIVoiceCheckObject_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue8, UWidget* CallFunc_GetChildByName_ReturnValue, UCanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_IsValid_ReturnValue9, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess10, APlayerController* CallFunc_GetPlayerController_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess11, int32 CallFunc_PostEvent_ReturnValue, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate16, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, FOnTakeDamaged K2Node_CreateDelegate_OutputDelegate17, bool CallFunc_EqualEqual_ByteByte_ReturnValue, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess12, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess13, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FString CallFunc_GetLocalizeText_Text, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess14, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetBattleIDHexStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue8, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess15, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_HasState_ReturnValue, FAirAttackNotify K2Node_CreateDelegate_OutputDelegate18, int32 CallFunc_GetBatteryLevel_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue3, FOnDamageToOtherDelegate K2Node_CreateDelegate_OutputDelegate19, bool CallFunc_HasActiveWiFiConnection_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue9, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_IsAGMPlayer_ReturnValue);
  void ForceUpdateHelmetAndArmorState();
  void GameStartCountDown(float CountDownTime);
  void GetEquipItemDataTableRowMap(TMap<int32, struct FBP_STRUCT_Item_type> DataMap, int32 ___int_Array_Index_Variable, int32 CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void GetFatalDamageWidget(UKillInfoItem_BP_C* KillInfoItem_BP, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UKillInfoItem_BP_C* CallFunc_Create_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UPanelSlot* CallFunc_AddChild_ReturnValue);
  void GetMainControl(UMainControlPanelTochButton_C* NewParam, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void GetTargetAvatarBySpecificID(int32 Key, UBattleItemHandle_AvatarBP_C* TargetAvatar, UUAELoadedClassManager* CallFunc_Get_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, UClass<UObject>* CallFunc_GetClass_ReturnValue, UClass<UBattleItemHandle_AvatarBP_C>* K2Node_ClassDynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_ClassDynamicCast_bSuccess, UBattleItemHandle_AvatarBP_C* CallFunc_SpawnObject_ReturnValue);
  void GetTargetAvatarCurDurability(TArray<struct FBattleItemAdditionalData> Arrary, int32 CurDurability, int32 CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, struct FBattleItemAdditionalData CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void HandleDetailDisplayKillOrPutDownMessageNew(UUTRichTextBlock* TextBox, struct FKillOrPutDownMessage MsgData, FString CallFunc_GetRawBattleTextByType_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void HandleItemListUpdate();
  void HideJoinGameUI();
  void HideParachuteUI();
  void HideRoute();
  void HnadleReceivePlayerState();
  void InitCircleInfo(FOnCharacterBlueCircleRunDelegate K2Node_CreateDelegate_OutputDelegate, FOnCharacterBlueCirclePreWarningDelegate K2Node_CreateDelegate_OutputDelegate2, FOnCharacterSafeZoneTipsDelegate K2Node_CreateDelegate_OutputDelegate3, AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void InitDelegate(FOnLocalCharacterHPChangeDelegate K2Node_CreateDelegate_OutputDelegate, FOnTeammateHPChangeDelegate K2Node_CreateDelegate_OutputDelegate2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, FOnCharacterKilledTipsDelegate K2Node_CreateDelegate_OutputDelegate3, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FOnLocalCharacterHPChangeDelegate K2Node_CreateDelegate_OutputDelegate4, FOnPlayerNameChange K2Node_CreateDelegate_OutputDelegate5, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue);
  void InitJoinGameUIVisible(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
  void InitMap(FMarkerClick K2Node_CreateDelegate_OutputDelegate);
  void InitPlayerInfo(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void InitPlayerState(bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess);
  void InitVoiceStatus(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void InterruptAutoSprintCountDown();
  void MapUIDrawAirplaneRoute(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_GetAirplaneStopLoc_ReturnValue, struct FVector CallFunc_GetAirplaneStartLoc_ReturnValue);
  void MessageBoxBackToLobby(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, AUAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void MessageBoxCencel(bool CallFunc_IsValid_ReturnValue);
  void OnBindEventToBackpackComponent();
  void OnCircleBlueCirclePreWarning(float Time, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_Round_ReturnValue, FText CallFunc_FormatSecondsToString_Ret, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);
  void OnCircleBlueCircleRun(float Time, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void OnCircleSafeZoneTips(float Time, FString SecondText, FString MinuteText, int32 Second, int32 Minute, int32 Dummy, FString tips2, FString tips1, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, FText CallFunc_FormatSecondsToString_Ret, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);
  void OnClickMapMarker();
  void OnDamageToOther(float damageToOther);
  void OnGameJoyRecordingStart(UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, UWonderfulRecordingCut* CallFunc_GetWonderfulRecordingCut_ReturnValue);
  void OnKillTips(struct FKilledTipsBlock TipsBlock, FString DeadName, FString WeaponName, FString attackerName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void OnPlayerNumChange();
  void OnReceiveAirAttackBroadcast(uint8 airattacktype, int32 waveindex);
  void OnTakeDamage(float DamageAngel);
  struct FEventReply On_BackpackBtn_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, struct FEventReply CallFunc_Handled_ReturnValue, int32 CallFunc_PostEvent_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  struct FEventReply On_CommonBG_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply On_EntireMapTrigger_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  struct FEventReply On_GMConsole_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAGMPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FEventReply CallFunc_Handled_ReturnValue, UGMUI_C* CallFunc_Create_ReturnValue);
  struct FEventReply On_GetInCarBG_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, UMainControlPanelTochButton_C* CallFunc_GetMainControl_NewParam, struct FEventReply CallFunc_Handled_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  struct FEventReply On_GetOutCarBG_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, UMainControlPanelTochButton_C* CallFunc_GetMainControl_NewParam, struct FEventReply CallFunc_Handled_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  struct FEventReply On_Image_SettingConsoleBtn_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void OpenMicphone(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UGameInstance* CallFunc_GetGameInstance_ReturnValue2, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess2, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess3, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess4, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue2, int32 CallFunc_OpenIngameMicphone_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);
  void OpenSpeaker(UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, UGVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue);
  void Parachuting_HeightBarMoveBack();
  void Parachuting_HeightBarMoveLeft();
  void ReUpdateJoinPlayer();
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_NameName_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5);
  void RedrawInvalidationImage();
  void RedrawMinimapAndSettingUI();
  void RefreshFlyNum(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);
  void ResetCustomUIPosition(struct FVector2D ViewportPosition);
  void SetAutoSprintUI(bool AutoSprint);
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetRenderTransformIfValid(struct FVector2D Position, UPanelWidget* GridPanel, struct FVector2D ViewportPosition, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void SetSettingControlUI();
  void Show/HideFreeCam(bool isShow);
  void ShowCircleInfoTips();
  void ShowCountDown(bool Show, bool CallFunc_NotEqual_BoolBool_ReturnValue);
  void ShowFlyingInfo(bool isShow);
  void SprintAnimFinished();
  void StartAutoSprintCountDown();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UnInitDelegate(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, FOnCharacterKilledTipsDelegate K2Node_CreateDelegate_OutputDelegate, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FOnLocalCharacterHPChangeDelegate K2Node_CreateDelegate_OutputDelegate2, FOnPlayerStateNameChange K2Node_CreateDelegate_OutputDelegate3, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue);
  void UpdateBackPackCapacity();
  void UpdateBagLevel(UBackpackComponent* BackpackComponent, bool HasLevel, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetClothingAndArmorInBackpack_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetEquipItemDataTableRowMap_DataMap, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4);
  void UpdateBatteryLevelAndSignal(float DeltaTime, float UpdateCycle, int32 CallFunc_GetCurrentNetworkState_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_GetBatteryLevel_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void UpdateCommonBtn(uint8 Type, bool K2Node_SwitchEnum_CmpSuccess);
  void UpdateEquipmentDurability(float CurHP, float ratioHP, UBattleItemHandle_AvatarBP_C* TargetArmorAvatar, UBattleItemHandle_AvatarBP_C* TargetHelmetAvatar, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, bool CallFunc_IsValid_ReturnValue, struct FBattleItemData CallFunc_GetItemByDefineID_ReturnValue, struct FBattleItemData CallFunc_GetItemByDefineID_ReturnValue2, UBattleItemHandle_AvatarBP_C* CallFunc_GetTargetAvatarBySpecificID_TargetAvatar, bool CallFunc_IsValid_ReturnValue2, UBattleItemHandle_AvatarBP_C* CallFunc_GetTargetAvatarBySpecificID_TargetAvatar2, bool CallFunc_IsValid_ReturnValue3, int32 CallFunc_GetTargetAvatarCurDurability_CurDurability, bool CallFunc_Greater_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_GetTargetAvatarCurDurability_CurDurability2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue4, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, float CallFunc_FClamp_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue4);
  void UpdateFPS(float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_Round_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
  void UpdateFatalDamageUI(float Delta);
  void UpdateHelmetAndArmorLevel(UBackpackComponent* BackpackComponent, struct FItemDefineID InvalidDefineID, bool bRedrawArmor, bool bRedrawHelmet, bool bHasArmor, bool bHasHelmet, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetClothingAndArmorInBackpack_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, TMap<int32, struct FBP_STRUCT_Item_type> CallFunc_GetEquipItemDataTableRowMap_DataMap, int32 ___int_Loop_Counter_Variable, struct FBP_STRUCT_Item_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue8, bool CallFunc_EqualEqual_IntInt_ReturnValue9, bool CallFunc_EqualEqual_IntInt_ReturnValue10, int32 CallFunc_Add_IntInt_ReturnValue);
  void UpdateInspectatTargetHealth(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInSpectating_ReturnValue, ASTExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPlayerMaxHealth_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetPlayerHealth_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
  void UpdateItemUsingProgress(FText CallFunc_Conv_FloatToText_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);
  void UpdateJoinPlayerNum();
  void UpdateMarker(float Distance, struct FRotator RB, int32 CurIndex, struct FVector Loc, float HalfPix, float DtYaw, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2, int32 ___int_Array_Index_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_Round_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_Divide_FloatFloat_ReturnValue2, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, int32 CallFunc_Round_ReturnValue2, FText CallFunc_Format_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APawn* CallFunc_GetCurPawn_ReturnValue, struct FRotator CallFunc_GetControlLookRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, struct FRotator CallFunc_MakeRotator_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_IsValidIndex_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess3, APawn* CallFunc_K2_GetPawn_ReturnValue, struct FRotator CallFunc_GetControlLookRotation_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, struct FRotator CallFunc_MakeRotator_ReturnValue2, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_MapRangeClamped_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, struct FRotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, struct FRotator CallFunc_MakeRotator_ReturnValue3, struct FRotator CallFunc_NormalizedDeltaRotator_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue2, ASTExtraPlayerState* CallFunc_Array_Get_Item2, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, float CallFunc_VSize2D_ReturnValue2, struct FRotator CallFunc_Conv_VectorToRotator_ReturnValue2, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, int32 CallFunc_Array_Length_ReturnValue, struct FRotator CallFunc_MakeRotator_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue, struct FRotator CallFunc_NormalizedDeltaRotator_ReturnValue2, float CallFunc_BreakRotator_Roll6, float CallFunc_BreakRotator_Pitch6, float CallFunc_BreakRotator_Yaw6, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_MapRangeClamped_ReturnValue2, UTextBlock* CallFunc_Array_Get_Item3, struct FVector2D CallFunc_MakeVector2D_ReturnValue4, bool CallFunc_Array_IsValidIndex_ReturnValue2, UWidget* CallFunc_Array_Get_Item4, bool CallFunc_Array_IsValidIndex_ReturnValue3, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2);
  void UpdatePickupList(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4);
  void UpdateSignalByPing(int32 FakePing, uint8 SignalStatus, FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, int32 CallFunc_GetActiveWidgetIndex_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, uint8 CallFunc_Subtract_ByteByte_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue2, bool CallFunc_InRange_IntInt_ReturnValue3);
  void UpdateStartButtonVisible();
  void UseItemCDbar(float CdValue , UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);
  void VoiceSwitchChanged(bool BoolValue);
  void ongamemodestatechanged(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
  void onplayercontrollerstatechanged(APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchName_CmpSuccess, AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
};

class UMainControlPanelTochButton_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCanvasPanel* BaseLayer;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x023c flags=0x000a0010c008020c */ UMainControlBaseUI_C* MainControlBaseUI;
  /* offset=0x0240 flags=0x000a0010c008020c */ UParachutingControl_C* ParachutingControl;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCanvasPanel* ParachutingLayer;
  /* offset=0x0248 flags=0x000a0010c008020c */ UCanvasPanel* ShootingLayer;
  /* offset=0x024c flags=0x000a0010c008020c */ UShootingUIPanel_C* ShootingUIPanel;
  /* offset=0x0250 flags=0x000a0010c008020c */ UCanvasPanel* VehicleControlLayer;
  /* offset=0x0254 flags=0x000a0010c008020c */ UVehileControlPanel_C* VehileControlPanel;
  /* offset=0x0258 flags=0x0008001040010005 */ struct FVector MarkerPosition;
  /* offset=0x0264 flags=0x0008001040010205 */ int32 PoseStateOffset;
  /* offset=0x0268 flags=0x0008001040010205 */ enum ESlateVisibility InterActionCar;
  /* offset=0x0269 flags=0x0008001040010205 */ enum ESlateVisibility InterActionShoot;
  /* offset=0x026a flags=0x0008001040010205 */ enum ESlateVisibility MarkerShow;
  /* offset=0x026b flags=0x0008001040010205 */ enum ESlateVisibility InterActionAirborne;
  /* offset=0x026c flags=0x0008001040010a05 */ ASTExtraPlayerController* Controller;
  /* offset=0x0270 flags=0x0008001040010205 */ uint8 OperationState;
  /* offset=0x0274 flags=0x0000100010010205 */ FSetCustomUIPosition SetCustomUIPosition;
  /* offset=0x0280 flags=0x0000000000010205 */ TMap<FString, struct FUIAdaptationStructure> AdaptationDict;
  /* offset=0x02bc flags=0x0008000000010005 */ struct FUIAdaptationStructure CurDeviceAdaptationData;
  /* offset=0x02d8 flags=0x0000001040010205 */ bool IsSettingAssistant;
  /* offset=0x02d9 flags=0x0000001040010205 */ bool IsAssistantTransparent;

  void ApplyCustomUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsEmulatorWhenInit_ReturnValue);
  void ApplyCustomUIPosition();
  void ApplyUserSettingInfo(int32 CallFunc_GetUIElementSetting_FireMode, UBP_SAVEGAME_UIElemLayout_C* CallFunc_GetUIElementSetting_UIElemSaveGame, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void ChangeFireMode(int32 IntValue);
  void CheckBackpackOpenState(enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void CloseBackPack();
  void CloseMap();
  void Construct();
  void DebugSetAllUIVisibility(bool IsVisible);
  void EnterSpectatingStatus();
  void ExecuteUbergraph_MainControlPanelTochButton(int32 EntryPoint, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, TArray<struct FDragableBtnPositionDataStruct> CallFunc_GetCustomUIPosition_Custom, bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsNeedSetOffset_NewParam, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, int32 K2Node_CustomEvent_Kills, int32 K2Node_CustomEvent_Rank, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue, FOnRank K2Node_CreateDelegate_OutputDelegate3, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, FOnHideUIAfterPlayerDeadDelegate K2Node_CreateDelegate_OutputDelegate4, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int32 K2Node_CustomEvent_IntValue);
  void GameAssistantHideUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void GameAssistantShowUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void GetCustomUIPosition(TArray<struct FDragableBtnPositionDataStruct> Custom, TArray<struct FDragableBtnPositionDataStruct> CustomUIPosition, UShootingUIPositionSaveData_C* PositionSavingInstance, bool CallFunc_SaveGameToSlot_ReturnValue, USaveGame* CallFunc_LoadGameFromSlot_ReturnValue, UShootingUIPositionSaveData_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, UShootingUIPositionSaveData_C* K2Node_DynamicCast_AsShooting_UIPosition_Save_Data, bool K2Node_DynamicCast_bSuccess);
  void GetUIElementSetting(int32 FireMode, UBP_SAVEGAME_UIElemLayout_C* UIElemSaveGame, UBP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSG_UIElemSaveGame, bool CallFunc_IsValid_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, bool CallFunc_IsValid_ReturnValue2, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void HideAllUIAfterDeadTipsShow();
  void IngameUIAdaptation(struct FMargin K2Node_MakeStruct_Margin, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void IsNeedSetOffset(bool NewParam, FString CallFunc_GetPlatformName_ReturnValue, FString CallFunc_GetDeviceName_ReturnValue, bool CallFunc_Contains_ReturnValue, struct FUIAdaptationStructure CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Contains_ReturnValue2, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, struct FUIAdaptationStructure CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);
  void MainControlPanel_HideAllUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, AHUD* CallFunc_GetHUD_ReturnValue);
  void OnEnterSpectatinStatus();
  void OnHideUIAfterPlayerDeadDelegate();
  void OnRankChange(int32 Kills, int32 Rank);
  void OperatingRules1(struct FMargin K2Node_MakeStruct_Margin, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, struct FMargin K2Node_MakeStruct_Margin2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, UGridSlot* CallFunc_SlotAsGridSlot_ReturnValue, UGridSlot* CallFunc_SlotAsGridSlot_ReturnValue2);
  void OperatingRules2(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void ReadAdaptationTable(bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FUIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState();
  void ResetCustomUIForAssistant(bool IsTransparent, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsEmulatorWhenInit_ReturnValue);
  void SetCustomUIPosition__DelegateSignature(TArray<struct FDragableBtnPositionDataStruct> CustomUIPosition);
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetSettingControlUI();
  void ShowAirborneUI();
  void ShowDriveUI();
  void ShowFreeFallUI();
  void ShowShooterUI();
  void ShowSpectatingUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void SwitchOperationByPlayerControllerState(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UBP_VehicleUser_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  void SwitchOperationUI(bool CallFunc_IsValid_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIElemLayoutApplyCustomSetting(bool CallFunc_IsEmulatorWhenInit_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
};

class UMainWeaponInfoItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UHorizontalBox* BulletBox;
  /* offset=0x0238 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP;
  /* offset=0x023c flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x0240 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x0244 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x0248 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_SelectedStatus;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_WeaponIcon;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock_BulletName;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentNumberOfBullets;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxNumberOfBullets;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* TextBlock_UsingTips;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WeaponGroupID;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WeaponName;
  /* offset=0x026c flags=0x0008000000010005 */ struct FBP_STRUCT_Item_type WeaponDataRow;
  /* offset=0x0390 flags=0x0008001040010205 */ UUserWidget* ParentUserWidget;
  /* offset=0x0394 flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x0398 flags=0x0000000000010005 */ struct FSlateBrush SmallIconBrush;
  /* offset=0x0400 flags=0x0000001040010205 */ bool bHasStartedTouchIn;
  /* offset=0x0408 flags=0x0000000000010005 */ struct FBattleItemData BattleData;
  /* offset=0x0488 flags=0x0000000000010205 */ TArray<UFitingSlotItem_BP_C*> SlotItemArray;
  /* offset=0x0494 flags=0x0008001040010205 */ uint8 DragOrigin;
  /* offset=0x0495 flags=0x0008001040010205 */ uint8 WeaponSlot;
  /* offset=0x0498 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x04a4 flags=0x0000100010010205 */ FItemBeDragCancelled ItemBeDragCancelled;

  void BindWeaponChangeEvent(FOnCurBulletChange K2Node_CreateDelegate_OutputDelegate, FOnWeaponShootDelegate K2Node_CreateDelegate_OutputDelegate2, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess2);
  void ExecuteUbergraph_MainWeaponInfoItem_BP(int32 EntryPoint, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue2, FItemBeDragCancel K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item, TArray<UFitingSlotItem_BP_C*> K2Node_MakeArray_Array, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FItemBeDragBegin K2Node_CreateDelegate_OutputDelegate2, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation, struct FBattleItemData K2Node_CustomEvent_ItemData, uint8 K2Node_CustomEvent_DragOrigin);
  void FittingItemBeDragBegin(struct FBattleItemData ItemData, uint8 DragOrigin);
  void FittingItemBeDragCancel();
  void HighLightAttachSlot(struct FItemDefineID DefineID, struct FItemDefineID highDefineID, enum EWeaponAttachmentSocketType toHighlightSocket, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Conv_ByteToInt_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsGunSupportAttachByResID_support, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket, TArray<enum EWeaponAttachmentSocketType> CallFunc_GetWeaponSupportSocket_socketList, enum EWeaponAttachmentSocketType CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void HighLightBG(bool IsHighLight);
  void InitItemArray();
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrigin);
  void ItemBeDragCancelled__DelegateSignature();
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue2, struct FEventReply CallFunc_CaptureMouse_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue2, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);
  void ReceivedInitWidget();
  void ResertHighLightAttachSlot(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FItemDefineID K2Node_MakeStruct_ItemDefineID, int32 CallFunc_Array_Length_ReturnValue, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateBullet(ASTExtraShootWeapon* shootWeapon, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue, UShootWeaponEntity* K2Node_DynamicCast_AsShoot_Weapon_Entity, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetItemCountByDefineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2);
  void UpdateSlotVisibility(int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, TArray<enum EWeaponAttachmentSocketType> CallFunc_GetWeaponSupportSocket_socketList, bool CallFunc_NotEqual_IntInt_ReturnValue, enum EWeaponAttachmentSocketType CallFunc_Array_Get_Item, int32 CallFunc_Conv_ByteToInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable2, bool CallFunc_Less_IntInt_ReturnValue, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2);
  void UpdateUsingSlot(uint8 Slot, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void UpdateWeaponAppearanceInfo(struct FBP_STRUCT_Item_type WeaponData, struct FBattleItemData BattleData, uint8 DragOrigin, FText CallFunc_Conv_StringToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue2, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, UTexture2D* K2Node_DynamicCast_AsTexture_2D2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FSlateBrush K2Node_MakeStruct_SlateBrush);
  void UpdateWeaponAttachment(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, struct FItemAssociation CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, UBattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, UBackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, UFitingSlotItem_BP_C* CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue);
};

class UMainWeaponSlot_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* CurWeaponHighLight;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x01bc flags=0x000a0010c008020c */ UWeaponEquipmentSlot_C* ScopeSlot;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UWeaponEquipmentSlot_C* WeaponEquipmentSlot;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UWeaponEquipmentSlot_C* WeaponEquipmentSlot;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UWeaponEquipmentSlot_C* WeaponEquipmentSlot;
  /* offset=0x01cc flags=0x000a0010c008020c */ UWeaponEquipmentSlot_C* WeaponEquipmentSlot;
  /* offset=0x01d0 flags=0x0009001040000205 */ uint8 SlotType;
  /* offset=0x01d8 flags=0x0000000000010005 */ struct FBackpackItemData ReadyEquipment;
  /* offset=0x02f0 flags=0x0000001040010205 */ bool IsSlotFilled;
  /* offset=0x02f4 flags=0x0008000000010205 */ FString WeaponName;

  void CancelAllSlotHighLight();
  void ExecuteUbergraph_MainWeaponSlot(int32 EntryPoint, bool K2Node_Event_IsDesignTime);
  void MarkWeaponSlot(uint8 WeaponSlotID);
  void PreConstruct(bool IsDesignTime);
  void SetWeaponName(FString WeaponName);
  void UpdateData(int32 ID);
  void UpdateEquipmentSlotData();
  void UpdateWeaponComponentData(ASTExtraShootWeapon* Weapon);
};

class UMapBuildDataRegistry: public UObject {
  /* offset=0x001c flags=0x0018001040020201 */ uint8 LevelLightingQuality;
};

class UMapCircleAndLineBlackboard_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0238 flags=0x0000001000010005 */ struct FMapRealTimeInfo MapRealTimeInfo;
  /* offset=0x027c flags=0x0008001040010205 */ float MapSize;
  /* offset=0x0280 flags=0x0000100010010205 */ FMoveMap MoveMap;
  /* offset=0x028c flags=0x0000000000010205 */ TArray<struct FVector2D> LastTickFingerPosition;
  /* offset=0x0298 flags=0x0008001040010205 */ float PutMarkerThreshold;
  /* offset=0x029c flags=0x0000000000010205 */ TArray<struct FVector2D> TouchStartFingerPosition;
  /* offset=0x02a8 flags=0x0008001040010a05 */ ASTExtraPlayerController* STExtraPC;
  /* offset=0x02ac flags=0x0000100010010205 */ FSetMarker SetMarker;
  /* offset=0x02b8 flags=0x0000000000010205 */ TArray<float> FingerMoveDis;
  /* offset=0x02c4 flags=0x0000001040010205 */ bool bMultiTouch;
  /* offset=0x02c8 flags=0x0000100010010205 */ FScaleMap ScaleMap;
  /* offset=0x02d4 flags=0x0008001040010205 */ float MultiTouchScaleRatio;
  /* offset=0x02d8 flags=0x0000001040010205 */ bool IsDrawSelfGuide;
  /* offset=0x02dc flags=0x0008001040010005 */ struct FLinearColor SelfGuideColor;
  /* offset=0x02ec flags=0x0008001040010005 */ struct FVector LevelLandScapeCenter;
  /* offset=0x02f8 flags=0x0008001040010205 */ float CorrectLevelToMapScale;
  /* offset=0x02fc flags=0x0008001040010005 */ struct FVector2D SelfGuideAligment;
  /* offset=0x0304 flags=0x0008001040010205 */ float LevelLandScapeExtent;
  /* offset=0x0308 flags=0x0008001040010205 */ float MultiTouchToScaleInitDis;
  /* offset=0x030c flags=0x0008001040010205 */ float GuideLineMaxLength;
  /* offset=0x0310 flags=0x0000001040010205 */ bool DebugNotDrawGuideLine;
  /* offset=0x0314 flags=0x0008001040010005 */ struct FVector2D ScaleVector;
  /* offset=0x031c flags=0x0000000000010205 */ TArray<int32> TouchInMouseIndex;
  /* offset=0x0328 flags=0x0000100010010205 */ FOperateEnd OperateEnd;
  /* offset=0x0334 flags=0x0000100010010205 */ FOperateBegin OperateBegin;
  /* offset=0x0340 flags=0x0008001040010205 */ float DefaultLineThickness;
  /* offset=0x0344 flags=0x0000001040010205 */ bool bAntiAlias;
  /* offset=0x0345 flags=0x0000001040010205 */ bool bIsDrawPlaneRoute;
  /* offset=0x0348 flags=0x0008001040010005 */ struct FVector2D RouteStartLoc;
  /* offset=0x0350 flags=0x0008001040010005 */ struct FVector2D RouteStopLoc;
  /* offset=0x0358 flags=0x0008001040010205 */ float MiniMapImageExtent;
  /* offset=0x035c flags=0x0008001040010205 */ float MinimapWindowExtent;

  void DrawPlaneRoute(bool IsDraw, struct FVector2D Start, struct FVector2D End, float MiniMapImageExtent, float MinimapWindowExtent, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector2D CallFunc_Subtract_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Subtract_Vector2DFloat_ReturnValue2);
  void DrawSelfMarkGuideLine(bool bIsDraw, struct FLinearColor LineColor, struct FVector LevelLandScapeCenter, float CorrectLevelToMapScale, struct FVector2D Aligment, float LevelLanscapeExtent);
  void ExecuteUbergraph_MapCircleAndLineBlackboard(int32 EntryPoint, UGameInstance* CallFunc_GetGameInstance_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayercontroller_NewParam, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetDeviceLevel_ReturnValue, struct FPointerEvent K2Node_Event_MouseEvent, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void GetAnotherFingerIndex(int32 CurIndex, int32 AnotherIndex, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);
  void GetPlayerController(ASTExtraPlayerController* NewParam, bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void MoveMap__DelegateSignature(struct FVector2D Offset);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  void OnPaint(struct FPaintContext Context, struct FPaintContext PaintContext, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue2, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue3, bool CallFunc_IsNeedDrawGuideLine_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue4, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, struct FVector2D CallFunc_AbsoluteToLocal_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  struct FEventReply OnTouchGesture(struct FGeometry MyGeometry, struct FPointerEvent GestureEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, int32 AnotherFinger, int32 CurTouchIndex, struct FVector2D CurFingerPosition, struct FVector2D MoveOffset, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, float CallFunc_VSize2D_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, float CallFunc_VSize2D_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, struct FEventReply K2Node_MakeStruct_EventReply, struct FVector2D CallFunc_Array_Get_Item, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, int32 CallFunc_GetAnotherFingerIndex_AnotherIndex, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_VSize2D_ReturnValue3, float CallFunc_Array_Get_Item2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply2, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue2);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, int32 CallFunc_GetAnotherFingerIndex_AnotherIndex, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float ___float_Variable, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayercontroller_NewParam, struct FEventReply K2Node_MakeStruct_EventReply);
  void OperateBegin__DelegateSignature();
  void OperateEnd__DelegateSignature();
  void ReceivedInitWidget();
  void RemoveArrayItemByIndex(int32 Index, bool CallFunc_Array_RemoveItem_ReturnValue);
  void ScaleMap__DelegateSignature(float ScaleValue);
  void SetMarker__DelegateSignature(struct FVector2D Position);
};

class UMapProperty: public UProperty {
};

class UMatchPopup_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_StartEnter;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Out;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_Transitions_Enter;
  /* offset=0x0240 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Ready;
  /* offset=0x0244 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Play;
  /* offset=0x0248 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Matching;
  /* offset=0x024c flags=0x000a0010c008021c */ UWidgetAnimation* DX_MatchedSuccessfully;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_CancelMatching;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_CancelReady;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_Play;
  /* offset=0x025c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_IPX;
  /* offset=0x0260 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Matching;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* FX_Box01;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* FX_Folw;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* FX_Light;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* FX_Light_S;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* FX_Light_X;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* FX_LightFull;
  /* offset=0x027c flags=0x000a0010c008020c */ UImage* FX_Line;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* FX_Matching;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* FX_Readying;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* FX_ReadyingBox;
  /* offset=0x028c flags=0x000a0010c008020c */ UCanvasPanel* MatchedSuccessfully;
  /* offset=0x0290 flags=0x000a0010c008020c */ UTextBlock* TextBlock_BeginGame;
  /* offset=0x0294 flags=0x000a0010c008020c */ UTextBlock* TextBlock_MatchingTime;
  /* offset=0x0298 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Ready;
  /* offset=0x029c flags=0x0008001040010a05 */ Abp_match_C* MatchPopUpBPObj;
  /* offset=0x02a0 flags=0x0008001040010205 */ int32 remainTimeValue;
  /* offset=0x02a4 flags=0x0008001040010205 */ float PassedTime;
  /* offset=0x02a8 flags=0x0000001040010205 */ bool TimerSwitch;
  /* offset=0x02ac flags=0x0008001040010205 */ int32 StatusReady;
  /* offset=0x02b0 flags=0x0008001040010205 */ int32 matchLimitTime;
  /* offset=0x02b4 flags=0x0000001040010205 */ bool isMatchNoticeShowed;
  /* offset=0x02b5 flags=0x0000001040010205 */ bool isAnimationPlayed;

  void BndEvt__Button_CancelMatching_K2Node_ComponentBoundEvent_81_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_CancelReady_K2Node_ComponentBoundEvent_81_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Play_K2Node_ComponentBoundEvent_14_OnButtonPressedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_MatchPopup_BP(int32 EntryPoint, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsChooingZoneAccess_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, int32 CallFunc_FTrunc_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_match_C* K2Node_DynamicCast_AsBp_Match, bool K2Node_DynamicCast_bSuccess, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_IntegerToTimeString_outputValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void HideEffect();
  void InitMatchState();
  void IntegerToTimeString(int32 inputValue, FString outputValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue2, int32 CallFunc_Percent_IntInt_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, int32 CallFunc_Divide_IntInt_ReturnValue2, int32 CallFunc_Divide_IntInt_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);
  void RefreshMatchingInfo();
  void ResetWhenReconnected(float CallFunc_Conv_IntToFloat_ReturnValue);
  void SetAsMatchSuccess();
  void SetAsMatching();
  void SetTeamMemberUI(bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void SetTeamOwnnerUI();
  void ShowEffect();
  void StartAutoMatch();
  void StopTimeCounting();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void Transitions_Enter();
  void Transitions_Out();
  void UIHide();
  void UIShow();
};

class UMaterial: public UMaterialInterface {
  /* offset=0x004c flags=0x0018001040000201 */ UPhysicalMaterial* PhysMaterial;
  /* offset=0x0050 flags=0x0010000020000000 */ struct FColorMaterialInput DiffuseColor;
  /* offset=0x0088 flags=0x0010000020000000 */ struct FColorMaterialInput SpecularColor;
  /* offset=0x00c0 flags=0x0010000000000000 */ struct FColorMaterialInput BaseColor;
  /* offset=0x00f8 flags=0x0010000000000000 */ struct FScalarMaterialInput Metallic;
  /* offset=0x0130 flags=0x0010000000000000 */ struct FScalarMaterialInput Specular;
  /* offset=0x0168 flags=0x0010000000000000 */ struct FScalarMaterialInput Roughness;
  /* offset=0x01a0 flags=0x0010000000000000 */ struct FVectorMaterialInput Normal;
  /* offset=0x01e0 flags=0x0010000000000000 */ struct FColorMaterialInput EmissiveColor;
  /* offset=0x0218 flags=0x0010000000000000 */ struct FScalarMaterialInput Opacity;
  /* offset=0x0250 flags=0x0010000000000000 */ struct FScalarMaterialInput OpacityMask;
  /* offset=0x0288 flags=0x0018011040000215 */ uint8 MaterialDomain;
  /* offset=0x0289 flags=0x0018011040000215 */ uint8 BlendMode;
  /* offset=0x028a flags=0x0018001040000201 */ uint8 DecalBlendMode;
  /* offset=0x028b flags=0x0018051040000215 */ uint8 MaterialDecalResponse;
  /* offset=0x028c flags=0x0048011040000201 */ uint8 ShadingModel;
  /* offset=0x0290 flags=0x0018041040000201 */ float OpacityMaskClipValue;
  /* offset=0x0294 flags=0x0018041000000001 */ uint8 bCastDynamicShadowAsMasked:1;
  /* offset=0x0298 flags=0x0010000000000000 */ struct FVectorMaterialInput WorldPositionOffset;
  /* offset=0x02d8 flags=0x0010000000000000 */ struct FVectorMaterialInput WorldDisplacement;
  /* offset=0x0318 flags=0x0010000000000000 */ struct FScalarMaterialInput TessellationMultiplier;
  /* offset=0x0350 flags=0x0010000000000000 */ struct FColorMaterialInput SubsurfaceColor;
  /* offset=0x0388 flags=0x0010000000000000 */ struct FScalarMaterialInput ClearCoat;
  /* offset=0x03c0 flags=0x0010000000000000 */ struct FScalarMaterialInput ClearCoatRoughness;
  /* offset=0x03f8 flags=0x0010000000000000 */ struct FScalarMaterialInput AmbientOcclusion;
  /* offset=0x0430 flags=0x0010000000000000 */ struct FScalarMaterialInput Refraction;
  /* offset=0x0468 flags=0x0010000000000000 */ struct FVector2MaterialInput CustomizedUVs;
  /* offset=0x0668 flags=0x0010000000000000 */ struct FMaterialAttributesInput MaterialAttributes;
  /* offset=0x06a0 flags=0x0010000000000000 */ struct FScalarMaterialInput PixelDepthOffset;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 bEnableSeparateTranslucency:1;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 bEnableMobileSeparateTranslucency:1;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 bEnableResponsiveAA:1;
  /* offset=0x06d8 flags=0x0018001000000001 */ uint8 bScreenSpaceReflections:1;
  /* offset=0x06d8 flags=0x0018001000000001 */ uint8 TwoSided:1;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 DitheredLODTransition:1;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 DitherOpacityMask:1;
  /* offset=0x06d8 flags=0x0018041000000001 */ uint8 bAllowNegativeEmissiveColor:1;
  /* offset=0x06dc flags=0x0018041040000201 */ int32 NumCustomizedUVs;
  /* offset=0x06e0 flags=0x0018001040000201 */ uint8 TranslucencyLightingMode;
  /* offset=0x06e4 flags=0x0018001040000201 */ float TranslucencyDirectionalLightingIntensity;
  /* offset=0x06e8 flags=0x0018041000000001 */ uint8 AllowTranslucentCustomDepthWrites:1;
  /* offset=0x06ec flags=0x0018001040000201 */ float TranslucentShadowDensityScale;
  /* offset=0x06f0 flags=0x0018001040000201 */ float TranslucentSelfShadowDensityScale;
  /* offset=0x06f4 flags=0x0018001040000201 */ float TranslucentSelfShadowSecondDensityScale;
  /* offset=0x06f8 flags=0x0018001040000201 */ float TranslucentSelfShadowSecondOpacity;
  /* offset=0x06fc flags=0x0018001040000201 */ float TranslucentBackscatteringExponent;
  /* offset=0x0700 flags=0x0018001040000001 */ struct FLinearColor TranslucentMultipleScatteringExtinction;
  /* offset=0x0710 flags=0x0018001040000201 */ float TranslucentShadowStartOffset;
  /* offset=0x0714 flags=0x0018041000000001 */ uint8 bDisableDepthTest:1;
  /* offset=0x0714 flags=0x0018041000000001 */ uint8 bGenerateSphericalParticleNormals:1;
  /* offset=0x0714 flags=0x0018041000000001 */ uint8 bTangentSpaceNormal:1;
  /* offset=0x0714 flags=0x0018041000000005 */ uint8 bUseEmissiveForDynamicAreaLighting:1;
  /* offset=0x0714 flags=0x0018041000000005 */ uint8 bBlockGI:1;
  /* offset=0x0714 flags=0x0018001000200000 */ uint8 bUsedAsSpecialEngineMaterial:1;
  /* offset=0x0714 flags=0x0018001000000015 */ uint8 bUsedWithSkeletalMesh:1;
  /* offset=0x0714 flags=0x0018001000000015 */ uint8 bUsedWithEditorCompositing:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithParticleSprites:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithBeamTrails:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithMeshParticles:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithNiagaraSprites:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithNiagaraRibbons:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithNiagaraMeshParticles:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithStaticLighting:1;
  /* offset=0x0715 flags=0x0018001000000015 */ uint8 bUsedWithMorphTargets:1;
  /* offset=0x0716 flags=0x0018001000000015 */ uint8 bUsedWithSplineMeshes:1;
  /* offset=0x0716 flags=0x0018001000000015 */ uint8 bUsedWithInstancedStaticMeshes:1;
  /* offset=0x0716 flags=0x0018001000000000 */ uint8 bUsesDistortion:1;
  /* offset=0x0716 flags=0x0018001000000015 */ uint8 bUsedWithClothing:1;
  /* offset=0x0716 flags=0x0018001020000000 */ uint8 bUsedWithUI:1;
  /* offset=0x0716 flags=0x0018041000000015 */ uint8 bAutomaticallySetUsageInEditor:1;
  /* offset=0x0716 flags=0x0018041000000015 */ uint8 bFullyRough:1;
  /* offset=0x0716 flags=0x0018001000000015 */ uint8 bUseFullPrecision:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bUseLightmapDirectionality:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bUsedWithDynamicInstancing:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bBatchSimilarMaterialInstances:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bUseSimplestShader:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bBypassSystemMaterialQuality:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bUseHQForwardReflections:1;
  /* offset=0x0717 flags=0x0018001000000015 */ uint8 bUsePlanarForwardReflections:1;
  /* offset=0x0717 flags=0x0018041000000015 */ uint8 bNormalCurvatureToRoughness:1;
  /* offset=0x0718 flags=0x0018001040000215 */ uint8 D3D11TessellationMode;
  /* offset=0x0719 flags=0x0018001000000015 */ uint8 bEnableCrackFreeDisplacement:1;
  /* offset=0x0719 flags=0x0018001000000015 */ uint8 bEnableAdaptiveTessellation:1;
  /* offset=0x071c flags=0x0018001040000201 */ float MaxDisplacement;
  /* offset=0x0720 flags=0x0018041000000001 */ uint8 Wireframe:1;
  /* offset=0x0720 flags=0x0018041000000001 */ uint8 bOutputVelocityOnBasePass:1;
  /* offset=0x0724 flags=0x0018001040000200 */ int32 EditorX;
  /* offset=0x0728 flags=0x0018001040000200 */ int32 EditorY;
  /* offset=0x072c flags=0x0018001040000200 */ int32 EditorPitch;
  /* offset=0x0730 flags=0x0018001040000200 */ int32 EditorYaw;
  /* offset=0x0734 flags=0x0010000000000200 */ TArray<UMaterialExpression*> Expressions;
  /* offset=0x0740 flags=0x0010000000000200 */ TArray<struct FMaterialFunctionInfo> MaterialFunctionInfos;
  /* offset=0x074c flags=0x0010000000000200 */ TArray<struct FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos;
  /* offset=0x0758 flags=0x0018001000000000 */ uint8 bCanMaskedBeAssumedOpaque:1;
  /* offset=0x0758 flags=0x0018001020000000 */ uint8 bIsMasked:1;
  /* offset=0x0758 flags=0x0018001000202000 */ uint8 bIsPreviewMaterial:1;
  /* offset=0x0758 flags=0x0018001000000001 */ uint8 bUseMaterialAttributes:1;
  /* offset=0x0758 flags=0x0018001000000001 */ uint8 bUseTranslucencyVertexFog:1;
  /* offset=0x0758 flags=0x0018001000000001 */ uint8 bComputeFogPerPixel:1;
  /* offset=0x0758 flags=0x0018001000202000 */ uint8 bAllowDevelopmentShaderCompile:1;
  /* offset=0x0758 flags=0x0018001000202000 */ uint8 bIsMaterialEditorStatsMaterial:1;
  /* offset=0x075c flags=0x0018001040202200 */ uint32 UsageFlagWarnings;
  /* offset=0x0760 flags=0x0018001040000205 */ uint8 BlendableLocation;
  /* offset=0x0764 flags=0x0018001040000205 */ int32 BlendablePriority;
  /* offset=0x0768 flags=0x0018001040000205 */ bool BlendableOutputAlpha;
  /* offset=0x0769 flags=0x0018001040000201 */ uint8 RefractionMode;
  /* offset=0x076c flags=0x0018001040000201 */ float RefractionDepthBias;
  /* offset=0x0770 flags=0x0018001040000000 */ struct FGuid stateID;
  /* offset=0x0808 flags=0x0040000000002200 */ TArray<UTexture*> ExpressionTextureReferences;
};

class UMaterialBillboardComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0010000000000215 */ TArray<struct FMaterialSpriteElement> Elements;

  void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve);
  void SetElements(TArray<struct FMaterialSpriteElement> NewElements);
};

class UMaterialExpression: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UMaterial* Material;
  /* offset=0x0020 flags=0x0018001040000200 */ UMaterialFunction* Function;
  /* offset=0x0024 flags=0x0018000000000201 */ FString Desc;
  /* offset=0x0030 flags=0x0018001040000000 */ struct FColor BorderColor;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bRealtimePreview:1;
  /* offset=0x0034 flags=0x0018001000002000 */ uint8 bNeedToUpdatePreview:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bIsParameterExpression:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bCommentBubbleVisible:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bShowOutputNameOnPin:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bShowMaskColorsOnPin:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bHidePreviewWindow:1;
  /* offset=0x0034 flags=0x0018001000000000 */ uint8 bCollapsed:1;
  /* offset=0x0035 flags=0x0018001000000000 */ uint8 bShaderInputData:1;
  /* offset=0x0035 flags=0x0018001000000000 */ uint8 bShowInputs:1;
  /* offset=0x0035 flags=0x0018001000000000 */ uint8 bShowOutputs:1;
  /* offset=0x0038 flags=0x0010000000000200 */ TArray<struct FExpressionOutput> Outputs;
};

class UMaterialExpressionAbs: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionActorPositionWS: public UMaterialExpression {
};

class UMaterialExpressionAdd: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionAntialiasedTextureMask: public UMaterialExpressionTextureSampleParameter2D {
  /* offset=0x0170 flags=0x0018001040000201 */ float Threshold;
  /* offset=0x0174 flags=0x0018001040000201 */ uint8 Channel;
};

class UMaterialExpressionAppendVector: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionArccosine: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionArccosineFast: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionArcsine: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionArcsineFast: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionArctangent: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionArctangent2: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Y;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput X;
};

class UMaterialExpressionArctangent2Fast: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Y;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput X;
};

class UMaterialExpressionArctangentFast: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionAtmosphericFogColor: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput WorldPosition;
};

class UMaterialExpressionAtmosphericLightColor: public UMaterialExpression {
};

class UMaterialExpressionAtmosphericLightVector: public UMaterialExpression {
};

class UMaterialExpressionBentNormalCustomOutput: public UMaterialExpressionCustomOutput {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionBlackBody: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Temp;
};

class UMaterialExpressionBlendMaterialAttributes: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FMaterialAttributesInput A;
  /* offset=0x0080 flags=0x0010000000000000 */ struct FMaterialAttributesInput B;
  /* offset=0x00b8 flags=0x0010000000000000 */ struct FExpressionInput Alpha;
  /* offset=0x00e8 flags=0x0018001040000201 */ uint8 PixelAttributeBlendType;
  /* offset=0x00e9 flags=0x0018001040000201 */ uint8 VertexAttributeBlendType;
};

class UMaterialExpressionBreakMaterialAttributes: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FMaterialAttributesInput MaterialAttributes;
};

class UMaterialExpressionBumpOffset: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Coordinate;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Height;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput HeightRatioInput;
  /* offset=0x00d8 flags=0x0018001040000201 */ float HeightRatio;
  /* offset=0x00dc flags=0x0018001040000201 */ float ReferencePlane;
  /* offset=0x00e0 flags=0x0018001040000201 */ uint32 ConstCoordinate;
};

class UMaterialExpressionCameraPositionWS: public UMaterialExpression {
};

class UMaterialExpressionCameraVectorWS: public UMaterialExpression {
};

class UMaterialExpressionCeil: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionClamp: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Min;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Max;
  /* offset=0x00d8 flags=0x0018001040000201 */ uint8 ClampMode;
  /* offset=0x00dc flags=0x0018001040000201 */ float MinDefault;
  /* offset=0x00e0 flags=0x0018001040000201 */ float MaxDefault;
};

class UMaterialExpressionClearCoatNormalCustomOutput: public UMaterialExpressionCustomOutput {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionCollectionParameter: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ UMaterialParameterCollection* Collection;
  /* offset=0x0048 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0050 flags=0x0018001040000000 */ struct FGuid ParameterId;
};

class UMaterialExpressionComment: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000200 */ int32 SizeX;
  /* offset=0x0048 flags=0x0018001040000200 */ int32 SizeY;
  /* offset=0x004c flags=0x0018000000000201 */ FString Text;
  /* offset=0x0058 flags=0x0018001040000001 */ struct FLinearColor CommentColor;
  /* offset=0x0068 flags=0x0018001040000201 */ int32 FontSize;
};

class UMaterialExpressionComponentMask: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 R:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 G:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 B:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 A:1;
};

class UMaterialExpressionConstant: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000205 */ float R;
};

class UMaterialExpressionConstant2Vector: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000205 */ float R;
  /* offset=0x0048 flags=0x0018001040000205 */ float G;
};

class UMaterialExpressionConstant3Vector: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000005 */ struct FLinearColor Constant;
};

class UMaterialExpressionConstant4Vector: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000005 */ struct FLinearColor Constant;
};

class UMaterialExpressionConstantBiasScale: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ float Bias;
  /* offset=0x007c flags=0x0018001040000201 */ float Scale;
};

class UMaterialExpressionCosine: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ float Period;
};

class UMaterialExpressionCrossProduct: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionCustom: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018000000000201 */ FString Code;
  /* offset=0x0050 flags=0x0018001040000201 */ uint8 OutputType;
  /* offset=0x0054 flags=0x0018000000000201 */ FString Description;
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<struct FCustomInput> Inputs;
};

class UMaterialExpressionCustomOutput: public UMaterialExpression {
};

class UMaterialExpressionDDX: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Value;
};

class UMaterialExpressionDDY: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Value;
};

class UMaterialExpressionDecalDerivative: public UMaterialExpression {
};

class UMaterialExpressionDecalLifetimeOpacity: public UMaterialExpression {
};

class UMaterialExpressionDecalMipmapLevel: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput TextureSize;
  /* offset=0x0078 flags=0x0018001040000201 */ float ConstWidth;
  /* offset=0x007c flags=0x0018001040000201 */ float ConstHeight;
};

class UMaterialExpressionDepthFade: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput InOpacity;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput FadeDistance;
  /* offset=0x00a8 flags=0x0018001040000201 */ float OpacityDefault;
  /* offset=0x00ac flags=0x0018001040000201 */ float FadeDistanceDefault;
};

class UMaterialExpressionDepthOfFieldFunction: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 FunctionValue;
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Depth;
};

class UMaterialExpressionDeriveNormalZ: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput InXY;
};

class UMaterialExpressionDesaturation: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Fraction;
  /* offset=0x00a8 flags=0x0018001040000001 */ struct FLinearColor LuminanceFactors;
};

class UMaterialExpressionDistance: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionDistanceCullFade: public UMaterialExpression {
};

class UMaterialExpressionDistanceFieldGradient: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Position;
};

class UMaterialExpressionDistanceToNearestSurface: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Position;
};

class UMaterialExpressionDivide: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionDotProduct: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionDynamicParameter: public UMaterialExpression {
  /* offset=0x0044 flags=0x0010000000000241 */ TArray<FString> ParamNames;
  /* offset=0x0050 flags=0x0018001040000001 */ struct FLinearColor DefaultValue;
};

class UMaterialExpressionEyeAdaptation: public UMaterialExpression {
};

class UMaterialExpressionFeatureLevelSwitch: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Default;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Inputs;
};

class UMaterialExpressionFloor: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionFmod: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionFontSample: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ UFont* Font;
  /* offset=0x0048 flags=0x0018001040000201 */ int32 FontTexturePage;
};

class UMaterialExpressionFontSampleParameter: public UMaterialExpressionFontSample {
  /* offset=0x0050 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0058 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
  /* offset=0x0068 flags=0x0018001040000201 */ FName Group;
};

class UMaterialExpressionFrac: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionFresnel: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput ExponentIn;
  /* offset=0x0078 flags=0x0018001040000201 */ float Exponent;
  /* offset=0x0080 flags=0x0010000000000000 */ struct FExpressionInput BaseReflectFractionIn;
  /* offset=0x00b0 flags=0x0018001040000201 */ float BaseReflectFraction;
  /* offset=0x00b8 flags=0x0010000000000000 */ struct FExpressionInput Normal;
};

class UMaterialExpressionFunctionInput: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Preview;
  /* offset=0x0078 flags=0x0018000000000205 */ FString InputName;
  /* offset=0x0084 flags=0x0018000000000201 */ FString Description;
  /* offset=0x0090 flags=0x0018001040000000 */ struct FGuid ID;
  /* offset=0x00a0 flags=0x0018001040000205 */ uint8 InputType;
  /* offset=0x00b0 flags=0x0018001040000005 */ struct FVector4 PreviewValue;
  /* offset=0x00c0 flags=0x0018001000000005 */ uint8 bUsePreviewValueAsDefault:1;
  /* offset=0x00c4 flags=0x0018001040000205 */ int32 SortPriority;
  /* offset=0x00c8 flags=0x0018001000002000 */ uint8 bCompilingFunctionPreview:1;
};

class UMaterialExpressionFunctionOutput: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018000000000205 */ FString OutputName;
  /* offset=0x0050 flags=0x0018000000000201 */ FString Description;
  /* offset=0x005c flags=0x0018001040000201 */ int32 SortPriority;
  /* offset=0x0060 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0090 flags=0x0018001000000000 */ uint8 bLastPreviewed:1;
  /* offset=0x0094 flags=0x0018001040000000 */ struct FGuid ID;
};

class UMaterialExpressionGIReplace: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Default;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput StaticIndirect;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput DynamicIndirect;
};

class UMaterialExpressionGetMaterialAttributes: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FMaterialAttributesInput MaterialAttributes;
  /* offset=0x0080 flags=0x0010000000000201 */ TArray<struct FGuid> AttributeGetTypes;
};

class UMaterialExpressionIf: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput AGreaterThanB;
  /* offset=0x00d8 flags=0x0010000000000000 */ struct FExpressionInput AEqualsB;
  /* offset=0x0108 flags=0x0010000000000000 */ struct FExpressionInput ALessThanB;
  /* offset=0x0138 flags=0x0018001040000201 */ float EqualsThreshold;
  /* offset=0x013c flags=0x0018001040000201 */ float ConstB;
  /* offset=0x0140 flags=0x0018001060000200 */ float ConstAEqualsB;
};

class UMaterialExpressionLandscapeGrassOutput: public UMaterialExpressionCustomOutput {
  /* offset=0x0044 flags=0x0010000000000201 */ TArray<struct FGrassInput> GrassTypes;
};

class UMaterialExpressionLandscapeLayerBlend: public UMaterialExpression {
  /* offset=0x0044 flags=0x0010000000000201 */ TArray<struct FLayerBlendInput> Layers;
  /* offset=0x0050 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

class UMaterialExpressionLandscapeLayerCoords: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 MappingType;
  /* offset=0x0045 flags=0x0018001040000201 */ uint8 CustomUVType;
  /* offset=0x0048 flags=0x0018001040000201 */ float MappingScale;
  /* offset=0x004c flags=0x0018001040000201 */ float MappingRotation;
  /* offset=0x0050 flags=0x0018001040000201 */ float MappingPanU;
  /* offset=0x0054 flags=0x0018001040000201 */ float MappingPanV;
};

class UMaterialExpressionLandscapeLayerSample: public UMaterialExpression {
  /* offset=0x0048 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0050 flags=0x0018001040000201 */ float PreviewWeight;
  /* offset=0x0054 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

class UMaterialExpressionLandscapeLayerSwitch: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput LayerUsed;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput LayerNotUsed;
  /* offset=0x00a8 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 PreviewUsed:1;
  /* offset=0x00b4 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

class UMaterialExpressionLandscapeLayerWeight: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Base;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Layer;
  /* offset=0x00a8 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x00b0 flags=0x0018001040000201 */ float PreviewWeight;
  /* offset=0x00b4 flags=0x0018001040000001 */ struct FVector ConstBase;
  /* offset=0x00c0 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

class UMaterialExpressionLandscapeVisibilityMask: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
};

class UMaterialExpressionLightVector: public UMaterialExpression {
};

class UMaterialExpressionLightmapUVs: public UMaterialExpression {
};

class UMaterialExpressionLightmassReplace: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Realtime;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Lightmass;
};

class UMaterialExpressionLinearInterpolate: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Alpha;
  /* offset=0x00d8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00dc flags=0x0018001040000201 */ float ConstB;
  /* offset=0x00e0 flags=0x0018001040000201 */ float ConstAlpha;
};

class UMaterialExpressionLogarithm10: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput X;
};

class UMaterialExpressionLogarithm2: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput X;
};

class UMaterialExpressionMakeMaterialAttributes: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput BaseColor;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Metallic;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Specular;
  /* offset=0x00d8 flags=0x0010000000000000 */ struct FExpressionInput Roughness;
  /* offset=0x0108 flags=0x0010000000000000 */ struct FExpressionInput EmissiveColor;
  /* offset=0x0138 flags=0x0010000000000000 */ struct FExpressionInput Opacity;
  /* offset=0x0168 flags=0x0010000000000000 */ struct FExpressionInput OpacityMask;
  /* offset=0x0198 flags=0x0010000000000000 */ struct FExpressionInput Normal;
  /* offset=0x01c8 flags=0x0010000000000000 */ struct FExpressionInput WorldPositionOffset;
  /* offset=0x01f8 flags=0x0010000000000000 */ struct FExpressionInput WorldDisplacement;
  /* offset=0x0228 flags=0x0010000000000000 */ struct FExpressionInput TessellationMultiplier;
  /* offset=0x0258 flags=0x0010000000000000 */ struct FExpressionInput SubsurfaceColor;
  /* offset=0x0288 flags=0x0010000000000000 */ struct FExpressionInput ClearCoat;
  /* offset=0x02b8 flags=0x0010000000000000 */ struct FExpressionInput ClearCoatRoughness;
  /* offset=0x02e8 flags=0x0010000000000000 */ struct FExpressionInput AmbientOcclusion;
  /* offset=0x0318 flags=0x0010000000000000 */ struct FExpressionInput Refraction;
  /* offset=0x0348 flags=0x0010000000000000 */ struct FExpressionInput CustomizedUVs;
  /* offset=0x04c8 flags=0x0010000000000000 */ struct FExpressionInput PixelDepthOffset;
};

class UMaterialExpressionMaterialFunctionCall: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ UMaterialFunction* MaterialFunction;
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FFunctionExpressionInput> FunctionInputs;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<struct FFunctionExpressionOutput> FunctionOutputs;
};

class UMaterialExpressionMaterialProxyReplace: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Realtime;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput MaterialProxy;
};

class UMaterialExpressionMax: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionMin: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionMultiply: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionNoise: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Position;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput FilterWidth;
  /* offset=0x00a8 flags=0x0018001040000201 */ float Scale;
  /* offset=0x00ac flags=0x0018001040000201 */ int32 quality;
  /* offset=0x00b0 flags=0x0018001040000201 */ uint8 NoiseFunction;
  /* offset=0x00b1 flags=0x0018001000000001 */ uint8 bTurbulence:1;
  /* offset=0x00b4 flags=0x0018001040000201 */ int32 Levels;
  /* offset=0x00b8 flags=0x0018001040000201 */ float OutputMin;
  /* offset=0x00bc flags=0x0018001040000201 */ float OutputMax;
  /* offset=0x00c0 flags=0x0018001040000201 */ float LevelScale;
  /* offset=0x00c4 flags=0x0018001000000001 */ uint8 bTiling:1;
  /* offset=0x00c8 flags=0x0018001040000201 */ uint32 RepeatSize;
};

class UMaterialExpressionNormalize: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput VectorInput;
};

class UMaterialExpressionObjectBounds: public UMaterialExpression {
};

class UMaterialExpressionObjectOrientation: public UMaterialExpression {
};

class UMaterialExpressionObjectPositionWS: public UMaterialExpression {
};

class UMaterialExpressionObjectRadius: public UMaterialExpression {
};

class UMaterialExpressionOneMinus: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionPanner: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Coordinate;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Time;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Speed;
  /* offset=0x00d8 flags=0x0018001040000201 */ float SpeedX;
  /* offset=0x00dc flags=0x0018001040000201 */ float SpeedY;
  /* offset=0x00e0 flags=0x0018001040000201 */ uint32 ConstCoordinate;
  /* offset=0x00e4 flags=0x0018001040000201 */ bool bFractionalPart;
};

class UMaterialExpressionParameter: public UMaterialExpression {
  /* offset=0x0048 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0050 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
  /* offset=0x0060 flags=0x0018001040000201 */ FName Group;
};

class UMaterialExpressionParticleColor: public UMaterialExpression {
};

class UMaterialExpressionParticleDirection: public UMaterialExpression {
};

class UMaterialExpressionParticleMacroUV: public UMaterialExpression {
};

class UMaterialExpressionParticleMotionBlurFade: public UMaterialExpression {
};

class UMaterialExpressionParticlePositionWS: public UMaterialExpression {
};

class UMaterialExpressionParticleRadius: public UMaterialExpression {
};

class UMaterialExpressionParticleRandom: public UMaterialExpression {
};

class UMaterialExpressionParticleRelativeTime: public UMaterialExpression {
};

class UMaterialExpressionParticleSize: public UMaterialExpression {
};

class UMaterialExpressionParticleSpeed: public UMaterialExpression {
};

class UMaterialExpressionParticleSubUV: public UMaterialExpressionTextureSample {
  /* offset=0x014d flags=0x0018001000000001 */ uint8 bBlend:1;
};

class UMaterialExpressionPerInstanceFadeAmount: public UMaterialExpression {
};

class UMaterialExpressionPerInstanceRandom: public UMaterialExpression {
};

class UMaterialExpressionPixelDepth: public UMaterialExpression {
};

class UMaterialExpressionPixelNormalWS: public UMaterialExpression {
};

class UMaterialExpressionPower: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Base;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Exponent;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstExponent;
};

class UMaterialExpressionPreSkinnedNormal: public UMaterialExpression {
};

class UMaterialExpressionPreSkinnedPosition: public UMaterialExpression {
};

class UMaterialExpressionPrecomputedAOMask: public UMaterialExpression {
};

class UMaterialExpressionPreviousFrameSwitch: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput CurrentFrame;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput PreviousFrame;
};

class UMaterialExpressionQualitySwitch: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Default;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Inputs;
};

class UMaterialExpressionReflectionVectorWS: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput CustomWorldNormal;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 bNormalizeCustomWorldNormal:1;
};

class UMaterialExpressionReroute: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionRotateAboutAxis: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput NormalizedRotationAxis;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput RotationAngle;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput PivotPoint;
  /* offset=0x00d8 flags=0x0010000000000000 */ struct FExpressionInput Position;
  /* offset=0x0108 flags=0x0018001040000201 */ float Period;
};

class UMaterialExpressionRotator: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Coordinate;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Time;
  /* offset=0x00a8 flags=0x0018001040000201 */ float CenterX;
  /* offset=0x00ac flags=0x0018001040000201 */ float CenterY;
  /* offset=0x00b0 flags=0x0018001040000201 */ float Speed;
  /* offset=0x00b4 flags=0x0018001040000201 */ uint32 ConstCoordinate;
};

class UMaterialExpressionRound: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionSaturate: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionScalarParameter: public UMaterialExpressionParameter {
  /* offset=0x0068 flags=0x0018001040000201 */ float DefaultValue;
  /* offset=0x006c flags=0x0018001040000201 */ float SliderMin;
  /* offset=0x0070 flags=0x0018001040000201 */ float SliderMax;
};

class UMaterialExpressionSceneColor: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 InputMode;
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0010000020000000 */ struct FExpressionInput OffsetFraction;
  /* offset=0x00a8 flags=0x0018001040000001 */ struct FVector2D ConstInput;
};

class UMaterialExpressionSceneDepth: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 InputMode;
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0010000020000000 */ struct FExpressionInput Coordinates;
  /* offset=0x00a8 flags=0x0018001040000001 */ struct FVector2D ConstInput;
};

class UMaterialExpressionSceneTexelSize: public UMaterialExpression {
};

class UMaterialExpressionSceneTexture: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Coordinates;
  /* offset=0x0078 flags=0x0018001040000201 */ uint8 SceneTextureId;
  /* offset=0x0079 flags=0x0018001040000201 */ bool bClampUVs;
  /* offset=0x007a flags=0x0018001040000201 */ bool bFiltered;
};

class UMaterialExpressionScreenPosition: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 Mapping;
};

class UMaterialExpressionSetMaterialAttributes: public UMaterialExpression {
  /* offset=0x0044 flags=0x0010000000000200 */ TArray<struct FExpressionInput> Inputs;
  /* offset=0x0050 flags=0x0010000000000201 */ TArray<struct FGuid> AttributeSetTypes;
};

class UMaterialExpressionSign: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionSine: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ float Period;
};

class UMaterialExpressionSobol: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Cell;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Index;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Seed;
  /* offset=0x00d8 flags=0x0018001040000201 */ uint32 ConstIndex;
  /* offset=0x00dc flags=0x0018001040000001 */ struct FVector2D ConstSeed;
};

class UMaterialExpressionSpeedTree: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 GeometryType;
  /* offset=0x0045 flags=0x0018001040000201 */ uint8 WindType;
  /* offset=0x0046 flags=0x0018001040000201 */ uint8 LODType;
  /* offset=0x0048 flags=0x0018001040000201 */ float BillboardThreshold;
  /* offset=0x004c flags=0x0018041040000201 */ bool bAccurateWindVelocities;
};

class UMaterialExpressionSphereMask: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Radius;
  /* offset=0x00d8 flags=0x0010000000000000 */ struct FExpressionInput Hardness;
  /* offset=0x0108 flags=0x0018001040000201 */ float AttenuationRadius;
  /* offset=0x010c flags=0x0018001040000201 */ float HardnessPercent;
};

class UMaterialExpressionSphericalParticleOpacity: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Density;
  /* offset=0x0078 flags=0x0018001040000201 */ float ConstantDensity;
};

class UMaterialExpressionSpriteTextureSampler: public UMaterialExpressionTextureSampleParameter2D {
  /* offset=0x0170 flags=0x0018001040000201 */ bool bSampleAdditionalTextures;
  /* offset=0x0174 flags=0x0018001040000201 */ int32 AdditionalSlotIndex;
  /* offset=0x0178 flags=0x0010000000000001 */ FText SlotDisplayName;
};

class UMaterialExpressionSquareRoot: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionStaticBool: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 Value:1;
};

class UMaterialExpressionStaticBoolParameter: public UMaterialExpressionParameter {
  /* offset=0x0068 flags=0x0018001000000001 */ uint8 DefaultValue:1;
};

class UMaterialExpressionStaticComponentMaskParameter: public UMaterialExpressionParameter {
  /* offset=0x0068 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 DefaultR:1;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 DefaultG:1;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 DefaultB:1;
  /* offset=0x0098 flags=0x0018001000000001 */ uint8 DefaultA:1;
};

class UMaterialExpressionStaticSwitch: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 DefaultValue:1;
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0010000000000000 */ struct FExpressionInput Value;
};

class UMaterialExpressionStaticSwitchParameter: public UMaterialExpressionStaticBoolParameter {
  /* offset=0x0070 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x00a0 flags=0x0010000000000000 */ struct FExpressionInput B;
};

class UMaterialExpressionSubtract: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput A;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput B;
  /* offset=0x00a8 flags=0x0018001040000201 */ float ConstA;
  /* offset=0x00ac flags=0x0018001040000201 */ float ConstB;
};

class UMaterialExpressionTangent: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ float Period;
};

class UMaterialExpressionTangentOutput: public UMaterialExpressionCustomOutput {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionTemporalSobol: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Index;
  /* offset=0x0078 flags=0x0010000000000000 */ struct FExpressionInput Seed;
  /* offset=0x00a8 flags=0x0018001040000201 */ uint32 ConstIndex;
  /* offset=0x00ac flags=0x0018001040000001 */ struct FVector2D ConstSeed;
};

class UMaterialExpressionTextureBase: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000205 */ UTexture* Texture;
  /* offset=0x0048 flags=0x0018001040000205 */ uint8 SamplerType;
  /* offset=0x0049 flags=0x0018001000000001 */ uint8 IsDefaultMeshpaintTexture:1;
};

class UMaterialExpressionTextureCoordinate: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000205 */ int32 CoordinateIndex;
  /* offset=0x0048 flags=0x0018001040000205 */ float UTiling;
  /* offset=0x004c flags=0x0018001040000205 */ float VTiling;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 UnMirrorU:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 UnMirrorV:1;
};

class UMaterialExpressionTextureObject: public UMaterialExpressionTextureBase {
};

class UMaterialExpressionTextureObjectParameter: public UMaterialExpressionTextureSampleParameter {
};

class UMaterialExpressionTextureProperty: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput TextureObject;
  /* offset=0x0078 flags=0x0018001040000201 */ uint8 Property;
};

class UMaterialExpressionTextureSample: public UMaterialExpressionTextureBase {
  /* offset=0x0050 flags=0x0010000000000000 */ struct FExpressionInput Coordinates;
  /* offset=0x0080 flags=0x0010000000000000 */ struct FExpressionInput TextureObject;
  /* offset=0x00b0 flags=0x0010000000000000 */ struct FExpressionInput MipValue;
  /* offset=0x00e0 flags=0x0010000000000000 */ struct FExpressionInput CoordinatesDX;
  /* offset=0x0110 flags=0x0010000000000000 */ struct FExpressionInput CoordinatesDY;
  /* offset=0x0140 flags=0x0018001040000201 */ uint8 MipValueMode;
  /* offset=0x0141 flags=0x0018001040000201 */ uint8 SamplerSource;
  /* offset=0x0144 flags=0x0018001040000201 */ uint32 ConstCoordinate;
  /* offset=0x0148 flags=0x0018001040000201 */ int32 ConstMipValue;
};

class UMaterialExpressionTextureSampleParameter: public UMaterialExpressionTextureSample {
  /* offset=0x0150 flags=0x0018001040000201 */ FName ParameterName;
  /* offset=0x0158 flags=0x0018001040000000 */ struct FGuid ExpressionGUID;
  /* offset=0x0168 flags=0x0018001040000201 */ FName Group;
};

class UMaterialExpressionTextureSampleParameter2D: public UMaterialExpressionTextureSampleParameter {
};

class UMaterialExpressionTextureSampleParameterCube: public UMaterialExpressionTextureSampleParameter {
};

class UMaterialExpressionTextureSampleParameterSubUV: public UMaterialExpressionTextureSampleParameter2D {
  /* offset=0x0170 flags=0x0018001000000001 */ uint8 bBlend:1;
};

class UMaterialExpressionTime: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bIgnorePause:1;
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bOverride_Period:1;
  /* offset=0x0048 flags=0x0018001040000201 */ float Period;
};

class UMaterialExpressionTransform: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ uint8 TransformSourceType;
  /* offset=0x0079 flags=0x0018001040000201 */ uint8 TransformType;
};

class UMaterialExpressionTransformPosition: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
  /* offset=0x0078 flags=0x0018001040000201 */ uint8 TransformSourceType;
  /* offset=0x0079 flags=0x0018001040000201 */ uint8 TransformType;
};

class UMaterialExpressionTruncate: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionTwoSidedSign: public UMaterialExpression {
};

class UMaterialExpressionVectorNoise: public UMaterialExpression {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Position;
  /* offset=0x0078 flags=0x0018001040000201 */ uint8 NoiseFunction;
  /* offset=0x007c flags=0x0018001040000201 */ int32 quality;
  /* offset=0x0080 flags=0x0018001000000001 */ uint8 bTiling:1;
  /* offset=0x0084 flags=0x0018001040000201 */ uint32 TileSize;
};

class UMaterialExpressionVectorParameter: public UMaterialExpressionParameter {
  /* offset=0x0068 flags=0x0018001040000001 */ struct FLinearColor DefaultValue;
};

class UMaterialExpressionVertexColor: public UMaterialExpression {
};

class UMaterialExpressionVertexInterpolator: public UMaterialExpressionCustomOutput {
  /* offset=0x0048 flags=0x0010000000000000 */ struct FExpressionInput Input;
};

class UMaterialExpressionVertexNormalWS: public UMaterialExpression {
};

class UMaterialExpressionViewProperty: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 Property;
};

class UMaterialExpressionViewSize: public UMaterialExpression {
};

class UMaterialExpressionWorldPosition: public UMaterialExpression {
  /* offset=0x0044 flags=0x0018001040000201 */ uint8 WorldPositionShaderOffset;
};

class UMaterialFunction: public UObject {
  /* offset=0x001c flags=0x0018001040200000 */ struct FGuid stateID;
  /* offset=0x002c flags=0x0018010000000201 */ FString Description;
  /* offset=0x0038 flags=0x0018011000000001 */ uint8 bExposeToLibrary:1;
  /* offset=0x003c flags=0x0010000000000200 */ TArray<UMaterialExpression*> FunctionExpressions;
  /* offset=0x0048 flags=0x0048001000002000 */ uint8 bReentrantFlag:1;
};

class UMaterialInstance: public UMaterialInterface {
  /* offset=0x004c flags=0x0018001040000205 */ UPhysicalMaterial* PhysMaterial;
  /* offset=0x0050 flags=0x0018011040000215 */ UMaterialInterface* Parent;
  /* offset=0x0054 flags=0x0018001000000000 */ uint8 bHasStaticPermutationResource:1;
  /* offset=0x0054 flags=0x0018001000000015 */ uint8 bOverrideSubsurfaceProfile:1;
  /* offset=0x0058 flags=0x0010000000000215 */ TArray<struct FFontParameterValue> FontParameterValues;
  /* offset=0x0064 flags=0x0010000000000215 */ TArray<struct FScalarParameterValue> ScalarParameterValues;
  /* offset=0x0070 flags=0x0010000000000215 */ TArray<struct FTextureParameterValue> TextureParameterValues;
  /* offset=0x007c flags=0x0010000000000215 */ TArray<struct FVectorParameterValue> VectorParameterValues;
  /* offset=0x0088 flags=0x0018001060000200 */ bool bOverrideBaseProperties;
  /* offset=0x008c flags=0x0010001000000001 */ struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;
};

class AMaterialInstanceActor: public AActor {
  /* offset=0x02a8 flags=0x0010000000000205 */ TArray<AActor*> TargetActors;
};

class UMaterialInstanceConstant: public UMaterialInstance {
};

class UMaterialInstanceDynamic: public UMaterialInstance {
  void CopyInterpParameters(UMaterialInstance* Source);
  void CopyParameterOverrides(UMaterialInstance* MaterialInstance);
  void K2_CopyMaterialInstanceParameters(UMaterialInterface* Source);
  float K2_GetScalarParameterValue(FName ParameterName);
  UTexture* K2_GetTextureParameterValue(FName ParameterName);
  struct FLinearColor K2_GetVectorParameterValue(FName ParameterName);
  void K2_InterpolateMaterialInstanceParams(UMaterialInstance* SourceA, UMaterialInstance* SourceB, float Alpha);
  void SetScalarParameterValue(FName ParameterName, float Value);
  void SetTextureParameterValue(FName ParameterName, UTexture* Value);
  void SetVectorParameterValue(FName ParameterName, struct FLinearColor Value);
};

class UMaterialInterface: public UObject {
  /* offset=0x0020 flags=0x0018001040000215 */ USubsurfaceProfile* SubsurfaceProfile;
  /* offset=0x0028 flags=0x0020081000000001 */ struct FLightmassMaterialInterfaceSettings LightmassSettings;
  /* offset=0x003c flags=0x0020080000000200 */ TArray<struct FMaterialTextureInfo> TextureStreamingData;

  UMaterial* GetBaseMaterial();
  UPhysicalMaterial* GetPhysicalMaterial();
  void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32 CinematicTextureGroups);
  void SetStreamingTextureMipOffset(int32 NewMipOffset);
};

class UMaterialParameterCollection: public UObject {
  /* offset=0x001c flags=0x0018001040200000 */ struct FGuid stateID;
  /* offset=0x002c flags=0x0010000000000201 */ TArray<struct FCollectionScalarParameter> ScalarParameters;
  /* offset=0x0038 flags=0x0010000000000201 */ TArray<struct FCollectionVectorParameter> VectorParameters;
};

class UMaterialParameterCollectionInstance: public UObject {
  /* offset=0x0020 flags=0x0028081040000200 */ UMaterialParameterCollection* Collection;
  /* offset=0x0024 flags=0x0028081040000200 */ UWorld* World;
};

class UMaterialShaderQualitySettings: public UObject {
  /* offset=0x001c flags=0x0040000000000200 */ TMap<FName, UShaderPlatformQualitySettings*> ForwardSettingMap;
};

class UMaterialUniformExpressionParameters: public UObject {
};

class AMatineeActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040000225 */ UInterpData* MatineeData;
  /* offset=0x02b0 flags=0x0018001040000200 */ FName MatineeControllerName;
  /* offset=0x02b8 flags=0x0018001040000225 */ float PlayRate;
  /* offset=0x02bc flags=0x0018001000000005 */ uint8 bPlayOnLevelLoad:1;
  /* offset=0x02bc flags=0x0018041000000005 */ uint8 bForceStartPos:1;
  /* offset=0x02c0 flags=0x0018041040000205 */ float ForceStartPosition;
  /* offset=0x02c4 flags=0x0018001000000025 */ uint8 bLooping:1;
  /* offset=0x02c4 flags=0x0018001000000005 */ uint8 bRewindOnPlay:1;
  /* offset=0x02c4 flags=0x0018001000000005 */ uint8 bNoResetOnRewind:1;
  /* offset=0x02c4 flags=0x0018001000000005 */ uint8 bRewindIfAlreadyPlaying:1;
  /* offset=0x02c4 flags=0x0018041000000005 */ uint8 bDisableRadioFilter:1;
  /* offset=0x02c4 flags=0x0018041000000005 */ uint8 bClientSideOnly:1;
  /* offset=0x02c4 flags=0x0018001000000005 */ uint8 bSkipUpdateIfNotVisible:1;
  /* offset=0x02c4 flags=0x0018001000000005 */ uint8 bIsSkippable:1;
  /* offset=0x02c8 flags=0x0018041040000205 */ int32 PreferredSplitScreenNum;
  /* offset=0x02cc flags=0x0018001000000005 */ uint8 bDisableMovementInput:1;
  /* offset=0x02cc flags=0x0018001000000005 */ uint8 bDisableLookAtInput:1;
  /* offset=0x02cc flags=0x0018001000000005 */ uint8 bHidePlayer:1;
  /* offset=0x02cc flags=0x0018001000000005 */ uint8 bHideHud:1;
  /* offset=0x02d0 flags=0x0010000000000220 */ TArray<struct FInterpGroupActorInfo> GroupActorInfos;
  /* offset=0x02dc flags=0x0018001000002000 */ uint8 bShouldShowGore:1;
  /* offset=0x02e0 flags=0x0010000000002200 */ TArray<UInterpGroupInst*> GroupInst;
  /* offset=0x02ec flags=0x0010000000002200 */ TArray<struct FCameraCutInfo> CameraCuts;
  /* offset=0x02f8 flags=0x0018001000022035 */ uint8 bIsPlaying:1;
  /* offset=0x02f8 flags=0x0018001000000020 */ uint8 bReversePlayback:1;
  /* offset=0x02f8 flags=0x0018001000002020 */ uint8 bPaused:1;
  /* offset=0x02f8 flags=0x0018001000002020 */ uint8 bPendingStop:1;
  /* offset=0x02fc flags=0x0018001040020235 */ float InterpPosition;
  /* offset=0x0304 flags=0x0048001040000220 */ uint8 ReplicationForceIsPlaying;
  /* offset=0x0308 flags=0x0010000010080200 */ FOnMatineeEvent OnPlay;
  /* offset=0x0314 flags=0x0010000010080200 */ FOnMatineeEvent OnStop;
  /* offset=0x0320 flags=0x0010000010080200 */ FOnMatineeEvent OnPause;

  void ChangePlaybackDirection();
  void EnableGroupByName(FString GroupName, bool bEnable);
  void Pause();
  void Play();
  void Reverse();
  void SetLoopingState(bool bNewLooping);
  void SetPosition(float NewPosition, bool bJump);
  void Stop();
};

class AMatineeActorCameraAnim: public AMatineeActor {
  /* offset=0x0338 flags=0x0018001040002200 */ UCameraAnim* CameraAnim;
};

class UMatineeAnimInterface: public UInterface {
};

class UMatineeInterface: public UInterface {
};

class UMediaBlueprintFunctionLibrary: public UBlueprintFunctionLibrary {
  void EnumerateAudioCaptureDevices(TArray<struct FMediaCaptureDevice> OutDevices, int32 Filter);
  void EnumerateVideoCaptureDevices(TArray<struct FMediaCaptureDevice> OutDevices, int32 Filter);
  void EnumerateWebcamCaptureDevices(TArray<struct FMediaCaptureDevice> OutDevices, int32 Filter);
};

class AMediaPlane: public AActor {
  /* offset=0x02a8 flags=0x00280810400a021d */ UMediaPlaneComponent* MediaPlane;
};

class UMediaPlaneComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0040001000000001 */ struct FMediaPlaneParameters Plane;

  struct FMediaPlaneParameters GetPlane();
  void OnRenderTextureChanged();
  void SetMediaPlane(struct FMediaPlaneParameters Plane);
};

class UMediaPlaneFrustumComponent: public UPrimitiveComponent {
};

class UMediaPlayer: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnEndReached;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnMediaClosed;
  /* offset=0x0034 flags=0x0010000010080200 */ FOnMediaPlayerMediaOpened OnMediaOpened;
  /* offset=0x0040 flags=0x0010000010080200 */ FOnMediaPlayerMediaOpenFailed OnMediaOpenFailed;
  /* offset=0x004c flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnPlaybackResumed;
  /* offset=0x0058 flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnPlaybackSuspended;
  /* offset=0x0064 flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnSeekCompleted;
  /* offset=0x0070 flags=0x0010000010080200 */ FOnMediaPlayerMediaEvent OnTracksChanged;
  /* offset=0x0080 flags=0x0018001000000004 */ struct FTimespan CacheAhead;
  /* offset=0x0088 flags=0x0018001000000004 */ struct FTimespan CacheBehind;
  /* offset=0x0090 flags=0x0018001000000004 */ struct FTimespan CacheBehindGame;
  /* offset=0x0098 flags=0x0018041040000204 */ bool NativeAudioOut;
  /* offset=0x0099 flags=0x0018001040000205 */ bool PlayOnOpen;
  /* offset=0x009a flags=0x0018001000000005 */ uint8 Shuffle:1;
  /* offset=0x009a flags=0x0028081000000015 */ uint8 Loop:1;
  /* offset=0x009c flags=0x0028081040002214 */ UMediaPlaylist* Playlist;
  /* offset=0x00a0 flags=0x0028081040000214 */ int32 PlaylistIndex;
  /* offset=0x00a4 flags=0x0028081040000201 */ float HorizontalFieldOfView;
  /* offset=0x00a8 flags=0x0028081040000201 */ float VerticalFieldOfView;
  /* offset=0x00ac flags=0x0020081040000001 */ struct FRotator ViewRotation;
  /* offset=0x0138 flags=0x0048001040000000 */ struct FGuid PlayerGuid;

  bool CanPause();
  bool CanPlaySource(UMediaSource* MediaSource);
  bool CanPlayUrl(FString URL);
  void Close();
  int32 GetAudioTrackChannels(int32 TrackIndex, int32 FormatIndex);
  int32 GetAudioTrackSampleRate(int32 TrackIndex, int32 FormatIndex);
  FString GetAudioTrackType(int32 TrackIndex, int32 FormatIndex);
  FName GetDesiredPlayerName();
  struct FTimespan GetDuration();
  float GetHorizontalFieldOfView();
  FText GetMediaName();
  int32 GetNumTrackFormats(enum EMediaPlayerTrack TrackType, int32 TrackIndex);
  int32 GetNumTracks(enum EMediaPlayerTrack TrackType);
  FName GetPlayerName();
  UMediaPlaylist* GetPlaylist();
  int32 GetPlaylistIndex();
  float GetRate();
  int32 GetSelectedTrack(enum EMediaPlayerTrack TrackType);
  void GetSupportedRates(TArray<struct FFloatRange> OutRates, bool Unthinned);
  struct FTimespan GetTime();
  FText GetTrackDisplayName(enum EMediaPlayerTrack TrackType, int32 TrackIndex);
  int32 GetTrackFormat(enum EMediaPlayerTrack TrackType, int32 TrackIndex);
  FString GetTrackLanguage(enum EMediaPlayerTrack TrackType, int32 TrackIndex);
  FString GetUrl();
  float GetVerticalFieldOfView();
  float GetVideoTrackAspectRatio(int32 TrackIndex, int32 FormatIndex);
  struct FIntPoint GetVideoTrackDimensions(int32 TrackIndex, int32 FormatIndex);
  float GetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex);
  struct FFloatRange GetVideoTrackFrameRates(int32 TrackIndex, int32 FormatIndex);
  FString GetVideoTrackType(int32 TrackIndex, int32 FormatIndex);
  struct FRotator GetViewRotation();
  bool HasError();
  bool IsBuffering();
  bool IsConnecting();
  bool IsLooping();
  bool IsPaused();
  bool IsPlaying();
  bool IsPreparing();
  bool IsReady();
  bool Next();
  bool OpenFile(FString FilePath);
  bool OpenPlaylist(UMediaPlaylist* InPlaylist);
  bool OpenPlaylistIndex(UMediaPlaylist* InPlaylist, int32 Index);
  bool OpenSource(UMediaSource* MediaSource);
  bool OpenURL(FString URL);
  bool Pause();
  bool Play();
  bool Previous();
  bool Reopen();
  bool Rewind();
  bool Seek(struct FTimespan Time);
  bool SelectTrack(enum EMediaPlayerTrack TrackType, int32 TrackIndex);
  void SetDesiredPlayerName(FName PlayerName);
  bool SetLooping(bool Looping);
  bool SetRate(float Rate);
  bool SetTrackFormat(enum EMediaPlayerTrack TrackType, int32 TrackIndex, int32 FormatIndex);
  bool SetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex, float FrameRate);
  bool SetViewField(float Horizontal, float Vertical, bool Absolute);
  bool SetViewRotation(struct FRotator Rotation, bool Absolute);
  bool SupportsRate(float Rate, bool Unthinned);
  bool SupportsScrubbing();
  bool SupportsSeeking();
};

class UMediaPlaylist: public UObject {
  /* offset=0x001c flags=0x0018001000000005 */ uint8 Loop:1;
  /* offset=0x0020 flags=0x0020080000000201 */ TArray<UMediaSource*> Items;

  bool Add(UMediaSource* MediaSource);
  bool AddFile(FString FilePath);
  bool AddUrl(FString URL);
  UMediaSource* Get(int32 Index);
  UMediaSource* GetNext(int32 InOutIndex);
  UMediaSource* GetPrevious(int32 InOutIndex);
  UMediaSource* GetRandom(int32 OutIndex);
  void Insert(UMediaSource* MediaSource, int32 Index);
  int32 Num();
  bool Remove(UMediaSource* MediaSource);
  bool RemoveAt(int32 Index);
  bool Replace(int32 Index, UMediaSource* Replacement);
};

class UMediaSoundComponent: public USynthComponent {
  /* offset=0x04e0 flags=0x0018001040000201 */ enum EMediaSoundChannels Channels;
  /* offset=0x04e4 flags=0x0018001040000205 */ UMediaPlayer* MediaPlayer;
};

class UMediaSource: public UObject {
  FString GetUrl();
  bool Validate();
};

class UMediaTexture: public UTexture {
  /* offset=0x008c flags=0x0018051040000205 */ uint8 AddressX;
  /* offset=0x008d flags=0x0018051040000205 */ uint8 AddressY;
  /* offset=0x008e flags=0x0018001040000205 */ bool AutoClear;
  /* offset=0x0090 flags=0x0018001040000005 */ struct FLinearColor ClearColor;
  /* offset=0x00a0 flags=0x0018001040000205 */ UMediaPlayer* MediaPlayer;

  float GetAspectRatio();
  int32 GetHeight();
  int32 GetWidth();
};

class UMeleeInfoItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* Image_MeleeIcon;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_SelectedStatus;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* TextBlock_MeleeName;
  /* offset=0x0240 flags=0x0008001040010205 */ UUserWidget* ParentUserWidget;
  /* offset=0x0244 flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x0248 flags=0x0008000000010005 */ struct FBP_STRUCT_Item_type WeaponDataRow;
  /* offset=0x0370 flags=0x0000000000010005 */ struct FSlateBrush SmallIconBrush;
  /* offset=0x03d8 flags=0x0000001040010205 */ bool bHasStartedTouchIn;
  /* offset=0x03e0 flags=0x0000000000010005 */ struct FBattleItemData BattleData;
  /* offset=0x0460 flags=0x0000100010010205 */ FItemBeDragBegin ItemBeDragBegin;
  /* offset=0x046c flags=0x0000100010010205 */ FItemBeDragCancelled ItemBeDragCancelled;

  void ExecuteUbergraph_MeleeInfoItem_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_MouseEvent, struct FPointerEvent K2Node_Event_PointerEvent, UDragDropOperation* K2Node_Event_Operation);
  void HighLightBG(bool IsHighLight);
  void ItemBeDragBegin__DelegateSignature(struct FBattleItemData ItemData, uint8 DragOrgin);
  void ItemBeDragCancelled__DelegateSignature();
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation, UBackPackDragDropOpt_BP_C* CallFunc_CreateDragDropOperation_ReturnValue, UBackPackDragWidget_BP_C* CallFunc_Create_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_ReleaseMouseCapture_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, FString CallFunc_GetPlatformName_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, bool K2Node_SwitchString_CmpSuccess, struct FEventReply CallFunc_CaptureMouse_ReturnValue, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue2, struct FEventReply CallFunc_CaptureMouse_ReturnValue2);
  void UpdateWeaponAppearanceInfo(struct FBP_STRUCT_Item_type Record, struct FBattleItemData ItemData, struct FVector2D CallFunc_MakeVector2D_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, struct FSlateBrush K2Node_MakeStruct_SlateBrush, UObject* CallFunc_GetAssetByAssetReference_ReturnValue2, UTexture2D* K2Node_DynamicCast_AsTexture_2D2, bool K2Node_DynamicCast_bSuccess2);
};

class UMeleeWeaponToSkillInterface: public UInterface {
  enum EUTSkillEntry GetSkillEntryForMeleeWeapon(bool IsPressed);
};

class UMenuAnchor: public UContentWidget {
  /* offset=0x00d8 flags=0x001c001040000215 */ UClass<UUserWidget>* MenuClass;
  /* offset=0x00e0 flags=0x0010001000080201 */ FGetWidget OnGetMenuContentEvent;
  /* offset=0x00f0 flags=0x0018001040000215 */ uint8 Placement;
  /* offset=0x00f1 flags=0x0018041040000215 */ bool ShouldDeferPaintingAfterWindowContent;
  /* offset=0x00f2 flags=0x0018041040000215 */ bool UseApplicationMenuStack;
  /* offset=0x00f4 flags=0x0010000010080200 */ FOnMenuOpenChangedEvent OnMenuOpenChanged;

  void Close();
  struct FVector2D GetMenuPosition();
  bool HasOpenSubMenus();
  bool IsOpen();
  void Open(bool bFocusMenu);
  bool ShouldOpenDueToClick();
  void ToggleOpen(bool bFocusOnOpen);
};

class UMeshComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0010040000000201 */ TArray<UMaterialInterface*> OverrideMaterials;

  int32 GetMaterialIndex(FName MaterialSlotName);
  TArray<FName> GetMaterialSlotNames();
  TArray<UMaterialInterface*> GetMaterials();
  bool IsMaterialSlotNameValid(FName MaterialSlotName);
  void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32 CinematicTextureGroups);
  void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);
  void SetVectorParameterValueOnMaterials(FName ParameterName, struct FVector ParameterValue);
};

class AMeshMergeCullingVolume: public AVolume {
};

class UMeshReconstructorBase: public UObject {
  struct FMRMeshConfiguration ConnectMRMesh(UMRMeshComponent* Mesh);
  void DisconnectMRMesh();
  bool IsReconstructionPaused();
  bool IsReconstructionStarted();
  void PauseReconstruction();
  void StartReconstruction();
  void StopReconstruction();
};

class UMeshSimplificationSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001040004201 */ FName MeshReductionModuleName;
};

class UMeshVertexPainterKismetLibrary: public UBlueprintFunctionLibrary {
  void PaintVerticesLerpAlongAxis(UStaticMeshComponent* StaticMeshComponent, struct FLinearColor StartColor, struct FLinearColor EndColor, enum EVertexPaintAxis Axis, bool bConvertToSRGB);
  void PaintVerticesSingleColor(UStaticMeshComponent* StaticMeshComponent, struct FLinearColor FillColor, bool bConvertToSRGB);
  void RemovePaintedVertices(UStaticMeshComponent* StaticMeshComponent);
};

class UMetaData: public UObject {
};

class UMicroTransactionBase: public UPlatformInterfaceBase {
  /* offset=0x0028 flags=0x0010000000000200 */ TArray<struct FPurchaseInfo> AvailableProducts;
  /* offset=0x0034 flags=0x0018000000000200 */ FString LastError;
  /* offset=0x0040 flags=0x0018000000000200 */ FString LastErrorSolution;
};

class AMiniMapStandardPoint: public AActor {
  /* offset=0x02a8 flags=0x0018001040000205 */ float LevelBoundExtent;
};

class UMobileInstalledContent: public UObject {
  float GetDiskFreeSpace();
  float GetInstalledContentSize();
  bool Mount(int32 PakOrder, FString MountPoint);
};

class UMobilePatchingLibrary: public UBlueprintFunctionLibrary {
  FString GetActiveDeviceProfileName();
  UMobileInstalledContent* GetInstalledContent(FString InstallDirectory);
  TArray<FString> GetSupportedPlatformNames();
  bool HasActiveWiFiConnection();
  void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, FOnRequestContentSucceeded OnSucceeded, FOnRequestContentFailed OnFailed);
};

class UMobilePendingContent: public UMobileInstalledContent {
  float GetDownloadSize();
  float GetDownloadSpeed();
  FText GetDownloadStatusText();
  float GetInstallProgress();
  float GetRequiredDiskSpace();
  float GetTotalDownloadedSize();
  void StartInstall(FOnContentInstallSucceeded OnSucceeded, FOnContentInstallFailed OnFailed);
};

class UModel: public UObject {
};

class UModelComponent: public UPrimitiveComponent {
  /* offset=0x05cc flags=0x0018001040000200 */ UBodySetup* ModelBodySetup;
};

class UMorphTarget: public UObject {
  /* offset=0x001c flags=0x0018011040000200 */ USkeletalMesh* BaseSkelMesh;
};

class UMotionControllerComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000205 */ int32 PlayerIndex;
  /* offset=0x05c4 flags=0x0018001040000205 */ enum EControllerHand Hand;
  /* offset=0x05c5 flags=0x0018001000000005 */ uint8 bDisableLowLatencyUpdate:1;
  /* offset=0x05c6 flags=0x0018001040000214 */ enum ETrackingStatus CurrentTrackingStatus;

  bool IsTracked();
};

class UMotionTrackedDeviceFunctionLibrary: public UBlueprintFunctionLibrary {
  void DisableMotionTrackingForComponent(UMotionControllerComponent* MotionControllerComponent);
  void DisableMotionTrackingOfAllControllers();
  void DisableMotionTrackingOfControllersForPlayer(int32 PlayerIndex);
  void DisableMotionTrackingOfDevice(int32 PlayerIndex, enum EControllerHand Hand);
  bool EnableMotionTrackingForComponent(UMotionControllerComponent* MotionControllerComponent);
  bool EnableMotionTrackingOfDevice(int32 PlayerIndex, enum EControllerHand Hand);
  int32 GetMaximumMotionTrackedControllerCount();
  int32 GetMotionTrackingEnabledControllerCount();
  bool IsMotionTrackedDeviceCountManagementNecessary();
  bool IsMotionTrackingEnabledForComponent(UMotionControllerComponent* MotionControllerComponent);
  bool IsMotionTrackingEnabledForDevice(int32 PlayerIndex, enum EControllerHand Hand);
  void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);
};

class UMouseCursorBinding: public UPropertyBinding {
  uint8 GetValue();
};

class UMoveAntiCheatComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018041000004005 */ uint8 bUseMoveAntiCheatCheck:1;
  /* offset=0x00b0 flags=0x0018041040004205 */ float MinMoveAntiCheatCheckIntervel;
  /* offset=0x00b4 flags=0x0018041040004205 */ int32 MaxCheatTimes;
  /* offset=0x00b8 flags=0x0018041040004205 */ float TolerateDistanceFractor;
  /* offset=0x00bc flags=0x0018041040004205 */ float MaxPacketLossRate;
  /* offset=0x00c0 flags=0x0018041040004205 */ float MinDistanceSqAtStaticColliderCheck;
  /* offset=0x00c4 flags=0x0018041040004205 */ int32 MaxTotalMoveCheatTimes;
  /* offset=0x00c8 flags=0x0018041040004205 */ int32 MaxTotalPassWallTimes;
  /* offset=0x00cc flags=0x0018041040004205 */ float MinMoveAntiCheatCheckIntervel2;
  /* offset=0x00d0 flags=0x0010000000004000 */ struct FMoveCheatAntiStrategy2 MoveCheatAntiStrategy4;

  /* CL  */ void DebugDrawLine(struct FVector Start, struct FVector End);
  void OnPreReconnectOnServer();
};

class UMovementComponent: public UActorComponent {
  /* offset=0x00ac flags=0x001800104028221c */ USceneComponent* UpdatedComponent;
  /* offset=0x00b0 flags=0x001800104028221c */ UPrimitiveComponent* UpdatedPrimitive;
  /* offset=0x00b8 flags=0x0018001040000005 */ struct FVector Velocity;
  /* offset=0x00c4 flags=0x0018001000000015 */ uint8 bConstrainToPlane:1;
  /* offset=0x00c4 flags=0x0018001000000015 */ uint8 bSnapToPlaneAtStart:1;
  /* offset=0x00c5 flags=0x0048001040000201 */ enum EPlaneConstraintAxisSetting PlaneConstraintAxisSetting;
  /* offset=0x00c8 flags=0x0028081040000015 */ struct FVector PlaneConstraintNormal;
  /* offset=0x00d4 flags=0x0028081040000015 */ struct FVector PlaneConstraintOrigin;
  /* offset=0x00e0 flags=0x0018001000000005 */ uint8 bUpdateOnlyIfRendered:1;
  /* offset=0x00e0 flags=0x0018001000000015 */ uint8 bAutoUpdateTickRegistration:1;
  /* offset=0x00e0 flags=0x0018001000000015 */ uint8 bTickBeforeOwner:1;
  /* offset=0x00e0 flags=0x0018001000000015 */ uint8 bAutoRegisterUpdatedComponent:1;

  struct FVector ConstrainDirectionToPlane(struct FVector Direction);
  struct FVector ConstrainLocationToPlane(struct FVector Location);
  struct FVector ConstrainNormalToPlane(struct FVector Normal);
  float GetGravityZ();
  float GetMaxSpeed();
  APhysicsVolume* GetPhysicsVolume();
  enum EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
  struct FVector GetPlaneConstraintNormal();
  struct FVector GetPlaneConstraintOrigin();
  bool IsExceedingMaxSpeed(float MaxSpeed);
  float K2_GetMaxSpeedModifier();
  float K2_GetModifiedMaxSpeed();
  bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult OutHit, bool bSweep, bool bTeleport);
  void PhysicsVolumeChanged(APhysicsVolume* NewVolume);
  void SetPlaneConstraintAxisSetting(enum EPlaneConstraintAxisSetting NewAxisSetting);
  void SetPlaneConstraintEnabled(bool bEnabled);
  void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up);
  void SetPlaneConstraintNormal(struct FVector PlaneNormal);
  void SetPlaneConstraintOrigin(struct FVector PlaneOrigin);
  void SetUpdatedComponent(USceneComponent* NewUpdatedComponent);
  void SnapUpdatedComponentToPlane();
  void StopMovementImmediately();
};

class UMoviePlayerSettings: public UObject {
  /* offset=0x001c flags=0x0018001040044201 */ bool bWaitForMoviesToComplete;
  /* offset=0x0020 flags=0x0010000000044201 */ TArray<FString> bMoviesAreSkippable;
  /* offset=0x002c flags=0x0010000000044201 */ TArray<FString> StartupMovies;
};

class UMovieScene: public UMovieSceneSignedObject {
  /* offset=0x00a0 flags=0x0040000000000200 */ TArray<struct FMovieSceneSpawnable> Spawnables;
  /* offset=0x00ac flags=0x0040000000000200 */ TArray<struct FMovieScenePossessable> Possessables;
  /* offset=0x00b8 flags=0x0040008000000200 */ TArray<struct FMovieSceneBinding> ObjectBindings;
  /* offset=0x00c4 flags=0x0040008000000208 */ TArray<UMovieSceneTrack*> MasterTracks;
  /* offset=0x00d0 flags=0x004a001040080208 */ UMovieSceneTrack* CameraCutTrack;
  /* offset=0x00d4 flags=0x0048000000000000 */ struct FFloatRange SelectionRange;
  /* offset=0x00e4 flags=0x0048000000000000 */ struct FFloatRange PlaybackRange;
  /* offset=0x00f4 flags=0x0048001040000200 */ bool bForceFixedFrameIntervalPlayback;
  /* offset=0x00f8 flags=0x0048001040000200 */ float FixedFrameInterval;
  /* offset=0x00fc flags=0x0048001060000200 */ float InTime;
  /* offset=0x0100 flags=0x0048001060000200 */ float OutTime;
  /* offset=0x0104 flags=0x0048001060000200 */ float StartTime;
  /* offset=0x0108 flags=0x0048001060000200 */ float endTime;
};

class UMovieScene2DTransformSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FRichCurve Translation;
  /* offset=0x0198 flags=0x0040000000000000 */ struct FRichCurve Rotation;
  /* offset=0x01ec flags=0x0040000000000000 */ struct FRichCurve Scale;
  /* offset=0x0294 flags=0x0040000000000000 */ struct FRichCurve Shear;
};

class UMovieScene2DTransformTrack: public UMovieScenePropertyTrack {
};

class UMovieScene3DAttachSection: public UMovieScene3DConstraintSection {
  /* offset=0x0100 flags=0x0018001040000201 */ FName AttachSocketName;
  /* offset=0x0108 flags=0x0018001040000201 */ FName AttachComponentName;
  /* offset=0x0110 flags=0x0018001040000201 */ enum EAttachmentRule AttachmentLocationRule;
  /* offset=0x0111 flags=0x0018001040000201 */ enum EAttachmentRule AttachmentRotationRule;
  /* offset=0x0112 flags=0x0018001040000201 */ enum EAttachmentRule AttachmentScaleRule;
  /* offset=0x0113 flags=0x0018001040000201 */ enum EDetachmentRule DetachmentLocationRule;
  /* offset=0x0114 flags=0x0018001040000201 */ enum EDetachmentRule DetachmentRotationRule;
  /* offset=0x0115 flags=0x0018001040000201 */ enum EDetachmentRule DetachmentScaleRule;
};

class UMovieScene3DAttachTrack: public UMovieScene3DConstraintTrack {
};

class UMovieScene3DConstraintSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0028081040000000 */ struct FGuid ConstraintId;
};

class UMovieScene3DConstraintTrack: public UMovieSceneTrack {
  /* offset=0x00a8 flags=0x0020088000000208 */ TArray<UMovieSceneSection*> ConstraintSections;
};

class UMovieScene3DPathSection: public UMovieScene3DConstraintSection {
  /* offset=0x00fc flags=0x0040000000000001 */ struct FRichCurve TimingCurve;
  /* offset=0x0150 flags=0x0048001040000201 */ enum MovieScene3DPathSection_Axis FrontAxisEnum;
  /* offset=0x0151 flags=0x0048001040000201 */ enum MovieScene3DPathSection_Axis UpAxisEnum;
  /* offset=0x0152 flags=0x0048001000000001 */ uint8 bFollow:1;
  /* offset=0x0152 flags=0x0048001000000001 */ uint8 bReverse:1;
  /* offset=0x0152 flags=0x0048001000000001 */ uint8 bForceUpright:1;
};

class UMovieScene3DPathTrack: public UMovieScene3DConstraintTrack {
};

class UMovieScene3DTransformSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040001000000000 */ struct FMovieSceneTransformMask TransformMask;
  /* offset=0x00f4 flags=0x0040000000000000 */ struct FRichCurve Translation;
  /* offset=0x01f0 flags=0x0040000000000000 */ struct FRichCurve Rotation;
  /* offset=0x02ec flags=0x0040000000000000 */ struct FRichCurve Scale;
  /* offset=0x03e8 flags=0x0040000000000000 */ struct FRichCurve ManualWeight;
};

class UMovieScene3DTransformTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneActorReferenceSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FIntegralCurve ActorGuidIndexCurve;
  /* offset=0x0150 flags=0x0040000000000200 */ TArray<FString> ActorGuidStrings;
};

class UMovieSceneActorReferenceTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneAkAudioEventSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0048001040000201 */ UAkAudioEvent* Event;
  /* offset=0x00f0 flags=0x0048041040000201 */ bool StopAtSectionEnd;
  /* offset=0x00f4 flags=0x0048040000000201 */ FString EventName;
};

class UMovieSceneAkAudioEventTrack: public UMovieSceneAkTrack {
};

class UMovieSceneAkAudioRTPCSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0028080000000201 */ FString Name;
  /* offset=0x00fc flags=0x0020080000000000 */ struct FRichCurve FloatCurve;
};

class UMovieSceneAkAudioRTPCTrack: public UMovieSceneAkTrack {
};

class UMovieSceneAkTrack: public UMovieSceneTrack {
  /* offset=0x00a8 flags=0x0020088000000208 */ TArray<UMovieSceneSection*> Sections;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bIsAMasterTrack:1;
};

class UMovieSceneAudioSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0048001040000201 */ USoundBase* Sound;
  /* offset=0x00f0 flags=0x0048001040000201 */ float StartOffset;
  /* offset=0x00f4 flags=0x0048001060000200 */ float AudioStartTime;
  /* offset=0x00f8 flags=0x0048001060000200 */ float AudioDilationFactor;
  /* offset=0x00fc flags=0x0048001060000200 */ float AudioVolume;
  /* offset=0x0100 flags=0x0040000000000001 */ struct FRichCurve SoundVolume;
  /* offset=0x0154 flags=0x0040000000000001 */ struct FRichCurve PitchMultiplier;
  /* offset=0x01a8 flags=0x0048001040000201 */ bool bSuppressSubtitles;
  /* offset=0x01a9 flags=0x0048001040000201 */ bool bOverrideAttenuation;
  /* offset=0x01ac flags=0x0048001040000201 */ USoundAttenuation* AttenuationSettings;
  /* offset=0x01b0 flags=0x0040001000080200 */ FOnQueueSubtitles OnQueueSubtitles;
  /* offset=0x01c0 flags=0x0040000000080200 */ FOnAudioFinished OnAudioFinished;
  /* offset=0x01cc flags=0x0040000000080200 */ FOnAudioPlaybackPercent OnAudioPlaybackPercent;
};

class UMovieSceneAudioTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> AudioSections;
};

class UMovieSceneBindingOverrides: public UObject {
  /* offset=0x0020 flags=0x0040000000000201 */ TArray<struct FMovieSceneBindingOverrideData> BindingData;
};

class UMovieSceneBindingOverridesInterface: public UInterface {
};

class UMovieSceneBindingOwnerInterface: public UInterface {
};

class UMovieSceneBoolSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0018001060000200 */ bool DefaultValue;
  /* offset=0x00f4 flags=0x0040000000000000 */ struct FIntegralCurve BoolCurve;
};

class UMovieSceneBoolTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneBuiltInEasingFunction: public UObject {
  /* offset=0x0020 flags=0x0018001040000201 */ enum EMovieSceneBuiltInEasing Type;
};

class UMovieSceneByteSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FIntegralCurve ByteCurve;
};

class UMovieSceneByteTrack: public UMovieScenePropertyTrack {
  /* offset=0x00c8 flags=0x0028081040000200 */ UEnum* Enum;
};

class UMovieSceneCameraAnimSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0010001000000001 */ struct FMovieSceneCameraAnimSectionData AnimData;
  /* offset=0x0104 flags=0x0048001060000200 */ UCameraAnim* CameraAnim;
  /* offset=0x0108 flags=0x0048001060000200 */ float PlayRate;
  /* offset=0x010c flags=0x0048001060000200 */ float PlayScale;
  /* offset=0x0110 flags=0x0048001060000200 */ float BlendInTime;
  /* offset=0x0114 flags=0x0048001060000200 */ float BlendOutTime;
  /* offset=0x0118 flags=0x0048001060000200 */ bool bLooping;
};

class UMovieSceneCameraAnimTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> CameraAnimSections;
};

class UMovieSceneCameraCutSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0048001040000000 */ struct FGuid CameraGuid;
};

class UMovieSceneCameraCutTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneCameraShakeSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0010001000000001 */ struct FMovieSceneCameraShakeSectionData ShakeData;
  /* offset=0x0104 flags=0x001c001060000200 */ UClass<UCameraShake>* ShakeClass;
  /* offset=0x0108 flags=0x0018001060000200 */ float PlayScale;
  /* offset=0x010c flags=0x0018001060000200 */ uint8 PlaySpace;
  /* offset=0x0110 flags=0x0010001060000000 */ struct FRotator UserDefinedPlaySpace;
};

class UMovieSceneCameraShakeTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> CameraShakeSections;
};

class UMovieSceneCapture: public UObject {
  /* offset=0x0028 flags=0x0018001000004001 */ struct FCaptureProtocolID CaptureType;
  /* offset=0x0030 flags=0x0018001040000201 */ UMovieSceneCaptureProtocolSettings* ProtocolSettings;
  /* offset=0x0034 flags=0x0010000000004001 */ struct FMovieSceneCaptureSettings Settings;
  /* offset=0x0070 flags=0x0018041040004201 */ bool bUseSeparateProcess;
  /* offset=0x0071 flags=0x0018041040004201 */ bool bCloseEditorWhenCaptureStarts;
  /* offset=0x0074 flags=0x0018040000004201 */ FString AdditionalCommandLineArguments;
  /* offset=0x0080 flags=0x0018040000002201 */ FString InheritedCommandLineArguments;
};

class UMovieSceneCaptureEnvironment: public UObject {
  float GetCaptureElapsedTime();
  int32 GetCaptureFrameNumber();
};

class UMovieSceneCaptureInterface: public UInterface {
};

class UMovieSceneCaptureProtocolSettings: public UObject {
};

class UMovieSceneCinematicShotSection: public UMovieSceneSubSection {
  /* offset=0x0144 flags=0x0040000000000000 */ FText DisplayName;
};

class UMovieSceneCinematicShotTrack: public UMovieSceneSubTrack {
};

class UMovieSceneColorSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FRichCurve RedCurve;
  /* offset=0x0144 flags=0x0040000000000000 */ struct FRichCurve GreenCurve;
  /* offset=0x0198 flags=0x0040000000000000 */ struct FRichCurve BlueCurve;
  /* offset=0x01ec flags=0x0040000000000000 */ struct FRichCurve AlphaCurve;
};

class UMovieSceneColorTrack: public UMovieScenePropertyTrack {
  /* offset=0x00c8 flags=0x0048001060000200 */ bool bIsSlateColor;
};

class UMovieSceneComponentMaterialTrack: public UMovieSceneMaterialTrack {
  /* offset=0x00b4 flags=0x0048001040000200 */ int32 MaterialIndex;
};

class UMovieSceneEasingExternalCurve: public UObject {
  /* offset=0x0020 flags=0x0018001040000201 */ UCurveFloat* Curve;
};

class UMovieSceneEasingFunction: public UInterface {
  float OnEvaluate(float Interp);
};

class UMovieSceneEnumSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FIntegralCurve EnumCurve;
};

class UMovieSceneEnumTrack: public UMovieScenePropertyTrack {
  /* offset=0x00c8 flags=0x0028081040000200 */ UEnum* Enum;
};

class UMovieSceneEventSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0040000020000000 */ struct FNameCurve Events;
  /* offset=0x0138 flags=0x0040000000000000 */ struct FMovieSceneEventSectionData EventData;
};

class UMovieSceneEventTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a5 flags=0x0018001000000001 */ uint8 bFireEventsWhenForwards:1;
  /* offset=0x00a5 flags=0x0018001000000001 */ uint8 bFireEventsWhenBackwards:1;
  /* offset=0x00a6 flags=0x0018001040000201 */ enum EFireEventsAtPosition EventPosition;
  /* offset=0x00a8 flags=0x0010000000000201 */ TArray<struct FMovieSceneObjectBindingID> EventReceivers;
  /* offset=0x00b4 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneFadeSection: public UMovieSceneFloatSection {
  /* offset=0x0144 flags=0x0018001040000001 */ struct FLinearColor FadeColor;
  /* offset=0x0154 flags=0x0018001000000001 */ uint8 bFadeAudio:1;
};

class UMovieSceneFadeTrack: public UMovieSceneFloatTrack {
};

class UMovieSceneFloatSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FRichCurve FloatCurve;
};

class UMovieSceneFloatTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneFolder: public UObject {
  /* offset=0x0020 flags=0x0048001040000200 */ FName FolderName;
  /* offset=0x0028 flags=0x0040000000000200 */ TArray<UMovieSceneFolder*> ChildFolders;
  /* offset=0x0034 flags=0x0040008000000208 */ TArray<UMovieSceneTrack*> ChildMasterTracks;
  /* offset=0x0040 flags=0x0040000000000200 */ TArray<FString> ChildObjectBindingStrings;
};

class UMovieSceneIntegerSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FIntegralCurve IntegerCurve;
};

class UMovieSceneIntegerTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneLevelVisibilitySection: public UMovieSceneSection {
  /* offset=0x00ea flags=0x0048001040000201 */ enum ELevelVisibility Visibility;
  /* offset=0x00ec flags=0x0040000000000201 */ TArray<FName> LevelNames;
};

class UMovieSceneLevelVisibilityTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneMarginSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FRichCurve TopCurve;
  /* offset=0x0144 flags=0x0040000000000000 */ struct FRichCurve LeftCurve;
  /* offset=0x0198 flags=0x0040000000000000 */ struct FRichCurve RightCurve;
  /* offset=0x01ec flags=0x0040000000000000 */ struct FRichCurve BottomCurve;
};

class UMovieSceneMarginTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneMaterialParameterCollectionTrack: public UMovieSceneMaterialTrack {
  /* offset=0x00b4 flags=0x0018001040000201 */ UMaterialParameterCollection* MPC;
};

class UMovieSceneMaterialTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneMediaSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0018000000000201 */ FString Proxy;
  /* offset=0x00f8 flags=0x0048001040000201 */ UMediaSource* MediaSource;
};

class UMovieSceneMediaTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneNameableTrack: public UMovieSceneTrack {
};

class UMovieSceneParameterSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0040000000000200 */ TArray<struct FScalarParameterNameAndCurve> ScalarParameterNamesAndCurves;
  /* offset=0x00f8 flags=0x0040000000000200 */ TArray<struct FVectorParameterNameAndCurves> VectorParameterNamesAndCurves;
  /* offset=0x0104 flags=0x0040000000000200 */ TArray<struct FColorParameterNameAndCurves> ColorParameterNamesAndCurves;
};

class UMovieSceneParticleParameterTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneParticleSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0040000000000000 */ struct FIntegralCurve ParticleKeys;
};

class UMovieSceneParticleTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> ParticleSections;
};

class UMovieScenePropertyTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0028081040000200 */ FName PropertyName;
  /* offset=0x00b0 flags=0x0028080000000200 */ FString PropertyPath;
  /* offset=0x00bc flags=0x0020088000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneSection: public UMovieSceneSignedObject {
  /* offset=0x00a0 flags=0x0010001000000001 */ struct FMovieSceneSectionEvalOptions EvalOptions;
  /* offset=0x00a4 flags=0x0010001000000001 */ struct FMovieSceneEasingSettings Easing;
  /* offset=0x00cc flags=0x0048001040000201 */ float StartTime;
  /* offset=0x00d0 flags=0x0048001040000201 */ float endTime;
  /* offset=0x00d4 flags=0x0048001040000200 */ int32 RowIndex;
  /* offset=0x00d8 flags=0x0048001040000200 */ int32 OverlapPriority;
  /* offset=0x00dc flags=0x0048001000000001 */ uint8 bIsActive:1;
  /* offset=0x00dc flags=0x0048001000000001 */ uint8 bIsLocked:1;
  /* offset=0x00dc flags=0x0048001000000001 */ uint8 bIsInfinite:1;
  /* offset=0x00e0 flags=0x0048041040000201 */ float PrerollTime;
  /* offset=0x00e4 flags=0x0048041040000201 */ float PostrollTime;
  /* offset=0x00e8 flags=0x0020081000000000 */ struct FOptionalMovieSceneBlendType BlendType;
};

class UMovieSceneSegmentCompilerTestSection: public UMovieSceneSection {
};

class UMovieSceneSegmentCompilerTestTrack: public UMovieSceneTrack {
  /* offset=0x00a5 flags=0x0018001040000200 */ bool bHighPassFilter;
  /* offset=0x00a8 flags=0x0010008000000208 */ TArray<UMovieSceneSection*> SectionArray;
};

class UMovieSceneSequence: public UMovieSceneSignedObject {
  /* offset=0x00a0 flags=0x0010000000000000 */ struct FCachedMovieSceneEvaluationTemplate EvaluationTemplate;
  /* offset=0x0234 flags=0x0010001000000000 */ struct FMovieSceneTrackCompilationParams TemplateParameters;
  /* offset=0x0238 flags=0x0010000000000200 */ TMap<UObject*, struct FCachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;
  /* offset=0x0274 flags=0x0028081040000200 */ bool bParentContextsAreSignificant;
};

class UMovieSceneSequencePlayer: public UObject {
  /* offset=0x02e0 flags=0x0010000010080200 */ FOnMovieSceneSequencePlayerEvent OnPlay;
  /* offset=0x02ec flags=0x0010000010080200 */ FOnMovieSceneSequencePlayerEvent OnPlayReverse;
  /* offset=0x02f8 flags=0x0010000010080200 */ FOnMovieSceneSequencePlayerEvent OnStop;
  /* offset=0x0304 flags=0x0010000010080200 */ FOnMovieSceneSequencePlayerEvent OnPause;
  /* offset=0x0310 flags=0x0010000010080200 */ FOnMovieSceneSequencePlayerEvent OnFinished;
  /* offset=0x031c flags=0x0028081040000200 */ uint8 status;
  /* offset=0x031d flags=0x0028081000000000 */ uint8 bReversePlayback:1;
  /* offset=0x031d flags=0x0028081000000000 */ uint8 bPendingFirstUpdate:1;
  /* offset=0x0320 flags=0x0028081040002200 */ UMovieSceneSequence* Sequence;
  /* offset=0x0324 flags=0x0028081040000200 */ float TimeCursorPosition;
  /* offset=0x0328 flags=0x0028081040000200 */ float StartTime;
  /* offset=0x032c flags=0x0028081040000200 */ float endTime;
  /* offset=0x0330 flags=0x0028081040002200 */ int32 CurrentNumLoops;
  /* offset=0x0340 flags=0x0020081000000000 */ struct FMovieSceneSequencePlaybackSettings PlaybackSettings;

  void ChangePlaybackDirection();
  TArray<UObject*> GetBoundObjects(struct FMovieSceneObjectBindingID ObjectBinding);
  float GetLength();
  float GetPlayRate();
  float GetPlaybackEnd();
  float GetPlaybackPosition();
  float GetPlaybackStart();
  void GoToEndAndStop();
  bool IsPaused();
  bool IsPlaying();
  void JumpToPosition(float NewPlaybackPosition);
  void Pause();
  void Play();
  void PlayLooping(int32 NumLoops);
  void PlayReverse();
  void Scrub();
  void SetPlayRate(float PlayRate);
  void SetPlaybackPosition(float NewPlaybackPosition);
  void SetPlaybackRange(float NewStartTime, float NewEndTime);
  void StartPlayingNextTick();
  void Stop();
};

class UMovieSceneSignedObject: public UObject {
  /* offset=0x001c flags=0x0048001040000000 */ struct FGuid Signature;
};

class UMovieSceneSkeletalAnimationSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0010000000000001 */ struct FMovieSceneSkeletalAnimationParams Params;
  /* offset=0x0168 flags=0x0048001060000200 */ UAnimSequence* AnimSequence;
  /* offset=0x016c flags=0x0048001060000200 */ UAnimSequenceBase* Animation;
  /* offset=0x0170 flags=0x0048001060000200 */ float StartOffset;
  /* offset=0x0174 flags=0x0048001060000200 */ float EndOffset;
  /* offset=0x0178 flags=0x0048001060000200 */ float PlayRate;
  /* offset=0x017c flags=0x0048001020000000 */ uint8 bReverse:1;
  /* offset=0x0180 flags=0x0048001060000200 */ FName SlotName;
};

class UMovieSceneSkeletalAnimationTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0040008000000208 */ TArray<UMovieSceneSection*> AnimationSections;
  /* offset=0x00b4 flags=0x0048001040000200 */ bool bUseLegacySectionIndexBlend;
};

class UMovieSceneSlomoSection: public UMovieSceneFloatSection {
};

class UMovieSceneSlomoTrack: public UMovieSceneFloatTrack {
};

class UMovieSceneSpawnSection: public UMovieSceneBoolSection {
};

class UMovieSceneSpawnTrack: public UMovieSceneTrack {
  /* offset=0x00a8 flags=0x0020088000000208 */ TArray<UMovieSceneSection*> Sections;
  /* offset=0x00b4 flags=0x0028081040000000 */ struct FGuid ObjectGuid;
};

class UMovieSceneStringSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FStringCurve StringCurve;
};

class UMovieSceneStringTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneSubSection: public UMovieSceneSection {
  /* offset=0x00ec flags=0x0010001000000001 */ struct FMovieSceneSectionParameters Parameters;
  /* offset=0x0100 flags=0x0048001060000200 */ float StartOffset;
  /* offset=0x0104 flags=0x0048001060000200 */ float TimeScale;
  /* offset=0x0108 flags=0x0048001060000200 */ float PrerollTime;
  /* offset=0x010c flags=0x0028081040000201 */ UMovieSceneSequence* SubSequence;
  /* offset=0x0110 flags=0x002c081040000001 */ AActor* ActorToRecord;
  /* offset=0x012c flags=0x0028080000000201 */ FString TargetSequenceName;
  /* offset=0x0138 flags=0x0020080000000001 */ struct FDirectoryPath TargetPathToRecordTo;
};

class UMovieSceneSubTrack: public UMovieSceneNameableTrack {
  /* offset=0x00a8 flags=0x0020088000000208 */ TArray<UMovieSceneSection*> Sections;
};

class UMovieSceneTrack: public UMovieSceneSignedObject {
  /* offset=0x00a0 flags=0x0010001000000001 */ struct FMovieSceneTrackEvalOptions EvalOptions;
};

class UMovieSceneTransformTrack: public UMovieScenePropertyTrack {
};

class UMovieSceneVectorSection: public UMovieSceneSection {
  /* offset=0x00f0 flags=0x0040000000000000 */ struct FRichCurve Curves;
  /* offset=0x0240 flags=0x0048001040000200 */ int32 ChannelsUsed;
};

class UMovieSceneVectorTrack: public UMovieScenePropertyTrack {
  /* offset=0x00c8 flags=0x0048001040000200 */ int32 NumChannelsUsed;
};

class UMovieSceneVisibilityTrack: public UMovieSceneBoolTrack {
};

class UMovieSceneWidgetMaterialTrack: public UMovieSceneMaterialTrack {
  /* offset=0x00b4 flags=0x0040000000000200 */ TArray<FName> BrushPropertyNamePath;
  /* offset=0x00c0 flags=0x0048001040000200 */ FName TrackName;
};

class UMultiLineEditableText: public UTextLayoutWidget {
  /* offset=0x00ec flags=0x0010000000000001 */ FText Text;
  /* offset=0x00f8 flags=0x0010000000000001 */ FText HintText;
  /* offset=0x0108 flags=0x0010001000080200 */ FGetText HintTextDelegate;
  /* offset=0x0118 flags=0x0010000000000005 */ struct FTextBlockStyle WidgetStyle;
  /* offset=0x0290 flags=0x0018001040000215 */ bool bIsReadOnly;
  /* offset=0x0298 flags=0x0018000020000000 */ struct FSlateFontInfo Font;
  /* offset=0x02d8 flags=0x0018041040000201 */ bool AllowContextMenu;
  /* offset=0x02dc flags=0x0010000010080200 */ FOnMultiLineEditableTextChangedEvent OnTextChanged;
  /* offset=0x02e8 flags=0x0010000010080200 */ FOnMultiLineEditableTextCommittedEvent OnTextCommitted;

  FText GetText();
  void OnMultiLineEditableTextChangedEvent__DelegateSignature(FText Text);
  void OnMultiLineEditableTextCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void SetIsReadOnly(bool bReadOnly);
  void SetText(FText InText);
};

class UMultiLineEditableTextBox: public UTextLayoutWidget {
  /* offset=0x00ec flags=0x0010000000000001 */ FText Text;
  /* offset=0x00f8 flags=0x0010000000000001 */ FText HintText;
  /* offset=0x0108 flags=0x0010001000080200 */ FGetText HintTextDelegate;
  /* offset=0x0118 flags=0x0010000000000005 */ struct FEditableTextBoxStyle WidgetStyle;
  /* offset=0x0738 flags=0x0010000000000005 */ struct FTextBlockStyle TextStyle;
  /* offset=0x08b0 flags=0x0018001040000215 */ bool bIsReadOnly;
  /* offset=0x08b1 flags=0x0018041040000201 */ bool AllowContextMenu;
  /* offset=0x08b4 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x08b8 flags=0x0018000020000000 */ struct FSlateFontInfo Font;
  /* offset=0x08f8 flags=0x0018001060000000 */ struct FLinearColor ForegroundColor;
  /* offset=0x0908 flags=0x0018001060000000 */ struct FLinearColor BackgroundColor;
  /* offset=0x0918 flags=0x0018001060000000 */ struct FLinearColor ReadOnlyForegroundColor;
  /* offset=0x0928 flags=0x0010000010080200 */ FOnMultiLineEditableTextBoxChangedEvent OnTextChanged;
  /* offset=0x0934 flags=0x0010000010080200 */ FOnMultiLineEditableTextBoxCommittedEvent OnTextCommitted;

  FText GetText();
  void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(FText Text);
  void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void SetError(FText InError);
  void SetIsReadOnly(bool bReadOnly);
  void SetText(FText InText);
};

class UMulticastDelegateProperty: public UProperty {
};

class AMyLandscape: public AActor {
  /* offset=0x02a8 flags=0x0048001040080209 */ URuntimeMeshComponent* Mesh;
  /* offset=0x02ac flags=0x0048001040000201 */ UMyLandscapeGeometry* LandscapeGeometry;
  /* offset=0x02b0 flags=0x0048001040000201 */ UMaterial* LandscapeMat;

  void GameEventFighting();
};

class UMyLandscapeGeometry: public UDataAsset {
  /* offset=0x0020 flags=0x0010000000000201 */ TArray<struct FVector> Vertex;
  /* offset=0x002c flags=0x0010000000000201 */ TArray<struct FVector> Normals;
  /* offset=0x0038 flags=0x0010000000000201 */ TArray<struct FVector2D> UV;
  /* offset=0x0044 flags=0x0010000000000201 */ TArray<int32> Indices;
  /* offset=0x0050 flags=0x0010000000000201 */ TMap<struct FIntPoint, int32> ComponentIndexOffset;
  /* offset=0x008c flags=0x0018001040000201 */ int32 ComponentIndexCount;
  /* offset=0x0090 flags=0x0018001040000201 */ int32 ComponentVertexCount;
  /* offset=0x0094 flags=0x0010000000000201 */ TMap<FString, struct FSubLevelComponentMapValue> SubLevelComponentMap;
};

class UNameProperty: public UProperty {
};

class UNamedInterfaces: public UObject {
  /* offset=0x001c flags=0x0040000000000200 */ TArray<struct FNamedInterface> NamedInterfaces;
  /* offset=0x0028 flags=0x0040000000004200 */ TArray<struct FNamedInterfaceDef> NamedInterfaceDefs;
};

class UNamedSlot: public UContentWidget {
};

class UNamedSlotInterface: public UInterface {
};

class UNativeWidgetHost: public UWidget {
};

class UNavAgentInterface: public UInterface {
};

class UNavArea: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ float DefaultCost;
  /* offset=0x0020 flags=0x0028081040004201 */ float FixedAreaEnteringCost;
  /* offset=0x0024 flags=0x0018001040004001 */ struct FColor DrawColor;
  /* offset=0x0028 flags=0x0010001000004001 */ struct FNavAgentSelector SupportedAgents;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent0:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent1:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent2:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent3:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent4:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent5:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent6:1;
  /* offset=0x002c flags=0x0018001000004000 */ uint8 bSupportsAgent7:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent8:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent9:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent10:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent11:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent12:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent13:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent14:1;
  /* offset=0x002d flags=0x0018001000004000 */ uint8 bSupportsAgent15:1;
};

class UNavAreaMeta: public UNavArea {
};

class UNavAreaMeta_SwitchByAgent: public UNavAreaMeta {
  /* offset=0x0034 flags=0x001c001040000201 */ UClass<UNavArea>* Agent0Area;
  /* offset=0x0038 flags=0x001c001040000201 */ UClass<UNavArea>* Agent1Area;
  /* offset=0x003c flags=0x001c001040000201 */ UClass<UNavArea>* Agent2Area;
  /* offset=0x0040 flags=0x001c001040000201 */ UClass<UNavArea>* Agent3Area;
  /* offset=0x0044 flags=0x001c001040000201 */ UClass<UNavArea>* Agent4Area;
  /* offset=0x0048 flags=0x001c001040000201 */ UClass<UNavArea>* Agent5Area;
  /* offset=0x004c flags=0x001c001040000201 */ UClass<UNavArea>* Agent6Area;
  /* offset=0x0050 flags=0x001c001040000201 */ UClass<UNavArea>* Agent7Area;
  /* offset=0x0054 flags=0x001c001040000201 */ UClass<UNavArea>* Agent8Area;
  /* offset=0x0058 flags=0x001c001040000201 */ UClass<UNavArea>* Agent9Area;
  /* offset=0x005c flags=0x001c001040000201 */ UClass<UNavArea>* Agent10Area;
  /* offset=0x0060 flags=0x001c001040000201 */ UClass<UNavArea>* Agent11Area;
  /* offset=0x0064 flags=0x001c001040000201 */ UClass<UNavArea>* Agent12Area;
  /* offset=0x0068 flags=0x001c001040000201 */ UClass<UNavArea>* Agent13Area;
  /* offset=0x006c flags=0x001c001040000201 */ UClass<UNavArea>* Agent14Area;
  /* offset=0x0070 flags=0x001c001040000201 */ UClass<UNavArea>* Agent15Area;
};

class UNavArea_Default: public UNavArea {
};

class UNavArea_LowHeight: public UNavArea {
};

class UNavArea_Null: public UNavArea {
};

class UNavArea_Obstacle: public UNavArea {
};

class UNavCollision: public UObject {
  /* offset=0x0058 flags=0x0010000000000201 */ TArray<struct FNavCollisionCylinder> CylinderCollision;
  /* offset=0x0064 flags=0x0010000000000201 */ TArray<struct FNavCollisionBox> BoxCollision;
  /* offset=0x0070 flags=0x001c001040000201 */ UClass<UNavArea>* AreaClass;
  /* offset=0x0074 flags=0x0018001000004001 */ uint8 bIsDynamicObstacle:1;
  /* offset=0x0074 flags=0x0018001000004001 */ uint8 bGatherConvexGeometry:1;
};

class UNavEdgeProviderInterface: public UInterface {
};

class UNavFilter_AIControllerDefault: public UNavigationQueryFilter {
};

class UNavLinkComponent: public UPrimitiveComponent {
  /* offset=0x05c4 flags=0x0010000000000215 */ TArray<struct FNavigationLink> Links;
};

class UNavLinkCustomComponent: public UNavRelevantComponent {
  /* offset=0x00d8 flags=0x0028081040000200 */ uint32 NavLinkUserId;
  /* offset=0x00dc flags=0x002c081040000201 */ UClass<UNavArea>* EnabledAreaClass;
  /* offset=0x00e0 flags=0x002c081040000201 */ UClass<UNavArea>* DisabledAreaClass;
  /* offset=0x00e4 flags=0x0028081040000001 */ struct FVector LinkRelativeStart;
  /* offset=0x00f0 flags=0x0028081040000001 */ struct FVector LinkRelativeEnd;
  /* offset=0x00fc flags=0x0028081040000201 */ uint8 LinkDirection;
  /* offset=0x00fd flags=0x0028081000000001 */ uint8 bLinkEnabled:1;
  /* offset=0x00fd flags=0x0028081000000001 */ uint8 bNotifyWhenEnabled:1;
  /* offset=0x00fd flags=0x0028081000000001 */ uint8 bNotifyWhenDisabled:1;
  /* offset=0x00fd flags=0x0028081000000001 */ uint8 bCreateBoxObstacle:1;
  /* offset=0x0100 flags=0x0028081040000001 */ struct FVector ObstacleOffset;
  /* offset=0x010c flags=0x0028081040000001 */ struct FVector ObstacleExtent;
  /* offset=0x0118 flags=0x002c081040000201 */ UClass<UNavArea>* ObstacleAreaClass;
  /* offset=0x011c flags=0x0028081040000201 */ float BroadcastRadius;
  /* offset=0x0120 flags=0x0028081040000201 */ float BroadcastInterval;
  /* offset=0x0124 flags=0x0028081040000201 */ uint8 BroadcastChannel;
};

class UNavLinkCustomInterface: public UInterface {
};

class UNavLinkDefinition: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FNavigationLink> Links;
  /* offset=0x0028 flags=0x0010000000000201 */ TArray<struct FNavigationSegmentLink> SegmentLinks;
};

class UNavLinkHostInterface: public UInterface {
};

class ANavLinkProxy: public AActor {
  /* offset=0x02b0 flags=0x0010000000000201 */ TArray<struct FNavigationLink> PointLinks;
  /* offset=0x02bc flags=0x0010000000000200 */ TArray<struct FNavigationSegmentLink> SegmentLinks;
  /* offset=0x02c8 flags=0x00480010400a0209 */ UNavLinkCustomComponent* SmartLinkComp;
  /* offset=0x02cc flags=0x0018001040000201 */ bool bSmartLinkIsRelevant;
  /* offset=0x02d0 flags=0x0020080010080200 */ FSmartLinkReachedSignature OnSmartLinkReached;

  bool HasMovingAgents();
  bool IsSmartLinkEnabled();
  void ReceiveSmartLinkReached(AActor* Agent, struct FVector Destination);
  void ResumePathFollowing(AActor* Agent);
  void SetSmartLinkEnabled(bool bEnabled);
};

class UNavLinkRenderingComponent: public UPrimitiveComponent {
};

class UNavLinkTrivial: public UNavLinkDefinition {
};

class UNavLocalGridManager: public UObject {
  int32 AddLocalNavigationGridForBox(UObject* WorldContextObject, struct FVector Location, struct FVector Extent, struct FRotator Rotation, int32 Radius2D, float Height, bool bRebuildGrids);
  int32 AddLocalNavigationGridForCapsule(UObject* WorldContextObject, struct FVector Location, float CapsuleRadius, float CapsuleHalfHeight, int32 Radius2D, float Height, bool bRebuildGrids);
  int32 AddLocalNavigationGridForPoint(UObject* WorldContextObject, struct FVector Location, int32 Radius2D, float Height, bool bRebuildGrids);
  int32 AddLocalNavigationGridForPoints(UObject* WorldContextObject, TArray<struct FVector> Locations, int32 Radius2D, float Height, bool bRebuildGrids);
  bool FindLocalNavigationGridPath(UObject* WorldContextObject, struct FVector Start, struct FVector End, TArray<struct FVector> PathPoints);
  void RemoveLocalNavigationGrid(UObject* WorldContextObject, int32 GridId, bool bRebuildGrids);
  bool SetLocalNavigationGridDensity(UObject* WorldContextObject, float CellSize);
};

class ANavMeshBoundsVolume: public AVolume {
  /* offset=0x02d0 flags=0x0010001000000001 */ struct FNavAgentSelector SupportedAgents;
};

class UNavMeshRenderingComponent: public UPrimitiveComponent {
};

class UNavModifierComponent: public UNavRelevantComponent {
  /* offset=0x00d4 flags=0x001c001040000215 */ UClass<UNavArea>* AreaClass;
  /* offset=0x00d8 flags=0x0018001040000001 */ struct FVector FailsafeExtent;

  void SetAreaClass(UClass<UNavArea>* NewAreaClass);
};

class ANavModifierVolume: public AVolume {
  /* offset=0x02d4 flags=0x002c081040000215 */ UClass<UNavArea>* AreaClass;

  void SetAreaClass(UClass<UNavArea>* NewAreaClass);
};

class UNavMovementComponent: public UMovementComponent {
  /* offset=0x00e4 flags=0x0018001000000005 */ struct FNavAgentProperties NavAgentProps;
  /* offset=0x00fc flags=0x0028081040000201 */ float FixedPathBrakingDistance;
  /* offset=0x0100 flags=0x0028081000000001 */ uint8 bUpdateNavAgentWithOwnersCollision:1;
  /* offset=0x0100 flags=0x0028081000044001 */ uint8 bUseAccelerationForPaths:1;
  /* offset=0x0100 flags=0x0028081000000001 */ uint8 bUseFixedBrakingDistanceForPaths:1;
  /* offset=0x0104 flags=0x0010001000000000 */ struct FMovementProperties MovementState;

  bool IsCrouching();
  bool IsFalling();
  bool IsFlying();
  bool IsMovingOnGround();
  bool IsSwimming();
  void StopActiveMovement();
  void StopMovementKeepPathing();
};

class UNavNodeInterface: public UInterface {
};

class UNavPathObserverInterface: public UInterface {
};

class UNavRelevantComponent: public UActorComponent {
  /* offset=0x00cc flags=0x0028081000000000 */ uint8 bAttachToOwnersRoot:1;
  /* offset=0x00d0 flags=0x0028081040002200 */ UObject* CachedNavParent;

  void SetNavigationRelevancy(bool bRelevant);
};

class UNavRelevantInterface: public UInterface {
};

class UNavTestRenderingComponent: public UPrimitiveComponent {
};

class ANavigationData: public AActor {
  /* offset=0x02a8 flags=0x0018001040282208 */ UPrimitiveComponent* RenderingComp;
  /* offset=0x02b0 flags=0x0020080000000000 */ struct FNavDataConfig NavDataConfig;
  /* offset=0x0300 flags=0x0028081000002001 */ uint8 bEnableDrawing:1;
  /* offset=0x0300 flags=0x0028081000004001 */ uint8 bForceRebuildOnLoad:1;
  /* offset=0x0300 flags=0x00280c1000024001 */ uint8 bCanBeMainNavData:1;
  /* offset=0x0300 flags=0x00280c1000024001 */ uint8 bCanSpawnOnRebuild:1;
  /* offset=0x0300 flags=0x0028081020004000 */ uint8 bRebuildAtRuntime:1;
  /* offset=0x0301 flags=0x0028081040004201 */ enum ERuntimeGenerationType RuntimeGeneration;
  /* offset=0x0304 flags=0x0028081040004201 */ float ObservedPathsTickInterval;
  /* offset=0x0308 flags=0x0028081040000200 */ uint32 DataVersion;
  /* offset=0x0394 flags=0x0020080000000200 */ TArray<struct FSupportedAreaData> SupportedAreas;
};

class UNavigationDataChunk: public UObject {
  /* offset=0x0020 flags=0x0018001040000200 */ FName NavigationDataName;
};

class ANavigationGraph: public ANavigationData {
};

class ANavigationGraphNode: public AActor {
};

class UNavigationGraphNodeComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0010000000000000 */ struct FNavGraphNode Node;
  /* offset=0x0280 flags=0x0018001040080208 */ UNavigationGraphNodeComponent* NextNodeComponent;
  /* offset=0x0284 flags=0x0018001040080208 */ UNavigationGraphNodeComponent* PrevNodeComponent;
};

class UNavigationInvokerComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040000201 */ float TileGenerationRadius;
  /* offset=0x00b0 flags=0x0028081040000201 */ float TileRemovalRadius;
};

class ANavigationObjectBase: public AActor {
  /* offset=0x02ac flags=0x0048001040080208 */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02b0 flags=0x0048001040080208 */ UBillboardComponent* GoodSprite;
  /* offset=0x02b4 flags=0x0048001040080208 */ UBillboardComponent* BadSprite;
  /* offset=0x02b8 flags=0x0018001000000000 */ uint8 bIsPIEPlayerStart:1;
};

class UNavigationPath: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FOnNavigationPathUpdated PathUpdatedNotifier;
  /* offset=0x0028 flags=0x0010000000000214 */ TArray<struct FVector> PathPoints;
  /* offset=0x0034 flags=0x0018001040000214 */ uint8 RecalculateOnInvalidation;

  void EnableDebugDrawing(bool bShouldDrawDebugData, struct FLinearColor PathColor);
  void EnableRecalculationOnInvalidation(uint8 DoRecalculation);
  FString GetDebugString();
  float GetPathCost();
  float GetPathLength();
  bool IsPartial();
  bool IsStringPulled();
  bool IsValid();
};

class UNavigationPathGenerator: public UInterface {
};

class UNavigationQueryFilter: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FNavigationFilterArea> Areas;
  /* offset=0x0028 flags=0x0010001040000001 */ struct FNavigationFilterFlags IncludeFlags;
  /* offset=0x002c flags=0x0010001040000001 */ struct FNavigationFilterFlags ExcludeFlags;
};

class UNavigationSystem: public UBlueprintFunctionLibrary {
  /* offset=0x001c flags=0x0018001040000200 */ ANavigationData* MainNavData;
  /* offset=0x0020 flags=0x0018001040002200 */ ANavigationData* AbstractNavData;
  /* offset=0x0024 flags=0x002c081040000215 */ UClass<UCrowdManagerBase>* CrowdManagerClass;
  /* offset=0x0028 flags=0x0028081000004001 */ uint8 bAutoCreateNavigationData:1;
  /* offset=0x0028 flags=0x0028081000004001 */ uint8 bAllowClientSideNavigation:1;
  /* offset=0x0028 flags=0x0028081000000000 */ uint8 bSupportRebuilding:1;
  /* offset=0x0028 flags=0x0018001000004001 */ uint8 bInitialBuildingLocked:1;
  /* offset=0x0028 flags=0x0018001000004001 */ uint8 bSkipAgentHeightCheckWhenPickingNavData:1;
  /* offset=0x0029 flags=0x0028081040014201 */ enum ENavDataGatheringModeConfig DataGatheringMode;
  /* offset=0x002a flags=0x0028081000014001 */ uint8 bGenerateNavigationOnlyAroundNavigationInvokers:1;
  /* offset=0x002c flags=0x0028081040004201 */ float ActiveTilesUpdateInterval;
  /* offset=0x0030 flags=0x0020080000004201 */ TArray<struct FNavDataConfig> SupportedAgents;
  /* offset=0x003c flags=0x0018001040004201 */ float DirtyAreasUpdateFreq;
  /* offset=0x0040 flags=0x0010000000000200 */ TArray<ANavigationData*> NavDataSet;
  /* offset=0x004c flags=0x0010000000002200 */ TArray<ANavigationData*> NavDataRegistrationQueue;
  /* offset=0x00a0 flags=0x0010000000082200 */ FOnNavDataGenerigEvent OnNavDataRegisteredEvent;
  /* offset=0x00ac flags=0x0010000010082200 */ FOnNavDataGenerigEvent OnNavigationGenerationFinishedDelegate;
  /* offset=0x01b8 flags=0x0028081040000200 */ enum FNavigationSystemRunMode OperationMode;

  UNavigationPath* FindPathToActorSynchronously(UObject* WorldContextObject, struct FVector PathStart, AActor* GoalActor, float TetherDistance, AActor* PathfindingContext, UClass<UNavigationQueryFilter>* FilterClass);
  UNavigationPath* FindPathToLocationSynchronously(UObject* WorldContextObject, struct FVector PathStart, struct FVector PathEnd, AActor* PathfindingContext, UClass<UNavigationQueryFilter>* FilterClass);
  UNavigationSystem* GetNavigationSystem(UObject* WorldContextObject);
  uint8 GetPathCost(UObject* WorldContextObject, struct FVector PathStart, struct FVector PathEnd, float PathCost, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  uint8 GetPathLength(UObject* WorldContextObject, struct FVector PathStart, struct FVector PathEnd, float PathLength, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  struct FVector GetRandomPointInNavigableRadius(UObject* WorldContextObject, struct FVector Origin, float Radius, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  struct FVector GetRandomReachablePointInRadius(UObject* WorldContextObject, struct FVector Origin, float Radius, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  bool IsNavigationBeingBuilt(UObject* WorldContextObject);
  bool IsNavigationBeingBuiltOrLocked(UObject* WorldContextObject);
  bool K2_GetRandomPointInNavigableRadius(UObject* WorldContextObject, struct FVector Origin, struct FVector RandomLocation, float Radius, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  bool K2_GetRandomReachablePointInRadius(UObject* WorldContextObject, struct FVector Origin, struct FVector RandomLocation, float Radius, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass);
  bool K2_ProjectPointToNavigation(UObject* WorldContextObject, struct FVector Point, struct FVector ProjectedLocation, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass, struct FVector QueryExtent);
  bool NavigationRaycast(UObject* WorldContextObject, struct FVector RayStart, struct FVector RayEnd, struct FVector HitLocation, UClass<UNavigationQueryFilter>* FilterClass, AController* Querier);
  void OnNavigationBoundsUpdated(ANavMeshBoundsVolume* NavVolume);
  struct FVector ProjectPointToNavigation(UObject* WorldContextObject, struct FVector Point, ANavigationData* NavData, UClass<UNavigationQueryFilter>* FilterClass, struct FVector QueryExtent);
  void RegisterNavigationInvoker(AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
  void ResetMaxSimultaneousTileGenerationJobsCount();
  void SetGeometryGatheringMode(enum ENavDataGatheringModeConfig NewMode);
  void SetMaxSimultaneousTileGenerationJobsCount(int32 MaxNumberOfJobs);
  void SimpleMoveToActor(AController* Controller, AActor* Goal);
  void SimpleMoveToLocation(AController* Controller, struct FVector Goal);
  void UnregisterNavigationInvoker(AActor* Invoker);
  void UpdateDynamicGenerateTargetNav(bool IsAdd, struct FDynamicGenerateTargetNavigation GenerateTargetNav);
};

class ANavigationTestingActor: public AActor {
  /* offset=0x02b0 flags=0x0048001040080208 */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02b4 flags=0x0048001040080209 */ UNavigationInvokerComponent* InvokerComponent;
  /* offset=0x02b8 flags=0x0048001000000001 */ uint8 bActAsNavigationInvoker:1;
  /* offset=0x02bc flags=0x0018001000000001 */ struct FNavAgentProperties NavAgentProps;
  /* offset=0x02d4 flags=0x0018001040000001 */ struct FVector QueryingExtent;
  /* offset=0x02e0 flags=0x0018001040002200 */ ANavigationData* MyNavData;
  /* offset=0x02e4 flags=0x0018001040020015 */ struct FVector ProjectedLocation;
  /* offset=0x02f0 flags=0x0018001000020015 */ uint8 bProjectedLocationValid:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bSearchStart:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bUseHierarchicalPathfinding:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bGatherDetailedInfo:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bDrawDistanceToWall:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bShowNodePool:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bShowBestPath:1;
  /* offset=0x02f0 flags=0x0018001000000001 */ uint8 bShowDiffWithPreviousStep:1;
  /* offset=0x02f1 flags=0x0018001000000001 */ uint8 bShouldBeVisibleInGame:1;
  /* offset=0x02f2 flags=0x0018001040000201 */ uint8 CostDisplayMode;
  /* offset=0x02f4 flags=0x0018001040000001 */ struct FVector2D TextCanvasOffset;
  /* offset=0x02fc flags=0x0018001000022015 */ uint8 bPathExist:1;
  /* offset=0x02fc flags=0x0018001000022015 */ uint8 bPathIsPartial:1;
  /* offset=0x02fc flags=0x0018001000022015 */ uint8 bPathSearchOutOfNodes:1;
  /* offset=0x0300 flags=0x0018001040022215 */ float PathfindingTime;
  /* offset=0x0304 flags=0x0018001040022215 */ float PathCost;
  /* offset=0x0308 flags=0x0018001040022215 */ int32 PathfindingSteps;
  /* offset=0x030c flags=0x0018001040000201 */ ANavigationTestingActor* OtherActor;
  /* offset=0x0310 flags=0x001c001040000201 */ UClass<UNavigationQueryFilter>* FilterClass;
  /* offset=0x0314 flags=0x0018001040002a01 */ int32 ShowStepIndex;
  /* offset=0x0318 flags=0x0018001040000201 */ float OffsetFromCornersDistance;
};

class UNavigationTypes: public UObject {
};

class UNavigatorPanel_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* CarTips;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* CompassImage;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* DirectionMarker;
  /* offset=0x0240 flags=0x000a0010c008020c */ UTextBlock* DirectionMarker2_Dist;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* DirectionMarker3_Dist;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* DirectionMarker4_Dist;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* DirectionMarker_Dist;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* footTips;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image_BombingMark;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image_CarMark;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_NavigationMark;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* PlayerMarker1;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* PlayerMarker2;
  /* offset=0x0268 flags=0x000a0010c008020c */ UInvalidationBox* PlayerMarker2_Group;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* PlayerMarker3;
  /* offset=0x0270 flags=0x000a0010c008020c */ UInvalidationBox* PlayerMarker3_Group;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* PlayerMarker4;
  /* offset=0x0278 flags=0x000a0010c008020c */ UInvalidationBox* PlayerMarker4_Group;
  /* offset=0x027c flags=0x000a0010c008020c */ UInvalidationBox* PlayerMarker_Group;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* shotTips;
  /* offset=0x0284 flags=0x0008001040010205 */ enum ESlateVisibility PlayerMarkerShow;
  /* offset=0x0288 flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamMatePlayerStateList;
  /* offset=0x0294 flags=0x0008001040010205 */ int32 LocalPlayerIndex;
  /* offset=0x0298 flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamPlayerWithoutLocalPlayer;
  /* offset=0x02a4 flags=0x0000001040010205 */ bool bNeedUpdateTeamMateInfo;
  /* offset=0x02a8 flags=0x0000000000010205 */ TArray<UWidget*> TeamPlayerMarkerArray;
  /* offset=0x02b4 flags=0x0000000000010205 */ TArray<UBP_VoiceUIObject_C*> VoiceImageObjectList;
  /* offset=0x02c0 flags=0x0008001040010205 */ UBP_VoiceCheck_C* VoiceCheck;
  /* offset=0x02c4 flags=0x0008001040010205 */ UMaterialInstanceDynamic* CompassMat;
  /* offset=0x02c8 flags=0x0008001040010205 */ float Width;
  /* offset=0x02cc flags=0x0008001040010205 */ float Offset;
  /* offset=0x02d0 flags=0x0008001040010205 */ float angleToPiexl;
  /* offset=0x02d4 flags=0x0008001040010205 */ float nowAngle0PosX;
  /* offset=0x02d8 flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* PlayerController;
  /* offset=0x02dc flags=0x0008001040010205 */ float HalfShowSize;
  /* offset=0x02e0 flags=0x0008001040010205 */ float HalfFullSize;
  /* offset=0x02e4 flags=0x0008001040010205 */ float ImageSize;
  /* offset=0x02e8 flags=0x0000000000010205 */ TArray<UBP_VoiceUIObject_C*> VoiceShowList;
  /* offset=0x02f4 flags=0x0008001040010205 */ float LandscapeRotation;
  /* offset=0x02f8 flags=0x0000000000010205 */ TArray<UTextBlock*> TeamPlayerMarkDistArray;

  void BindTeamMapMarkDelegate(FOnMapMarkChangeDelegate K2Node_CreateDelegate_OutputDelegate, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void Construct();
  void ConvertAngleToUV(float Angle, float RetrunValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void CreateTipsImage(uint8 NewParam, UImage* Image, uint8 nowType, UImage* NowImage, UCanvasPanel* TipCanvas, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UImage* CallFunc_SpawnObject_ReturnValue, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, struct FAnchors K2Node_MakeStruct_Anchors, UWidget* CallFunc_GetChildByName_ReturnValue, UCanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess);
  void CreateVoiceCheckObject(uint8 checkType, UBP_VoiceUIObject_C* NewParam, uint8 nowCheckTyps, UBP_VoiceUIObject_C* nowObject, UImage* CallFunc_CreateTipsImage_image, UBP_VoiceUIObject_C* CallFunc_SpawnObject_ReturnValue);
  void ExecuteUbergraph_NavigatorPanel(int32 EntryPoint, TArray<ABP_MiniMapStandardPoint_C*> CallFunc_GetAllActorsOfClass_OutActors, ABP_MiniMapStandardPoint_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void GetFinalX(float middlsX, float playerX, float Scale, float Result, float nowLeftSize, float showScale, float zhengfu, float finalffset, float nowplayerX, float nowmiddlsX, float absOffset, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);
  void GetMinShowTimeObject(UBP_VoiceDataSubObject_C* nowSubObject, UBP_VoiceUIObject_C* Result, UBP_VoiceDataSubObject_C* subObject, float nowTIme, UBP_VoiceUIObject_C* nowShowObject, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsSamVoiceObject_result, bool CallFunc_BooleanAND_ReturnValue);
  void GetPlayerColorByIndex(int32 Index, struct FLinearColor Color, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void GetPlayerRotation(struct FRotator RetrunValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, struct FRotator CallFunc_GetControlLookRotation_ReturnValue);
  void GetVoicePostion(int32 Index, float Scale, float resultposx, float resultposy, float Y, float X, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue);
  void InitCompassWidget(UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);
  void InitPlayerMarkerArray(int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color2, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color3, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color4, int32 CallFunc_Array_Add_ReturnValue5, int32 CallFunc_Array_Add_ReturnValue6, int32 CallFunc_Array_Add_ReturnValue7, int32 CallFunc_Array_Add_ReturnValue8);
  void InitPlayerState(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ASTExtraPlayerState* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);
  void InitVoiceImageList(int32 ___int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Variable2, bool CallFunc_LessEqual_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2, UBP_VoiceUIObject_C* CallFunc_CreateVoiceCheckObject_NewParam, int32 CallFunc_Array_Add_ReturnValue, UBP_VoiceUIObject_C* CallFunc_CreateVoiceCheckObject_NewParam2, int32 ___int_Variable3, int32 CallFunc_Array_Add_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue3, UBP_VoiceUIObject_C* CallFunc_CreateVoiceCheckObject_NewParam3, int32 CallFunc_Array_Add_ReturnValue3);
  void IsSamVoiceObject(UBP_VoiceDataSubObject_C* subObject, UBP_VoiceUIObject_C* NewParam, bool Result, bool isSame, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void RemoveSameActorShow(UBP_VoiceUIObject_C* UIObject, UBP_VoiceUIObject_C* nowUIObject, ASTExtraBaseCharacter* PlayerPawn, APawn* nowPawn, int32 ___int_Array_Index_Variable, ASTExtraBaseCharacter* CallFunc_GetNowOwnPlayer_player, bool CallFunc_IsValid_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, ASTExtraBaseCharacter* CallFunc_GetNowOwnPlayer_player2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  void RepositionMapMark(int32 Index);
  void SetOneData(UBP_VoiceUIObject_C* UIObject, UBP_VoiceDataSubObject_C* subObject, UBP_VoiceUIObject_C* nowUIObject, UBP_VoiceDataSubObject_C* nowSubObject, bool CallFunc_UpdateState_isShow, bool K2Node_SwitchEnum_CmpSuccess);
  void SetVoiceChekImageZorder(int32 nowZoder, UBP_VoiceUIObject_C* NextUIObject, UBP_VoiceUIObject_C* nowUIObject, int32 PreIndex, int32 sublength, int32 Length, int32 ___int_Array_Index_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue4, int32 ___int_Variable2, int32 CallFunc_Add_IntInt_ReturnValue5, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item2, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue6, int32 CallFunc_Add_IntInt_ReturnValue7, bool CallFunc_Less_FloatFloat_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue2);
  void ShowTrigerVoiceIcom(UBP_VoiceDataSubObject_C* nowObject, UBP_VoiceUIObject_C* CallFunc_GetMinShowTimeObject_result, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);
  void TestPlayerController(bool NewParam, bool Result, bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalController_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateDirection(struct FRotator CallFunc_GetPlayerRotation_RetrunValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_ConvertAngleToUV_RetrunValue);
  void UpdateNewVocieState(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void UpdateShowVoiceIcon(float DeltaTime, TSet<UBP_VoiceUIObject_C*> deleteList, float absOffset, UBP_VoiceUIObject_C* nowShowObject, bool CallFunc_UpdateState_isShow, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UBP_VoiceUIObject_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, struct FRotator CallFunc_GetPlayerRotation_RetrunValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Multiply_FloatFloat_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int32 ___int_Loop_Counter_Variable2, float CallFunc_GetVoicePostion_resultposx, float CallFunc_GetVoicePostion_resultposy, float CallFunc_GetFinalX_result, bool CallFunc_Less_IntInt_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2);
  void UpdateVoiceStateOneType(UBP_VoiceDataObject_C* nowObject, UBP_VoiceDataSubObject_C* nowSubObject, UBP_VoiceUIObject_C* nowUIObject, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, UBP_VoiceDataSubObject_C* CallFunc_Array_Get_Item, UBP_VoiceUIObject_C* CallFunc_GetMinShowTimeObject_result, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);
};

class UNetConnection: public UPlayer {
  /* offset=0x0030 flags=0x0010000000002200 */ TArray<UChildConnection*> Children;
  /* offset=0x003c flags=0x0018001040000200 */ UNetDriver* Driver;
  /* offset=0x0040 flags=0x001c001040000200 */ UClass<UPackageMap>* PackageMapClass;
  /* offset=0x0044 flags=0x0018001040000200 */ UPackageMap* PackageMap;
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<UChannel*> OpenChannels;
  /* offset=0x0054 flags=0x0010000000000200 */ TArray<AActor*> SentTemporaries;
  /* offset=0x0060 flags=0x0018001040000200 */ AActor* ViewTarget;
  /* offset=0x0064 flags=0x0018001040000200 */ AActor* OwningActor;
  /* offset=0x0068 flags=0x0018001040000200 */ int32 MaxPacket;
  /* offset=0x006c flags=0x0018001000000000 */ uint8 InternalAck:1;
  /* offset=0x00ec flags=0x0018000000000000 */ struct FUniqueNetIdRepl PlayerId;
  /* offset=0x0148 flags=0x0018001040000200 */ double LastReceiveTime;
  /* offset=0x294b8 flags=0x0040000000000200 */ TArray<UChannel*> ChannelsToTick;
};

class UNetDriver: public UObject {
  /* offset=0x0020 flags=0x0018000000004200 */ FString NetConnectionClassName;
  /* offset=0x002c flags=0x0018001040004200 */ int32 MaxDownloadSize;
  /* offset=0x0030 flags=0x0018001000004000 */ uint8 bClampListenServerTickRate:1;
  /* offset=0x0034 flags=0x0018001040004200 */ int32 NetServerMaxTickRate;
  /* offset=0x0038 flags=0x0018001040004200 */ int32 MaxInternetClientRate;
  /* offset=0x003c flags=0x0018001040004200 */ int32 MaxClientRate;
  /* offset=0x0040 flags=0x0018001040004200 */ float ServerTravelPause;
  /* offset=0x0044 flags=0x0018001040004200 */ float SpawnPrioritySeconds;
  /* offset=0x0048 flags=0x0018001040004200 */ float RelevantTimeout;
  /* offset=0x004c flags=0x0018001040004200 */ float KeepAliveTime;
  /* offset=0x0050 flags=0x0018001040004200 */ float InitialConnectTimeout;
  /* offset=0x0054 flags=0x0018001040004200 */ float ConnectionTimeout;
  /* offset=0x0058 flags=0x0018001040004200 */ float TimeoutMultiplierForUnoptimizedBuilds;
  /* offset=0x005c flags=0x0018001040004200 */ bool bNoTimeouts;
  /* offset=0x0060 flags=0x0018001040000200 */ UNetConnection* ServerConnection;
  /* offset=0x0064 flags=0x0010000000000200 */ TArray<UNetConnection*> ClientConnections;
  /* offset=0x007c flags=0x0018001040000200 */ UWorld* World;
  /* offset=0x0090 flags=0x0018001040000200 */ UClass<UObject>* NetConnectionClass;
  /* offset=0x0094 flags=0x0018001040000200 */ UProperty* RoleProperty;
  /* offset=0x0098 flags=0x0018001040000200 */ UProperty* RemoteRoleProperty;
  /* offset=0x00a0 flags=0x0018001040004200 */ FName NetDriverName;
  /* offset=0x00cc flags=0x0018001040000200 */ float Time;
};

class UNetInterface: public UInterface {
};

class ANetworkOnlineDriver: public AActor {
  /* CL* */ void BroadcastClientsSpawnExplosionEffect(UClass<ASTExtraExplosionEffect>* Template, struct FTransform Trans, AActor* ActorOwner, APawn* InstigatorPawn, enum ESpawnActorCollisionHandlingMethod method);
  /* SRV */ void ServerReplicateExplosionEffect(UClass<ASTExtraExplosionEffect>* Template, struct FTransform Trans, AActor* ActorOwner, APawn* InstigatorPawn, enum ESpawnActorCollisionHandlingMethod method);
  /* SRV */ void ServerSetReloadMethod(ASTExtraBaseCharacter* TargetCharacter, uint8 reloadMethod);
  /* SRV */ void ServerSetShootType(ASTExtraBaseCharacter* TargetCharacter, uint8 shootType);
  /* SRV */ void ServerStartBarrel(ASTExtraBaseCharacter* TargetCharacter);
  /* SRV */ void ServerStartFire(ASTExtraBaseCharacter* TargetCharacter, int32 BurstShootBulletsLimit, float BurstShootTimeLimit, uint8 ShootMode, struct FVector SimpleShootTarget, struct FVector2D ClientScreenSize);
  /* SRV */ void ServerStopFire(ASTExtraBaseCharacter* TargetCharacter, int32 CurrentBullet);
  /* CL  */ void SwitchPoseStateClient(ASTExtraBaseCharacter* TargetCharacter, uint8 PoseState);
  /* SRV */ void SwitchPoseStateServer(ASTExtraBaseCharacter* TargetCharacter, uint8 PoseState);
};

class UNetworkPredictionInterface: public UInterface {
};

class UNetworkSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bVerifyPeer:1;
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bEnableMultiplayerWorldOriginRebasing:1;
  /* offset=0x0034 flags=0x0018001040004201 */ int32 MaxRepArraySize;
  /* offset=0x0038 flags=0x0018001040004201 */ int32 MaxRepArrayMemory;
};

class UNewEntireMap_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* AirAttackArea;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_01;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_02;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_03;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_04;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_Cut;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_DelMarkIcon;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* Button_HideMap;
  /* offset=0x0258 flags=0x000a0010c008020c */ UButton* Button_LeavePlane;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* Button_Parachute;
  /* offset=0x0260 flags=0x000a0010c008020c */ UButton* Button_Player01MarkInMap;
  /* offset=0x0264 flags=0x000a0010c008020c */ UButton* Button_Player02MarkInMapSwitch;
  /* offset=0x0268 flags=0x000a0010c008020c */ UButton* Button_Player03MarkInMapSwitch;
  /* offset=0x026c flags=0x000a0010c008020c */ UButton* Button_Player04MarkInMapSwitch;
  /* offset=0x0270 flags=0x000a0010c008020c */ UButton* Button_SelfLock;
  /* offset=0x0274 flags=0x000a0010c008020c */ UButton* Button_SelfMark;
  /* offset=0x0278 flags=0x000a0010c008020c */ UButton* Button_ZoomIn;
  /* offset=0x027c flags=0x000a0010c008020c */ UButton* Button_ZoomOut;
  /* offset=0x0280 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0284 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_AllMarks;
  /* offset=0x0288 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_MapImageSize;
  /* offset=0x028c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ScaleButton;
  /* offset=0x0290 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_SelfInfo;
  /* offset=0x0294 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Single;
  /* offset=0x0298 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Team;
  /* offset=0x029c flags=0x000a0010c008020c */ UEditableTextBox* EditableTextBox_Location;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UCanvasPanel* EntireMapCanvas;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* EntireMapImage;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02ac flags=0x000a0010c008020c */ UGridPanel* GridPanel_03Player;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_04Player;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Player01;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Player02;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* Image_Arrow02;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* Image_Arrow03;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UImage* Image_Arrow04;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UImage* Image_Follow02Player;
  /* offset=0x02cc flags=0x000a0010c008020c */ UImage* Image_Follow03Player;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UImage* Image_FollowMe;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UImage* Image_FollowPlayer04;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UImage* Image_MarkIcon02;
  /* offset=0x02dc flags=0x000a0010c008020c */ UImage* Image_MarkIcon1;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UImage* Image_Player01MarkInMap;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UImage* Image_Player02Dead;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UImage* Image_Player02MarkInMap;
  /* offset=0x02ec flags=0x000a0010c008020c */ UImage* Image_Player02Position;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UImage* Image_Player02State;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UImage* Image_Player03Dead;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UImage* Image_Player03Icon;
  /* offset=0x02fc flags=0x000a0010c008020c */ UImage* Image_Player03MarkInMap;
  /* offset=0x0300 flags=0x000a0010c008020c */ UImage* Image_Player03Position;
  /* offset=0x0304 flags=0x000a0010c008020c */ UImage* Image_Player03State;
  /* offset=0x0308 flags=0x000a0010c008020c */ UImage* Image_Player04Dead;
  /* offset=0x030c flags=0x000a0010c008020c */ UImage* Image_Player04MarkInMap;
  /* offset=0x0310 flags=0x000a0010c008020c */ UImage* Image_Player04Position;
  /* offset=0x0314 flags=0x000a0010c008020c */ UImage* Image_Player04State;
  /* offset=0x0318 flags=0x000a0010c008020c */ UImage* Image_PlayerMarkIcon04;
  /* offset=0x031c flags=0x000a0010c008020c */ UImage* Image_Selected01;
  /* offset=0x0320 flags=0x000a0010c008020c */ UImage* Image_SelectedPlayer03Mark;
  /* offset=0x0324 flags=0x000a0010c008020c */ UImage* Image_SelectedPlayerMark02;
  /* offset=0x0328 flags=0x000a0010c008020c */ UImage* Image_SelectedPlayerMark04;
  /* offset=0x032c flags=0x000a0010c008020c */ UImage* Image_SelfArrow;
  /* offset=0x0330 flags=0x000a0010c008020c */ UImage* Image_SelfBG;
  /* offset=0x0334 flags=0x000a0010c008020c */ UImage* Image_SelfDead;
  /* offset=0x0338 flags=0x000a0010c008020c */ UImage* Image_SelfNumIcon;
  /* offset=0x033c flags=0x000a0010c008020c */ UImage* Image_SelfState;
  /* offset=0x0340 flags=0x000a0010c008020c */ UImage* Image_TeamID02;
  /* offset=0x0344 flags=0x000a0010c008020c */ UImage* Image_TeamID03;
  /* offset=0x0348 flags=0x000a0010c008020c */ UImage* Image_TeamID04;
  /* offset=0x034c flags=0x000a0010c008020c */ UMapCircleAndLineBlackboard_C* MapCircleAndLineBlackboard;
  /* offset=0x0350 flags=0x000a0010c008020c */ UCanvasPanel* Player01MarkInMap;
  /* offset=0x0354 flags=0x000a0010c008020c */ UCanvasPanel* Player02Info;
  /* offset=0x0358 flags=0x000a0010c008020c */ UTextBlock* Player02InfoDist;
  /* offset=0x035c flags=0x000a0010c008020c */ UCanvasPanel* Player02MarkInMap;
  /* offset=0x0360 flags=0x000a0010c008020c */ UCanvasPanel* Player03Info;
  /* offset=0x0364 flags=0x000a0010c008020c */ UTextBlock* Player03InfoDist;
  /* offset=0x0368 flags=0x000a0010c008020c */ UCanvasPanel* Player03MarkInMap;
  /* offset=0x036c flags=0x000a0010c008020c */ UCanvasPanel* Player04Info;
  /* offset=0x0370 flags=0x000a0010c008020c */ UTextBlock* Player04InfoDist;
  /* offset=0x0374 flags=0x000a0010c008020c */ UCanvasPanel* Player04MarkInMap;
  /* offset=0x0378 flags=0x000a0010c008020c */ UImage* PlayerMaker;
  /* offset=0x037c flags=0x000a0010c008020c */ USlider* Slider_MapZoom;
  /* offset=0x0380 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0384 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0388 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x038c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player01MarkDistance;
  /* offset=0x0390 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player02MarkDistance;
  /* offset=0x0394 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player02NameInMap;
  /* offset=0x0398 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player03MarkDistance;
  /* offset=0x039c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player03NameInMap;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player04MarkDistance;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player04Name;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player04NameInMap;
  /* offset=0x03ac flags=0x000a0010c008020c */ UTextBlock* TextBlock_Player1Name;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName02;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_PlayerName03;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UVerticalBox* VerticalBox;
  /* offset=0x03bc flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_StatusShow;
  /* offset=0x03c0 flags=0x0008001040010005 */ struct FVector2D MapTopLeftOnScreen;
  /* offset=0x03c8 flags=0x0008001040010005 */ struct FVector2D MapCenterOnScreen;
  /* offset=0x03d0 flags=0x0008001040010005 */ struct FVector2D MouseClickedPosition;
  /* offset=0x03d8 flags=0x0000100010010205 */ FMarkerClick MarkerClick;
  /* offset=0x03e4 flags=0x0008001040010005 */ struct FVector2D PinLocation;
  /* offset=0x03ec flags=0x0008001040010205 */ UNewMiniMap_C* MINIMAP;
  /* offset=0x03f0 flags=0x0008001040010205 */ uint8 TestMap;
  /* offset=0x03f4 flags=0x0008001040010005 */ struct FVector LevelLandScapeCenter;
  /* offset=0x0400 flags=0x0008001040010205 */ float MapWindowExtent;
  /* offset=0x0404 flags=0x0008001040010205 */ float LevelLandScapeExtent;
  /* offset=0x0408 flags=0x0008001040010205 */ float LevelToMapScale;
  /* offset=0x040c flags=0x0000001000010005 */ struct FMapRealTimeInfo MapRealTimeInfo;
  /* offset=0x0450 flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* STEPlayerController;
  /* offset=0x0454 flags=0x0008001040010a05 */ ASTExtraGameStateBase* STEGameStateBase;
  /* offset=0x0458 flags=0x0008001040010205 */ uint8 PlayerOperation;
  /* offset=0x045c flags=0x0008001040010205 */ int32 LastestAirAttackWave;
  /* offset=0x0460 flags=0x0008001040010205 */ float RotateAngle;
  /* offset=0x0464 flags=0x0008001040010205 */ float MapScale;
  /* offset=0x0468 flags=0x0008001040010005 */ struct FVector2D MapInitSize;
  /* offset=0x0470 flags=0x0008001040010005 */ struct FVector2D MapCurSize;
  /* offset=0x0478 flags=0x0008001040010205 */ float MaxScaleValue;
  /* offset=0x047c flags=0x0008001040010205 */ float CorrectLevelToMapScale;
  /* offset=0x0480 flags=0x0008001040010005 */ struct FVector2D LocalPlayerMarkerAlig;
  /* offset=0x0488 flags=0x0000001040010205 */ bool bNeedDrawNaviGuideLine;
  /* offset=0x048c flags=0x0008001040010a05 */ ASTExtraPlayerState* STEPlayerState;
  /* offset=0x0490 flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamMatePlayerStateList;
  /* offset=0x049c flags=0x0008001040010205 */ int32 LocalPlayerIndex;
  /* offset=0x04a0 flags=0x0000000000010205 */ TArray<struct FSlateBrush> PlayerMarkerSpriteArray;
  /* offset=0x04ac flags=0x0000000000010205 */ TArray<UImage*> PlayerMarkerImageArray;
  /* offset=0x04b8 flags=0x0000000000010205 */ TArray<UButton*> PlayerMarkerButtonArray;
  /* offset=0x04c4 flags=0x0000000000010205 */ TArray<UTextBlock*> PlayerMarkerTextArray;
  /* offset=0x04d0 flags=0x0000000000010205 */ TArray<UGridPanel*> PlayerMarkerInMapGridArray;
  /* offset=0x04dc flags=0x0000000000010205 */ TArray<UImage*> PlayerMarkerInMapImageArray;
  /* offset=0x04e8 flags=0x0000000000010205 */ TArray<UGridPanel*> PlayerInfoInMapGridArray;
  /* offset=0x04f4 flags=0x0000000000010205 */ TArray<UImage*> PlayerInfoInMapImageArray;
  /* offset=0x0500 flags=0x0000000000010205 */ TArray<UTextBlock*> PlayerInfoInMapTextArray;
  /* offset=0x050c flags=0x0000000000010205 */ TArray<struct FCharacterLocAndRot> PlayerTeamLocAndRotArray;
  /* offset=0x0518 flags=0x0000001040010205 */ bool bNeedUpdateTeamMateInfo;
  /* offset=0x051c flags=0x0000000000010205 */ TArray<UGridPanel*> PlayerMarkerGuideBtnGridArray;
  /* offset=0x0528 flags=0x0008001040000205 */ int32 NameMaxLength;
  /* offset=0x052c flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamPlayerWithoutLocalPlayer;
  /* offset=0x0538 flags=0x0000000000010205 */ TArray<struct FLinearColor> PlayerMarkerColorArray;
  /* offset=0x0544 flags=0x0008001040010005 */ struct FLinearColor Player01Color;
  /* offset=0x0554 flags=0x0008001040010005 */ struct FLinearColor Player02Color;
  /* offset=0x0564 flags=0x0008001040010005 */ struct FLinearColor Player03Color;
  /* offset=0x0574 flags=0x0008001040010005 */ struct FLinearColor Player04Color;
  /* offset=0x0584 flags=0x0008001040010205 */ float GuideLineMaxLength;
  /* offset=0x0588 flags=0x0008001040010205 */ int32 MateCount;
  /* offset=0x058c flags=0x0000000000010205 */ TArray<UImage*> PlayerInfoMateNumList;
  /* offset=0x0598 flags=0x0000000000010205 */ TArray<struct FSlateBrush> BrushList;
  /* offset=0x05a4 flags=0x0000000000010205 */ TArray<struct FSlateBrush> PlayerStateGroup;
  /* offset=0x05b0 flags=0x0000001000010005 */ struct FMapRealTimeInfo CacheMapRealTimeInfo;
  /* offset=0x05f4 flags=0x0000001040010205 */ bool bShowMarkerLocation;
  /* offset=0x05f8 flags=0x0000000000010205 */ TArray<UTextBlock*> PlayerMarkerInMapDistArray;
  /* offset=0x0604 flags=0x0000000000010205 */ TArray<UTextBlock*> PlayerInfoInMapDistArray;
  /* offset=0x0610 flags=0x0000001040010205 */ bool bIsDrawPlaneRoute;
  /* offset=0x0614 flags=0x0000000000010205 */ TArray<UCanvasPanel*> PlayerMarkerInMap_CPArray;
  /* offset=0x0620 flags=0x0000000000010205 */ TArray<UCanvasPanel*> PlayerInfoInMap_CPArray;

  void BindTeamMapMarkDelegate(FOnMapMarkChangeDelegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_71_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_98_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_Cut_K2Node_ComponentBoundEvent_294_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_DelMarkIcon_K2Node_ComponentBoundEvent_440_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_HideMap_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_LeavePlane_K2Node_ComponentBoundEvent_186_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_MyMark_K2Node_ComponentBoundEvent_908_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Parachute_K2Node_ComponentBoundEvent_216_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SelfLock_K2Node_ComponentBoundEvent_350_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SelfMark_K2Node_ComponentBoundEvent_491_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_ZoomIn_K2Node_ComponentBoundEvent_52_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_ZoomOut_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__MapCircleAndLineBlackboard_K2Node_ComponentBoundEvent_203_ScaleMap__DelegateSignature(float ScaleValue);
  void BndEvt__MapCircleAndLineBlackboard_K2Node_ComponentBoundEvent_286_MoveMap__DelegateSignature(struct FVector2D Offset);
  void BndEvt__MapCircleAndLineBlackboard_K2Node_ComponentBoundEvent_36_OperateEnd__DelegateSignature();
  void BndEvt__MapCircleAndLineBlackboard_K2Node_ComponentBoundEvent_54_SetMarker__DelegateSignature(struct FVector2D Position);
  void BndEvt__MapCircleAndLineBlackboard_K2Node_ComponentBoundEvent_60_OperateBegin__DelegateSignature();
  void BndEvt__Slider_MapZoom_K2Node_ComponentBoundEvent_59_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void CaclMarkDir(struct FVector2D MarkPoint, int32 Distance, float CallFunc_CalPlayerToMarkerDist_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_Round_ReturnValue);
  void ChangeMapPivot(float AligX, float AligY, struct FVector2D CallFunc_MakeVector2D_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2);
  void ChangeMapSize(struct FVector2D Size, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue3, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue4);
  void ClampAlig(float MaxAlig, float MinAlig, float MinA, float MaxA, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetAlignment_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, struct FVector2D CallFunc_GetAlignment_ReturnValue2, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_FClamp_ReturnValue3, float CallFunc_FClamp_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue2);
  void Construct();
  void EnterFlying();
  void EnterJumping();
  void EnterParachute();
  void ExecuteUbergraph_NewEntireMap(int32 EntryPoint, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate3, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate4, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate5, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate6, FReConnectGameStateInfoNotify K2Node_CreateDelegate_OutputDelegate7, FOnRepTeammateChange K2Node_CreateDelegate_OutputDelegate8, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue2, float CallFunc_GetMapMaxAligByMapSize_MinAlig, float CallFunc_GetMapMaxAligByMapSize_MaxAlig, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float K2Node_ComponentBoundEvent_Value, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue4, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue3, float CallFunc_GetMapMaxAligByMapSize_MinAlig2, float CallFunc_GetMapMaxAligByMapSize_MaxAlig2, float CallFunc_Divide_FloatFloat_ReturnValue, struct FVector2D K2Node_ComponentBoundEvent_Offset, float CallFunc_Divide_FloatFloat_ReturnValue2, struct FVector2D K2Node_ComponentBoundEvent_Position, float CallFunc_GetObjectAligInCurMapSize_AligX, float CallFunc_GetObjectAligInCurMapSize_AligY, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_GetMapMaxAligByMapSize_MinAlig3, float CallFunc_GetMapMaxAligByMapSize_MaxAlig3, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, UCanvasPanel* CallFunc_GetSelfMarkerGrid_SelfMarker2, TArray<ABP_MiniMapStandardPoint_C*> CallFunc_GetAllActorsOfClass_OutActors, UCanvasPanel* CallFunc_GetSelfMarkerGrid_SelfMarker22, ABP_MiniMapStandardPoint_C* CallFunc_Array_Get_Item, bool CallFunc_IsPlayerCanSeeWidget_cansee, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, int32 CallFunc_Array_Length_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue2, float K2Node_ComponentBoundEvent_ScaleValue, float CallFunc_Add_FloatFloat_ReturnValue3, UTexture2D* CallFunc_GetCurLevelMapTexture_Texture, uint8 K2Node_CustomEvent_airattacktype, int32 K2Node_CustomEvent_waveindex, int32 ___int_Array_Index_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State2, bool K2Node_DynamicCast_bSuccess3, UCanvasPanel* CallFunc_GetSelfMarkerGrid_SelfMarker23, struct FSlateBrush CallFunc_Array_Get_Item3, AGameStateBase* CallFunc_GetGameState_ReturnValue, UImage* CallFunc_GetSelfMarkImageInRight_NewParam, bool CallFunc_IsValid_ReturnValue3, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue7, float CallFunc_FClamp_ReturnValue3, float CallFunc_FClamp_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue8, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Sqrt_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, struct FReConnectGameStateInfo K2Node_CustomEvent_ReConnectInfo, APlayerController* CallFunc_GetPlayerController_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue5, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State3, bool K2Node_DynamicCast_bSuccess6, FAirAttackNotify K2Node_CreateDelegate_OutputDelegate9, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue5, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess7, float CallFunc_Multiply_FloatFloat_ReturnValue6, APlayerController* CallFunc_GetOwningPlayer_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess8, struct FMapRealTimeInfo CallFunc_GetMapRealTimeInfo_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, struct FVector2D CallFunc_GetViewportSize_ReturnValue, bool K2Node_Event_IsDesignTime, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue2, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue3, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue4, float CallFunc_BreakVector2D_X5, float CallFunc_BreakVector2D_Y5, APlayerController* CallFunc_GetOwningPlayer_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess9, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess10, enum ExtraPlayerLiveState K2Node_Event_State, ACharacter* K2Node_Event_OwnerCharacter, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue7, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue8, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, bool CallFunc_IsValid_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue9, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue7, struct FVector2D CallFunc_GetSize_ReturnValue2, float CallFunc_BreakVector2D_X6, float CallFunc_BreakVector2D_Y6, float CallFunc_Subtract_FloatFloat_ReturnValue5, float CallFunc_FMin_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, bool CallFunc_IsPlayerCanSeeWidget_cansee2, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_GetObjectAligInCurMapSize_AligX2, float CallFunc_GetObjectAligInCurMapSize_AligY2, float CallFunc_FClamp_ReturnValue5, float CallFunc_FClamp_ReturnValue6, struct FVector2D CallFunc_Add_Vector2DFloat_ReturnValue, float CallFunc_GetObjectAligInCurMapSize_AligX3, float CallFunc_GetObjectAligInCurMapSize_AligY3, struct FVector2D CallFunc_MakeVector2D_ReturnValue4, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue4, float CallFunc_GetMapMaxAligByMapSize_MinAlig4, float CallFunc_GetMapMaxAligByMapSize_MaxAlig4);
  void GMShowMarkerLocation();
  void GetMapMaxAligByMapSize(struct FVector2D MapSize, float MinAlig, float MaxAlig, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void GetMarkerToWorldVector(struct FVector NewParam, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_MapVectorToWorldVector_WorldMap, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue);
  void GetObjectAligInCurMapSize(struct FVector2D Pos, float AligX, float AligY, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2);
  void GetPlayerColorByIndex(int32 Index, struct FLinearColor Color, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void GetSelfImage(UImage* SelfMarker);
  void GetSelfMarkImageInRight(UImage* NewParam, UImage* CallFunc_Array_Get_Item);
  void GetSelfMarkerGrid(UCanvasPanel* SelfMarker2, UCanvasPanel* CallFunc_Array_Get_Item);
  void GetTeamMateBySerialNumber(int32 TeamMateIndex, int32 Out, int32 CurTeamMateIndex, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void GetTeamMateListFromPlayerState(TArray<ASTExtraPlayerState*> TeammateList, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList);
  void HandleAirAttackBroadcast(uint8 AttackMsg, int32 Wave, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MapCenterToPointVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Multiply_FloatFloat_ReturnValue3, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_GetRotatedVector2D_ReturnValue, struct FSlateBrush K2Node_MakeStruct_SlateBrush, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue3);
  void HandleMapMove(struct FVector2D MoveOffset, float OffsetX, float OffsetY, float NewLocalVar, float NewLocalVar, float MinAlig, float MaxAlig, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, struct FVector2D CallFunc_GetSize_ReturnValue, struct FVector2D CallFunc_GetAlignment_ReturnValue, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X5, float CallFunc_BreakVector2D_Y5, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3);
  void HandleReconnectInfo(struct FReConnectGameStateInfo ReConnectInfo);
  void InitPlayerState();
  void InitTeamMateUIArray(int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5, int32 CallFunc_Array_Add_ReturnValue6, int32 CallFunc_Array_Add_ReturnValue7, int32 CallFunc_Array_Add_ReturnValue8, int32 CallFunc_Array_Add_ReturnValue9, int32 CallFunc_Array_Add_ReturnValue10, int32 CallFunc_Array_Add_ReturnValue11, int32 CallFunc_Array_Add_ReturnValue12, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, int32 CallFunc_Array_Add_ReturnValue13, int32 CallFunc_Array_Add_ReturnValue14, int32 CallFunc_Array_Add_ReturnValue15, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color2, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color3, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color4, int32 CallFunc_Array_Add_ReturnValue16, int32 CallFunc_Array_Add_ReturnValue17, int32 CallFunc_Array_Add_ReturnValue18, int32 CallFunc_Array_Add_ReturnValue19, int32 CallFunc_Array_Add_ReturnValue20, int32 CallFunc_Array_Add_ReturnValue21, int32 CallFunc_Array_Add_ReturnValue22, int32 CallFunc_Array_Add_ReturnValue23, int32 CallFunc_Array_Add_ReturnValue24, int32 CallFunc_Array_Add_ReturnValue25, int32 CallFunc_Array_Add_ReturnValue26, int32 CallFunc_Array_Add_ReturnValue27, int32 CallFunc_Array_Add_ReturnValue28, int32 CallFunc_Array_Add_ReturnValue29, int32 CallFunc_Array_Add_ReturnValue30, int32 CallFunc_Array_Add_ReturnValue31, int32 CallFunc_Array_Add_ReturnValue32, int32 CallFunc_Array_Add_ReturnValue33, int32 CallFunc_Array_Add_ReturnValue34, int32 CallFunc_Array_Add_ReturnValue35, int32 CallFunc_Array_Add_ReturnValue36, int32 CallFunc_Array_Add_ReturnValue37, int32 CallFunc_Array_Add_ReturnValue38, int32 CallFunc_Array_Add_ReturnValue39, int32 CallFunc_Array_Add_ReturnValue40, int32 CallFunc_Array_Add_ReturnValue41, int32 CallFunc_Array_Add_ReturnValue42, int32 CallFunc_Array_Add_ReturnValue43);
  void MakeMarker(struct FVector2D MarkAligment, UCanvasPanel* CallFunc_GetSelfMarkerGrid_SelfMarker2, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, UImage* CallFunc_GetSelfMarkImageInRight_NewParam, struct FSlateBrush CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, struct FVector2D CallFunc_Subtract_Vector2DFloat_ReturnValue, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector CallFunc_MakeVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FVector CallFunc_MakeVector_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2);
  void MapVectorToWorldVector(struct FVector2D MapVector, struct FVector2D WORLDMAP, bool CallFunc_NotEqual_FloatFloat_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue);
  struct FVector2D MarkPoint2RealLocation(struct FVector2D InVec, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void MarkerClick__DelegateSignature();
  void OnPaint(struct FPaintContext Context, struct FPaintContext PaintContext);
  void OnPlayerTeammateStateChange();
  void Parachuting_HideJumpBtn();
  void Parachuting_ShowHideBtn();
  void Parachuting_ShowJumpBtn();
  void Parachuting_ShowOpenParachuteBtn();
  void PlayerCanJump();
  void PlayerCanOpen();
  void PlayerEnterFighting();
  void PreConstruct(bool IsDesignTime);
  void ReConnectGameStateInfoNotify(struct FReConnectGameStateInfo ReConnectInfo);
  void ReceiveAirAttackBroadcast(uint8 airattacktype, int32 waveindex);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(int32 ___int_Array_Index_Variable, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, UCanvasPanel* CallFunc_GetSelfMarkerGrid_SelfMarker2, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);
  void RedrawMap();
  void RefreshTeammateIcon(int32 ___int_Array_Index_Variable, UPanelWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void RepositionMapMark(int32 ChangeIndex, struct FVector Loc, int32 Index, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FSlateBrush CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Multiply_FloatFloat_ReturnValue, UImage* CallFunc_Array_Get_Item2, float CallFunc_Multiply_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, UCanvasPanel* CallFunc_Array_Get_Item3, ASTExtraPlayerState* CallFunc_Array_Get_Item4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, UCanvasPanel* CallFunc_Array_Get_Item5, UGridPanel* CallFunc_Array_Get_Item6);
  void RepositionMarkerAndPin(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_GetAirplaneStopLoc_ReturnValue, struct FVector CallFunc_GetAirplaneStartLoc_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsPlayerCanSeeWidget_cansee, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, struct FVector CallFunc_MapCenterToPointVector_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FSlateBrush K2Node_MakeStruct_SlateBrush, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_GetRotatedVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue3);
  void RepositionSelfMarker(UCanvasPanel* CallFunc_Array_Get_Item, UGridPanel* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UCanvasPanel* CallFunc_Array_Get_Item3, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, UGridPanel* CallFunc_Array_Get_Item4, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void SetMateColor(UImage* TargetImg, int32 PlayerIndex, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void SetMateName(FString PlayerName, UTextBlock* LabName, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetMateNum(UImage* PlayerImg, int32 PlayerIndex, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void SetPlayerIdxAndColor(int32 Idx);
  void SetSelfInfoAndColor(ASTExtraPlayerState* playState, int32 ___int_Array_Index_Variable, int32 CallFunc_GetPlayerTeamIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsSinglePlayer_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void SetTeamInfoName(int32 ___int_Array_Index_Variable, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_ClampStringLength_Result, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, UGridPanel* CallFunc_Array_Get_Item2, UTextBlock* CallFunc_Array_Get_Item3, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void SetTeamLocAndRot(TArray<ASTExtraPlayerState*> Array, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void SetTeamMateNameInMap(int32 TotalTeamMateCount, int32 CurTeamMateIndex, int32 ___int_Array_Index_Variable, UTextBlock* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, UImage* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue2, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, UImage* CallFunc_Array_Get_Item4, bool CallFunc_Array_IsValidIndex_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue2, UCanvasPanel* CallFunc_Array_Get_Item5, UGridPanel* CallFunc_Array_Get_Item6, bool CallFunc_Array_IsValidIndex_ReturnValue4, APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);
  void ShowFriendsDistance(int32 ___int_Array_Index_Variable, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, UTextBlock* CallFunc_Array_Get_Item, struct FVector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, ASTExtraPlayerState* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_IntInt_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, int32 ___int_Loop_Counter_Variable, float CallFunc_VSize2D_ReturnValue, int32 CallFunc_Round_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue);
  void ShowMarkerDistance(int32 ___int_Array_Index_Variable, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, int32 ___int_Loop_Counter_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, int32 CallFunc_CaclMarkDir_Distance, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, int32 CallFunc_Array_Length_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, UTextBlock* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 CallFunc_CaclMarkDir_Distance2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2);
  void ShowMarkerLocationText(struct FVector2D Vector, struct FVector2D CallFunc_MarkPoint2RealLocation_ReturnValue, FText CallFunc_Conv_Vector2dToText_ReturnValue);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateAirplaneRoute(struct FVector Start, struct FVector Stop, bool IsDraw, float CallFunc_Sqrt_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Normal2D_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue2, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void UpdatePlayerState(enum ExtraPlayerLiveState State, ACharacter* OwnerCharacter);
};

class UNewMiniMap_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* AirAttackArea;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Player01Info;
  /* offset=0x023c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Player02Info;
  /* offset=0x0240 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Player03Info;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_SelfPosition;
  /* offset=0x0248 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Single;
  /* offset=0x024c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Team;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_Arrow01;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image_Arrow02;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image_Arrow03;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_Player01Dead;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image_Player01MarkInMap;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image_Player01NumIcon;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Image_Player01Position;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Image_Player01State;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* Image_Player02Dead;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* Image_Player02MarkInMap;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* Image_Player02NumIcon;
  /* offset=0x027c flags=0x000a0010c008020c */ UImage* Image_Player02Position;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* Image_Player02State;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* Image_Player03Dead;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* Image_Player03MarkInMap;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* Image_Player03NumIcon;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* Image_Player03Position;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* Image_Player03State;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image_Player04MarkInMap;
  /* offset=0x029c flags=0x000a0010c008020c */ UImage* Image_SelfArrow;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* Image_SelfBG;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* Image_SelfDead;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* Image_SelfNumIcon;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image_SelfState;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UCanvasPanel* MapandCircleCanvas;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* MINIMAP;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* SelfPosiionIcon;
  /* offset=0x02bc flags=0x0008001040010205 */ UNewEntireMap_C* ENTIREMAP;
  /* offset=0x02c0 flags=0x0008001040010205 */ float MapWindowExtent;
  /* offset=0x02c4 flags=0x0008001040000205 */ float LevelLandScapeExtent;
  /* offset=0x02c8 flags=0x0008001040000205 */ float MapImageExtent;
  /* offset=0x02cc flags=0x0008001040000205 */ float LevelToMapScale;
  /* offset=0x02d0 flags=0x0008001040010005 */ struct FVector LevelLandScapeCenter;
  /* offset=0x02dc flags=0x0008001040010005 */ struct FVector MapCenterToPinMarker;
  /* offset=0x02e8 flags=0x0008001040010205 */ uint8 TestMap;
  /* offset=0x02e9 flags=0x0008001040010205 */ uint8 MapType;
  /* offset=0x02ec flags=0x0008001040010005 */ struct FLinearColor BlueColor;
  /* offset=0x02fc flags=0x0008001040010005 */ struct FLinearColor WhiteColor;
  /* offset=0x030c flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* STExtraPlayerController;
  /* offset=0x0310 flags=0x0008001040010a05 */ ASTExtraGameStateBase* STExtraGameStateBase;
  /* offset=0x0314 flags=0x0008001040010205 */ uint8 PlayerOperation;
  /* offset=0x0318 flags=0x0000001000010005 */ struct FMapRealTimeInfo MapRealTimeInfo;
  /* offset=0x035c flags=0x0008001040010205 */ int32 LastestAirAttackWave;
  /* offset=0x0360 flags=0x0008001040010205 */ float RotateAngle;
  /* offset=0x0364 flags=0x0008001040010a05 */ ASTExtraPlayerState* STEPlayerState;
  /* offset=0x0368 flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamMatePlayerStateList;
  /* offset=0x0374 flags=0x0008001040010205 */ int32 LocalPlayerIndex;
  /* offset=0x0378 flags=0x0000000000010a05 */ TArray<ASTExtraPlayerState*> TeamPlayerWithoutLocalPlayer;
  /* offset=0x0384 flags=0x0000001040010205 */ bool bNeedUpdateTeamMateInfo;
  /* offset=0x0388 flags=0x0000000000010205 */ TArray<struct FSlateBrush> PlayerMarkBrush;
  /* offset=0x0394 flags=0x0000000000010205 */ TArray<UWidget*> PlayerMarkInMapGridArray;
  /* offset=0x03a0 flags=0x0000000000010205 */ TArray<UPanelWidget*> PlayerInfoInMapGridArray;
  /* offset=0x03ac flags=0x0000000000010205 */ TArray<UImage*> PlayerInfoInMapImageArray;
  /* offset=0x03b8 flags=0x0000001040010205 */ bool bNeedDrawSelfGuideLine;
  /* offset=0x03bc flags=0x0000000000010205 */ TArray<struct FLinearColor> PlayerMarkerColorArray;
  /* offset=0x03c8 flags=0x0008001040010005 */ struct FVector2D SelfMarkerAligment;
  /* offset=0x03d0 flags=0x0008001040010005 */ struct FLinearColor Player01Color;
  /* offset=0x03e0 flags=0x0008001040010005 */ struct FLinearColor Player02Color;
  /* offset=0x03f0 flags=0x0008001040010005 */ struct FLinearColor Player03Color;
  /* offset=0x0400 flags=0x0008001040010005 */ struct FLinearColor Player04Color;
  /* offset=0x0410 flags=0x0008001040010205 */ float GuideLineMaxLength;
  /* offset=0x0414 flags=0x0008001040010205 */ float MapWindowHalfExtent;
  /* offset=0x0418 flags=0x0000001040010205 */ bool DebugNotDrawGuideLine;
  /* offset=0x041c flags=0x0008001040010205 */ int32 MateCount;
  /* offset=0x0420 flags=0x0000000000010205 */ TArray<struct FSlateBrush> BrushList;
  /* offset=0x042c flags=0x0000000000010205 */ TArray<UImage*> PlayerInfoNumImageArray;
  /* offset=0x0438 flags=0x0000000000010205 */ TArray<UTextBlock*> NameList;
  /* offset=0x0444 flags=0x0000000000010205 */ TArray<struct FSlateBrush> PlayerStateGroup;
  /* offset=0x0450 flags=0x0000001000010005 */ struct FMapRealTimeInfo CacheMapRealTimeInfo;
  /* offset=0x0494 flags=0x0008001040010205 */ float DefaultLineThickness;
  /* offset=0x0498 flags=0x0008001040000205 */ float MiniMapDefaultScale;
  /* offset=0x049c flags=0x0000001040010205 */ bool bAntiAlias;
  /* offset=0x049d flags=0x0000001040010205 */ bool bDrawPlaneRoute;
  /* offset=0x04a0 flags=0x0008001040010005 */ struct FVector2D RouteStartLoc;
  /* offset=0x04a8 flags=0x0008001040010005 */ struct FVector2D RouteVelocity;
  /* offset=0x04b0 flags=0x0008001040010005 */ struct FVector2D RouteEndLoc;
  /* offset=0x04b8 flags=0x0008001040010005 */ struct FVector2D MapAdjustOffset;
  /* offset=0x04c0 flags=0x0008001040010205 */ float RouteTime;

  void BindTeamMapMarkDelegate(FOnMapMarkChangeDelegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);
  void ClearAllMark(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UWidget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void Construct();
  void ExecuteUbergraph_NewMiniMap(int32 EntryPoint, FOnSpectatorChange K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, int32 ___int_Array_Index_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, enum ExtraPlayerLiveState K2Node_Event_State, ACharacter* K2Node_Event_OwnerCharacter, bool K2Node_Event_IsDesignTime, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, AGameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess3, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue, int32 ___int_Loop_Counter_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_IntInt_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, uint8 K2Node_CustomEvent_airattacktype, int32 K2Node_CustomEvent_waveindex, UTexture2D* CallFunc_GetCurLevelMapTexture_Texture, bool CallFunc_IsValid_ReturnValue4, TArray<ABP_MiniMapStandardPoint_C*> CallFunc_GetAllActorsOfClass_OutActors, ABP_MiniMapStandardPoint_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue2, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State2, bool K2Node_DynamicCast_bSuccess4, int32 CallFunc_GetPlayerTeamIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, float CallFunc_Sqrt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue3, UTexture2D* CallFunc_GetCurLevelMapTexture_Texture2, bool CallFunc_IsValid_ReturnValue5, FAirAttackNotify K2Node_CreateDelegate_OutputDelegate3, int32 CallFunc_Blueprint_GetSizeX_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, struct FVector2D CallFunc_AdjustMapPosition_ReturnValue, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate4, struct FReConnectGameStateInfo K2Node_CustomEvent_ReConnectInfo, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, bool CallFunc_IsValid_ReturnValue6, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue2, bool CallFunc_IsValid_ReturnValue7, float CallFunc_Divide_FloatFloat_ReturnValue2, struct FMapRealTimeInfo CallFunc_GetMapRealTimeInfo_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue8, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, APlayerController* CallFunc_GetPlayerController_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, ASTExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, FReConnectGameStateInfoNotify K2Node_CreateDelegate_OutputDelegate5, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue10, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, int32 CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue2);
  void GetPlayerColorByIndex(int32 Index, struct FLinearColor Color, int32 PlayerIndex, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FName CallFunc_Array_Get_Item, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void GetTeamMateListFromPlayerState(bool ExcludeSelf, TArray<ASTExtraPlayerState*> TeammateList, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList);
  void HandleAirAttackBroadcast(uint8 AttackMsg, int32 Wave, bool K2Node_SwitchEnum_CmpSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MapCenterToPointVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Multiply_FloatFloat_ReturnValue3, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector2D CallFunc_GetRotatedVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue3);
  void HandleReconnectInfo(struct FReConnectGameStateInfo Info);
  void HideEnterMap(ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void InitPlayerState();
  void InitUIWidget(struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color2, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color3, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color4, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5, int32 CallFunc_Array_Add_ReturnValue6, int32 CallFunc_Array_Add_ReturnValue7, int32 CallFunc_Array_Add_ReturnValue8, int32 CallFunc_Array_Add_ReturnValue9, int32 CallFunc_Array_Add_ReturnValue10, int32 CallFunc_Array_Add_ReturnValue11, int32 CallFunc_Array_Add_ReturnValue12, int32 CallFunc_Array_Add_ReturnValue13);
  void LoadMapByLevelName(FString CurLevelName);
  void MiniMapAdjustLimtChange(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3);
  void OnPaint(struct FPaintContext Context, struct FPaintContext PaintContext, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FLinearColor CallFunc_GetPlayerColorByIndex_Color, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue2, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsNeedDrawGuideLine_ReturnValue, USTExtraMapFunctionLibrary* CallFunc_MapFuncLibInstance_ReturnValue4, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void OnSpectatorChangeEvent();
  void OnSpectatorChanged();
  void Open/HideEntireMap();
  void PlayerEnterFighting();
  void PlayerEnterFlying();
  void PreConstruct(bool IsDesignTime);
  void ReConnectGameStateInfoNotify(struct FReConnectGameStateInfo ReConnectInfo);
  void ReceiveAirAttackBroadcast(uint8 airattacktype, int32 waveindex);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(int32 ___int_Array_Index_Variable, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_GetPlayerTeamIndex_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);
  void RedrawSelfMark(TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void RefreshLocalPlayer(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerState* CallFunc_Array_Get_Item, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void RefreshTeammateIcon(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UPanelWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void RepositionMapMark(int32 Index, bool FalseBool, bool TrueBool, int32 CurIndex, struct FVector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue2, struct FVector CallFunc_Subtract_VectorFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, struct FVector2D CallFunc_MakeVector2D_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMateListFromPlayerState_TeamMateList, ASTExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, struct FVector CallFunc_Subtract_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, struct FVector CallFunc_Subtract_VectorFloat_ReturnValue3, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, UWidget* CallFunc_Array_Get_Item2, UWidget* CallFunc_Array_Get_Item3, bool CallFunc_Array_IsValidIndex_ReturnValue2, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue4, struct FVector2D CallFunc_MakeVector2D_ReturnValue4);
  void SetMateColor(int32 PlayerIdx, UImage* TargetImage, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void SetMateNum(UImage* NumImg, int32 PlayerIdx, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void SetPlayerMarkerRotation(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APawn* CallFunc_K2_GetPawn_ReturnValue, struct FRotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool K2Node_SwitchEnum_CmpSuccess, struct FRotator CallFunc_GetControlRotation_ReturnValue, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2);
  void SetSelfInfoAndColor(ASTExtraPlayerState* PlayerState, int32 ___int_Array_Index_Variable, int32 CallFunc_GetPlayerTeamIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsSinglePlayer_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
  void SetSpectatorInfoAndColor(ASTExtraPlayerState* PS, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable2, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Add_IntInt_ReturnValue2, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, ASTExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, struct FTeamPlayerColorStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2);
  void ShowEnterMap(ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue);
  void ShowMateNum(int32 ___int_Array_Index_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 ___int_Loop_Counter_Variable, UImage* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, UImage* CallFunc_Array_Get_Item3, bool CallFunc_Array_IsValidIndex_ReturnValue2, APlayerController* CallFunc_GetPlayerController_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);
  void ShowTeamMateInfoGrid(TArray<ASTExtraPlayerState*> TargetArray, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, ASTExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, UPanelWidget* CallFunc_Array_Get_Item2);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateAirplaneRoute(struct FVector StartLoc, struct FVector EndLoc, bool IsDraw, float CallFunc_Sqrt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Normal2D_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void UpdatePlayerState(enum ExtraPlayerLiveState State, ACharacter* OwnerCharacter);
};

class UNewParachutingPanel_C: public UParachutingWidget {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* FallingArrow;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UHorizontalBox* HeightAndSpeedHorizontalBox;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* HeightBar;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* HeightPointer;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* Parachute;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* ParachuteBar;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UTextBlock* SpeedT;
  /* offset=0x02c8 flags=0x0008001040010205 */ float HaveToOpen;
  /* offset=0x02cc flags=0x0008001040010205 */ int32 JumpRand;

  void ExecuteUbergraph_NewParachutingPanel(int32 EntryPoint, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate3, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_GetSize_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Subtract_FloatFloat_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue3, struct FVector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue3, struct FVector2D CallFunc_GetPosition_ReturnValue2, FOnSpeedValueChangeDelegate K2Node_CreateDelegate_OutputDelegate4, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2);
  void OnAirborneStateChange();
  void OpenParachute(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void Parachuting_HideHeightBar();
  void Parachuting_ShowHeightBar(enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void Parachuting_ShowParachuteIcon();
  void PlaneEnterParachute();
  void PlayerEnterFighting();
  void PlayerOutPlane();
  void PlayerOutPlaneChangeUI();
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5);
  void StartJump(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void StartUpdateHeightBar(float NewLocalVar, float NewLocalVar, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void UpdateSpeedText(FText CallFunc_Conv_StringToText_ReturnValue);
};

class UNewteaching_Btn_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button_BaseInfoSwitchD;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button_BaseInfoSwitchL;
  /* offset=0x01bc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_BaseInfoL;
  /* offset=0x01c4 flags=0x0008001040010a05 */ Abp_newteaching_C* newteachingBpLua;
  /* offset=0x01c8 flags=0x0008001040010205 */ int32 newteachingIdx;
  /* offset=0x01cc flags=0x0000001040010205 */ bool IsSelected;

  void Construct();
  void ExecuteUbergraph_Newteaching_Btn_UIBP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate);
  void OnItemClicked();
  void SetData(struct FBP_STRUCT_NewteachingInfo_type NewteachingInfo, Abp_newteaching_C* bpLuaClass, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetSelect(bool select);
};

class UNewteaching_LogicBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UNewteaching_UIBP_C* Newteaching_UIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_newteaching_C* newteachingBpLua;
  /* offset=0x023c flags=0x0000001040010205 */ bool OS_Platform_Android;
  /* offset=0x0240 flags=0x0008001040010205 */ int32 CurrentShowPictureIdx;
  /* offset=0x0244 flags=0x0008001040010205 */ int32 CurrentPicturesNum;
  /* offset=0x0248 flags=0x0000000000010205 */ TArray<FString> CurrentPicturePaths;
  /* offset=0x0254 flags=0x0008001040010205 */ int32 titleBtnCount;
  /* offset=0x0258 flags=0x0008001040010205 */ UMediaPlayer* MediaPlayer;
  /* offset=0x025c flags=0x0000001040010205 */ bool IsSeekingMedia;
  /* offset=0x0260 flags=0x0008001040010205 */ UMediaSource* CurrentToPlayMediaSource;
  /* offset=0x0264 flags=0x0000001040010205 */ bool firstPlayVideo;

  void Construct();
  void ExecuteUbergraph_Newteaching_LogicBP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnMediaPlayerMediaEvent K2Node_CreateDelegate_OutputDelegate5, FOnMouseCaptureEndEvent K2Node_CreateDelegate_OutputDelegate6, FOnFloatValueChangedEvent K2Node_CreateDelegate_OutputDelegate7, FOnMouseCaptureBeginEvent K2Node_CreateDelegate_OutputDelegate8, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate9, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate10, FString CallFunc_GetPlatformName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Play_ReturnValue, bool CallFunc_Pause_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, bool CallFunc_Rewind_ReturnValue, float K2Node_CustomEvent_Value, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_SupportsSeeking_ReturnValue, struct FTimespan CallFunc_GetDuration_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_OpenPlaylist_ReturnValue, struct FTimespan CallFunc_FromSeconds_ReturnValue, bool CallFunc_Seek_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_newteaching_C* K2Node_DynamicCast_AsBp_Newteaching, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPreparing_ReturnValue, bool CallFunc_OpenSource_ReturnValue, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue2);
  void ForMediaUseReference();
  void HideUI(UStatManager* CallFunc_GetInstance_ReturnValue);
  void InitTitleBtns(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UNewteaching_Btn_UIBP_C* CallFunc_Create_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UNewteaching_Btn_UIBP_C* K2Node_DynamicCast_AsNewteaching_Btn_UIBP, bool K2Node_DynamicCast_bSuccess, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, UPanelSlot* CallFunc_AddChild_ReturnValue, FName CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_NewteachingInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_NewteachingInfo_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue2);
  void OnButtonCloseClicked();
  void OnButtonEnterTrainRoomClicked();
  void OnButtonPageLeftClicked();
  void OnButtonPageRightClicked();
  void OnButtonPauseClicked();
  void OnButtonPlayClicked();
  void OnMediaEndReached();
  void OnSliderMouseCaptureBegin();
  void OnSliderMouseCaptureEnd();
  void OnValueChanged(float Value);
  void ResetData();
  void SetData(int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, struct FBP_STRUCT_NewteachingInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, TArray<FString> CallFunc_ParseIntoArray_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, UNewteaching_Btn_UIBP_C* K2Node_DynamicCast_AsNewteaching_Btn_UIBP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue);
  void SetPicture(TArray<FString> pictureNames, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);
  void SetTextArea(int32 ___int_Variable, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, UWidget* CallFunc_GetChildAt_ReturnValue, UCanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);
  void SetVideo(FString videoName, FString CallFunc_Concat_StrStr_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UMediaSource* K2Node_DynamicCast_AsMedia_Source, bool K2Node_DynamicCast_bSuccess, bool CallFunc_OpenSource_ReturnValue, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);
  void SetVideoProgress(struct FTimespan CallFunc_GetDuration_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, struct FTimespan CallFunc_GetTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, struct FTimespan CallFunc_GetDuration_ReturnValue2, int32 CallFunc_BreakTimespan_Days, int32 CallFunc_BreakTimespan_Hours, int32 CallFunc_BreakTimespan_Minutes, int32 CallFunc_BreakTimespan_Seconds, int32 CallFunc_BreakTimespan_Milliseconds, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, struct FTimespan CallFunc_GetTime_ReturnValue2, int32 CallFunc_BreakTimespan_Days2, int32 CallFunc_BreakTimespan_Hours2, int32 CallFunc_BreakTimespan_Minutes2, int32 CallFunc_BreakTimespan_Seconds2, int32 CallFunc_BreakTimespan_Milliseconds2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData3, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData4, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);
  void ShowPictureByIdx(int32 picIdx, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue3, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 ___int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, UImage* K2Node_DynamicCast_AsImage, bool K2Node_DynamicCast_bSuccess2, UImage* K2Node_DynamicCast_AsImage2, bool K2Node_DynamicCast_bSuccess3);
  void ShowUI();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void setDetailText(int32 index2, int32 index1, TArray<FString> IndexArray, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<FString> CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, struct FBP_STRUCT_NewteachingInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 ___int_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, UWidget* CallFunc_GetChildAt_ReturnValue, UCanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, UWidget* CallFunc_GetChildAt_ReturnValue2, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, TArray<FString> CallFunc_ParseIntoArray_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue2, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_GetChildrenCount_ReturnValue2, FString CallFunc_GetDisplayName_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2);
};

class UNewteaching_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* BG;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* bg01;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* bg02;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UButton* Button_EnterTrainRoom;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UButton* Button_pageleft;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UButton* Button_pageright;
  /* offset=0x01cc flags=0x000a0010c008020c */ UButton* Button_Pause;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Button_Pause_Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UButton* Button_Play;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UCommon_UIPanelBG_C* Common_UIPanelBG_C;
  /* offset=0x01dc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01ec flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01fc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0200 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0204 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0208 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x020c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0210 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0214 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0218 flags=0x000a0010c008020c */ UWeakRefImage* Image_picture;
  /* offset=0x021c flags=0x000a0010c008020c */ UWrapBox* indexPointsLayout;
  /* offset=0x0220 flags=0x000a0010c008020c */ UImage* line;
  /* offset=0x0224 flags=0x000a0010c008020c */ UImage* line2;
  /* offset=0x0228 flags=0x000a0010c008020c */ UCanvasPanel* PicturePanel;
  /* offset=0x022c flags=0x000a0010c008020c */ UScrollBox* ScrollBox;
  /* offset=0x0230 flags=0x000a0010c008020c */ UCanvasPanel* UI;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCanvasPanel* Video;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* videomask;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* videoMediaTexture;
  /* offset=0x0240 flags=0x000a0010c008020c */ UCanvasPanel* VideoPanel;
  /* offset=0x0244 flags=0x000a0010c008020c */ UProgressBar* videoProgressBar;
  /* offset=0x0248 flags=0x000a0010c008020c */ UCanvasPanel* videoProgressPanel;
  /* offset=0x024c flags=0x000a0010c008020c */ USlider* videoProgressSlider;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* videoProgressTime;
};

class UNoBulletWeaponState: public UWeaponStateBase {
};

class UNodeMappingContainer: public UObject {
  /* offset=0x001c flags=0x0040000000000201 */ TMap<FName, struct FNodeMap> NodeMapping;
  /* offset=0x0058 flags=0x004c000000000001 */ UBlueprint* SourceAsset;
};

class UNodeMappingProviderInterface: public UInterface {
};

class ANote: public AActor {
};

class UNumericProperty: public UProperty {
};

class UOMobileFBPL: public UBlueprintFunctionLibrary {
  bool AreHeadphonesPluggedIn();
  int32 GetBatteryLevel();
  float GetBatteryTemperature();
  FString GetDeviceName();
  int32 GetVolumeState();
};

class UObject {
  void ExecuteUbergraph(int32 EntryPoint);
};

class UObjectLibrary: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ UClass<UObject>* ObjectBaseClass;
  /* offset=0x0020 flags=0x0018001040000201 */ bool bHasBlueprintClasses;
  /* offset=0x0024 flags=0x0020080000000201 */ TArray<UObject*> Objects;
  /* offset=0x0030 flags=0x0024080000000200 */ TArray<UObject*> WeakObjects;
  /* offset=0x003c flags=0x0028081040002200 */ bool bUseWeakReferences;
  /* offset=0x003d flags=0x0028081040002200 */ bool bIsFullyLoaded;
};

class UObjectProperty: public UObjectPropertyBase {
};

class UObjectPropertyBase: public UProperty {
};

class UObjectRedirector: public UObject {
};

class UObjectReferencer: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<UObject*> ReferencedObjects;
};

class UOcclusionPluginSourceSettingsBase: public UObject {
};

class AOceanManager: public AActor {
  /* offset=0x02a8 flags=0x0018001040000205 */ bool EnableGerstnerWaves;
  /* offset=0x02ac flags=0x0018001040000005 */ struct FVector2D GlobalWaveDirection;
  /* offset=0x02b4 flags=0x0018001040000205 */ float GlobalWaveSpeed;
  /* offset=0x02b8 flags=0x0018001040000205 */ float GlobalWaveAmplitude;
  /* offset=0x02bc flags=0x0018001040000205 */ float DistanceCheck;
  /* offset=0x02c0 flags=0x0010000000000205 */ TArray<struct FWaveParameter> WaveClusters;
  /* offset=0x02cc flags=0x0010000000000205 */ TArray<struct FWaveSetParameters> WaveSetOffsetsOverride;
  /* offset=0x02d8 flags=0x0018001040000204 */ float NetWorkTimeOffset;
  /* offset=0x02dc flags=0x0018001040000205 */ bool bEnableLandscapeModulation;
  /* offset=0x02e0 flags=0x0018001040000205 */ float ModulationStartHeight;
  /* offset=0x02e4 flags=0x0018001040000205 */ float ModulationMaxHeight;
  /* offset=0x02e8 flags=0x0018001040000205 */ float ModulationPower;
  /* offset=0x02ec flags=0x0018001040000205 */ ALandscape* Landscape;
  /* offset=0x02f0 flags=0x0018001040000205 */ UTexture2D* HeightmapTexture;

  struct FLinearColor GetHeightmapPixel(float U, float V);
  struct FVector GetWaveHeightValue(struct FVector Location, UWorld* World, bool HeightOnly, bool TwoIterations);
  void LoadLandscapeHeightmap(UTexture2D* Tex2D);
};

class AOnlineBeacon: public AActor {
  /* offset=0x02ac flags=0x0028081040004200 */ float BeaconConnectionInitialTimeout;
  /* offset=0x02b0 flags=0x0028081040004200 */ float BeaconConnectionTimeout;
  /* offset=0x02b4 flags=0x0028081040000200 */ UNetDriver* NetDriver;
};

class AOnlineBeaconClient: public AOnlineBeacon {
  /* offset=0x02c8 flags=0x0028081040000200 */ AOnlineBeaconHostObject* BeaconOwner;
  /* offset=0x02cc flags=0x0028081040000200 */ UNetConnection* BeaconConnection;
  /* offset=0x02d0 flags=0x0028081040000200 */ enum EBeaconConnectionState ConnectionState;

  /* CL  */ void ClientOnConnected();
};

class AOnlineBeaconHost: public AOnlineBeacon {
  /* offset=0x02c8 flags=0x0018001040004200 */ int32 ListenPort;
  /* offset=0x02cc flags=0x0040000000000200 */ TArray<AOnlineBeaconClient*> ClientActors;
};

class AOnlineBeaconHostObject: public AActor {
  /* offset=0x02a8 flags=0x0028080000002200 */ FString BeaconTypeName;
  /* offset=0x02b4 flags=0x002c081040000200 */ UClass<AOnlineBeaconClient>* ClientBeaconActorClass;
  /* offset=0x02b8 flags=0x0020080000000200 */ TArray<AOnlineBeaconClient*> ClientActors;
};

class UOnlineBlueprintCallProxyBase: public UObject {
  void Activate();
};

class UOnlineEngineInterface: public UObject {
};

class UOnlineEngineInterfaceImpl: public UOnlineEngineInterface {
  /* offset=0x0020 flags=0x0048001040004200 */ FName VoiceSubsystemNameOverride;
};

class UOnlinePIESettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001040004201 */ bool bOnlinePIEEnabled;
  /* offset=0x0034 flags=0x0010000000004201 */ TArray<struct FPIELoginSettingsInternal> Logins;
};

class UOnlineSession: public UObject {
};

class UOnlineSessionClient: public UOnlineSession {
  /* offset=0x026c flags=0x0028081040002200 */ bool bIsFromInvite;
  /* offset=0x026d flags=0x0028081040002200 */ bool bHandlingDisconnect;
};

class UOverlay: public UPanelWidget {
  UOverlaySlot* AddChildToOverlay(UWidget* content);
};

class UOverlaySlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UOverlays: public UObject {
};

class APUBGDoor: public AUAENetActor {
  /* offset=0x02b0 flags=0x0018001140000224 */ int32 DoorState;
  /* offset=0x02b4 flags=0x0018001140000234 */ bool DoorBroken;
  /* offset=0x02b8 flags=0x001800104008020d */ UStaticMeshComponent* doorMesh;
  /* offset=0x02bc flags=0x00180010400a020d */ UBoxComponent* interactionBox;
  /* offset=0x02c0 flags=0x0018001040004200 */ float NetCullingDistanceOnVeryLowDevice;

  void ActionDoorImmediatly(int32 doorStateDst);
  void ActionDoorOnClient(int32 doorStateDst);
  void BP_DoorBroken(bool isBeginPlay);
  void ForceNetUpdate();
  void Init(UBoxComponent* interactionBox, UStaticMeshComponent* doorMesh);
  void OnBeginOverlap(UPrimitiveComponent* activatedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void OnDoorRPC(ACharacter* Character);
  void OnEndOverlap(UPrimitiveComponent* activatedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void OnRep_RepDoorBroken();
  void OnRep_RepDoorState();
  void RefreshUIOnClient();
  void SetDoorBroken();
};

class AP_Environment_Grass_01_BP_C: public AActor {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x0008001440000204 */ UParticleSystemComponent* P_Environment_Leaf_01;
  /* offset=0x02b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void ExecuteUbergraph_P_Environment_Grass_01_BP(int32 EntryPoint);
  void UserConstructionScript();
};

class AP_Environment_Leaf_01_BP_C: public AActor {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x0008001440000204 */ UParticleSystemComponent* P_Environment_Leaf_01;
  /* offset=0x02b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void ExecuteUbergraph_P_Environment_Leaf_01_BP(int32 EntryPoint);
  void UserConstructionScript();
};

class AP_Environment_particle_01_BP_C: public AActor {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x0008001440000204 */ UParticleSystemComponent* P_Environment_particle_01;
  /* offset=0x02b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void ExecuteUbergraph_P_Environment_particle_01_BP(int32 EntryPoint);
  void UserConstructionScript();
};

class UPackage: public UObject {
};

class UPackageMap: public UObject {
};

class UPackageMapClient: public UPackageMap {
};

class APainCausingVolume: public APhysicsVolume {
  /* offset=0x02dd flags=0x0018001000000005 */ uint8 bPainCausing:1;
  /* offset=0x02e0 flags=0x0018001040000205 */ float DamagePerSec;
  /* offset=0x02e4 flags=0x001c001040000205 */ UClass<UDamageType>* DamageType;
  /* offset=0x02e8 flags=0x0018001040000205 */ float PainInterval;
  /* offset=0x02ec flags=0x0018001000000005 */ uint8 bEntryPain:1;
  /* offset=0x02ec flags=0x0018001000000000 */ uint8 BACKUP_bPainCausing:1;
  /* offset=0x02f0 flags=0x0018001040000200 */ AController* DamageInstigator;
};

class UPanelSlot: public UVisual {
  /* offset=0x001c flags=0x001a001040080208 */ UPanelWidget* Parent;
  /* offset=0x0020 flags=0x001a001040080208 */ UWidget* content;
};

class UPanelWidget: public UWidget {
  /* offset=0x00c8 flags=0x0020088000000208 */ TArray<UPanelSlot*> Slots;

  UPanelSlot* AddChild(UWidget* content);
  void ClearChildren();
  UWidget* GetChildAt(int32 Index);
  int32 GetChildIndex(UWidget* content);
  int32 GetChildrenCount();
  bool HasAnyChildren();
  bool HasChild(UWidget* content);
  bool RemoveChild(UWidget* content);
  bool RemoveChildAt(int32 Index);
};

class APaperCharacter: public ACharacter {
  /* offset=0x05a0 flags=0x00480010400a021d */ UPaperFlipbookComponent* Sprite;
};

class UPaperFlipbook: public UObject {
  /* offset=0x001c flags=0x0028081040000215 */ float FramesPerSecond;
  /* offset=0x0020 flags=0x0020080000000201 */ TArray<struct FPaperFlipbookKeyFrame> KeyFrames;
  /* offset=0x002c flags=0x0028081040000215 */ UMaterialInterface* DefaultMaterial;
  /* offset=0x0030 flags=0x0028081040000215 */ uint8 CollisionSource;

  int32 GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);
  int32 GetNumFrames();
  int32 GetNumKeyFrames();
  UPaperSprite* GetSpriteAtFrame(int32 FrameIndex);
  UPaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);
  float GetTotalDuration();
  bool IsValidKeyFrameIndex(int32 Index);
};

class APaperFlipbookActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPaperFlipbookComponent* RenderComponent;
};

class UPaperFlipbookComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0028081140000221 */ UPaperFlipbook* SourceFlipbook;
  /* offset=0x05e0 flags=0x0028081060000200 */ UMaterialInterface* Material;
  /* offset=0x05e4 flags=0x0028081040000221 */ float PlayRate;
  /* offset=0x05e8 flags=0x0028081000000020 */ uint8 bLooping:1;
  /* offset=0x05e8 flags=0x0028081000000020 */ uint8 bReversePlayback:1;
  /* offset=0x05e8 flags=0x0028081000000020 */ uint8 bPlaying:1;
  /* offset=0x05ec flags=0x0028081040000220 */ float AccumulatedTime;
  /* offset=0x05f0 flags=0x0028081040000200 */ int32 CachedFrameIndex;
  /* offset=0x05f4 flags=0x0028081240000015 */ struct FLinearColor SpriteColor;
  /* offset=0x0604 flags=0x0028081040002200 */ UBodySetup* CachedBodySetup;
  /* offset=0x0608 flags=0x0010000010080200 */ FFlipbookFinishedPlaySignature OnFinishedPlaying;

  UPaperFlipbook* GetFlipbook();
  float GetFlipbookFramerate();
  float GetFlipbookLength();
  int32 GetFlipbookLengthInFrames();
  float GetPlayRate();
  float GetPlaybackPosition();
  int32 GetPlaybackPositionInFrames();
  bool IsLooping();
  bool IsPlaying();
  bool IsReversing();
  void OnRep_SourceFlipbook(UPaperFlipbook* OldFlipbook);
  void Play();
  void PlayFromStart();
  void Reverse();
  void ReverseFromEnd();
  bool SetFlipbook(UPaperFlipbook* NewFlipbook);
  void SetLooping(bool bNewLooping);
  void SetNewTime(float NewTime);
  void SetPlayRate(float NewRate);
  void SetPlaybackPosition(float NewPosition, bool bFireEvents);
  void SetPlaybackPositionInFrames(int32 NewFramePosition, bool bFireEvents);
  void SetSpriteColor(struct FLinearColor NewColor);
  void Stop();
};

class APaperGroupedSpriteActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPaperGroupedSpriteComponent* RenderComponent;
};

class UPaperGroupedSpriteComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0020080000000200 */ TArray<UMaterialInterface*> InstanceMaterials;
  /* offset=0x05e8 flags=0x0020080000000201 */ TArray<struct FSpriteInstanceData> PerInstanceSpriteData;

  int32 AddInstance(struct FTransform Transform, UPaperSprite* Sprite, bool bWorldSpace, struct FLinearColor Color);
  void ClearInstances();
  int32 GetInstanceCount();
  bool GetInstanceTransform(int32 InstanceIndex, struct FTransform OutInstanceTransform, bool bWorldSpace);
  bool RemoveInstance(int32 InstanceIndex);
  void SortInstancesAlongAxis(struct FVector WorldSpaceSortAxis);
  bool UpdateInstanceColor(int32 InstanceIndex, struct FLinearColor NewInstanceColor, bool bMarkRenderStateDirty);
  bool UpdateInstanceTransform(int32 InstanceIndex, struct FTransform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
};

class UPaperRuntimeSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ bool bEnableSpriteAtlasGroups;
  /* offset=0x001d flags=0x0018001040004201 */ bool bEnableTerrainSplineEditing;
  /* offset=0x001e flags=0x0018001040004201 */ bool bResizeSpriteDataToMatchTextures;
};

class UPaperSprite: public UObject {
  /* offset=0x0024 flags=0x0028091040000001 */ struct FVector2D SourceUV;
  /* offset=0x002c flags=0x0028091040000001 */ struct FVector2D SourceDimension;
  /* offset=0x0034 flags=0x0028091040000201 */ UTexture2D* SourceTexture;
  /* offset=0x0038 flags=0x0020090000000201 */ TArray<UTexture*> AdditionalSourceTextures;
  /* offset=0x0044 flags=0x0028081040000000 */ struct FVector2D BakedSourceUV;
  /* offset=0x004c flags=0x0028081040000000 */ struct FVector2D BakedSourceDimension;
  /* offset=0x0054 flags=0x0028081040000200 */ UTexture2D* BakedSourceTexture;
  /* offset=0x0058 flags=0x0028081040000215 */ UMaterialInterface* DefaultMaterial;
  /* offset=0x005c flags=0x0028081040000215 */ UMaterialInterface* AlternateMaterial;
  /* offset=0x0060 flags=0x0020080000000201 */ TArray<struct FPaperSpriteSocket> Sockets;
  /* offset=0x006c flags=0x0028081040000201 */ uint8 SpriteCollisionDomain;
  /* offset=0x0070 flags=0x0028081040000201 */ float PixelsPerUnrealUnit;
  /* offset=0x0074 flags=0x0018001040000201 */ UBodySetup* BodySetup;
  /* offset=0x0078 flags=0x0018001040000200 */ int32 AlternateMaterialSplitIndex;
  /* offset=0x007c flags=0x0010000000000200 */ TArray<struct FVector4> BakedRenderData;
};

class APaperSpriteActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPaperSpriteComponent* RenderComponent;
};

class UPaperSpriteAtlas: public UObject {
};

class UPaperSpriteBlueprintLibrary: public UBlueprintFunctionLibrary {
  struct FSlateBrush MakeBrushFromSprite(UPaperSprite* Sprite, int32 Width, int32 Height);
};

class UPaperSpriteComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0028081040000215 */ UPaperSprite* SourceSprite;
  /* offset=0x05e0 flags=0x0028081060000200 */ UMaterialInterface* MaterialOverride;
  /* offset=0x05e4 flags=0x0028081240000015 */ struct FLinearColor SpriteColor;

  UPaperSprite* GetSprite();
  bool SetSprite(UPaperSprite* NewSprite);
  void SetSpriteColor(struct FLinearColor NewColor);
};

class APaperTerrainActor: public AActor {
  /* offset=0x02a8 flags=0x0048001040080208 */ USceneComponent* DummyRoot;
  /* offset=0x02ac flags=0x0048001040080208 */ UPaperTerrainSplineComponent* SplineComponent;
  /* offset=0x02b0 flags=0x00480010400a021d */ UPaperTerrainComponent* RenderComponent;
};

class UPaperTerrainComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000215 */ UPaperTerrainMaterial* TerrainMaterial;
  /* offset=0x05c4 flags=0x0018001040000215 */ bool bClosedSpline;
  /* offset=0x05c5 flags=0x0018001040000215 */ bool bFilledSpline;
  /* offset=0x05c8 flags=0x0018001040080208 */ UPaperTerrainSplineComponent* AssociatedSpline;
  /* offset=0x05cc flags=0x0018001040000201 */ int32 RandomSeed;
  /* offset=0x05d0 flags=0x0018001040000201 */ float SegmentOverlapAmount;
  /* offset=0x05d4 flags=0x0028081240000015 */ struct FLinearColor TerrainColor;
  /* offset=0x05e4 flags=0x00280c1040000201 */ int32 ReparamStepsPerSegment;
  /* offset=0x05e8 flags=0x0028081040000201 */ uint8 SpriteCollisionDomain;
  /* offset=0x05ec flags=0x0028081040000201 */ float CollisionThickness;
  /* offset=0x05f0 flags=0x0028081040202200 */ UBodySetup* CachedBodySetup;

  void SetTerrainColor(struct FLinearColor NewColor);
};

class UPaperTerrainMaterial: public UDataAsset {
  /* offset=0x0020 flags=0x0010000000000201 */ TArray<struct FPaperTerrainMaterialRule> Rules;
  /* offset=0x002c flags=0x0018001040000201 */ UPaperSprite* InteriorFill;
};

class UPaperTerrainSplineComponent: public USplineComponent {
};

class UPaperTileLayer: public UObject {
  /* offset=0x001c flags=0x0010000000000014 */ FText LayerName;
  /* offset=0x0028 flags=0x0048001040000214 */ int32 LayerWidth;
  /* offset=0x002c flags=0x0048001040000214 */ int32 LayerHeight;
  /* offset=0x0030 flags=0x0048001000000015 */ uint8 bHiddenInGame:1;
  /* offset=0x0030 flags=0x0048001000000015 */ uint8 bLayerCollides:1;
  /* offset=0x0030 flags=0x0048001000000015 */ uint8 bOverrideCollisionThickness:1;
  /* offset=0x0030 flags=0x0048001000000015 */ uint8 bOverrideCollisionOffset:1;
  /* offset=0x0034 flags=0x0048001040000215 */ float CollisionThicknessOverride;
  /* offset=0x0038 flags=0x0048001040000215 */ float CollisionOffsetOverride;
  /* offset=0x003c flags=0x0048001040000015 */ struct FLinearColor LayerColor;
  /* offset=0x004c flags=0x0048001040000200 */ int32 AllocatedWidth;
  /* offset=0x0050 flags=0x0048001040000200 */ int32 AllocatedHeight;
  /* offset=0x0054 flags=0x0040000000000200 */ TArray<struct FPaperTileInfo> AllocatedCells;
  /* offset=0x0060 flags=0x0048001060000200 */ UPaperTileSet* TileSet;
  /* offset=0x0064 flags=0x0040000020000200 */ TArray<int32> AllocatedGrid;
};

class UPaperTileMap: public UObject {
  /* offset=0x001c flags=0x0018001040000215 */ int32 MapWidth;
  /* offset=0x0020 flags=0x0018001040000215 */ int32 MapHeight;
  /* offset=0x0024 flags=0x0018001040000215 */ int32 TileWidth;
  /* offset=0x0028 flags=0x0018001040000215 */ int32 TileHeight;
  /* offset=0x002c flags=0x0018001040000201 */ float PixelsPerUnrealUnit;
  /* offset=0x0030 flags=0x0018041040000201 */ float SeparationPerTileX;
  /* offset=0x0034 flags=0x0018041040000201 */ float SeparationPerTileY;
  /* offset=0x0038 flags=0x0018001040000215 */ float SeparationPerLayer;
  /* offset=0x0040 flags=0x001c000000000000 */ UPaperTileSet* SelectedTileSet;
  /* offset=0x0068 flags=0x0018001040000215 */ UMaterialInterface* Material;
  /* offset=0x006c flags=0x001000800000021d */ TArray<UPaperTileLayer*> TileLayers;
  /* offset=0x0078 flags=0x0028081040000215 */ float CollisionThickness;
  /* offset=0x007c flags=0x0028081040000215 */ uint8 SpriteCollisionDomain;
  /* offset=0x007d flags=0x0018001040000215 */ uint8 ProjectionMode;
  /* offset=0x0080 flags=0x0018001040000201 */ int32 HexSideLength;
  /* offset=0x0084 flags=0x0018001040000200 */ UBodySetup* BodySetup;
  /* offset=0x0088 flags=0x0018001040000200 */ int32 LayerNameIndex;
};

class APaperTileMapActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPaperTileMapComponent* RenderComponent;
};

class UPaperTileMapComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0048001060000200 */ int32 MapWidth;
  /* offset=0x05e0 flags=0x0048001060000200 */ int32 MapHeight;
  /* offset=0x05e4 flags=0x0048001060000200 */ int32 TileWidth;
  /* offset=0x05e8 flags=0x0048001060000200 */ int32 TileHeight;
  /* offset=0x05ec flags=0x0048001060000200 */ UPaperTileSet* DefaultLayerTileSet;
  /* offset=0x05f0 flags=0x0048001060000200 */ UMaterialInterface* Material;
  /* offset=0x05f4 flags=0x0040000020000200 */ TArray<UPaperTileLayer*> TileLayers;
  /* offset=0x0600 flags=0x0048001040000001 */ struct FLinearColor TileMapColor;
  /* offset=0x0610 flags=0x0048001040000201 */ int32 UseSingleLayerIndex;
  /* offset=0x0614 flags=0x0048001040000201 */ bool bUseSingleLayer;
  /* offset=0x0618 flags=0x0018001040000215 */ UPaperTileMap* TileMap;

  UPaperTileLayer* AddNewLayer();
  void CreateNewTileMap(int32 MapWidth, int32 MapHeight, int32 TileWidth, int32 TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);
  struct FLinearColor GetLayerColor(int32 Layer);
  void GetMapSize(int32 MapWidth, int32 MapHeight, int32 NumLayers);
  struct FPaperTileInfo GetTile(int32 X, int32 Y, int32 Layer);
  struct FVector GetTileCenterPosition(int32 TileX, int32 TileY, int32 LayerIndex, bool bWorldSpace);
  struct FVector GetTileCornerPosition(int32 TileX, int32 TileY, int32 LayerIndex, bool bWorldSpace);
  struct FLinearColor GetTileMapColor();
  void GetTilePolygon(int32 TileX, int32 TileY, TArray<struct FVector> Points, int32 LayerIndex, bool bWorldSpace);
  void MakeTileMapEditable();
  bool OwnsTileMap();
  void RebuildCollision();
  void ResizeMap(int32 NewWidthInTiles, int32 NewHeightInTiles);
  void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);
  void SetLayerCollision(int32 Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);
  void SetLayerColor(struct FLinearColor NewColor, int32 Layer);
  void SetTile(int32 X, int32 Y, int32 Layer, struct FPaperTileInfo NewValue);
  bool SetTileMap(UPaperTileMap* NewTileMap);
  void SetTileMapColor(struct FLinearColor NewColor);
};

class UPaperTileSet: public UObject {
  /* offset=0x001c flags=0x0048001040000015 */ struct FIntPoint TileSize;
  /* offset=0x0024 flags=0x0048001040000215 */ UTexture2D* TileSheet;
  /* offset=0x0028 flags=0x0040010000000201 */ TArray<UTexture*> AdditionalSourceTextures;
  /* offset=0x0034 flags=0x0040001000000015 */ struct FIntMargin BorderMargin;
  /* offset=0x0044 flags=0x0048001040000015 */ struct FIntPoint PerTileSpacing;
  /* offset=0x004c flags=0x0048001040000015 */ struct FIntPoint DrawingOffset;
  /* offset=0x0054 flags=0x0048001040000200 */ int32 WidthInTiles;
  /* offset=0x0058 flags=0x0048001040000200 */ int32 HeightInTiles;
  /* offset=0x005c flags=0x0048001040000200 */ int32 AllocatedWidth;
  /* offset=0x0060 flags=0x0048001040000200 */ int32 AllocatedHeight;
  /* offset=0x0064 flags=0x0040000000000241 */ TArray<struct FPaperTileMetadata> PerTileData;
  /* offset=0x0070 flags=0x0040000000000200 */ TArray<struct FPaperTileSetTerrain> Terrains;
  /* offset=0x007c flags=0x0048001060000200 */ int32 TileWidth;
  /* offset=0x0080 flags=0x0048001060000200 */ int32 TileHeight;
  /* offset=0x0084 flags=0x0048001060000200 */ int32 Margin;
  /* offset=0x0088 flags=0x0048001060000200 */ int32 Spacing;
};

class UParachutingControl_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_Cut;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_LeavePlane;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_Parachute;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* InteractionImage;
  /* offset=0x0244 flags=0x000a0010c008020c */ UGridPanel* MinimapExclusive;
  /* offset=0x0248 flags=0x000a0010c008020c */ UGridPanel* ParachutingBtnPanel;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0258 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_StatusShow;

  void BndEvt__Button_LeavePlane_K2Node_ComponentBoundEvent_169_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Parachute_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__ParachutingButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_ParachutingControl(int32 EntryPoint, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate2, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate3, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate4, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate5, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate6, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void OpenParachute(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void Parachuting_HideBtn();
  void Parachuting_HideCutBtn();
  void Parachuting_HideJumpBtn();
  void Parachuting_HideOpenParachuteBtn();
  void Parachuting_MiniMapClosed();
  void Parachuting_MiniMapCoverBtn();
  void Parachuting_ShowCutBtn();
  void Parachuting_ShowJumpBtn();
  void Parachuting_ShowOpenParachuteBtn();
  void PlayerCanJump();
  void PlayerCanOpen();
  void PlayerEnterFighting();
  void PlayerEnterParachute();
  void PlayerInPlane();
  void PlayerOutPlane();
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5);
  void ShowBtnByState(int32 State, bool K2Node_SwitchInteger_CmpSuccess);
  void StartJump(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
};

class UParachutingWidget: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0018001040000205 */ float AirborneAltitude;
  /* offset=0x0234 flags=0x0018001040000205 */ float AltitudeBarLength;
  /* offset=0x0238 flags=0x0018001040000205 */ float ParachuteBarLength;
  /* offset=0x023c flags=0x0018001040000205 */ float AltitudeBarYPosition;
  /* offset=0x0240 flags=0x0018001040000205 */ float HeightAndSpeedBoxXPosition;
  /* offset=0x0244 flags=0x0018000000000205 */ FString SpeedText;
  /* offset=0x0250 flags=0x001800104008020d */ UHorizontalBox* HeightAndSpeedBox;
  /* offset=0x0254 flags=0x001800104008020d */ UCanvasPanelSlot* HeightAndSpeedBoxPanelSlot;
  /* offset=0x0258 flags=0x001800104008020d */ UImage* ParachuteBarImage;
  /* offset=0x025c flags=0x001800104008020d */ UImage* HeightBarImage;
  /* offset=0x0260 flags=0x0018001040000205 */ ACharacter* AirbornePawn;
  /* offset=0x0264 flags=0x0018001040000205 */ ASTExtraPlayerController* AirborneController;
  /* offset=0x0268 flags=0x0018001040000005 */ struct FVector2D HeightAndSpeedBoxPosition;
  /* offset=0x0270 flags=0x001800104008020d */ UCanvasPanelSlot* ParachuteBarCanvasSlot;
  /* offset=0x0274 flags=0x001800104008020d */ UCanvasPanelSlot* HeightBarCanvasSlot;
  /* offset=0x0278 flags=0x0010000010080200 */ FOnSpeedValueChangeDelegate OnSpeedValueChangeDelegate;
  /* offset=0x0284 flags=0x0028081040010201 */ bool bUseAccelerationUpdating;
  /* offset=0x0288 flags=0x0028081040010201 */ float UpdateAccleratingThreshold;
  /* offset=0x028c flags=0x0028081040010201 */ float CalAcceleratingPeriod;
  /* offset=0x0290 flags=0x0028081040010201 */ bool bUseMultiFramePastUpdate;
  /* offset=0x0294 flags=0x0028081040010201 */ int32 UpdateSpeedTextFrameThreshold;
};

class UParticleEmitter: public UObject {
  /* offset=0x0020 flags=0x0018001040000201 */ FName EmitterName;
  /* offset=0x0028 flags=0x0018001040002200 */ int32 SubUVDataOffset;
  /* offset=0x002c flags=0x0018001040000201 */ uint8 EmitterRenderMode;
  /* offset=0x0030 flags=0x0010008000000208 */ TArray<UParticleLODLevel*> LODLevels;
  /* offset=0x003c flags=0x0018001000000000 */ uint8 ConvertedModules:1;
  /* offset=0x0040 flags=0x0018001040000200 */ int32 PeakActiveParticles;
  /* offset=0x0044 flags=0x0018001040000201 */ int32 InitialAllocationCount;
  /* offset=0x0048 flags=0x0018001060000200 */ float MediumDetailSpawnRateScale;
  /* offset=0x004c flags=0x0018001040000201 */ float QualityLevelSpawnRateScale;
  /* offset=0x0050 flags=0x0018001040000201 */ uint8 DetailMode;
  /* offset=0x0051 flags=0x0018001000002000 */ uint8 bIsSoloing:1;
  /* offset=0x0051 flags=0x0018001000000000 */ uint8 bCookedOut:1;
  /* offset=0x0051 flags=0x0018001000000001 */ uint8 bDisabledLODsKeepEmitterAlive:1;
  /* offset=0x0051 flags=0x0018001000000001 */ uint8 bDisableWhenInsignficant:1;
  /* offset=0x0052 flags=0x0018001040000201 */ enum EParticleSignificanceLevel SignificanceLevel;
};

class AParticleEventManager: public AActor {
};

class UParticleLODLevel: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ int32 Level;
  /* offset=0x0020 flags=0x0018001000000000 */ uint8 bEnabled:1;
  /* offset=0x0024 flags=0x001a001040080208 */ UParticleModuleRequired* RequiredModule;
  /* offset=0x0028 flags=0x0010008000000208 */ TArray<UParticleModule*> Modules;
  /* offset=0x0034 flags=0x0018001040000208 */ UParticleModuleTypeDataBase* TypeDataModule;
  /* offset=0x0038 flags=0x0018001040000208 */ UParticleModuleSpawn* SpawnModule;
  /* offset=0x003c flags=0x0018001040000208 */ UParticleModuleEventGenerator* EventGenerator;
  /* offset=0x0040 flags=0x0010000000202200 */ TArray<UParticleModuleSpawnBase*> SpawningModules;
  /* offset=0x004c flags=0x0010000000202200 */ TArray<UParticleModule*> SpawnModules;
  /* offset=0x0058 flags=0x0010000000202200 */ TArray<UParticleModule*> UpdateModules;
  /* offset=0x0064 flags=0x0010000000202200 */ TArray<UParticleModuleOrbit*> OrbitModules;
  /* offset=0x0070 flags=0x0010000000202200 */ TArray<UParticleModuleEventReceiverBase*> EventReceiverModules;
  /* offset=0x007c flags=0x0018001000000000 */ uint8 ConvertedModules:1;
  /* offset=0x0080 flags=0x0018001040000200 */ int32 PeakActiveParticles;
};

class UParticleModule: public UObject {
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSpawnModule:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bUpdateModule:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bFinalUpdateModule:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bUpdateForGPUEmitter:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bCurvesAsColor:1;
  /* offset=0x001c flags=0x0018001000000001 */ uint8 b3DDrawMode:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bSupported3DDrawMode:1;
  /* offset=0x001c flags=0x0018001000000000 */ uint8 bEnabled:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bEditable:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 LODDuplicate:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bSupportsRandomSeed:1;
  /* offset=0x001d flags=0x0018001000000000 */ uint8 bRequiresLoopingNotification:1;
  /* offset=0x001e flags=0x0018001040000200 */ uint8 LODValidity;
};

class UParticleModuleAcceleration: public UParticleModuleAccelerationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector Acceleration;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bApplyOwnerScale:1;
};

class UParticleModuleAccelerationBase: public UParticleModule {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bAlwaysInWorldSpace:1;
};

class UParticleModuleAccelerationConstant: public UParticleModuleAccelerationBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector Acceleration;
};

class UParticleModuleAccelerationDrag: public UParticleModuleAccelerationBase {
  /* offset=0x0020 flags=0x0018001060080208 */ UDistributionFloat* DragCoefficient;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat DragCoefficientRaw;
};

class UParticleModuleAccelerationDragScaleOverLife: public UParticleModuleAccelerationBase {
  /* offset=0x0020 flags=0x0018001060080208 */ UDistributionFloat* DragScale;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat DragScaleRaw;
};

class UParticleModuleAccelerationOverLifetime: public UParticleModuleAccelerationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector AccelOverLife;
};

class UParticleModuleAttractorBase: public UParticleModule {
};

class UParticleModuleAttractorLine: public UParticleModuleAttractorBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector EndPoint0;
  /* offset=0x002c flags=0x0018001040000001 */ struct FVector EndPoint1;
  /* offset=0x0038 flags=0x0010008000000001 */ struct FRawDistributionFloat Range;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat Strength;
};

class UParticleModuleAttractorParticle: public UParticleModuleAttractorBase {
  /* offset=0x0020 flags=0x0018001042000209 */ FName EmitterName;
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionFloat Range;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bStrengthByDistance:1;
  /* offset=0x0054 flags=0x0010008000000001 */ struct FRawDistributionFloat Strength;
  /* offset=0x007c flags=0x0018001000000001 */ uint8 bAffectBaseVelocity:1;
  /* offset=0x007d flags=0x0018001040000201 */ uint8 SelectionMethod;
  /* offset=0x007e flags=0x0018001000000001 */ uint8 bRenewSource:1;
  /* offset=0x007e flags=0x0018001000000001 */ uint8 bInheritSourceVel:1;
  /* offset=0x0080 flags=0x0018001040000200 */ int32 LastSelIndex;
};

class UParticleModuleAttractorPoint: public UParticleModuleAttractorBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector Position;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat Range;
  /* offset=0x0088 flags=0x0010008000000001 */ struct FRawDistributionFloat Strength;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 StrengthByDistance:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 bAffectBaseVelocity:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 bOverrideVelocity:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 bUseWorldSpacePosition:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 Positive_X:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 Positive_Y:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 Positive_Z:1;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 Negative_X:1;
  /* offset=0x00b1 flags=0x0018001000000001 */ uint8 Negative_Y:1;
  /* offset=0x00b1 flags=0x0018001000000001 */ uint8 Negative_Z:1;
};

class UParticleModuleAttractorPointGravity: public UParticleModuleAttractorBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector Position;
  /* offset=0x002c flags=0x0018001040000201 */ float Radius;
  /* offset=0x0030 flags=0x0018001060080208 */ UDistributionFloat* Strength;
  /* offset=0x0034 flags=0x0010008002000001 */ struct FRawDistributionFloat StrengthRaw;
};

class UParticleModuleBeamBase: public UParticleModule {
};

class UParticleModuleBeamModifier: public UParticleModuleBeamBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 ModifierType;
  /* offset=0x0020 flags=0x0010001000000001 */ struct FBeamModifierOptions PositionOptions;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionVector Position;
  /* offset=0x0064 flags=0x0010001000000001 */ struct FBeamModifierOptions TangentOptions;
  /* offset=0x0068 flags=0x0010008000000001 */ struct FRawDistributionVector Tangent;
  /* offset=0x00a8 flags=0x0018001000000001 */ uint8 bAbsoluteTangent:1;
  /* offset=0x00ac flags=0x0010001000000001 */ struct FBeamModifierOptions StrengthOptions;
  /* offset=0x00b0 flags=0x0010008000000001 */ struct FRawDistributionFloat Strength;
};

class UParticleModuleBeamNoise: public UParticleModuleBeamBase {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bLowFreq_Enabled:1;
  /* offset=0x0020 flags=0x0018001040000201 */ int32 Frequency;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 Frequency_LowRange;
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionVector NoiseRange;
  /* offset=0x0068 flags=0x0010008000000001 */ struct FRawDistributionFloat NoiseRangeScale;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bNRScaleEmitterTime:1;
  /* offset=0x0094 flags=0x0010008000000001 */ struct FRawDistributionVector NoiseSpeed;
  /* offset=0x00d4 flags=0x0018001000000001 */ uint8 bSmooth:1;
  /* offset=0x00d8 flags=0x0018001040000201 */ float NoiseLockRadius;
  /* offset=0x00dc flags=0x0018001000000000 */ uint8 bNoiseLock:1;
  /* offset=0x00dc flags=0x0018001000000001 */ uint8 bOscillate:1;
  /* offset=0x00e0 flags=0x0018001040000201 */ float NoiseLockTime;
  /* offset=0x00e4 flags=0x0018001040000201 */ float NoiseTension;
  /* offset=0x00e8 flags=0x0018001000000001 */ uint8 bUseNoiseTangents:1;
  /* offset=0x00ec flags=0x0010008000000001 */ struct FRawDistributionFloat NoiseTangentStrength;
  /* offset=0x0114 flags=0x0018001040000201 */ int32 NoiseTessellation;
  /* offset=0x0118 flags=0x0018001000000001 */ uint8 bTargetNoise:1;
  /* offset=0x011c flags=0x0018001040000201 */ float FrequencyDistance;
  /* offset=0x0120 flags=0x0018001000000001 */ uint8 bApplyNoiseScale:1;
  /* offset=0x0124 flags=0x0010008000000001 */ struct FRawDistributionFloat NoiseScale;
};

class UParticleModuleBeamSource: public UParticleModuleBeamBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 SourceMethod;
  /* offset=0x0020 flags=0x0018001040000201 */ FName SourceName;
  /* offset=0x0028 flags=0x0018001000000001 */ uint8 bSourceAbsolute:1;
  /* offset=0x002c flags=0x0010008000000001 */ struct FRawDistributionVector Source;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bLockSource:1;
  /* offset=0x006d flags=0x0018001040000201 */ uint8 SourceTangentMethod;
  /* offset=0x0070 flags=0x0010008000000001 */ struct FRawDistributionVector SourceTangent;
  /* offset=0x00b0 flags=0x0018001000000001 */ uint8 bLockSourceTangent:1;
  /* offset=0x00b4 flags=0x0010008000000001 */ struct FRawDistributionFloat SourceStrength;
  /* offset=0x00dc flags=0x0018001000000001 */ uint8 bLockSourceStength:1;
};

class UParticleModuleBeamTarget: public UParticleModuleBeamBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 TargetMethod;
  /* offset=0x0020 flags=0x0018001040000201 */ FName TargetName;
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionVector Target;
  /* offset=0x0068 flags=0x0018001000000001 */ uint8 bTargetAbsolute:1;
  /* offset=0x0068 flags=0x0018001000000001 */ uint8 bLockTarget:1;
  /* offset=0x0069 flags=0x0018001040000201 */ uint8 TargetTangentMethod;
  /* offset=0x006c flags=0x0010008000000001 */ struct FRawDistributionVector TargetTangent;
  /* offset=0x00ac flags=0x0018001000000001 */ uint8 bLockTargetTangent:1;
  /* offset=0x00b0 flags=0x0010008000000001 */ struct FRawDistributionFloat TargetStrength;
  /* offset=0x00d8 flags=0x0018001000000001 */ uint8 bLockTargetStength:1;
  /* offset=0x00dc flags=0x0018001040000201 */ float LockRadius;
};

class UParticleModuleCameraBase: public UParticleModule {
};

class UParticleModuleCameraOffset: public UParticleModuleCameraBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat CameraOffset;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bSpawnTimeOnly:1;
  /* offset=0x0049 flags=0x0018001040000201 */ uint8 UpdateMethod;
};

class UParticleModuleCollision: public UParticleModuleCollisionBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector DampingFactor;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionVector DampingFactorRotation;
  /* offset=0x00a0 flags=0x0010008000000001 */ struct FRawDistributionFloat MaxCollisions;
  /* offset=0x00c8 flags=0x0018001040000201 */ uint8 CollisionCompletionOption;
  /* offset=0x00cc flags=0x0010000000000201 */ TArray<uint8> CollisionTypes;
  /* offset=0x00e0 flags=0x0018001000000001 */ uint8 bApplyPhysics:1;
  /* offset=0x00e0 flags=0x0018001000000001 */ uint8 bIgnoreTriggerVolumes:1;
  /* offset=0x00e4 flags=0x0010008000000001 */ struct FRawDistributionFloat ParticleMass;
  /* offset=0x010c flags=0x0018001040000201 */ float DirScalar;
  /* offset=0x0110 flags=0x0018001000000001 */ uint8 bPawnsDoNotDecrementCount:1;
  /* offset=0x0110 flags=0x0018001000000001 */ uint8 bOnlyVerticalNormalsDecrementCount:1;
  /* offset=0x0114 flags=0x0018001040000201 */ float VerticalFudgeFactor;
  /* offset=0x0118 flags=0x0010008000000001 */ struct FRawDistributionFloat DelayAmount;
  /* offset=0x0140 flags=0x0018001000000001 */ uint8 bDropDetail:1;
  /* offset=0x0140 flags=0x0018001000000001 */ uint8 bCollideOnlyIfVisible:1;
  /* offset=0x0140 flags=0x0018001000000001 */ uint8 bIgnoreSourceActor:1;
  /* offset=0x0144 flags=0x0018001040000201 */ float MaxCollisionDistance;
};

class UParticleModuleCollisionBase: public UParticleModule {
};

class UParticleModuleCollisionGPU: public UParticleModuleCollisionBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat Resilience;
  /* offset=0x0048 flags=0x0010008000000001 */ struct FRawDistributionFloat ResilienceScaleOverLife;
  /* offset=0x0070 flags=0x0018001040000201 */ float Friction;
  /* offset=0x0074 flags=0x0018001040000201 */ float RandomSpread;
  /* offset=0x0078 flags=0x0018001040000201 */ float RandomDistribution;
  /* offset=0x007c flags=0x0018001040000201 */ float RadiusScale;
  /* offset=0x0080 flags=0x0018001040000201 */ float RadiusBias;
  /* offset=0x0084 flags=0x0018001040000201 */ uint8 Response;
  /* offset=0x0085 flags=0x0018001040000201 */ uint8 CollisionMode;
};

class UParticleModuleColor: public UParticleModuleColorBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartColor;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat StartAlpha;
  /* offset=0x0088 flags=0x0018001000000001 */ uint8 bClampAlpha:1;
};

class UParticleModuleColorBase: public UParticleModule {
};

class UParticleModuleColorOverLife: public UParticleModuleColorBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector ColorOverLife;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat AlphaOverLife;
  /* offset=0x0088 flags=0x0018001000000001 */ uint8 bClampAlpha:1;
};

class UParticleModuleColorScaleOverLife: public UParticleModuleColorBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector ColorScaleOverLife;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat AlphaScaleOverLife;
  /* offset=0x0088 flags=0x0018001000000001 */ uint8 bEmitterTime:1;
};

class UParticleModuleColor_Seeded: public UParticleModuleColor {
  /* offset=0x0090 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleEventBase: public UParticleModule {
};

class UParticleModuleEventGenerator: public UParticleModuleEventBase {
  /* offset=0x0020 flags=0x0010008002000209 */ TArray<struct FParticleEvent_GenerateInfo> Events;
};

class UParticleModuleEventReceiverBase: public UParticleModuleEventBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 EventGeneratorType;
  /* offset=0x0020 flags=0x0018001040000201 */ FName EventName;
};

class UParticleModuleEventReceiverKillParticles: public UParticleModuleEventReceiverBase {
  /* offset=0x0028 flags=0x0018001000000001 */ uint8 bStopSpawning:1;
};

class UParticleModuleEventReceiverSpawn: public UParticleModuleEventReceiverBase {
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionFloat SpawnCount;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bUseParticleTime:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bUsePSysLocation:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bInheritVelocity:1;
  /* offset=0x0054 flags=0x0010008000000001 */ struct FRawDistributionVector InheritVelocityScale;
  /* offset=0x0094 flags=0x0010000000000201 */ TArray<UPhysicalMaterial*> PhysicalMaterials;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 bBanPhysicalMaterials:1;
};

class UParticleModuleEventSendToGame: public UObject {
};

class UParticleModuleKillBase: public UParticleModule {
};

class UParticleModuleKillBox: public UParticleModuleKillBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector LowerLeftCorner;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionVector UpperRightCorner;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 bAbsolute:1;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 bKillInside:1;
  /* offset=0x00a0 flags=0x0018001000000001 */ uint8 bAxisAlignedAndFixedSize:1;
};

class UParticleModuleKillHeight: public UParticleModuleKillBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat Height;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bAbsolute:1;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bFloor:1;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bApplyPSysScale:1;
};

class UParticleModuleLifetime: public UParticleModuleLifetimeBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat LifeTime;
};

class UParticleModuleLifetimeBase: public UParticleModule {
};

class UParticleModuleLifetime_Seeded: public UParticleModuleLifetime {
  /* offset=0x0048 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleLight: public UParticleModuleLightBase {
  /* offset=0x001f flags=0x0018001040000201 */ bool bUseInverseSquaredFalloff;
  /* offset=0x0020 flags=0x0018001040000201 */ bool bAffectsTranslucency;
  /* offset=0x0021 flags=0x0018001040002201 */ bool bPreviewLightRadius;
  /* offset=0x0024 flags=0x0018001040000201 */ float SpawnFraction;
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionVector ColorScaleOverLife;
  /* offset=0x0068 flags=0x0010008000000001 */ struct FRawDistributionFloat BrightnessOverLife;
  /* offset=0x0090 flags=0x0010008000000001 */ struct FRawDistributionFloat RadiusScale;
  /* offset=0x00b8 flags=0x0010008000000001 */ struct FRawDistributionFloat LightExponent;
  /* offset=0x00e0 flags=0x0010041000000015 */ struct FLightingChannels LightingChannels;
  /* offset=0x00e4 flags=0x0018001240000215 */ float VolumetricScatteringIntensity;
  /* offset=0x00e8 flags=0x0018001040000201 */ bool bHighQualityLights;
  /* offset=0x00e9 flags=0x0018001040000201 */ bool bShadowCastingLights;
};

class UParticleModuleLightBase: public UParticleModule {
};

class UParticleModuleLight_Seeded: public UParticleModuleLight {
  /* offset=0x00f0 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleLocation: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartLocation;
  /* offset=0x0060 flags=0x0018001040000201 */ float DistributeOverNPoints;
  /* offset=0x0064 flags=0x0018001040000201 */ float DistributeThreshold;
};

class UParticleModuleLocationBase: public UParticleModule {
};

class UParticleModuleLocationBoneSocket: public UParticleModuleLocationBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 SourceType;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector UniversalOffset;
  /* offset=0x002c flags=0x0010000000000201 */ TArray<struct FLocationBoneSocketInfo> SourceLocations;
  /* offset=0x0038 flags=0x0018001040000201 */ uint8 SelectionMethod;
  /* offset=0x0039 flags=0x0018001000000001 */ uint8 bUpdatePositionEachFrame:1;
  /* offset=0x0039 flags=0x0018001000000001 */ uint8 bOrientMeshEmitters:1;
  /* offset=0x0039 flags=0x0018001000000001 */ uint8 bInheritBoneVelocity:1;
  /* offset=0x003c flags=0x0018001040000201 */ float InheritVelocityScale;
  /* offset=0x0040 flags=0x0018001040000201 */ FName SkelMeshActorParamName;
  /* offset=0x0048 flags=0x0018001040000201 */ int32 NumPreSelectedIndices;
};

class UParticleModuleLocationDirect: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector Location;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionVector LocationOffset;
  /* offset=0x00a0 flags=0x0010008000000001 */ struct FRawDistributionVector ScaleFactor;
  /* offset=0x00e0 flags=0x0010008000000001 */ struct FRawDistributionVector Direction;
};

class UParticleModuleLocationEmitter: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0018001042000209 */ FName EmitterName;
  /* offset=0x0028 flags=0x0018001040000201 */ uint8 SelectionMethod;
  /* offset=0x0029 flags=0x0018001000000001 */ uint8 InheritSourceVelocity:1;
  /* offset=0x002c flags=0x0018001040000201 */ float InheritSourceVelocityScale;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bInheritSourceRotation:1;
  /* offset=0x0034 flags=0x0018001040000201 */ float InheritSourceRotationScale;
};

class UParticleModuleLocationEmitterDirect: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0018001042000209 */ FName EmitterName;
};

class UParticleModuleLocationPrimitiveBase: public UParticleModuleLocationBase {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Positive_X:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Positive_Y:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Positive_Z:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Negative_X:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Negative_Y:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Negative_Z:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 SurfaceOnly:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 Velocity:1;
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat VelocityScale;
  /* offset=0x0048 flags=0x0010008000000001 */ struct FRawDistributionVector StartLocation;
};

class UParticleModuleLocationPrimitiveCylinder: public UParticleModuleLocationPrimitiveBase {
  /* offset=0x0088 flags=0x0018001000000001 */ uint8 RadialVelocity:1;
  /* offset=0x008c flags=0x0010008000000001 */ struct FRawDistributionFloat StartRadius;
  /* offset=0x00b4 flags=0x0010008000000001 */ struct FRawDistributionFloat StartHeight;
  /* offset=0x00dc flags=0x0018001040000201 */ uint8 HeightAxis;
};

class UParticleModuleLocationPrimitiveCylinder_Seeded: public UParticleModuleLocationPrimitiveCylinder {
  /* offset=0x00e0 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleLocationPrimitiveSphere: public UParticleModuleLocationPrimitiveBase {
  /* offset=0x0088 flags=0x0010008000000001 */ struct FRawDistributionFloat StartRadius;
};

class UParticleModuleLocationPrimitiveSphere_Seeded: public UParticleModuleLocationPrimitiveSphere {
  /* offset=0x00b0 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleLocationPrimitiveTriangle: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartOffset;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat Height;
  /* offset=0x0088 flags=0x0010008000000001 */ struct FRawDistributionFloat Angle;
  /* offset=0x00b0 flags=0x0010008000000001 */ struct FRawDistributionFloat Thickness;
};

class UParticleModuleLocationSkelVertSurface: public UParticleModuleLocationBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 SourceType;
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector UniversalOffset;
  /* offset=0x002c flags=0x0018001000000001 */ uint8 bUpdatePositionEachFrame:1;
  /* offset=0x002c flags=0x0018001000000001 */ uint8 bOrientMeshEmitters:1;
  /* offset=0x002c flags=0x0018001000000001 */ uint8 bInheritBoneVelocity:1;
  /* offset=0x0030 flags=0x0018001040000201 */ float InheritVelocityScale;
  /* offset=0x0038 flags=0x0018001040000201 */ FName SkelMeshActorParamName;
  /* offset=0x0040 flags=0x0010000000000201 */ TArray<FName> ValidAssociatedBones;
  /* offset=0x004c flags=0x0018001000000001 */ uint8 bEnforceNormalCheck:1;
  /* offset=0x0050 flags=0x0018001040000001 */ struct FVector NormalToCompare;
  /* offset=0x005c flags=0x0018001040000201 */ float NormalCheckToleranceDegrees;
  /* offset=0x0060 flags=0x0018001040000200 */ float NormalCheckTolerance;
  /* offset=0x0064 flags=0x0010000000000201 */ TArray<int32> ValidMaterialIndices;
  /* offset=0x0070 flags=0x0018001000000001 */ uint8 bInheritVertexColor:1;
  /* offset=0x0070 flags=0x0018001000000001 */ uint8 bInheritUV:1;
  /* offset=0x0074 flags=0x0018001040000201 */ uint32 InheritUVChannel;
};

class UParticleModuleLocationWorldOffset: public UParticleModuleLocation {
};

class UParticleModuleLocationWorldOffset_Seeded: public UParticleModuleLocationWorldOffset {
  /* offset=0x0068 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleLocation_Seeded: public UParticleModuleLocation {
  /* offset=0x0068 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleMaterialBase: public UParticleModule {
};

class UParticleModuleMeshMaterial: public UParticleModuleMaterialBase {
  /* offset=0x0020 flags=0x0010000000000201 */ TArray<UMaterialInterface*> MeshMaterials;
};

class UParticleModuleMeshRotation: public UParticleModuleRotationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartRotation;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bInheritParent:1;
};

class UParticleModuleMeshRotationRate: public UParticleModuleRotationRateBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartRotationRate;
};

class UParticleModuleMeshRotationRateMultiplyLife: public UParticleModuleRotationRateBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector LifeMultiplier;
};

class UParticleModuleMeshRotationRateOverLife: public UParticleModuleRotationRateBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector RotRate;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bScaleRotRate:1;
};

class UParticleModuleMeshRotationRate_Seeded: public UParticleModuleMeshRotationRate {
  /* offset=0x0060 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleMeshRotation_Seeded: public UParticleModuleMeshRotation {
  /* offset=0x0068 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleOrbit: public UParticleModuleOrbitBase {
  /* offset=0x0020 flags=0x0018001040000201 */ uint8 ChainMode;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionVector OffsetAmount;
  /* offset=0x0064 flags=0x0010001000000001 */ struct FOrbitOptions OffsetOptions;
  /* offset=0x0068 flags=0x0010008000000001 */ struct FRawDistributionVector RotationAmount;
  /* offset=0x00a8 flags=0x0010001000000001 */ struct FOrbitOptions RotationOptions;
  /* offset=0x00ac flags=0x0010008000000001 */ struct FRawDistributionVector RotationRateAmount;
  /* offset=0x00ec flags=0x0010001000000001 */ struct FOrbitOptions RotationRateOptions;
};

class UParticleModuleOrbitBase: public UParticleModule {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bUseEmitterTime:1;
};

class UParticleModuleOrientationAxisLock: public UParticleModuleOrientationBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 LockAxisFlags;
};

class UParticleModuleOrientationBase: public UParticleModule {
};

class UParticleModuleParameterBase: public UParticleModule {
};

class UParticleModuleParameterDynamic: public UParticleModuleParameterBase {
  /* offset=0x0020 flags=0x0010008000000241 */ TArray<struct FEmitterDynamicParameter> DynamicParams;
  /* offset=0x002c flags=0x0018001040000200 */ int32 UpdateFlags;
  /* offset=0x0030 flags=0x0018001000000000 */ uint8 bUsesVelocity:1;
};

class UParticleModuleParameterDynamic_Seeded: public UParticleModuleParameterDynamic {
  /* offset=0x0038 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModulePivotOffset: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector2D PivotOffset;
};

class UParticleModuleRequired: public UParticleModule {
  /* offset=0x0020 flags=0x0018001040000201 */ UMaterialInterface* Material;
  /* offset=0x0024 flags=0x0018001040000001 */ struct FVector EmitterOrigin;
  /* offset=0x0030 flags=0x0010001040000001 */ struct FRotator EmitterRotation;
  /* offset=0x003c flags=0x0018001040000201 */ uint8 ScreenAlignment;
  /* offset=0x0040 flags=0x0018001040000201 */ float MinFacingCameraBlendDistance;
  /* offset=0x0044 flags=0x0018001040000201 */ float MaxFacingCameraBlendDistance;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bUseLocalSpace:1;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bKillOnDeactivate:1;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 bKillOnCompleted:1;
  /* offset=0x0049 flags=0x0018001040000201 */ uint8 SortMode;
  /* offset=0x004a flags=0x0018001000000001 */ uint8 bUseLegacyEmitterTime:1;
  /* offset=0x004a flags=0x0018001000000001 */ uint8 bRemoveHMDRoll:1;
  /* offset=0x004c flags=0x0018001040000201 */ float EmitterDuration;
  /* offset=0x0050 flags=0x0018001040000201 */ float EmitterDurationLow;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bEmitterDurationUseRange:1;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bDurationRecalcEachLoop:1;
  /* offset=0x0058 flags=0x0018001040000201 */ int32 EmitterLoops;
  /* offset=0x005c flags=0x0010008000000000 */ struct FRawDistributionFloat SpawnRate;
  /* offset=0x0084 flags=0x0018001040000200 */ uint8 ParticleBurstMethod;
  /* offset=0x0088 flags=0x0010000002000208 */ TArray<struct FParticleBurst> BurstList;
  /* offset=0x0094 flags=0x0018001040000201 */ float EmitterDelay;
  /* offset=0x0098 flags=0x0018001040000201 */ float EmitterDelayLow;
  /* offset=0x009c flags=0x0018001000000001 */ uint8 bEmitterDelayUseRange:1;
  /* offset=0x009c flags=0x0018001000000001 */ uint8 bDelayFirstLoopOnly:1;
  /* offset=0x009d flags=0x0018001040000201 */ uint8 InterpolationMethod;
  /* offset=0x00a0 flags=0x0018001040000201 */ int32 SubImages_Horizontal;
  /* offset=0x00a4 flags=0x0018001040000201 */ int32 SubImages_Vertical;
  /* offset=0x00a8 flags=0x0018001000000001 */ uint8 bScaleUV:1;
  /* offset=0x00ac flags=0x0018001040000200 */ float RandomImageTime;
  /* offset=0x00b0 flags=0x0018001040000201 */ int32 RandomImageChanges;
  /* offset=0x00b4 flags=0x0018001000000001 */ uint8 bOverrideSystemMacroUV:1;
  /* offset=0x00b8 flags=0x0018001040000001 */ struct FVector MacroUVPosition;
  /* offset=0x00c4 flags=0x0018001040000201 */ float MacroUVRadius;
  /* offset=0x00c8 flags=0x0018001000000001 */ uint8 bUseMaxDrawCount:1;
  /* offset=0x00cc flags=0x0018001040000201 */ int32 MaxDrawCount;
  /* offset=0x00d0 flags=0x0018001040000201 */ enum EParticleUVFlipMode UVFlippingMode;
  /* offset=0x00d4 flags=0x0018001040000201 */ UTexture2D* CutoutTexture;
  /* offset=0x00d8 flags=0x0018001040000201 */ uint8 BoundingMode;
  /* offset=0x00d9 flags=0x0018001040000201 */ uint8 OpacitySourceMode;
  /* offset=0x00dc flags=0x0018001040000201 */ float AlphaThreshold;
  /* offset=0x00e0 flags=0x0018001040000201 */ uint8 EmitterNormalsMode;
  /* offset=0x00e4 flags=0x0018001040000001 */ struct FVector NormalsSphereCenter;
  /* offset=0x00f0 flags=0x0018001040000001 */ struct FVector NormalsCylinderDirection;
  /* offset=0x00fc flags=0x0018001000000001 */ uint8 bOrbitModuleAffectsVelocityAlignment:1;
  /* offset=0x0100 flags=0x0010000000000201 */ TArray<FName> NamedMaterialOverrides;
};

class UParticleModuleRotation: public UParticleModuleRotationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat StartRotation;
};

class UParticleModuleRotationBase: public UParticleModule {
};

class UParticleModuleRotationOverLifetime: public UParticleModuleRotationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat RotationOverLife;
  /* offset=0x0048 flags=0x0018001000000001 */ uint8 Scale:1;
};

class UParticleModuleRotationRate: public UParticleModuleRotationRateBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat StartRotationRate;
};

class UParticleModuleRotationRateBase: public UParticleModule {
};

class UParticleModuleRotationRateMultiplyLife: public UParticleModuleRotationRateBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat LifeMultiplier;
};

class UParticleModuleRotationRate_Seeded: public UParticleModuleRotationRate {
  /* offset=0x0048 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleRotation_Seeded: public UParticleModuleRotation {
  /* offset=0x0048 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleSize: public UParticleModuleSizeBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartSize;
};

class UParticleModuleSizeBase: public UParticleModule {
};

class UParticleModuleSizeMultiplyLife: public UParticleModuleSizeBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector LifeMultiplier;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 MultiplyX:1;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 MultiplyY:1;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 MultiplyZ:1;
};

class UParticleModuleSizeScale: public UParticleModuleSizeBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector SizeScale;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 EnableX:1;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 EnableY:1;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 EnableZ:1;
};

class UParticleModuleSizeScaleBySpeed: public UParticleModuleSizeBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector2D SpeedScale;
  /* offset=0x0028 flags=0x0018001040000001 */ struct FVector2D MaxScale;
};

class UParticleModuleSize_Seeded: public UParticleModuleSize {
  /* offset=0x0060 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleModuleSourceMovement: public UParticleModuleLocationBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector SourceMovementScale;
};

class UParticleModuleSpawn: public UParticleModuleSpawnBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat Rate;
  /* offset=0x0048 flags=0x0010008000000001 */ struct FRawDistributionFloat RateScale;
  /* offset=0x0070 flags=0x0018001040000201 */ uint8 ParticleBurstMethod;
  /* offset=0x0074 flags=0x0010000002000209 */ TArray<struct FParticleBurst> BurstList;
  /* offset=0x0080 flags=0x0010008000000001 */ struct FRawDistributionFloat BurstScale;
  /* offset=0x00a8 flags=0x0018001000000001 */ uint8 bApplyGlobalSpawnRateScale:1;
};

class UParticleModuleSpawnBase: public UParticleModule {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bProcessSpawnRate:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bProcessBurstList:1;
};

class UParticleModuleSpawnPerUnit: public UParticleModuleSpawnBase {
  /* offset=0x0020 flags=0x0018001040000201 */ float UnitScalar;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat SpawnPerUnit;
  /* offset=0x004c flags=0x0018001000000001 */ uint8 bIgnoreSpawnRateWhenMoving:1;
  /* offset=0x0050 flags=0x0018001040000201 */ float MovementTolerance;
  /* offset=0x0054 flags=0x0018001040000201 */ float MaxFrameDistance;
  /* offset=0x0058 flags=0x0018001000000001 */ uint8 bIgnoreMovementAlongX:1;
  /* offset=0x0058 flags=0x0018001000000001 */ uint8 bIgnoreMovementAlongY:1;
  /* offset=0x0058 flags=0x0018001000000001 */ uint8 bIgnoreMovementAlongZ:1;
};

class UParticleModuleSubUV: public UParticleModuleSubUVBase {
  /* offset=0x0020 flags=0x0018001040000200 */ USubUVAnimation* Animation;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat SubImageIndex;
  /* offset=0x004c flags=0x0018001000000001 */ uint8 bUseRealTime:1;
};

class UParticleModuleSubUVBase: public UParticleModule {
};

class UParticleModuleSubUVMovie: public UParticleModuleSubUV {
  /* offset=0x004d flags=0x0018001000000001 */ uint8 bUseEmitterTime:1;
  /* offset=0x0050 flags=0x0010008000000001 */ struct FRawDistributionFloat FrameRate;
  /* offset=0x0078 flags=0x0018001040000201 */ int32 StartingFrame;
};

class UParticleModuleTrailBase: public UParticleModule {
};

class UParticleModuleTrailSource: public UParticleModuleTrailBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 SourceMethod;
  /* offset=0x0020 flags=0x0018001040000201 */ FName SourceName;
  /* offset=0x0028 flags=0x0010008000000001 */ struct FRawDistributionFloat SourceStrength;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bLockSourceStength:1;
  /* offset=0x0054 flags=0x0018001040000201 */ int32 SourceOffsetCount;
  /* offset=0x0058 flags=0x0010000000000241 */ TArray<struct FVector> SourceOffsetDefaults;
  /* offset=0x0064 flags=0x0018001040000201 */ uint8 SelectionMethod;
  /* offset=0x0065 flags=0x0018001000000001 */ uint8 bInheritRotation:1;
};

class UParticleModuleTypeDataAnimTrail: public UParticleModuleTypeDataBase {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bDeadTrailsOnDeactivate:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bEnablePreviousTangentRecalculation:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bTangentRecalculationEveryFrame:1;
  /* offset=0x0020 flags=0x0018001040000201 */ float TilingDistance;
  /* offset=0x0024 flags=0x0018001040000201 */ float DistanceTessellationStepSize;
  /* offset=0x0028 flags=0x0018001040000201 */ float TangentTessellationStepSize;
  /* offset=0x002c flags=0x0018001040000201 */ float WidthTessellationStepSize;
};

class UParticleModuleTypeDataBase: public UParticleModule {
};

class UParticleModuleTypeDataBeam2: public UParticleModuleTypeDataBase {
  /* offset=0x001f flags=0x0018001040000201 */ uint8 BeamMethod;
  /* offset=0x0020 flags=0x0018001040000201 */ int32 TextureTile;
  /* offset=0x0024 flags=0x0018001040000201 */ float TextureTileDistance;
  /* offset=0x0028 flags=0x0018001040000201 */ int32 Sheets;
  /* offset=0x002c flags=0x0018001040000201 */ int32 MaxBeamCount;
  /* offset=0x0030 flags=0x0018001040000201 */ float Speed;
  /* offset=0x0034 flags=0x0018001040000201 */ int32 InterpolationPoints;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bAlwaysOn:1;
  /* offset=0x003c flags=0x0018001040000201 */ int32 UpVectorStepSize;
  /* offset=0x0040 flags=0x0018001040000201 */ FName BranchParentName;
  /* offset=0x0048 flags=0x0010008000000001 */ struct FRawDistributionFloat Distance;
  /* offset=0x0070 flags=0x0018001040000201 */ uint8 TaperMethod;
  /* offset=0x0074 flags=0x0010008000000001 */ struct FRawDistributionFloat TaperFactor;
  /* offset=0x009c flags=0x0010008000000001 */ struct FRawDistributionFloat TaperScale;
  /* offset=0x00c4 flags=0x0018001000000001 */ uint8 RenderGeometry:1;
  /* offset=0x00c4 flags=0x0018001000000001 */ uint8 RenderDirectLine:1;
  /* offset=0x00c4 flags=0x0018001000000001 */ uint8 RenderLines:1;
  /* offset=0x00c4 flags=0x0018001000000001 */ uint8 RenderTessellation:1;
};

class UParticleModuleTypeDataGpu: public UParticleModuleTypeDataBase {
  /* offset=0x0020 flags=0x0010008000000000 */ struct FGPUSpriteEmitterInfo EmitterInfo;
  /* offset=0x0250 flags=0x0010000000000000 */ struct FGPUSpriteResourceData ResourceData;
  /* offset=0x03b0 flags=0x0018001040000201 */ float CameraMotionBlurAmount;
  /* offset=0x03b4 flags=0x0018001000000001 */ uint8 bClearExistingParticlesOnInit:1;
};

class UParticleModuleTypeDataMesh: public UParticleModuleTypeDataBase {
  /* offset=0x0020 flags=0x0018001040000201 */ UStaticMesh* Mesh;
  /* offset=0x0024 flags=0x0018001000000000 */ uint8 CastShadows:1;
  /* offset=0x0024 flags=0x0018001000000000 */ uint8 DoCollisions:1;
  /* offset=0x0025 flags=0x0018001040000201 */ uint8 MeshAlignment;
  /* offset=0x0026 flags=0x0018001000000001 */ uint8 bOverrideMaterial:1;
  /* offset=0x0026 flags=0x0018001000000001 */ uint8 bOverrideDefaultMotionBlurSettings:1;
  /* offset=0x0026 flags=0x0018001000000001 */ uint8 bEnableMotionBlur:1;
  /* offset=0x0028 flags=0x0018001060000200 */ float Pitch;
  /* offset=0x002c flags=0x0018001060000200 */ float Roll;
  /* offset=0x0030 flags=0x0018001060000200 */ float Yaw;
  /* offset=0x0034 flags=0x0010008000000001 */ struct FRawDistributionVector RollPitchYawRange;
  /* offset=0x007c flags=0x0018001040000201 */ uint8 AxisLockOption;
  /* offset=0x007d flags=0x0018001000000001 */ uint8 bCameraFacing:1;
  /* offset=0x007e flags=0x0018001060000200 */ uint8 CameraFacingUpAxisOption;
  /* offset=0x007f flags=0x0018001040000201 */ uint8 CameraFacingOption;
  /* offset=0x0080 flags=0x0018001000000001 */ uint8 bApplyParticleRotationAsSpin:1;
  /* offset=0x0080 flags=0x0018001000000001 */ uint8 bFaceCameraDirectionRatherThanPosition:1;
  /* offset=0x0080 flags=0x0018001000000001 */ uint8 bCollisionsConsiderPartilceSize:1;
};

class UParticleModuleTypeDataRibbon: public UParticleModuleTypeDataBase {
  /* offset=0x0020 flags=0x0018001040000200 */ int32 MaxTessellationBetweenParticles;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 SheetsPerTrail;
  /* offset=0x0028 flags=0x0018001040000201 */ int32 MaxTrailCount;
  /* offset=0x002c flags=0x0018001040000201 */ int32 MaxParticleInTrailCount;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bDeadTrailsOnDeactivate:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bDeadTrailsOnSourceLoss:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bClipSourceSegement:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bEnablePreviousTangentRecalculation:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bTangentRecalculationEveryFrame:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bSpawnInitialParticle:1;
  /* offset=0x0031 flags=0x0018001040000201 */ uint8 RenderAxis;
  /* offset=0x0034 flags=0x0018001040000201 */ float TangentSpawningScalar;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bRenderGeometry:1;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bRenderSpawnPoints:1;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bRenderTangents:1;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bRenderTessellation:1;
  /* offset=0x003c flags=0x0018001040000201 */ float TilingDistance;
  /* offset=0x0040 flags=0x0018001040000201 */ float DistanceTessellationStepSize;
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bEnableTangentDiffInterpScale:1;
  /* offset=0x0048 flags=0x0018001040000201 */ float TangentTessellationScalar;
};

class UParticleModuleVectorFieldBase: public UParticleModule {
};

class UParticleModuleVectorFieldGlobal: public UParticleModuleVectorFieldBase {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bOverrideGlobalVectorFieldTightness:1;
  /* offset=0x0020 flags=0x0018001040000201 */ float GlobalVectorFieldScale;
  /* offset=0x0024 flags=0x0018001040000201 */ float GlobalVectorFieldTightness;
};

class UParticleModuleVectorFieldLocal: public UParticleModuleVectorFieldBase {
  /* offset=0x0020 flags=0x0018001040000201 */ UVectorField* VectorField;
  /* offset=0x0024 flags=0x0018001040000001 */ struct FVector RelativeTranslation;
  /* offset=0x0030 flags=0x0010001040000001 */ struct FRotator RelativeRotation;
  /* offset=0x003c flags=0x0018001040000001 */ struct FVector RelativeScale3D;
  /* offset=0x0048 flags=0x0018001040000201 */ float Intensity;
  /* offset=0x004c flags=0x0018001040000201 */ float Tightness;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bIgnoreComponentTransform:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bTileX:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bTileY:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bTileZ:1;
  /* offset=0x0050 flags=0x0018001000000001 */ uint8 bUseFixDT:1;
};

class UParticleModuleVectorFieldRotation: public UParticleModuleVectorFieldBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector MinInitialRotation;
  /* offset=0x002c flags=0x0018001040000001 */ struct FVector MaxInitialRotation;
};

class UParticleModuleVectorFieldRotationRate: public UParticleModuleVectorFieldBase {
  /* offset=0x0020 flags=0x0018001040000001 */ struct FVector RotationRate;
};

class UParticleModuleVectorFieldScale: public UParticleModuleVectorFieldBase {
  /* offset=0x0020 flags=0x0018001060080208 */ UDistributionFloat* VectorFieldScale;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat VectorFieldScaleRaw;
};

class UParticleModuleVectorFieldScaleOverLife: public UParticleModuleVectorFieldBase {
  /* offset=0x0020 flags=0x0018001060080208 */ UDistributionFloat* VectorFieldScaleOverLife;
  /* offset=0x0024 flags=0x0010008000000001 */ struct FRawDistributionFloat VectorFieldScaleOverLifeRaw;
};

class UParticleModuleVelocity: public UParticleModuleVelocityBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector StartVelocity;
  /* offset=0x0060 flags=0x0010008000000001 */ struct FRawDistributionFloat StartVelocityRadial;
};

class UParticleModuleVelocityBase: public UParticleModule {
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bInWorldSpace:1;
  /* offset=0x001f flags=0x0018001000000001 */ uint8 bApplyOwnerScale:1;
};

class UParticleModuleVelocityCone: public UParticleModuleVelocityBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionFloat Angle;
  /* offset=0x0048 flags=0x0010008000000001 */ struct FRawDistributionFloat Velocity;
  /* offset=0x0070 flags=0x0018001040000001 */ struct FVector Direction;
};

class UParticleModuleVelocityInheritParent: public UParticleModuleVelocityBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector Scale;
};

class UParticleModuleVelocityOverLifetime: public UParticleModuleVelocityBase {
  /* offset=0x0020 flags=0x0010008000000001 */ struct FRawDistributionVector VelOverLife;
  /* offset=0x0060 flags=0x0018001000000009 */ uint8 Absolute:1;
};

class UParticleModuleVelocity_Seeded: public UParticleModuleVelocity {
  /* offset=0x0088 flags=0x0010000000000001 */ struct FParticleRandomSeedInfo RandomSeedInfo;
};

class UParticleSpriteEmitter: public UParticleEmitter {
};

class UParticleSystem: public UObject {
  /* offset=0x001c flags=0x0018011040000201 */ uint8 SystemUpdateMode;
  /* offset=0x0020 flags=0x0018001040000201 */ float UpdateTime_FPS;
  /* offset=0x0024 flags=0x0018001040000200 */ float UpdateTime_Delta;
  /* offset=0x0028 flags=0x0018001040000201 */ float WarmupTime;
  /* offset=0x002c flags=0x0018001040000201 */ float WarmupTickRate;
  /* offset=0x0030 flags=0x0010008000000208 */ TArray<UParticleEmitter*> Emitters;
  /* offset=0x003c flags=0x0018001040082208 */ UParticleSystemComponent* PreviewComponent;
  /* offset=0x0040 flags=0x0018001040000208 */ UInterpCurveEdSetup* CurveEdSetup;
  /* offset=0x0044 flags=0x0018001000000001 */ uint8 bOrientZAxisTowardCamera:1;
  /* offset=0x0048 flags=0x0018011040000201 */ float LODDistanceCheckTime;
  /* offset=0x004c flags=0x0018001040000201 */ uint8 LODMethod;
  /* offset=0x0050 flags=0x0010000000000241 */ TArray<float> LODDistances;
  /* offset=0x005c flags=0x0018001000000000 */ uint8 bRegenerateLODDuplicate:1;
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<struct FParticleSystemLOD> LODSettings;
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bUseFixedRelativeBoundingBox:1;
  /* offset=0x0070 flags=0x0010001040000001 */ struct FBox FixedRelativeBoundingBox;
  /* offset=0x008c flags=0x0018001040000201 */ float SecondsBeforeInactive;
  /* offset=0x0090 flags=0x0018001000000000 */ uint8 bShouldResetPeakCounts:1;
  /* offset=0x0090 flags=0x0018001000002000 */ uint8 bHasPhysics:1;
  /* offset=0x0090 flags=0x0018001000000001 */ uint8 bUseRealtimeThumbnail:1;
  /* offset=0x0090 flags=0x0018001000000000 */ uint8 ThumbnailImageOutOfDate:1;
  /* offset=0x0094 flags=0x0018011040000201 */ float Delay;
  /* offset=0x0098 flags=0x0018001040000201 */ float DelayLow;
  /* offset=0x009c flags=0x0018001000000001 */ uint8 bUseDelayRange:1;
  /* offset=0x009d flags=0x0018001040000201 */ bool bAutoDeactivate;
  /* offset=0x00a0 flags=0x0018001040000201 */ uint32 MinTimeBetweenTicks;
  /* offset=0x00a4 flags=0x0018001040000201 */ enum EParticleSystemInsignificanceReaction InsignificantReaction;
  /* offset=0x00a8 flags=0x0018001040000201 */ float InsignificanceDelay;
  /* offset=0x00ac flags=0x0018001040000201 */ enum EParticleSignificanceLevel MaxSignificanceLevel;
  /* offset=0x00b0 flags=0x0018001040000001 */ struct FVector MacroUVPosition;
  /* offset=0x00bc flags=0x0018001040000201 */ float MacroUVRadius;
  /* offset=0x00c0 flags=0x0018001040000201 */ uint8 OcclusionBoundsMethod;
  /* offset=0x00c4 flags=0x0010001040000001 */ struct FBox CustomOcclusionBounds;
  /* offset=0x00e0 flags=0x0010000000002200 */ TArray<struct FLODSoloTrack> SoloTracking;
  /* offset=0x00ec flags=0x0010000000000201 */ TArray<struct FNamedEmitterMaterial> NamedMaterialSlots;

  bool ContainsEmitterType(UClass<UObject>* TypeData);
};

class UParticleSystemComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000215 */ UParticleSystem* Template;
  /* offset=0x05c4 flags=0x0010000000202200 */ TArray<UMaterialInterface*> EmitterMaterials;
  /* offset=0x05d0 flags=0x0010008000202208 */ TArray<USkeletalMeshComponent*> SkelMeshComponents;
  /* offset=0x05dc flags=0x0018001000000005 */ uint8 bResetOnDetach:1;
  /* offset=0x05dd flags=0x0018001000000000 */ uint8 bUpdateOnDedicatedServer:1;
  /* offset=0x05dd flags=0x0018041000000005 */ uint8 bAllowRecycling:1;
  /* offset=0x05dd flags=0x0018001000000015 */ uint8 bAutoManageAttachment:1;
  /* offset=0x05dd flags=0x0018001000000000 */ uint8 bWarmingUp:1;
  /* offset=0x05de flags=0x0018001000000005 */ uint8 bOverrideLODMethod:1;
  /* offset=0x05de flags=0x0018001000000000 */ uint8 bSkipUpdateDynamicDataDuringTick:1;
  /* offset=0x05e0 flags=0x0018001040000205 */ uint8 LODMethod;
  /* offset=0x05e1 flags=0x0018001040000200 */ enum EParticleSignificanceLevel RequiredSignificance;
  /* offset=0x05e4 flags=0x0010000000000205 */ TArray<struct FParticleSysParam> InstanceParameters;
  /* offset=0x05f0 flags=0x0010000010080200 */ FParticleSpawnSignature OnParticleSpawn;
  /* offset=0x05fc flags=0x0010000010080200 */ FParticleBurstSignature OnParticleBurst;
  /* offset=0x0608 flags=0x0010000010080200 */ FParticleDeathSignature OnParticleDeath;
  /* offset=0x0614 flags=0x0010000010080200 */ FParticleCollisionSignature OnParticleCollide;
  /* offset=0x0620 flags=0x0018001040000000 */ struct FVector OldPosition;
  /* offset=0x062c flags=0x0018001040000000 */ struct FVector PartSysVelocity;
  /* offset=0x0638 flags=0x0018001040000200 */ float WarmupTime;
  /* offset=0x063c flags=0x0018001040000200 */ float WarmupTickRate;
  /* offset=0x0644 flags=0x0018001040000205 */ float SecondsBeforeInactive;
  /* offset=0x064c flags=0x0018001040000200 */ float MaxTimeBeforeForceUpdateTransform;
  /* offset=0x066c flags=0x0010000000000200 */ TArray<UParticleSystemReplay*> ReplayClips;
  /* offset=0x0680 flags=0x0018001040000205 */ float CustomTimeDilation;
  /* offset=0x06c4 flags=0x001c0010400a0a0d */ USceneComponent* AutoAttachParent;
  /* offset=0x06d0 flags=0x0018001040000205 */ FName AutoAttachSocketName;
  /* offset=0x06d8 flags=0x0018001040000205 */ enum EAttachmentRule AutoAttachLocationRule;
  /* offset=0x06d9 flags=0x0018001040000205 */ enum EAttachmentRule AutoAttachRotationRule;
  /* offset=0x06da flags=0x0018001040000205 */ enum EAttachmentRule AutoAttachScaleRule;
  /* offset=0x0704 flags=0x0010000010080200 */ FOnSystemFinished OnSystemFinished;

  void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, uint8 InWidthMode, float InWidth);
  UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface* SourceMaterial);
  void EndTrails();
  void GenerateParticleEvent(FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity);
  bool GetBeamEndPoint(int32 EmitterIndex, struct FVector OutEndPoint);
  bool GetBeamSourcePoint(int32 EmitterIndex, int32 SourceIndex, struct FVector OutSourcePoint);
  bool GetBeamSourceStrength(int32 EmitterIndex, int32 SourceIndex, float OutSourceStrength);
  bool GetBeamSourceTangent(int32 EmitterIndex, int32 SourceIndex, struct FVector OutTangentPoint);
  bool GetBeamTargetPoint(int32 EmitterIndex, int32 TargetIndex, struct FVector OutTargetPoint);
  bool GetBeamTargetStrength(int32 EmitterIndex, int32 TargetIndex, float OutTargetStrength);
  bool GetBeamTargetTangent(int32 EmitterIndex, int32 TargetIndex, struct FVector OutTangentPoint);
  UMaterialInterface* GetNamedMaterial(FName InName);
  int32 GetNumActiveParticles();
  void SetActorParameter(FName ParameterName, AActor* Param);
  void SetAutoAttachParams(USceneComponent* Parent, FName SocketName, uint8 LocationType);
  void SetAutoAttachmentParameters(USceneComponent* Parent, FName SocketName, enum EAttachmentRule LocationRule, enum EAttachmentRule RotationRule, enum EAttachmentRule ScaleRule);
  void SetBeamEndPoint(int32 EmitterIndex, struct FVector NewEndPoint);
  void SetBeamSourcePoint(int32 EmitterIndex, struct FVector NewSourcePoint, int32 SourceIndex);
  void SetBeamSourceStrength(int32 EmitterIndex, float NewSourceStrength, int32 SourceIndex);
  void SetBeamSourceTangent(int32 EmitterIndex, struct FVector NewTangentPoint, int32 SourceIndex);
  void SetBeamTargetPoint(int32 EmitterIndex, struct FVector NewTargetPoint, int32 TargetIndex);
  void SetBeamTargetStrength(int32 EmitterIndex, float NewTargetStrength, int32 TargetIndex);
  void SetBeamTargetTangent(int32 EmitterIndex, struct FVector NewTangentPoint, int32 TargetIndex);
  void SetColorParameter(FName ParameterName, struct FLinearColor Param);
  void SetEmitterEnable(FName EmitterName, bool bNewEnableState);
  void SetFloatParameter(FName ParameterName, float Param);
  void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param);
  void SetTemplate(UParticleSystem* NewTemplate);
  void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, uint8 InWidthMode, float InWidth);
  void SetVectorParameter(FName ParameterName, struct FVector Param);
};

class UParticleSystemReplay: public UObject {
  /* offset=0x001c flags=0x0018001040202201 */ int32 ClipIDNumber;
};

class APartyBeaconClient: public AOnlineBeaconClient {
  /* offset=0x0400 flags=0x0028080000000200 */ FString DestSessionId;
  /* offset=0x040c flags=0x0020080000000000 */ struct FPartyReservation PendingReservation;
  /* offset=0x0428 flags=0x0028081040000200 */ enum EClientRequestType RequestType;
  /* offset=0x0429 flags=0x0028081040000200 */ bool bPendingReservationSent;
  /* offset=0x042a flags=0x0028081040000200 */ bool bCancelReservation;

  /* CL  */ void ClientCancelReservationResponse(uint8 ReservationResponse);
  /* CL  */ void ClientReservationResponse(uint8 ReservationResponse);
  /* CL  */ void ClientSendReservationFull();
  /* CL  */ void ClientSendReservationUpdates(int32 NumRemainingReservations);
  /* SRV */ void ServerCancelReservationRequest(struct FUniqueNetIdRepl PartyLeader);
  /* SRV */ void ServerReservationRequest(FString SessionId, struct FPartyReservation Reservation);
  /* SRV */ void ServerUpdateReservationRequest(FString SessionId, struct FPartyReservation ReservationUpdate);
};

class APartyBeaconHost: public AOnlineBeaconHostObject {
  /* offset=0x02c4 flags=0x0028081040000200 */ UPartyBeaconState* State;
  /* offset=0x0410 flags=0x0028081040004200 */ bool bLogoutOnSessionTimeout;
  /* offset=0x0414 flags=0x0028081040006200 */ float SessionTimeoutSecs;
  /* offset=0x0418 flags=0x0028081040006200 */ float TravelSessionTimeoutSecs;
};

class UPartyBeaconState: public UObject {
  /* offset=0x0020 flags=0x0028081040002200 */ FName SessionName;
  /* offset=0x0028 flags=0x0028081040002200 */ int32 NumConsumedReservations;
  /* offset=0x002c flags=0x0028081040002200 */ int32 MaxReservations;
  /* offset=0x0030 flags=0x0028081040002200 */ int32 NumTeams;
  /* offset=0x0034 flags=0x0028081040002200 */ int32 NumPlayersPerTeam;
  /* offset=0x0038 flags=0x0028081040002200 */ FName TeamAssignmentMethod;
  /* offset=0x0040 flags=0x0028081040002200 */ int32 ReservedHostTeamNum;
  /* offset=0x0044 flags=0x0028081040002200 */ int32 ForceTeamNum;
  /* offset=0x0048 flags=0x0020080000002200 */ TArray<struct FPartyReservation> Reservations;
};

class UPathFollowingComponent: public UActorComponent {
  /* offset=0x01d0 flags=0x0028081040082208 */ UNavMovementComponent* MovementComp;
  /* offset=0x01dc flags=0x0028081040002200 */ ANavigationData* MyNavData;

  uint8 GetPathActionType();
  struct FVector GetPathDestination();
  void OnActorBump(AActor* SelfActor, AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit);
  void OnNavDataRegistered(ANavigationData* NavData);
};

class APawn: public AActor {
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bUseControllerRotationPitch:1;
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bUseControllerRotationYaw:1;
  /* offset=0x02ac flags=0x0018001000000005 */ uint8 bUseControllerRotationRoll:1;
  /* offset=0x02ac flags=0x0018001000000015 */ uint8 bCanAffectNavigationGeneration:1;
  /* offset=0x02ac flags=0x0018001000000015 */ uint8 bUseViewTranslatedTransform:1;
  /* offset=0x02b0 flags=0x0018001040000205 */ float BaseEyeHeight;
  /* offset=0x02b4 flags=0x0018001040000201 */ uint8 AutoPossessPlayer;
  /* offset=0x02b5 flags=0x0018001040000201 */ enum EAutoPossessAI AutoPossessAI;
  /* offset=0x02b8 flags=0x001c001040000205 */ UClass<AController>* AIControllerClass;
  /* offset=0x02bc flags=0x0018001140000234 */ APlayerState* PlayerState;
  /* offset=0x02c0 flags=0x0018001040000220 */ uint8 RemoteViewPitch;
  /* offset=0x02c4 flags=0x0018001040002200 */ AController* LastHitBy;
  /* offset=0x02c8 flags=0x0018001140000220 */ AController* Controller;
  /* offset=0x02d4 flags=0x0028081040002000 */ struct FVector ControlInputVector;
  /* offset=0x02e0 flags=0x0028081040002000 */ struct FVector LastControlInputVector;

  void AddControllerPitchInput(float Val);
  void AddControllerRollInput(float Val);
  void AddControllerYawInput(float Val);
  void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce);
  struct FVector ConsumeMovementInputVector();
  void DetachFromControllerPendingDestroy();
  struct FRotator GetBaseAimRotation();
  struct FRotator GetControlRotation();
  AController* GetController();
  struct FVector GetLastMovementInputVector();
  AActor* GetMovementBaseActor(APawn* Pawn);
  UPawnMovementComponent* GetMovementComponent();
  struct FVector GetNavAgentLocation();
  struct FVector GetPendingMovementInputVector();
  bool IsControlled();
  bool IsLocallyControlled();
  bool IsMoveInputIgnored();
  bool IsPlayerControlled();
  struct FVector K2_GetMovementInputVector();
  void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride);
  void OnRep_Controller();
  void OnRep_PlayerState();
  void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker);
  void ReceivePossessed(AController* NewController);
  void ReceiveUnpossessed(AController* OldController);
  void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
  void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);
  void SpawnDefaultController();
};

class UPawnAction: public UObject {
  /* offset=0x001c flags=0x0048001040002200 */ UPawnAction* ChildAction;
  /* offset=0x0020 flags=0x0048001040002200 */ UPawnAction* ParentAction;
  /* offset=0x0024 flags=0x0048001040082208 */ UPawnActionsComponent* OwnerComponent;
  /* offset=0x0028 flags=0x0048001040002200 */ UObject* Instigator;
  /* offset=0x002c flags=0x0028081040082208 */ UBrainComponent* BrainComp;
  /* offset=0x0088 flags=0x0028081000010015 */ uint8 bAllowNewSameClassInstance:1;
  /* offset=0x0088 flags=0x0028081000010005 */ uint8 bReplaceActiveSameClassInstance:1;
  /* offset=0x0088 flags=0x0028081000010005 */ uint8 bShouldPauseMovement:1;
  /* offset=0x0088 flags=0x00280c1000010005 */ uint8 bAlwaysNotifyOnFinished:1;

  UPawnAction* CreateActionInstance(UObject* WorldContextObject, UClass<UPawnAction>* ActionClass);
  void Finish(uint8 WithResult);
  uint8 GetActionPriority();
};

class UPawnAction_BlueprintBase: public UPawnAction {
  void ActionFinished(APawn* ControlledPawn, uint8 WithResult);
  void ActionPause(APawn* ControlledPawn);
  void ActionResume(APawn* ControlledPawn);
  void ActionStart(APawn* ControlledPawn);
  void ActionTick(APawn* ControlledPawn, float DeltaSeconds);
};

class UPawnAction_Move: public UPawnAction {
  /* offset=0x009c flags=0x0028081040000205 */ AActor* GoalActor;
  /* offset=0x00a0 flags=0x0028081040000005 */ struct FVector GoalLocation;
  /* offset=0x00ac flags=0x0028081040000205 */ float AcceptableRadius;
  /* offset=0x00b0 flags=0x002c081040000205 */ UClass<UNavigationQueryFilter>* FilterClass;
  /* offset=0x00b4 flags=0x0028081000000005 */ uint8 bAllowStrafe:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bFinishOnOverlap:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bUsePathfinding:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bAllowPartialPath:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bProjectGoalToNavigation:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bUpdatePathToGoal:1;
  /* offset=0x00b4 flags=0x0028081000000000 */ uint8 bAbortChildActionOnPathChange:1;
};

class UPawnAction_Repeat: public UPawnAction {
  /* offset=0x009c flags=0x0018001040000200 */ UPawnAction* ActionToRepeat;
  /* offset=0x00a0 flags=0x0018001040002200 */ UPawnAction* RecentActionCopy;
  /* offset=0x00a4 flags=0x0018001040000215 */ uint8 ChildFailureHandlingMode;
};

class UPawnAction_Sequence: public UPawnAction {
  /* offset=0x009c flags=0x0010000000000200 */ TArray<UPawnAction*> ActionSequence;
  /* offset=0x00a8 flags=0x0018001040000215 */ uint8 ChildFailureHandlingMode;
  /* offset=0x00ac flags=0x0018001040002200 */ UPawnAction* RecentActionCopy;
};

class UPawnAction_Wait: public UPawnAction {
  /* offset=0x009c flags=0x0018001040000200 */ float TimeToWait;
};

class UPawnActionsComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040000214 */ APawn* ControlledPawn;
  /* offset=0x00b0 flags=0x0020080000000200 */ TArray<struct FPawnActionStack> ActionStacks;
  /* offset=0x00bc flags=0x0020080000000200 */ TArray<struct FPawnActionEvent> ActionEvents;
  /* offset=0x00c8 flags=0x0028081040002200 */ UPawnAction* CurrentAction;

  uint8 K2_AbortAction(UPawnAction* ActionToAbort);
  uint8 K2_ForceAbortAction(UPawnAction* ActionToAbort);
  bool K2_PerformAction(APawn* Pawn, UPawnAction* Action, uint8 Priority);
  bool K2_PushAction(UPawnAction* NewAction, uint8 Priority, UObject* Instigator);
};

class UPawnMovementComponent: public UNavMovementComponent {
  /* offset=0x0110 flags=0x0028081040202200 */ APawn* PawnOwner;

  void AddInputVector(struct FVector WorldVector, bool bForce);
  struct FVector ConsumeInputVector();
  struct FVector GetLastInputVector();
  APawn* GetPawnOwner();
  struct FVector GetPendingInputVector();
  bool IsMoveInputIgnored();
  struct FVector K2_GetInputVector();
};

class UPawnNoiseEmitterComponent: public UActorComponent {
  /* offset=0x00ac flags=0x00280c1000010001 */ uint8 bAIPerceptionSystemCompatibilityMode:1;
  /* offset=0x00b0 flags=0x0018001040000000 */ struct FVector LastRemoteNoisePosition;
  /* offset=0x00bc flags=0x0018001040000205 */ float NoiseLifetime;
  /* offset=0x00c0 flags=0x0048001040000200 */ float LastRemoteNoiseVolume;
  /* offset=0x00c4 flags=0x0048001040000200 */ float LastRemoteNoiseTime;
  /* offset=0x00c8 flags=0x0048001040000200 */ float LastLocalNoiseVolume;
  /* offset=0x00cc flags=0x0048001040000200 */ float LastLocalNoiseTime;

  void MakeNoise(AActor* NoiseMaker, float Loudness, struct FVector NoiseLocation);
};

class UPawnSensingComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ float HearingThreshold;
  /* offset=0x00b0 flags=0x0018001040000205 */ float LOSHearingThreshold;
  /* offset=0x00b4 flags=0x0018001040000205 */ float SightRadius;
  /* offset=0x00b8 flags=0x0018001040000215 */ float SensingInterval;
  /* offset=0x00bc flags=0x0018001040000205 */ float HearingMaxSoundAge;
  /* offset=0x00c0 flags=0x0018001000000015 */ uint8 bEnableSensingUpdates:1;
  /* offset=0x00c0 flags=0x0018001000000005 */ uint8 bOnlySensePlayers:1;
  /* offset=0x00c0 flags=0x0018001000000005 */ uint8 bSeePawns:1;
  /* offset=0x00c0 flags=0x0018001000000005 */ uint8 bHearNoises:1;
  /* offset=0x00d0 flags=0x0010000010080200 */ FSeePawnDelegate OnSeePawn;
  /* offset=0x00dc flags=0x0010000010080200 */ FHearNoiseDelegate OnHearNoise;
  /* offset=0x00e8 flags=0x0028081040000215 */ float PeripheralVisionAngle;
  /* offset=0x00ec flags=0x0028081040000200 */ float PeripheralVisionCosine;

  float GetPeripheralVisionAngle();
  float GetPeripheralVisionCosine();
  void HearNoiseDelegate__DelegateSignature(APawn* Instigator, struct FVector Location, float Volume);
  void SeePawnDelegate__DelegateSignature(APawn* Pawn);
  void SetPeripheralVisionAngle(float NewPeripheralVisionAngle);
  void SetSensingInterval(float NewSensingInterval);
  void SetSensingUpdatesEnabled(bool bEnabled);
};

class UPendingNetGame: public UObject {
  /* offset=0x0020 flags=0x0018001040000200 */ UNetDriver* NetDriver;
  /* offset=0x0024 flags=0x0018001040000200 */ UDemoNetDriver* DemoNetDriver;
};

class UPhysicalAnimationComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000215 */ float StrengthMultiplyer;
  /* offset=0x00b0 flags=0x0048001040080208 */ USkeletalMeshComponent* SkeletalMeshComponent;

  void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);
  void ApplyPhysicalAnimationSettings(FName BodyName, struct FPhysicalAnimationData PhysicalAnimationData);
  void ApplyPhysicalAnimationSettingsBelow(FName BodyName, struct FPhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);
  struct FTransform GetBodyTargetTransform(FName BodyName);
  void SetSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent);
  void SetStrengthMultiplyer(float InStrengthMultiplyer);
};

class UPhysicalMaterial: public UObject {
  /* offset=0x001c flags=0x0018001040000215 */ float Friction;
  /* offset=0x0020 flags=0x0018001040000215 */ uint8 FrictionCombineMode;
  /* offset=0x0021 flags=0x0018001040000205 */ bool bOverrideFrictionCombineMode;
  /* offset=0x0024 flags=0x0018001040000215 */ float Restitution;
  /* offset=0x0028 flags=0x0018001040000215 */ uint8 RestitutionCombineMode;
  /* offset=0x0029 flags=0x0018001040000205 */ bool bOverrideRestitutionCombineMode;
  /* offset=0x002c flags=0x0018001040000215 */ float Density;
  /* offset=0x0030 flags=0x0018001040000215 */ float RaiseMassToPower;
  /* offset=0x0034 flags=0x0018001040000215 */ float DestructibleDamageThresholdScale;
  /* offset=0x0038 flags=0x0018001040000200 */ UPhysicalMaterialPropertyBase* PhysicalMaterialProperty;
  /* offset=0x003c flags=0x0018001040000215 */ uint8 SurfaceType;
  /* offset=0x0040 flags=0x0018001040020201 */ float TireFrictionScale;
  /* offset=0x0044 flags=0x0010000000020201 */ TArray<struct FTireFrictionScalePair> TireFrictionScales;
};

class UPhysicalMaterialPropertyBase: public UObject {
};

class UPhysicsAsset: public UObject {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<int32> BoundsBodies;
  /* offset=0x0028 flags=0x0010008000000208 */ TArray<USkeletalBodySetup*> SkeletalBodySetups;
  /* offset=0x0034 flags=0x0010008000000208 */ TArray<UPhysicsConstraintTemplate*> ConstraintSetup;
  /* offset=0x0040 flags=0x0018041000000001 */ uint8 bUseAsyncScene:1;
  /* offset=0x00bc flags=0x001a0010400a0209 */ UThumbnailInfo* ThumbnailInfo;
  /* offset=0x00c0 flags=0x0040008020000208 */ TArray<UBodySetup*> BodySetup;
};

class UPhysicsCollisionHandler: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ float ImpactThreshold;
  /* offset=0x0020 flags=0x0018001040000205 */ float ImpactReFireDelay;
  /* offset=0x0024 flags=0x0018001040000205 */ USoundBase* DefaultImpactSound;
  /* offset=0x0028 flags=0x0018001040000200 */ float LastImpactSoundTime;
};

class APhysicsConstraintActor: public ARigidBodyBase {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPhysicsConstraintComponent* ConstraintComp;
  /* offset=0x02ac flags=0x0018001060000200 */ AActor* ConstraintActor1;
  /* offset=0x02b0 flags=0x0018001060000200 */ AActor* ConstraintActor2;
  /* offset=0x02b4 flags=0x0018001020000000 */ uint8 bDisableCollision:1;
};

class UPhysicsConstraintComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000a01 */ AActor* ConstraintActor1;
  /* offset=0x0278 flags=0x0010001000000001 */ struct FConstrainComponentPropName ComponentName1;
  /* offset=0x0280 flags=0x0018001040000a01 */ AActor* ConstraintActor2;
  /* offset=0x0288 flags=0x0010001000000001 */ struct FConstrainComponentPropName ComponentName2;
  /* offset=0x02a0 flags=0x001a001060080208 */ UPhysicsConstraintTemplate* ConstraintSetup;
  /* offset=0x02a4 flags=0x0010000010080200 */ FConstraintBrokenSignature OnConstraintBroken;
  /* offset=0x02b0 flags=0x0010000000000001 */ struct FConstraintInstance ConstraintInstance;

  void BreakConstraint();
  void GetConstraintForce(struct FVector OutLinearForce, struct FVector OutAngularForce);
  float GetCurrentSwing1();
  float GetCurrentSwing2();
  float GetCurrentTwist();
  bool IsBroken();
  void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
  void SetAngularDriveMode(uint8 DriveMode);
  void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
  void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
  void SetAngularOrientationTarget(struct FRotator InPosTarget);
  void SetAngularSwing1Limit(uint8 MotionType, float Swing1LimitAngle);
  void SetAngularSwing2Limit(uint8 MotionType, float Swing2LimitAngle);
  void SetAngularTwistLimit(uint8 ConstraintType, float TwistLimitAngle);
  void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
  void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
  void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
  void SetAngularVelocityTarget(struct FVector InVelTarget);
  void SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2);
  void SetConstraintReferenceFrame(uint8 Frame, struct FTransform RefFrame);
  void SetConstraintReferenceOrientation(uint8 Frame, struct FVector PriAxis, struct FVector SecAxis);
  void SetConstraintReferencePosition(uint8 Frame, struct FVector RefPosition);
  void SetDisableCollision(bool bDisableCollision);
  void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
  void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
  void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
  void SetLinearPositionTarget(struct FVector InPosTarget);
  void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
  void SetLinearVelocityTarget(struct FVector InVelTarget);
  void SetLinearXLimit(uint8 ConstraintType, float LimitSize);
  void SetLinearYLimit(uint8 ConstraintType, float LimitSize);
  void SetLinearZLimit(uint8 ConstraintType, float LimitSize);
  void SetOrientationDriveSLERP(bool bEnableSLERP);
  void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
};

class UPhysicsConstraintTemplate: public UObject {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FConstraintInstance DefaultInstance;
  /* offset=0x0200 flags=0x0010000000000200 */ TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;
  /* offset=0x020c flags=0x0040001000002000 */ struct FConstraintProfileProperties DefaultProfile;
};

class UPhysicsHandleComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040080208 */ UPrimitiveComponent* GrabbedComponent;
  /* offset=0x00bc flags=0x0018001000000015 */ uint8 bSoftAngularConstraint:1;
  /* offset=0x00bc flags=0x0018001000000015 */ uint8 bSoftLinearConstraint:1;
  /* offset=0x00bc flags=0x0018001000000005 */ uint8 bInterpolateTarget:1;
  /* offset=0x00c0 flags=0x0018001040000215 */ float LinearDamping;
  /* offset=0x00c4 flags=0x0018001040000215 */ float LinearStiffness;
  /* offset=0x00c8 flags=0x0018001040000215 */ float AngularDamping;
  /* offset=0x00cc flags=0x0018001040000215 */ float AngularStiffness;
  /* offset=0x0130 flags=0x0018001040000215 */ float InterpolationSpeed;

  UPrimitiveComponent* GetGrabbedComponent();
  void GetTargetLocationAndRotation(struct FVector TargetLocation, struct FRotator TargetRotation);
  void GrabComponent(UPrimitiveComponent* Component, FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation);
  void GrabComponentAtLocation(UPrimitiveComponent* Component, FName InBoneName, struct FVector GrabLocation);
  void GrabComponentAtLocationWithRotation(UPrimitiveComponent* Component, FName InBoneName, struct FVector Location, struct FRotator Rotation);
  void ReleaseComponent();
  void SetAngularDamping(float NewAngularDamping);
  void SetAngularStiffness(float NewAngularStiffness);
  void SetInterpolationSpeed(float NewInterpolationSpeed);
  void SetLinearDamping(float NewLinearDamping);
  void SetLinearStiffness(float NewLinearStiffness);
  void SetTargetLocation(struct FVector NewLocation);
  void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation);
  void SetTargetRotation(struct FRotator NewRotation);
};

class UPhysicsSerializer: public UObject {
};

class UPhysicsSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001040004201 */ float DefaultGravityZ;
  /* offset=0x0034 flags=0x0018001040004201 */ float DefaultTerminalVelocity;
  /* offset=0x0038 flags=0x0018001040004201 */ float DefaultFluidFriction;
  /* offset=0x003c flags=0x0018001040004201 */ int32 SimulateScratchMemorySize;
  /* offset=0x0040 flags=0x0018001040004201 */ int32 RagdollAggregateThreshold;
  /* offset=0x0044 flags=0x0018041040004201 */ float TriangleMeshTriangleMinAreaThreshold;
  /* offset=0x0048 flags=0x0018041040004201 */ bool bEnableAsyncScene;
  /* offset=0x0049 flags=0x0018041040004201 */ bool bEnableShapeSharing;
  /* offset=0x004a flags=0x0018041040004201 */ bool bEnablePCM;
  /* offset=0x004b flags=0x0018041040004201 */ bool bEnableStabilization;
  /* offset=0x004c flags=0x0018041040004201 */ bool bWarnMissingLocks;
  /* offset=0x004d flags=0x0018001040004201 */ bool bEnable2DPhysics;
  /* offset=0x004e flags=0x0018001060004200 */ uint8 LockedAxis;
  /* offset=0x004f flags=0x0018001040004201 */ uint8 DefaultDegreesOfFreedom;
  /* offset=0x0050 flags=0x0018001040004201 */ float BounceThresholdVelocity;
  /* offset=0x0054 flags=0x0018001040004201 */ uint8 FrictionCombineMode;
  /* offset=0x0055 flags=0x0018001040004201 */ uint8 RestitutionCombineMode;
  /* offset=0x0058 flags=0x0018001040004201 */ float MaxAngularVelocity;
  /* offset=0x005c flags=0x0018001040004201 */ float MaxDepenetrationVelocity;
  /* offset=0x0060 flags=0x0018001040004201 */ float ContactOffsetMultiplier;
  /* offset=0x0064 flags=0x0018001040004201 */ float MinContactOffset;
  /* offset=0x0068 flags=0x0018001040004201 */ float MaxContactOffset;
  /* offset=0x006c flags=0x0018001040004201 */ bool bSimulateSkeletalMeshOnDedicatedServer;
  /* offset=0x006d flags=0x0018001040004201 */ uint8 DefaultShapeComplexity;
  /* offset=0x006e flags=0x0018001060004200 */ bool bDefaultHasComplexCollision;
  /* offset=0x006f flags=0x0018001040004201 */ bool bSuppressFaceRemapTable;
  /* offset=0x0070 flags=0x0018001040004201 */ bool bSupportUVFromHitResults;
  /* offset=0x0071 flags=0x0018001040004201 */ bool bDisableActiveActors;
  /* offset=0x0072 flags=0x0018001040004201 */ bool bDisableCCD;
  /* offset=0x0073 flags=0x0018001040004201 */ bool bEnableEnhancedDeterminism;
  /* offset=0x0074 flags=0x0018001040004201 */ float MaxPhysicsDeltaTime;
  /* offset=0x0078 flags=0x0018001040004201 */ bool bSubstepping;
  /* offset=0x0079 flags=0x0018001040004201 */ bool bSubsteppingAsync;
  /* offset=0x007c flags=0x0018001040004201 */ float MaxSubstepDeltaTime;
  /* offset=0x0080 flags=0x0018001040004201 */ int32 MaxSubsteps;
  /* offset=0x0084 flags=0x0018041040004201 */ float SyncSceneSmoothingFactor;
  /* offset=0x0088 flags=0x0018041040004201 */ float AsyncSceneSmoothingFactor;
  /* offset=0x008c flags=0x0018041040004201 */ float InitialAverageFrameRate;
  /* offset=0x0090 flags=0x0018041040004201 */ int32 PhysXTreeRebuildRate;
  /* offset=0x0094 flags=0x0010000000004201 */ TArray<struct FPhysicalSurfaceName> PhysicalSurfaces;
};

class UPhysicsSpringComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ float SpringStiffness;
  /* offset=0x0274 flags=0x0018001040000205 */ float SpringDamping;
  /* offset=0x0278 flags=0x0018001040000205 */ float SpringLengthAtRest;
  /* offset=0x027c flags=0x0018001040000205 */ float SpringRadius;
  /* offset=0x0280 flags=0x0018001040000204 */ uint8 SpringChannel;
  /* offset=0x0281 flags=0x0018001040000205 */ bool bIgnoreSelf;
  /* offset=0x0284 flags=0x0018001040002214 */ float SpringCompression;

  float GetNormalizedCompressionScalar();
  struct FVector GetSpringCurrentEndPoint();
  struct FVector GetSpringDirection();
  struct FVector GetSpringRestingPoint();
};

class APhysicsThruster: public ARigidBodyBase {
  /* offset=0x02a8 flags=0x00480010400a021d */ UPhysicsThrusterComponent* ThrusterComponent;
};

class UPhysicsThrusterComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000205 */ float ThrustStrength;
};

class APhysicsVolume: public AVolume {
  /* offset=0x02d0 flags=0x0018001040000205 */ float TerminalVelocity;
  /* offset=0x02d4 flags=0x0018001040000205 */ int32 Priority;
  /* offset=0x02d8 flags=0x0018001040000205 */ float FluidFriction;
  /* offset=0x02dc flags=0x0018001000000005 */ uint8 bWaterVolume:1;
  /* offset=0x02dc flags=0x0018001000000005 */ uint8 bPhysicsOnContact:1;
};

class UPickUpBtnItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* Image_SelectedItemStatus;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemNum;
  /* offset=0x023c flags=0x0000001040010205 */ bool bTouchStart;
  /* offset=0x0240 flags=0x0000100010010205 */ FClickBoxTab ClickBoxTab;
  /* offset=0x024c flags=0x0008001040010205 */ int32 tabIndex;

  void ClickBoxTab__DelegateSignature(int32 Index);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  void UpdateImage(bool CallFunc_EqualEqual_IntInt_ReturnValue);
};

class UPickUpItemTips_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0234 flags=0x000a0010c008020c */ UMultiLineEditableText* ItemName1;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemDescrip;
  /* offset=0x023c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Volume;

  void UpdateData(struct FSlateBrush Image, FString ItemName, FString ItemDesc, int32 ItemCount, float ItemVolume, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_Multiply_IntFloat_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, int32 CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_GetFloatAsStringWithPrecision_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData3, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);
};

class UPickUpItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UGridPanel* GridPanel_DeleteItemTips;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_CanEquippedIconBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_CanEquippedItemBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_ItemBG;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_ItemIconBG;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_SelectedDeletedItem;
  /* offset=0x0250 flags=0x000a0010c008020c */ UMultiLineEditableText* ItemContent1;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* ItemContent2;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* ItemContent3;
  /* offset=0x025c flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Damage;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemNum;
  /* offset=0x0264 flags=0x0000001040010205 */ bool bHasStartedTouchIn;
  /* offset=0x0265 flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x0268 flags=0x0009001040000205 */ UUserWidget* ParentUserWidget;
  /* offset=0x026c flags=0x0008000000010005 */ struct FBP_STRUCT_Item_type DataRow;
  /* offset=0x0390 flags=0x0000001040010205 */ bool Useful;
  /* offset=0x0398 flags=0x0000000000010005 */ struct FBattleSearchBoxSortingInfo SortInfo;

  void BndEvt__Button_ClickItem_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_PickUpItem_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_MouseEvent, bool CallFunc_IsValid_ReturnValue, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  void GetUseless(bool useless, bool IsValid, struct FItemDefineID GunDefineID, enum EWeaponAttachmentSocketType AttachPos, UWeaponManagerComponent* weaponManager, TArray<uint8> AllWeaponSlot, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Loop_Counter_Variable3, int32 ___int_Array_Index_Variable2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Loop_Counter_Variable4, int32 CallFunc_Add_IntInt_ReturnValue4, int32 ___int_Array_Index_Variable3, int32 ___int_Array_Index_Variable4, bool CallFunc_IsBullet_isBullet, bool CallFunc_IsAttach_isAttach, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, uint8 CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsSameInstance_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FItemAssociation CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket2, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, uint8 CallFunc_Array_Get_Item4, int32 CallFunc_Array_Length_ReturnValue4, TArray<uint8> K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue4, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGunSupportBullet_isSupport, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsGunSupportAttachByDefineID_support, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void HandlePickup(APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetIsShowingToolTips_bShowing, struct FEventReply K2Node_MakeStruct_EventReply2);
  struct FEventReply OnTouchGesture(struct FGeometry MyGeometry, struct FPointerEvent GestureEvent, enum ESlateGesture CallFunc_PointerEvent_GetGestureType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_IsValid_ReturnValue, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void RefreshIcon(UObject* Icon, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ShowDurable(UBattleItemHandle_AvatarBP_C* CallFunc_GetVolAvatarConfigByResID_config, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void UpdateItemDataByWrap(struct FBattleSearchBoxSortingInfo Info, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, int32 CallFunc_Len_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);
  void UpdateUseless(bool Useful);
};

class UPickUpItem_S_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UGridPanel* GridPanel_DeleteItemTips;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* Image_CanEquippedIconBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* Image_CanEquippedItemBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_ItemBG;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_ItemIcon;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_ItemIconBG;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_SelectedDeletedItem;
  /* offset=0x0250 flags=0x000a0010c008020c */ UMultiLineEditableText* ItemContent1;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* ItemContent2;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* ItemContent3;
  /* offset=0x025c flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Damage;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ItemNum;
  /* offset=0x0268 flags=0x0000000000010005 */ struct FSearchedPickUpItemResult ItemDataStructure;
  /* offset=0x02a0 flags=0x0000001040010205 */ bool bHasStartedTouchIn;
  /* offset=0x02a1 flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x02a4 flags=0x0009001040000205 */ UUserWidget* ParentUserWidget;
  /* offset=0x02a8 flags=0x0008000000010005 */ struct FBP_STRUCT_Item_type DataRow;

  void BndEvt__Button_ClickItem_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_PickUpItem_S_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_MouseEvent, bool CallFunc_IsValid_ReturnValue, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  void GetUseless(bool useless, bool IsValid, struct FItemDefineID GunDefineID, enum EWeaponAttachmentSocketType AttachPos, UWeaponManagerComponent* weaponManager, TArray<uint8> AllWeaponSlot, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Loop_Counter_Variable3, int32 ___int_Array_Index_Variable2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Loop_Counter_Variable4, int32 CallFunc_Add_IntInt_ReturnValue4, int32 ___int_Array_Index_Variable3, int32 ___int_Array_Index_Variable4, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsSameInstance_ReturnValue, struct FItemAssociation CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket2, uint8 CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, uint8 CallFunc_Array_Get_Item4, int32 CallFunc_Array_Length_ReturnValue4, TArray<uint8> K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue4, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGunSupportBullet_isSupport, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsBullet_isBullet, bool CallFunc_IsGunSupportAttachByDefineID_support, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_IsAttach_isAttach);
  void HandlePickup(APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_IsValid_ReturnValue, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetIsShowingToolTips_bShowing, struct FEventReply K2Node_MakeStruct_EventReply2);
  struct FEventReply OnTouchGesture(struct FGeometry MyGeometry, struct FPointerEvent GestureEvent, enum ESlateGesture CallFunc_PointerEvent_GetGestureType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_IsValid_ReturnValue, UPickUpListPanel_BP_C* K2Node_DynamicCast_AsPick_Up_List_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void RefreshIcon(UObject* Icon, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ShowDurable(UBattleItemHandle_AvatarBP_C* CallFunc_GetVolAvatarConfigByResID_config, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void UpdateItemData(struct FBattleSearchItemSortingInfo ItemData, FString SmallIconPrefix, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue);
  void UpdateUseless(bool Useful);
};

class UPickUpListItem_Row_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox_EmptyBoxTips;
  /* offset=0x0238 flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x023c flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x0240 flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x0244 flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x0248 flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x024c flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x0250 flags=0x000a0010c008020c */ UPickUpItem_BP_C* PickUpItem_BP;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* PlayerName;
  /* offset=0x0258 flags=0x000a0010c008020c */ USizeBox* SizeBox_ItemList;
  /* offset=0x025c flags=0x000a0010c008020c */ UWrapBox* WrapBox_List;
  /* offset=0x0260 flags=0x0009001040000205 */ UUserWidget* ParentUserWidget;
  /* offset=0x0264 flags=0x0008001040010205 */ int32 Checksum;
  /* offset=0x0268 flags=0x0008000000010205 */ FString TombName;

  void ExecuteUbergraph_PickUpListItem_Row_BP(int32 EntryPoint);
  void MakesureListEnough(int32 Count, int32 diffCount, int32 ___int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2, UPickUpItem_BP_C* CallFunc_Create_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue3, int32 CallFunc_Subtract_IntInt_ReturnValue2, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 ___int_Variable2, int32 CallFunc_Add_IntInt_ReturnValue3, UWidget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2);
  void UpdateTombBoxData(APlayerTombBox* Box, TArray<struct FBattleSearchBoxSortingInfo> BoxList, int32 Index, struct FSearchedTombBoxAndWrapperListResult BoxData, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue, FString CallFunc_GetLocalizeText_Text, int32 ___int_Array_Index_Variable, FText CallFunc_Conv_StringToText_ReturnValue, struct FBattleSearchBoxSortingInfo CallFunc_Array_Get_Item, int32 CallFunc_Add_IntInt_ReturnValue2, UWidget* CallFunc_GetChildAt_ReturnValue, UPickUpItem_BP_C* K2Node_DynamicCast_AsPick_Up_Item_BP, bool K2Node_DynamicCast_bSuccess);
};

class UPickUpListPanel_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UGridPanel* BoxInnerPanel;
  /* offset=0x0238 flags=0x000a0010c008020c */ UGridPanel* BoxPanel;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_AKeyPickUp;
  /* offset=0x0240 flags=0x000a0010c008020c */ UCustomizePickUpPanel_BP_C* CustomizePickUpPanel_BP;
  /* offset=0x0244 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x0248 flags=0x000a0010c008020c */ UGridPanel* GridPanel_PickUpList;
  /* offset=0x024c flags=0x000a0010c008020c */ UGridPanel* GridPanel_root;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image_OpenBlank2;
  /* offset=0x0254 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0258 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x025c flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0260 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0264 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0268 flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x026c flags=0x000a0010c008020c */ UPickUpListItem_Row_BP_C* PickUpListItem_Row_BP;
  /* offset=0x0270 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBox_PickUpListMode1;
  /* offset=0x0274 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBox_PickUpListMode2;
  /* offset=0x0278 flags=0x000a0010c008020c */ UShortcutMenu_BP_C* ShortcutMenu_BP;
  /* offset=0x027c flags=0x000a0010c008020c */ USizeBox* SizeBox_PanelList;
  /* offset=0x0280 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0284 flags=0x000a0010c008020c */ UWrapBox* WrapBox_Mode2;
  /* offset=0x0288 flags=0x0008001040010205 */ int32 deadBoxNum;
  /* offset=0x028c flags=0x0000100010010205 */ FCollapseStuffList CollapseStuffList;
  /* offset=0x0298 flags=0x0008001040010205 */ uint8 DisplayStuffType;
  /* offset=0x029c flags=0x0008001040010205 */ UUserWidget* PickupToolTips;
  /* offset=0x02a0 flags=0x0008001040010005 */ struct FVector2D ToolTipsOffset;
  /* offset=0x02a8 flags=0x0000001040010205 */ bool bGroundExist;
  /* offset=0x02a9 flags=0x0008001040010205 */ uint8 playerChoise;
  /* offset=0x02ac flags=0x0008001040010205 */ int32 boxChoise;
  /* offset=0x02b0 flags=0x0008001040010205 */ int32 boxColumn;
  /* offset=0x02b4 flags=0x0000001040010205 */ bool bHideForAim;
  /* offset=0x02b5 flags=0x0000001040010205 */ bool InAutoPickCD;
  /* offset=0x02b8 flags=0x0008001040010205 */ float lastAutoPickTime;
  /* offset=0x02bc flags=0x0000001040010205 */ bool AutoPickupSwitcher;
  /* offset=0x02bd flags=0x0000001040010205 */ bool DisableAutoPickupSwitcher;
  /* offset=0x02c0 flags=0x0008001040010205 */ int32 pickUpChecksum;
  /* offset=0x02c4 flags=0x0000000000010205 */ TArray<struct FBattleSearchItemSortingInfo> sortInfoList_;
  /* offset=0x02d0 flags=0x0000000000010205 */ TMap<FString, UPickUpListItem_Row_BP_C*> name2TombRow;
  /* offset=0x030c flags=0x0008001040010205 */ float AutoPickDelay;

  void AutoPickGroundItem(TArray<struct FBattleSearchItemSortingInfo> Array, int32 CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, struct FBattleSearchItemSortingInfo CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_AutoPickOneItem_pick, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void AutoPickOne(struct FSearchedPickUpItemResult pickUpResult);
  void AutoPickOneItem(struct FSearchedPickUpItemResult pickUpResult, bool pick, FString CallFunc_Conv_IntToString_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void AutoPickupSwitchEvent(bool BoolValue);
  void BigSortThan(struct FBP_STRUCT_Item_type Left, struct FBP_STRUCT_Item_type Right, bool bigger, bool CallFunc_Greater_IntInt_ReturnValue);
  void BndEvt__Button_ClosePickUpListUI_K2Node_ComponentBoundEvent_35_OnButtonClickedEvent__DelegateSignature();
  void CheckBoxChange(struct FSearchedTombBoxAndWrapperListResult Result, bool change, int32 Checksum, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, struct FSearchedPickUpItemResult CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, UPickUpListItem_Row_BP_C* CallFunc_FindTombRowByName_itemRow, bool CallFunc_FindTombRowByName_find, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3);
  void CheckChange(TArray<struct FSearchedPickUpItemResult> Array, bool change, int32 Checksum, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable2, struct FSearchedPickUpItemResult CallFunc_Array_Get_Item, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Array_Index_Variable2, int32 CallFunc_Array_Length_ReturnValue2, struct FBattleSearchItemSortingInfo CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue4);
  void ClearBoxCheck(int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UPickUpListItem_Row_BP_C* K2Node_DynamicCast_AsPick_Up_List_Item_Row_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void ClickCloseBoxPanel();
  void ClickCloseCustomPanel();
  void CollapseStuffList__DelegateSignature(bool bDeadBox);
  void DeleteTombs();
  void DisableAutoPickupSwitcherEvent(bool BoolValue);
  void ExecuteUbergraph_PickUpListPanel_BP(int32 EntryPoint, FCloseCustomPickUpPanel K2Node_CreateDelegate_OutputDelegate, FClickClosePickup K2Node_CreateDelegate_OutputDelegate2, FClickCloseBox K2Node_CreateDelegate_OutputDelegate3, struct FSearchedPickUpItemResult K2Node_CustomEvent_pickUpResult, bool CallFunc_GetUseful_useful, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate4, USettingConfig_C* CallFunc_InitRegistSettingBool_AsSetting_Config, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool K2Node_CustomEvent_BoolValue2, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_BoolValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, struct FItemDefineID K2Node_CustomEvent_DefineID, enum EBattleItemOperationType K2Node_CustomEvent_OperationType, uint8 K2Node_CustomEvent_Reason, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int32 ___int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, uint8 K2Node_CustomEvent_TargetChangeSlot2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 K2Node_CustomEvent_TargetChangeSlot, UPickUpItem_S_BP_C* CallFunc_Create_ReturnValue, FChangeCurrentUsingWeaponDelegate K2Node_CreateDelegate_OutputDelegate5, UPanelSlot* CallFunc_AddChild_ReturnValue, FClickNormal K2Node_CreateDelegate_OutputDelegate6, FChangeInventoryDataDelegate K2Node_CreateDelegate_OutputDelegate7, float CallFunc_GetRealTimeSeconds_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate8, FItemOperationDelegate K2Node_CreateDelegate_OutputDelegate9, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate10, USettingConfig_C* CallFunc_InitRegistSettingBool_AsSetting_Config2);
  void FillButton(bool bHasGroundItem, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_IntInt_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void FillGroundList(TArray<struct FBattleSearchItemSortingInfo> Array, TArray<struct FBattleSearchItemSortingInfo> SearchItemArray, int32 currIndex, struct FBattleSearchItemSortingInfo CurrSearchNode, int32 LastIndex, struct FSearchedPickUpItemResult CurSearchItem, int32 ___int_Array_Index_Variable, struct FBattleSearchItemSortingInfo CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, UPickUpItem_S_BP_C* CallFunc_Create_ReturnValue, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, UWidget* CallFunc_GetChildAt_ReturnValue2, UPickUpItem_S_BP_C* K2Node_DynamicCast_AsPick_Up_Item_S_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue4, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_GetChildrenCount_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue);
  void FillTombBoxList(TArray<struct FSearchedTombBoxAndWrapperListResult> TargetArray, UPickUpListItem_Row_BP_C* curTombRowUI, FString curTombName, APlayerTombBox* currTombBox, int32 TombIndex, TArray<struct FBattleSearchBoxSortingInfo> BoxSortList, bool ___bool_True_if_break_was_hit_Variable, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable3, int32 ___int_Loop_Counter_Variable2, struct FSearchedTombBoxAndWrapperListResult CallFunc_Array_Get_Item, bool CallFunc_CheckBoxChange_change, FString CallFunc_Conv_NameToString_ReturnValue, struct FSearchedPickUpItemResult CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_GetUseful_useful, int32 CallFunc_Add_IntInt_ReturnValue2, struct FBattleSearchBoxSortingInfo K2Node_MakeStruct_BattleSearchBoxSortingInfo, int32 ___int_Loop_Counter_Variable3, UPickUpListItem_Row_BP_C* CallFunc_FindTombRowByName_itemRow, bool CallFunc_FindTombRowByName_find, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue3, int32 ___int_Variable, UPickUpListItem_Row_BP_C* CallFunc_FindTombRowByName_itemRow2, bool CallFunc_FindTombRowByName_find2, int32 CallFunc_Add_IntInt_ReturnValue4, UWidget* CallFunc_GetChildAt_ReturnValue, UPickUpItem_BP_C* K2Node_DynamicCast_AsPick_Up_Item_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_AutoPickOneItem_pick, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue4, int32 CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue, struct FBattleSearchBoxSortingInfo CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_AutoPickOneItem_pick2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, TArray<struct FBattleSearchBoxSortingInfo> CallFunc_SortBattleSearchBoxList_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue2);
  void FindTombRowByName(FString Name, UPickUpListItem_Row_BP_C* itemRow, bool find, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UPickUpListItem_Row_BP_C* K2Node_DynamicCast_AsPick_Up_List_Item_Row_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void GetBulletAutoPickupLimit(int32 resID, int32 Limit, int32 resourceID, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7);
  void GetIsShowingToolTips(bool bShowing, UUserWidget* CallFunc_GetToolTipsSingleton_NewParam, bool CallFunc_IsInViewport_ReturnValue);
  void GetToolTipsSingleton(UUserWidget* NewParam, UPickUpItemTips_BP_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void GetUseful(struct FItemDefineID DefineID, struct FSearchedPickUpItemResult pickUpItemResult, bool Useful, struct FSearchedPickUpItemResult PickupItem, APickUpWrapperActor* ItemWrapper, struct FBP_STRUCT_Item_type ItemRecord, UBackpackComponent* BackpackComp, int32 SubType, int32 ItemType, bool isPistol, bool isEmptyGun, bool IsValid, struct FItemDefineID GunDefineID, enum EWeaponAttachmentSocketType AttachPos, TArray<uint8> AllWeaponSlot, UWeaponManagerComponent* weaponManager, struct FItemDefineID ItemDefineID, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, int32 ___int_Array_Index_Variable3, int32 ___int_Loop_Counter_Variable3, int32 ___int_Loop_Counter_Variable4, int32 CallFunc_Add_IntInt_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue4, int32 ___int_Array_Index_Variable4, int32 ___int_Loop_Counter_Variable5, int32 CallFunc_Add_IntInt_ReturnValue5, int32 ___int_Array_Index_Variable5, int32 ___int_Loop_Counter_Variable6, int32 CallFunc_Add_IntInt_ReturnValue6, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_isDurableFull_full, ASTExtraPlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetBulletAutoPickupLimit_limit, bool CallFunc_NotEqual_IntInt_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, int32 CallFunc_GetItemCountByDefineID_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue7, bool CallFunc_EqualEqual_IntInt_ReturnValue8, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, int32 CallFunc_GetItemCountByDefineID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int32 ___int_Array_Index_Variable6, bool K2Node_SwitchInteger_CmpSuccess, TArray<struct FBattleItemData> CallFunc_GetAllItemsInBackpack_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_BigSortThan_bigger, bool CallFunc_EqualEqual_IntInt_ReturnValue10, uint8 CallFunc_Array_Get_Item2, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue2, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, int32 CallFunc_Array_Length_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue11, uint8 CallFunc_Array_Get_Item3, int32 CallFunc_Array_Length_ReturnValue3, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue4, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue3, uint8 CallFunc_Array_Get_Item4, int32 CallFunc_Array_Length_ReturnValue4, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5, bool CallFunc_IsGunSupportBullet_isSupport, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket, TArray<uint8> K2Node_MakeArray_Array, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, TArray<struct FBattleItemData> CallFunc_GetWeaponsInBackpack_ReturnValue, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, struct FBattleItemData CallFunc_Array_Get_Item5, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsSameInstance_ReturnValue, struct FItemAssociation CallFunc_Array_Get_Item6, int32 CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue6, enum EWeaponAttachmentSocketType CallFunc_GetWeaponAttachPosByResID_socket2, FString CallFunc_Conv_IntToString_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue4, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow4, bool CallFunc_GetDataTableRowFromName_ReturnValue4, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_BigSortThan_bigger2, int32 CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue7, bool CallFunc_IsGunSupportAttachByDefineID_support);
  void HideToolTips(bool CallFunc_GetIsShowingToolTips_bShowing);
  void InitRegistSettingBool(FString PropertyName, FUserSettingsDelegate_Bool Delegate, USettingConfig_C* AsSetting Config, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void InitRegistSettingInt(FString PropertyName, FUserSettingsDelegate_Int Delegate, USettingConfig_C* AsSetting Config, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void ItemListUpdateEvent();
  void ItemOpertation(struct FItemDefineID ItemDefineID, enum EBattleItemOperationType optType, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void ItemOptEvent(struct FItemDefineID DefineID, enum EBattleItemOperationType operationType, uint8 Reason);
  void MakeFlagToTabBox(FClickBoxTab K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2, FClickBoxTab K2Node_CreateDelegate_OutputDelegate2);
  void MakeSureBoxListEnough(int32 Count, TArray<struct FSearchedTombBoxAndWrapperListResult> Result, FString curTombName, bool hasItem, int32 LastIndex, bool Valid, int32 diffCount, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, struct FSearchedTombBoxAndWrapperListResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue2, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, UPickUpListItem_Row_BP_C* CallFunc_Create_ReturnValue, UPickUpListItem_Row_BP_C* CallFunc_FindTombRowByName_itemRow, bool CallFunc_FindTombRowByName_find, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 ___int_Variable2, int32 CallFunc_Add_IntInt_ReturnValue3, UWidget* CallFunc_GetChildAt_ReturnValue, UPickUpListItem_Row_BP_C* K2Node_DynamicCast_AsPick_Up_List_Item_Row_BP, bool K2Node_DynamicCast_bSuccess, UWidget* CallFunc_GetChildAt_ReturnValue2, UPickUpListItem_Row_BP_C* K2Node_DynamicCast_AsPick_Up_List_Item_Row_BP2, bool K2Node_DynamicCast_bSuccess2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue2);
  void NotifyBox(bool Show);
  void NotifyPickup(bool Show);
  void OnClickBoxTab(int32 Index);
  void OnClickNormal();
  void PauseAutoPick(float CallFunc_GetRealTimeSeconds_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ReceivedInitWidget();
  void SetBoxColumn(int32 Column, int32 CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue);
  void ShowPickMode(uint8 pickType, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Contains_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);
  void ShowToolTips(struct FSlateBrush Image, FString ItemName, FString ItemDesc, struct FVector2D CallFunc_GetMousePositionOnViewport_ReturnValue, UUserWidget* CallFunc_GetToolTipsSingleton_NewParam, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue, UPickUpItemTips_BP_C* K2Node_DynamicCast_AsPick_Up_Item_Tips_BP, bool K2Node_DynamicCast_bSuccess);
  void UpdateListData(ABP_PlayerPawn_C* PlayerPawn, struct FSearchedPickUpItemResult CurSearchItem, int32 LastIndex, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, TArray<struct FSearchedPickUpItemResult> CallFunc_SearchPickUpWrapperActors_ReturnValue, struct FSearchedPickUpItemResult CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GetUseful_useful, struct FBattleSearchItemSortingInfo K2Node_MakeStruct_BattleSearchItemSortingInfo, bool CallFunc_CheckChange_change, bool CallFunc_Not_PreBool_ReturnValue3, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TArray<struct FBattleSearchItemSortingInfo> CallFunc_SortBattleSearchItemList_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue4, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue2, TArray<struct FSearchedTombBoxAndWrapperListResult> CallFunc_SearchTombBoxes_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);
  void UpdateWeapon1(uint8 TargetChangeSlot);
  void UpdateWeapon2(uint8 TargetChangeSlot);
  void isDurableFull(struct FBP_STRUCT_Item_type Record, struct FSearchedPickUpItemResult PickupItem, bool full, struct FSearchedPickUpItemResult SearchPickupItem, struct FItemDefineID ItemDefineID, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, UBattleItemHandle_AvatarBP_C* CallFunc_GetVolAvatarConfigByResID_config, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);
};

class APickUpListWrapperActor: public APickUpWrapperActor {
  /* offset=0x0300 flags=0x0010000000010235 */ TArray<struct FPickUpItemData> PickUpDataList;

  void FinishPickedUp(AActor* OwnerTarget, int32 AdditionalParam);
  TArray<struct FPickUpItemData> GetDataList();
  /* CL* */ void RPC_Broadcast_NotifyAllClientsModifyCount(int32 ItemInstanceID, int32 RetCount);
};

class UPickUpPropContainerComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000000214 */ TArray<AActor*> InventoryData;
};

class APickUpWrapperActor: public AUAENetActor {
  /* offset=0x02b4 flags=0x0018001040000214 */ float SpawnTime;
  /* offset=0x02b8 flags=0x0018001000010035 */ struct FItemDefineID DefineID;
  /* offset=0x02d0 flags=0x0018001040010225 */ int32 Count;
  /* offset=0x02d4 flags=0x0018001040000224 */ bool bIsInBox;
  /* offset=0x02d5 flags=0x0018001040000224 */ bool bDropedByPlayer;
  /* offset=0x02d8 flags=0x0018001040000224 */ FName OwnerName;
  /* offset=0x02e0 flags=0x00180010400a021d */ USphereComponent* Shpere;
  /* offset=0x02e4 flags=0x0018001040000224 */ bool bShowMesh;
  /* offset=0x02e8 flags=0x0018001140000224 */ AActor* AttachedActor;
  /* offset=0x02ec flags=0x0010000000000224 */ TArray<struct FBattleItemAdditionalData> SavedAdditionalDataList;
  /* offset=0x02fc flags=0x0028081040000200 */ ASTExtraBaseCharacter* TargetPlayer;

  void AddAdditionalDataListOnServerAfterSpawn(TArray<struct FBattleItemAdditionalData> DataList);
  /* CL* */ void BroadcastDataToAllClients(int32 Count_New);
  bool CheckPickUpDataIsWeapon();
  void FinishPickedUp(AActor* OwnerTarget, int32 AdditionalParam);
  void ForceNetUpdate();
  TArray<struct FPickUpItemData> GetDataList();
  void HandleEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void HandleOnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void InitData(USpotSceneComponent* GenerateSpotComponent, int32 ItemCount);
  void MarkIsDropedByPlayerOnServer(bool ret);
  void ModifyData(int32 _Count);
  void OnRep_AttachedActor();
  /* CL* */ void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(TArray<struct FBattleItemAdditionalData> DataList);
  void SetCountOnServerAfterSpawn(int32 _Count);
  void SetDefineID(struct FItemDefineID DID);
  void ShowMesh(bool bShow);
};

class UPickupComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000214 */ bool bHasBeenPickedUp;
  /* offset=0x00b0 flags=0x0010000010080200 */ FOnPickedUpFinishDelegate OnPickedUpFinishDelegate;
  /* offset=0x00bc flags=0x0010000010080200 */ FOnPutDownFinishDelegate OnPutDownFinishDelegate;
};

class UPickupManagerComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040010201 */ float PickUpZLimit;
  /* offset=0x00b0 flags=0x0018001040010201 */ bool bApplyVisibleTrace;
  /* offset=0x00b4 flags=0x0010000000010201 */ TArray<struct FVector2D> FindPutDownPointSearchRadiusGroupArray;
  /* offset=0x00c0 flags=0x0018001040010201 */ int32 FindPutDownPointCircleSplitNum;
  /* offset=0x00c4 flags=0x0018001040010201 */ float FindPutDownPointZThreshold;
  /* offset=0x00c8 flags=0x0018001040010201 */ float FindPutDownPointZTraceOffset;
  /* offset=0x00cc flags=0x0018001040010001 */ struct FVector2D RegionXRange;
  /* offset=0x00d4 flags=0x0018001040010001 */ struct FVector2D RegionYRange;
  /* offset=0x00dc flags=0x0018001040010201 */ bool bDrawDebugSearchLine;
  /* offset=0x00dd flags=0x0018001040010201 */ bool bDrawDebugSearchedPutDownPointsSphere;
  /* offset=0x00e0 flags=0x0018001040010001 */ struct FVector DebugSearchedPutDownPointsBoxExtent;
  /* offset=0x00ec flags=0x0018001040010201 */ float DebugSearchedPutDownPointsSphereRadius;
  /* offset=0x00f0 flags=0x0018001040010201 */ float DebugSearchedPutDownPointsPointSize;
  /* offset=0x00f4 flags=0x0018001040010201 */ float DrawTime;
  /* offset=0x00f8 flags=0x0018001040010201 */ bool bDebugGetLocWithOutClamp;
  /* offset=0x00fc flags=0x0020080000000200 */ TSet<AActor*> PickupAvailableActorPool;
  /* offset=0x0138 flags=0x0020080000000200 */ TSet<AActor*> ConfirmedPickupActorPool;

  /* CL  */ void ControlClientPickUpTarget(AActor* Target, int32 AdditionalParam);
  /* CL  */ void ControlClientPutDownTarget(AActor* Target);
  /* CL  */ void ControlClientPutDownTargetWithLocation(AActor* Target, struct FVector Loc);
  void GetConfirmedPickupAvailableActors(TSet<AActor*> OutSet);
  struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);
  void NotifyMeetPickupAvailableActor(AActor* Target);
  void NotifyMissPickupAvailableActor(AActor* Target);
  void PickUpTarget(AActor* Target, int32 AdditionalParam);
  void PutDownTarget(AActor* Target);
  void PutDownTargetWithLocation(AActor* Target, struct FVector Loc);
  /* SRV */ void ServerPickUpTarget(AActor* Target, int32 AdditionalParam);
  /* SRV */ void ServerPutDownTarget(AActor* Target);
  /* SRV */ void ServerPutDownTargetWithLocation(AActor* Target, struct FVector Loc);
};

class UPickupProxy: public UObject {
  /* offset=0x001c flags=0x0028081040000200 */ AActor* ProxyOwner;
};

class UPickupProxyFactory: public UInterface {
};

class UPistolInfoItem_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP;
  /* offset=0x0238 flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x023c flags=0x000a0010c008020c */ UFitingSlotItem_BP_C* FitingSlotItem_BP_C;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Image_PistolIcon;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_SelectedStatus;
  /* offset=0x0248 flags=0x000a0010c008020c */ UTextBlock* ItemContent2;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* ItemContent3;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x025c flags=0x0000001040010205 */ bool bHasTipsShow;
  /* offset=0x0260 flags=0x0008001040010205 */ UUserWidget* ParentUserWidget;
  /* offset=0x0264 flags=0x0008000000010005 */ struct FBP_STRUCT_Item_type WeaponDataRow;
  /* offset=0x0388 flags=0x0000000000010005 */ struct FSlateBrush SmallIconBrush;
  /* offset=0x03f0 flags=0x0000001040010205 */ bool bHasStartedTouchIn;

  void ExecuteUbergraph_PistolInfoItem_BP(int32 EntryPoint, struct FPointerEvent K2Node_Event_MouseEvent, bool CallFunc_IsValid_ReturnValue, UMainBackPackPanel_BP_C* K2Node_DynamicCast_AsMain_Back_Pack_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  void HighLightBG(bool IsHighLight);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_IsValid_ReturnValue, UMainBackPackPanel_BP_C* K2Node_DynamicCast_AsMain_Back_Pack_Panel_BP, bool K2Node_DynamicCast_bSuccess);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void UpdateWeaponAppearanceInfo(struct FBP_STRUCT_Item_type WeaponData, FText CallFunc_Conv_StringToText_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, UObject* CallFunc_GetAssetByAssetReference_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, UObject* CallFunc_GetAssetByAssetReference_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D2, bool K2Node_DynamicCast_bSuccess2, struct FSlateBrush K2Node_MakeStruct_SlateBrush);
};

class APlanarReflection: public ASceneCapture {
  /* offset=0x02ac flags=0x00480010400a021d */ UPlanarReflectionComponent* PlanarReflectionComponent;
  /* offset=0x02b0 flags=0x0018001040000201 */ bool bShowPreviewPlane;

  void OnInterpToggle(bool bEnable);
};

class UPlanarReflectionComponent: public USceneCaptureComponent {
  /* offset=0x02d8 flags=0x0018001040080208 */ UBoxComponent* PreviewBox;
  /* offset=0x02dc flags=0x0018001040000201 */ float NormalDistortionStrength;
  /* offset=0x02e0 flags=0x0018001040000201 */ float PrefilterRoughness;
  /* offset=0x02e4 flags=0x0018041040000201 */ float PrefilterRoughnessDistance;
  /* offset=0x02e8 flags=0x0018041040000201 */ int32 ScreenPercentage;
  /* offset=0x02ec flags=0x0018041040000201 */ float ExtraFOV;
  /* offset=0x02f0 flags=0x0018001060000200 */ float DistanceFromPlaneFadeStart;
  /* offset=0x02f4 flags=0x0018001060000200 */ float DistanceFromPlaneFadeEnd;
  /* offset=0x02f8 flags=0x0018001040000201 */ float DistanceFromPlaneFadeoutStart;
  /* offset=0x02fc flags=0x0018001040000201 */ float DistanceFromPlaneFadeoutEnd;
  /* offset=0x0300 flags=0x0018001040000201 */ float AngleFromPlaneFadeStart;
  /* offset=0x0304 flags=0x0018001040000201 */ float AngleFromPlaneFadeEnd;
  /* offset=0x0308 flags=0x0018041040000201 */ bool bRenderSceneTwoSided;
};

class APlaneReflectionCapture: public AReflectionCapture {
};

class UPlaneReflectionCaptureComponent: public UReflectionCaptureComponent {
  /* offset=0x02cc flags=0x0018001040000205 */ float InfluenceRadiusScale;
  /* offset=0x02d0 flags=0x0018001040080208 */ UDrawSphereComponent* PreviewInfluenceRadius;
  /* offset=0x02d4 flags=0x0018001040080208 */ UBoxComponent* PreviewCaptureBox;
};

class APlaneViewerPawn: public APawn {
  /* offset=0x02ec flags=0x0028081040080208 */ UCapsuleComponent* CapsuleComponent;
  /* offset=0x02f0 flags=0x00280810400a021d */ USpringArmComponent* CameraBoom;
  /* offset=0x02f4 flags=0x00280810400a021d */ UCameraComponent* FollowCamera;
};

class UPlatformEventsComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FPlatformEventDelegate PlatformChangedToLaptopModeDelegate;
  /* offset=0x00b8 flags=0x0010000010080200 */ FPlatformEventDelegate PlatformChangedToTabletModeDelegate;

  bool IsInLaptopMode();
  bool IsInTabletMode();
  void PlatformEventDelegate__DelegateSignature();
  bool SupportsConvertibleLaptops();
};

class UPlatformGameInstance: public UGameInstance {
  /* offset=0x01d8 flags=0x0010000010080200 */ FPlatformDelegate ApplicationWillDeactivateDelegate;
  /* offset=0x01e4 flags=0x0010000010080200 */ FPlatformDelegate ApplicationHasReactivatedDelegate;
  /* offset=0x01f0 flags=0x0010000010080200 */ FPlatformDelegate ApplicationWillEnterBackgroundDelegate;
  /* offset=0x01fc flags=0x0010000010080200 */ FPlatformDelegate ApplicationHasEnteredForegroundDelegate;
  /* offset=0x0208 flags=0x0010000010080200 */ FPlatformDelegate ApplicationWillTerminateDelegate;
  /* offset=0x0214 flags=0x0010000010080200 */ FPlatformRegisteredForRemoteNotificationsDelegate ApplicationRegisteredForRemoteNotificationsDelegate;
  /* offset=0x0220 flags=0x0010000010080200 */ FPlatformRegisteredForUserNotificationsDelegate ApplicationRegisteredForUserNotificationsDelegate;
  /* offset=0x022c flags=0x0010000010080200 */ FPlatformFailedToRegisterForRemoteNotificationsDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;
  /* offset=0x0238 flags=0x0010000010080200 */ FPlatformReceivedRemoteNotificationDelegate ApplicationReceivedRemoteNotificationDelegate;
  /* offset=0x0244 flags=0x0010000010080200 */ FPlatformReceivedLocalNotificationDelegate ApplicationReceivedLocalNotificationDelegate;
  /* offset=0x0250 flags=0x0010000010080200 */ FPlatformScreenOrientationChangedDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;
};

class UPlatformInterfaceBase: public UObject {
  /* offset=0x001c flags=0x0010008000000200 */ TArray<struct FDelegateArray> AllDelegates;
};

class UPlatformInterfaceWebResponse: public UObject {
  /* offset=0x001c flags=0x0018000000000200 */ FString OriginalURL;
  /* offset=0x0028 flags=0x0018001040000200 */ int32 ResponseCode;
  /* offset=0x002c flags=0x0018001040000200 */ int32 Tag;
  /* offset=0x0030 flags=0x0018000000000200 */ FString StringResponse;
  /* offset=0x003c flags=0x0010000000000200 */ TArray<uint8> BinaryResponse;

  void GetHeader(int32 HeaderIndex, FString Header, FString Value);
  FString GetHeaderValue(FString HeaderName);
  int32 GetNumHeaders();
};

class UPlatformMediaSource: public UMediaSource {
  /* offset=0x0020 flags=0x0048001040000200 */ UMediaSource* MediaSource;
};

class UPlayMontageCallbackProxy: public UObject {
  /* offset=0x001c flags=0x0010000010080200 */ FOnMontagePlayDelegate OnCompleted;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnMontagePlayDelegate OnBlendOut;
  /* offset=0x0034 flags=0x0010000010080200 */ FOnMontagePlayDelegate OnInterrupted;
  /* offset=0x0040 flags=0x0010000010080200 */ FOnMontagePlayDelegate OnNotifyBegin;
  /* offset=0x004c flags=0x0010000010080200 */ FOnMontagePlayDelegate OnNotifyEnd;

  UPlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(USkeletalMeshComponent* InSkeletalMeshComponent, UAnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);
  void OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted);
  void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);
  void OnNotifyBeginReceived(FName NotifyName, struct FBranchingPointNotifyPayload BranchingPointNotifyPayload);
  void OnNotifyEndReceived(FName NotifyName, struct FBranchingPointNotifyPayload BranchingPointNotifyPayload);
};

class UPlayer: public UObject {
  /* offset=0x0020 flags=0x0018001040002200 */ APlayerController* PlayerController;
  /* offset=0x0024 flags=0x0018001040000200 */ int32 CurrentNetSpeed;
  /* offset=0x0028 flags=0x0018001040044200 */ int32 ConfiguredInternetSpeed;
  /* offset=0x002c flags=0x0018001040044200 */ int32 ConfiguredLanSpeed;
};

class APlayerCameraManager: public AActor {
  /* offset=0x02a8 flags=0x0018001040002200 */ APlayerController* PCOwner;
  /* offset=0x02ac flags=0x00480010400a021d */ USceneComponent* TransformComponent;
  /* offset=0x02b8 flags=0x0018001040000205 */ float DefaultFOV;
  /* offset=0x02c0 flags=0x0018001040000205 */ float DefaultOrthoWidth;
  /* offset=0x02c8 flags=0x0018001040000205 */ float DefaultAspectRatio;
  /* offset=0x0310 flags=0x0010000000002000 */ struct FCameraCacheEntry CameraCache;
  /* offset=0x0840 flags=0x0010000000002000 */ struct FCameraCacheEntry LastFrameCameraCache;
  /* offset=0x0d70 flags=0x0010000000002000 */ struct FTViewTarget ViewTarget;
  /* offset=0x12b0 flags=0x0010000000002000 */ struct FTViewTarget PendingViewTarget;
  /* offset=0x1804 flags=0x0020080000002200 */ TArray<UCameraModifier*> ModifierList;
  /* offset=0x1810 flags=0x0014000000010215 */ TArray<UClass<UCameraModifier>*> DefaultModifiers;
  /* offset=0x181c flags=0x0018001040000205 */ float FreeCamDistance;
  /* offset=0x1820 flags=0x0018001040000005 */ struct FVector FreeCamOffset;
  /* offset=0x182c flags=0x0018001040000005 */ struct FVector ViewTargetOffset;
  /* offset=0x1848 flags=0x0020080000002200 */ TArray<AEmitterCameraLensEffectBase*> CameraLensEffects;
  /* offset=0x1854 flags=0x0028081040002200 */ UCameraModifier_CameraShake* CachedCameraShakeMod;
  /* offset=0x1858 flags=0x0028081040002200 */ UCameraAnimInst* AnimInstPool;
  /* offset=0x1878 flags=0x0020080000002200 */ TArray<struct FPostProcessSettings> PostProcessBlendCache;
  /* offset=0x1890 flags=0x0010000000002200 */ TArray<UCameraAnimInst*> ActiveAnims;
  /* offset=0x189c flags=0x0020080000002200 */ TArray<UCameraAnimInst*> FreeAnims;
  /* offset=0x18a8 flags=0x0028081040002200 */ ACameraActor* AnimCameraActor;
  /* offset=0x18ac flags=0x0018001000000005 */ uint8 bIsOrthographic:1;
  /* offset=0x18ac flags=0x0018001000000005 */ uint8 bDefaultConstrainAspectRatio:1;
  /* offset=0x18ac flags=0x0018001000000015 */ uint8 bUseClientSideCameraUpdates:1;
  /* offset=0x18ad flags=0x0018001000002014 */ uint8 bGameCameraCutThisFrame:1;
  /* offset=0x18b0 flags=0x0018001040000205 */ float ViewPitchMin;
  /* offset=0x18b4 flags=0x0018001040000205 */ float ViewPitchMax;
  /* offset=0x18b8 flags=0x0018001040000205 */ float ViewYawMin;
  /* offset=0x18bc flags=0x0018001040000205 */ float ViewYawMax;
  /* offset=0x18c0 flags=0x0018001040000205 */ float ViewRollMin;
  /* offset=0x18c4 flags=0x0018001040000205 */ float ViewRollMax;

  AEmitterCameraLensEffectBase* AddCameraLensEffect(UClass<AEmitterCameraLensEffectBase>* LensEffectEmitterClass);
  UCameraModifier* AddNewCameraModifier(UClass<UCameraModifier>* ModifierClass);
  bool BlueprintUpdateCamera(AActor* CameraTarget, struct FVector NewCameraLocation, struct FRotator NewCameraRotation, float NewCameraFOV);
  void ClearCameraLensEffects();
  UCameraModifier* FindCameraModifierByClass(UClass<UCameraModifier>* ModifierClass);
  struct FVector GetCameraLocation();
  struct FRotator GetCameraRotation();
  float GetFOVAngle();
  APlayerController* GetOwningPlayerController();
  void OnPhotographyMultiPartCaptureEnd();
  void OnPhotographyMultiPartCaptureStart();
  void OnPhotographySessionEnd();
  void OnPhotographySessionStart();
  void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector ResultCameraLocation);
  UCameraAnimInst* PlayCameraAnim(UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, uint8 PlaySpace, struct FRotator UserPlaySpaceRot);
  UCameraShake* PlayCameraShake(UClass<UCameraShake>* ShakeClass, float Scale, uint8 PlaySpace, struct FRotator UserPlaySpaceRot);
  void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter);
  bool RemoveCameraModifier(UCameraModifier* ModifierToRemove);
  void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio);
  void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
  void StopAllCameraAnims(bool bImmediate);
  void StopAllCameraShakes(bool bImmediately);
  void StopAllInstancesOfCameraAnim(UCameraAnim* Anim, bool bImmediate);
  void StopAllInstancesOfCameraShake(UClass<UCameraShake>* Shake, bool bImmediately);
  void StopCameraAnimInst(UCameraAnimInst* AnimInst, bool bImmediate);
  void StopCameraFade();
  void StopCameraShake(UCameraShake* ShakeInstance, bool bImmediately);
};

class APlayerController: public AController {
  /* offset=0x02f4 flags=0x0018001040000200 */ UPlayer* Player;
  /* offset=0x02fc flags=0x0018001040000200 */ APawn* AcknowledgedPawn;
  /* offset=0x0300 flags=0x0018001040002200 */ UInterpTrackInstDirector* ControllingDirTrackInst;
  /* offset=0x0308 flags=0x0018001040000200 */ AHUD* MyHUD;
  /* offset=0x030c flags=0x0018001040000214 */ APlayerCameraManager* PlayerCameraManager;
  /* offset=0x0310 flags=0x001c001040000215 */ UClass<APlayerCameraManager>* PlayerCameraManagerClass;
  /* offset=0x0314 flags=0x0018001040000201 */ bool bAutoManageActiveCameraTarget;
  /* offset=0x0318 flags=0x0010001040000020 */ struct FRotator TargetViewRotation;
  /* offset=0x0330 flags=0x0018001040000205 */ float SmoothTargetViewRotationSpeed;
  /* offset=0x0334 flags=0x0010000000000200 */ TArray<AActor*> HiddenActors;
  /* offset=0x0340 flags=0x0014008000000208 */ TArray<UPrimitiveComponent*> HiddenPrimitiveComponents;
  /* offset=0x0350 flags=0x0018001040000200 */ float LastSpectatorStateSynchTime;
  /* offset=0x0354 flags=0x0018001040002000 */ struct FVector LastSpectatorSyncLocation;
  /* offset=0x0360 flags=0x0010001040002000 */ struct FRotator LastSpectatorSyncRotation;
  /* offset=0x036c flags=0x0018001040000200 */ int32 ClientCap;
  /* offset=0x0370 flags=0x0018001040002214 */ UCheatManager* CheatManager;
  /* offset=0x0374 flags=0x001c001040010215 */ UClass<UCheatManager>* CheatClass;
  /* offset=0x0378 flags=0x0018001040002200 */ UPlayerInput* PlayerInput;
  /* offset=0x037c flags=0x0010000000002200 */ TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects;
  /* offset=0x03e8 flags=0x0018001000020815 */ uint8 bPlayerIsWaiting:1;
  /* offset=0x03e9 flags=0x0018001040200200 */ uint8 NetPlayerIndex;
  /* offset=0x0418 flags=0x0018001040200200 */ UNetConnection* PendingSwapConnection;
  /* offset=0x041c flags=0x0018001040200200 */ UNetConnection* NetConnection;
  /* offset=0x042c flags=0x0018001040004205 */ float InputYawScale;
  /* offset=0x0430 flags=0x0018001040004205 */ float InputPitchScale;
  /* offset=0x0434 flags=0x0018001040004205 */ float InputRollScale;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bShowMouseCursor:1;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bEnableClickEvents:1;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bEnableTouchEvents:1;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bEnableMouseOverEvents:1;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bEnableTouchOverEvents:1;
  /* offset=0x0438 flags=0x0018001000000005 */ uint8 bForceFeedbackEnabled:1;
  /* offset=0x043c flags=0x0018001040004200 */ float ForceFeedbackScale;
  /* offset=0x0440 flags=0x0010000000000205 */ TArray<struct FKey> ClickEventKeys;
  /* offset=0x044c flags=0x0018001040000215 */ uint8 DefaultMouseCursor;
  /* offset=0x044d flags=0x0018001040000204 */ uint8 CurrentMouseCursor;
  /* offset=0x044e flags=0x0018001040000215 */ uint8 DefaultClickTraceChannel;
  /* offset=0x044f flags=0x0018001040000204 */ uint8 CurrentClickTraceChannel;
  /* offset=0x0450 flags=0x0018001040000205 */ float HitResultTraceDistance;
  /* offset=0x04d0 flags=0x0028081040080208 */ UInputComponent* InactiveStateInputComponent;
  /* offset=0x04d4 flags=0x0028081000000005 */ uint8 bShouldPerformFullTickWhenPaused:1;
  /* offset=0x04e0 flags=0x0028081040000200 */ UTouchInterface* CurrentTouchInterface;
  /* offset=0x0524 flags=0x0048001040000200 */ ASpectatorPawn* SpectatorPawn;
  /* offset=0x0528 flags=0x0028081040000020 */ struct FVector SpawnLocation;
  /* offset=0x0538 flags=0x0048001040000200 */ bool bIsLocalPlayerController;
  /* offset=0x053a flags=0x0018001040000200 */ uint16 SeamlessTravelCount;
  /* offset=0x053c flags=0x0018001040000200 */ uint16 LastCompletedSeamlessTravelCount;

  void ActivateTouchInterface(UTouchInterface* NewTouchInterface);
  void AddPitchInput(float Val);
  void AddRollInput(float Val);
  void AddYawInput(float Val);
  void Camera(FName NewMode);
  void ClearAudioListenerOverride();
  /* CL  */ void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation);
  /* CL  */ void ClientCancelPendingMapChange();
  /* CL  */ void ClientCapBandwidth(int32 Cap);
  /* CL  */ void ClientClearCameraLensEffects();
  /* CL  */ void ClientCommitMapChange();
  /* CL  */ void ClientEnableNetworkVoice(bool bEnable);
  /* CL  */ void ClientEndOnlineSession();
  /* CL  */ void ClientFlushLevelStreaming();
  /* CL  */ void ClientForceGarbageCollection();
  /* CL  */ void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner);
  /* CL  */ void ClientGotoState(FName NewState);
  /* CL  */ void ClientIgnoreLookInput(bool bIgnore);
  /* CL  */ void ClientIgnoreMoveInput(bool bIgnore);
  /* CL  */ void ClientMessage(FString S, FName Type, float MsgLifeTime);
  /* CL  */ void ClientMutePlayer(struct FUniqueNetIdRepl PlayerId);
  /* CL  */ void ClientPlayCameraAnim(UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, uint8 Space, struct FRotator CustomPlaySpace);
  /* CL  */ void ClientPlayCameraShake(UClass<UCameraShake>* Shake, float Scale, uint8 PlaySpace, struct FRotator UserPlaySpaceRot);
  /* CL  */ void ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);
  /* CL  */ void ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
  /* CL  */ void ClientPlaySoundAtLocation(USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier);
  /* CL  */ void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);
  /* CL  */ void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups);
  /* CL  */ void ClientReceiveLocalizedMessage(UClass<ULocalMessage>* Message, int32 Switch, APlayerState* RelatedPlayerState, APlayerState* RelatedPlayerState, UObject* OptionalObject);
  /* CL  */ void ClientRepObjRef(UObject* Object);
  /* CL  */ void ClientReset();
  /* CL  */ void ClientRestart(APawn* NewPawn);
  /* CL  */ void ClientRetryClientRestart(APawn* NewPawn);
  /* CL  */ void ClientReturnToMainMenu(FString ReturnReason);
  /* CL  */ void ClientSetBlockOnAsyncLoading();
  /* CL  */ void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio);
  /* CL  */ void ClientSetCameraMode(FName NewCamMode);
  /* CL  */ void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
  /* CL  */ void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups);
  /* CL  */ void ClientSetHUD(UClass<AHUD>* NewHUDClass);
  /* CL  */ void ClientSetSpectatorWaiting(bool bWaiting);
  /* CL  */ void ClientSetViewTarget(AActor* A, struct FViewTargetTransitionParams TransitionParams);
  /* CL  */ void ClientSpawnCameraLensEffect(UClass<AEmitterCameraLensEffectBase>* LensEffectEmitterClass);
  /* CL  */ void ClientStartOnlineSession();
  /* CL  */ void ClientStopCameraAnim(UCameraAnim* AnimToStop);
  /* CL  */ void ClientStopCameraShake(UClass<UCameraShake>* Shake, bool bImmediately);
  /* CL  */ void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);
  /* CL  */ void ClientTeamMessage(APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);
  void ClientTravel(FString URL, uint8 TravelType, bool bSeamless, struct FGuid MapPackageGuid);
  /* CL  */ void ClientTravelInternal(FString URL, uint8 TravelType, bool bSeamless, struct FGuid MapPackageGuid);
  /* CL  */ void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId);
  /* CL  */ void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex);
  /* CL  */ void ClientVoiceHandshakeComplete();
  /* CL  */ void ClientWasKicked(FText KickReason);
  void ConsoleKey(struct FKey Key);
  bool DeprojectMousePositionToWorld(struct FVector WorldLocation, struct FVector WorldDirection);
  bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector WorldLocation, struct FVector WorldDirection);
  void EnableCheats();
  void FOV(float NewFOV);
  struct FVector GetFocalLocation();
  AHUD* GetHUD();
  bool GetHitResultUnderCursor(uint8 TraceChannel, bool bTraceComplex, struct FHitResult HitResult);
  bool GetHitResultUnderCursorByChannel(uint8 TraceChannel, bool bTraceComplex, struct FHitResult HitResult);
  bool GetHitResultUnderCursorForObjects(TArray<uint8> ObjectTypes, bool bTraceComplex, struct FHitResult HitResult);
  bool GetHitResultUnderFinger(uint8 FingerIndex, uint8 TraceChannel, bool bTraceComplex, struct FHitResult HitResult);
  bool GetHitResultUnderFingerByChannel(uint8 FingerIndex, uint8 TraceChannel, bool bTraceComplex, struct FHitResult HitResult);
  bool GetHitResultUnderFingerForObjects(uint8 FingerIndex, TArray<uint8> ObjectTypes, bool bTraceComplex, struct FHitResult HitResult);
  float GetInputAnalogKeyState(struct FKey Key);
  void GetInputAnalogStickState(uint8 WhichStick, float StickX, float StickY);
  float GetInputKeyTimeDown(struct FKey Key);
  void GetInputMotionState(struct FVector Tilt, struct FVector RotationRate, struct FVector Gravity, struct FVector Acceleration);
  void GetInputMouseDelta(float DeltaX, float DeltaY);
  void GetInputTouchState(uint8 FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);
  struct FVector GetInputVectorKeyState(struct FKey Key);
  bool GetMousePosition(float LocationX, float LocationY);
  ASpectatorPawn* GetSpectatorPawn();
  void GetViewportSize(int32 SizeX, int32 SizeY);
  bool IsInputKeyDown(struct FKey Key);
  void LocalTravel(FString URL);
  /* CL  */ void OnServerStartedVisualLogger(bool bIsLogging);
  void Pause();
  void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, uint8 Action, struct FLatentActionInfo LatentInfo);
  void PlayHapticEffect(UHapticFeedbackEffect_Base* HapticEffect, enum EControllerHand Hand, float Scale, bool bLoop);
  bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D ScreenLocation, bool bPlayerViewportRelative);
  void RestartLevel();
  void SendToConsole(FString Command);
  /* SRV */ void ServerAcknowledgePossession(APawn* P);
  /* SRV */ void ServerCamera(FName NewMode);
  /* SRV */ void ServerChangeName(FString S);
  /* SRV */ void ServerCheckClientPossession();
  /* SRV */ void ServerCheckClientPossessionReliable();
  /* SRV */ void ServerMutePlayer(struct FUniqueNetIdRepl PlayerId);
  /* SRV */ void ServerNotifyLoadedWorld(FName WorldPackageName);
  /* SRV */ void ServerPause();
  /* SRV */ void ServerRestartPlayer();
  /* SRV */ void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot);
  /* SRV */ void ServerSetSpectatorWaiting(bool bWaiting);
  /* SRV */ void ServerShortTimeout();
  /* SRV */ void ServerToggleAILogging();
  /* SRV */ void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId);
  /* SRV */ void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32 CamPitchAndYaw);
  /* SRV */ void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);
  /* SRV */ void ServerVerifyViewTarget();
  /* SRV */ void ServerViewNextPlayer();
  /* SRV */ void ServerViewPrevPlayer();
  /* SRV */ void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams);
  void SetAudioListenerOverride(USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation);
  void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
  void SetControllerLightColor(struct FColor Color);
  void SetHapticsByValue(float Frequency, float Amplitude, enum EControllerHand Hand);
  void SetMouseCursorWidget(uint8 Cursor, UUserWidget* CursorWidget);
  void SetMouseLocation(int32 X, int32 Y);
  void SetName(FString S);
  void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, uint8 BlendFunc, float BlendExp, bool bLockOutgoing);
  void SetVirtualJoystickVisibility(bool bVisible);
  void StartFire(uint8 FireModeNum);
  void StopHapticEffect(enum EControllerHand Hand);
  void SwitchLevel(FString URL);
  void ToggleSpeaking(bool bInSpeaking);
  bool WasInputKeyJustPressed(struct FKey Key);
  bool WasInputKeyJustReleased(struct FKey Key);
};

class UPlayerControllerState: public UObject {
  /* offset=0x001c flags=0x0028081040080208 */ UPlayerControllerStateMachine* OwnerStateMachine;
};

class UPlayerControllerStateActive: public UPlayerControllerState {
};

class UPlayerControllerStateFighting: public UPlayerControllerState {
};

class UPlayerControllerStateFinished: public UPlayerControllerState {
  /* offset=0x0030 flags=0x0028081040000201 */ float TimeInterval;
};

class UPlayerControllerStateFlying: public UPlayerControllerState {
};

class UPlayerControllerStateJumping: public UPlayerControllerState {
  /* offset=0x0024 flags=0x0028081040000201 */ float JumpRadius;
  /* offset=0x0028 flags=0x0028081040000201 */ float JumpHeight;
};

class UPlayerControllerStateLanding: public UPlayerControllerState {
};

class UPlayerControllerStateMachine: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ ASTExtraPlayerController* OwnerPlayerController;
  /* offset=0x0020 flags=0x0028081040080208 */ UPlayerControllerState* CurrentState;
  /* offset=0x0024 flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateActive;
  /* offset=0x0028 flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateFlying;
  /* offset=0x002c flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateJumping;
  /* offset=0x0030 flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateLanding;
  /* offset=0x0034 flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateFighting;
  /* offset=0x0038 flags=0x0028081040080208 */ UPlayerControllerState* PlayerControllerStateFinished;
};

class UPlayerDamageEffectComponent: public UStaticMeshComponent {
  /* offset=0x0628 flags=0x0018000000010201 */ FString MeshPath;
  /* offset=0x0638 flags=0x0028081040000200 */ UMaterialInstanceDynamic* DynamicMat;

  void OnCharacterHPChange(float currentHP, float ratioHP);
};

class APlayerDeadInventoryBox_C: public APlayerTombBox {
  /* offset=0x02c8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02cc flags=0x0008001440000204 */ USTScreenAppearanceComponent* STScreenAppearance;
  /* offset=0x02d0 flags=0x0008001440000204 */ UStaticMeshComponent* SM_plane_01;
  /* offset=0x02d4 flags=0x0008001440000204 */ USplineComponent* Spline;
  /* offset=0x02d8 flags=0x0008001440000204 */ UCameraComponent* Camera;
  /* offset=0x02dc flags=0x0008001440000204 */ UStaticMeshComponent* Survive_FMC_Chest1;
  /* offset=0x02e0 flags=0x0008001040000200 */ float PitchTimeline_NewTrack_2_205B9CD1420D3E41B68BD2972C581F3D;
  /* offset=0x02e4 flags=0x0008001040000200 */ uint8 PitchTimeline__Direction_205B9CD1420D3E41B68BD2972C581F3D;
  /* offset=0x02e8 flags=0x0008001040000204 */ UTimelineComponent* PitchTimeline;
  /* offset=0x02ec flags=0x0008001040000200 */ float MatParamTimeline_NewTrack_1_C8C041AE4B3988DE01E45DAE7F4B004E;
  /* offset=0x02f0 flags=0x0008001040000200 */ uint8 MatParamTimeline__Direction_C8C041AE4B3988DE01E45DAE7F4B004E;
  /* offset=0x02f4 flags=0x0008001040000204 */ UTimelineComponent* MatParamTimeline;
  /* offset=0x02f8 flags=0x0008001040000200 */ float CameraMove_NewTrack_0_02104D1147E475B0CAB09B933E483A5B;
  /* offset=0x02fc flags=0x0008001040000200 */ uint8 CameraMove__Direction_02104D1147E475B0CAB09B933E483A5B;
  /* offset=0x0300 flags=0x0008001040000204 */ UTimelineComponent* CameraMove;
  /* offset=0x0304 flags=0x0008001040010205 */ UMaterialInstanceDynamic* DynamicMat;

  void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void CameraMove__FinishedFunc();
  void CameraMove__UpdateFunc();
  void ExecuteUbergraph_PlayerDeadInventoryBox(int32 EntryPoint, struct FRotator CallFunc_MakeRotator_ReturnValue, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, AActor* K2Node_ComponentBoundEvent_OtherActor2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int32 K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult K2Node_ComponentBoundEvent_SweepResult, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, AActor* K2Node_ComponentBoundEvent_OtherActor, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, TArray<struct FSearchedPickUpItemResult> CallFunc_SearchPickUpWrapperActors_ReturnValue, AController* CallFunc_GetController_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_Greater_IntInt_ReturnValue, AController* CallFunc_GetController_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, float CallFunc_GetSplineLength_ReturnValue, UMaterialInstanceDynamic* CallFunc_PlayCustomScreenAppearance_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_HasAuthority_ReturnValue, struct FHitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, float K2Node_Event_DeltaSeconds, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsScreenAppearancePlaying_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsSameTeam_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, UParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2);
  struct FVector GetGroundLocation(TArray<uint8> K2Node_MakeArray_Array, struct FVector CallFunc_K2_GetActorLocation_ReturnValue, struct FVector CallFunc_K2_GetActorLocation_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array2, struct FHitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd);
  void GetVector4(struct FVector Dest, float Ratio);
  void HideDeadTombApparence();
  void MatParamTimeline__FinishedFunc();
  void MatParamTimeline__UpdateFunc();
  void PitchTimeline__FinishedFunc();
  void PitchTimeline__UpdateFunc();
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void ShowNormal();
  void ShowShine();
  void SwitchToDeadTombBox();
  void UserConstructionScript();
};

class APlayerEquipmentProp: public ASTExtraProp {
  /* offset=0x0300 flags=0x0018001040000215 */ uint8 EquipmentLevel;
  /* offset=0x0304 flags=0x0018001040000215 */ float DamageMultiplyAdditionalRate;
};

class UPlayerEquipmentSlot_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x01b4 flags=0x0008001040000205 */ uint8 EquipmentSlotType;
  /* offset=0x01b8 flags=0x0000000000010005 */ struct FSlateBrush DefaultProfileImg;

  void UpdateData();
};

class UPlayerGunCollosionComp: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040010215 */ float DetectInterval;
  /* offset=0x00b0 flags=0x0018001040010215 */ int32 DetectThreshold;
  /* offset=0x00b4 flags=0x0018001040010215 */ float FoldFactor;
};

class UPlayerInfoPanel_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* EnergyChangeAnim;
  /* offset=0x0238 flags=0x000a0010c008020c */ UGridPanel* GridPanel_Help;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* GridPanel_Power;
  /* offset=0x0240 flags=0x000a0010c008020c */ UHorizontalBox* HorizontalBox;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image_Self_HPNormalStatus;
  /* offset=0x0250 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Addition;
  /* offset=0x0254 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Power1;
  /* offset=0x0258 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Power2;
  /* offset=0x025c flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Power3;
  /* offset=0x0260 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Power4;
  /* offset=0x0264 flags=0x000a0010c008020c */ UProgressBar* Self_BeingHitBar;
  /* offset=0x0268 flags=0x000a0010c008020c */ UProgressBar* Self_DeadBar;
  /* offset=0x026c flags=0x000a0010c008020c */ UProgressBar* Self_LowHPWaringBar;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* Self_Name;
  /* offset=0x0274 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Self_HPStatus;
  /* offset=0x0278 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_SelfStatus;
  /* offset=0x027c flags=0x0008000000010205 */ FString Player1NameValue;
  /* offset=0x0288 flags=0x0008001040010205 */ float CurEnergy;
  /* offset=0x028c flags=0x0008001040010205 */ float RecoverStartHealth;
  /* offset=0x0290 flags=0x0008001040010205 */ int32 RecoverCount;
  /* offset=0x0294 flags=0x0008001040010205 */ float PredictStepValue;
  /* offset=0x0298 flags=0x0008001040010205 */ float PrePredictValue;
  /* offset=0x029c flags=0x0008001040010205 */ float TotalAddToHealth;
  /* offset=0x02a0 flags=0x0008001040010205 */ float WaitAddPredictTime;
  /* offset=0x02a4 flags=0x0000001040010205 */ bool NeedPredictWaitForHide;
  /* offset=0x02a5 flags=0x0000001040010205 */ bool IsMultAddHealth;
  /* offset=0x02a8 flags=0x0008001040010205 */ float PredictHideBaseHealth;

  void ClearHPUI();
  void Destruct();
  void ExecuteUbergraph_PlayerInfoPanel(int32 EntryPoint, FOnCharacterBreathChangeDelegate K2Node_CreateDelegate_OutputDelegate, FOnCharacterRecoveryHealth K2Node_CreateDelegate_OutputDelegate2, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, bool CallFunc_LessEqual_FloatFloat_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float K2Node_CustomEvent_currentBR, float K2Node_CustomEvent_ratioBR, ACharacter* K2Node_CustomEvent_OwnerCharacter, int32 K2Node_CustomEvent_HealthStatus, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void ForceUpdate_Health(float CurHealth, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue3, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);
  void GetPlayerHealth(float PredictValue, float CallFunc_Multiply_IntFloat_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2);
  void HidePredictNextFrame(FRunOnNextFrame K2Node_CreateDelegate_OutputDelegate, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue);
  void OnCanRescueOther(ACharacter* CanRescueWho, ACharacter* Owner, bool IsBecomeCan);
  void OnPlayerNameChange(FString PlayerName, int32 CallFunc_Len_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void OnRecoveryStart();
  void OnUpdateBreath(float Breath, float Ratio, ACharacter* Who, int32 HealthStatus, bool CallFunc_EqualEqual_IntInt_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, AController* CallFunc_GetController_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void OnUpdateHP(float currentHP, float ratioHP, float CurHealth, float red, float pink, float CallFunc_FClamp_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue2, bool CallFunc_InRange_FloatFloat_ReturnValue3);
  void PlayerInfo_UpdateBreath(float Breath, float Ratio, ACharacter* Who, int32 HealthStatus);
  void PlayerInfo_UpdateEnergy(float LaestestEnergy, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_FClamp_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, float CallFunc_FClamp_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_FClamp_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue, UUIDataProcessingFunctionLibrary* CallFunc_UILibraryInstance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue6, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_GetCharacterEnergyValue_ReturnValue);
  void PlayerInfo_UpdateHealth(float CurHealth);
  void PlayerInfo_UpdatePredictHealth(float CurPredictHealth, FRunOnNextFrame K2Node_CreateDelegate_OutputDelegate, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_GetPlayerHealth_PredictValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, float CallFunc_GetValueLimitForHealthPredict_ReturnValue, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);
  void ReceivedInitWidget();
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetSettingControlUI();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateBreath(float currentBR, float ratioBR, ACharacter* OwnerCharacter, int32 HealthStatus);
  void UpdatePlayerBuff(float Energy, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue2);
};

class UPlayerInput: public UObject {
  /* offset=0x00f8 flags=0x0010000000004200 */ TArray<struct FKeyBind> DebugExecBindings;
  /* offset=0x0128 flags=0x0010000000004200 */ TArray<FName> InvertedAxis;

  void ClearSmoothing();
  void InvertAxis(FName AxisName);
  void InvertAxisKey(struct FKey AxisKey);
  void SetBind(FName BindName, FString Command);
  void SetMouseSensitivity(float Sensitivity);
};

class UPlayerPrefs_C: public USaveGame {
  /* offset=0x0020 flags=0x0008001040010205 */ int32 LoginCount;
  /* offset=0x0024 flags=0x0008001040010205 */ int32 LoginTime;
  /* offset=0x0028 flags=0x0000001040010205 */ bool FirstInLobby;

  void ClearCount(bool CallFunc_SaveData_SaveDataState);
  USaveGame* LoadData(USaveGame* CallFunc_LoadGameFromSlot_ReturnValue);
  void SaveData(bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);
  void SetCount(int32 Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SaveData_SaveDataState);
  void SetFirstInLobby(bool CallFunc_SaveData_SaveDataState);
  void SetTime(int32 arg, bool CallFunc_SaveData_SaveDataState);
};

class UPlayerSecurityInfoCollector: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000010201 */ TArray<int32> EnergyItemIDList;
  /* offset=0x00b8 flags=0x0010000000010201 */ TArray<int32> EnergySpeedUpPhaseIndexList;
  /* offset=0x00c4 flags=0x0018001040010201 */ bool bEnableDetailFlowLog;
  /* offset=0x00c5 flags=0x0018001040010201 */ bool bEnableDetailHurtFlowLog;
  /* offset=0x00c8 flags=0x0010000000000000 */ struct FClientCircleFlow CurCircleFlow;
  /* offset=0x01d0 flags=0x0010000000000000 */ struct FClientCircleFlow CollectCircleFlow;
  /* offset=0x02d8 flags=0x0010000000000000 */ struct FHurtFlow CurHurtFlow;

  void HandleCharacterAttrChangedWithDetail(AActor* nowActor, FString AttrName, float ValueDelta, float ResultValue);
  void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);
  void HandleCharacterBlueCircleRun(float BlueCircleRunTime);
  void HandleCharacterCircleSizeAndPosition(struct FVector BlueCircleSync, struct FVector WhiteCircleSync, int32 Index);
  void HandleCharacterCircleWaveOver(int32 Index);
  void HandleCharacterSafeZoneTips(float SafeZoneTime);
  void StartOnPlane();
};

class APlayerStart: public ANavigationObjectBase {
  /* offset=0x02c0 flags=0x0018001040000205 */ FName PlayerStartTag;
};

class APlayerStartPIE: public APlayerStart {
};

class APlayerState: public AInfo {
  /* offset=0x02a8 flags=0x0018001140000234 */ float Score;
  /* offset=0x02ac flags=0x0018001040000234 */ uint8 Ping;
  /* offset=0x02b0 flags=0x0018000100000234 */ FString PlayerName;
  /* offset=0x02c8 flags=0x0018001040000234 */ int32 PlayerId;
  /* offset=0x02cc flags=0x0018001000000034 */ uint8 bIsSpectator:1;
  /* offset=0x02cc flags=0x0018001000000020 */ uint8 bOnlySpectator:1;
  /* offset=0x02cc flags=0x0018001000000034 */ uint8 bIsABot:1;
  /* offset=0x02cc flags=0x0018001100000020 */ uint8 bIsInactive:1;
  /* offset=0x02cc flags=0x0018001000000020 */ uint8 bFromPreviousLevel:1;
  /* offset=0x02d0 flags=0x0018001040000220 */ int32 StartTime;
  /* offset=0x02d4 flags=0x001c001040000200 */ UClass<ULocalMessage>* EngineMessageClass;
  /* offset=0x02dc flags=0x0018000000000200 */ FString SavedNetworkAddress;
  /* offset=0x02e8 flags=0x0018000100000020 */ struct FUniqueNetIdRepl UniqueId;

  void OnRep_PlayerName();
  void OnRep_Score();
  void OnRep_UniqueId();
  void OnRep_bIsInactive();
  void ReceiveCopyProperties(APlayerState* NewPlayerState);
  void ReceiveOverrideWith(APlayerState* OldPlayerState);
};

class APlayerTombBox: public AActor {
  /* offset=0x02a8 flags=0x0018001040000234 */ FName TombName;
  /* offset=0x02b0 flags=0x0018001040000234 */ ASTExtraBaseCharacter* TargetPlayer;
  /* offset=0x02b4 flags=0x0018001040000234 */ ASTExtraBaseCharacter* DamageCauser;
  /* offset=0x02b8 flags=0x0018001040000234 */ int32 DeadTime;
  /* offset=0x02bc flags=0x0018001040000234 */ bool bDisableCollision;
  /* offset=0x02c0 flags=0x00180010400a021d */ USphereComponent* Shpere;
  /* offset=0x02c4 flags=0x0018001140000224 */ AActor* AttachedActor;

  void GenerateAirDropBoxWrappers(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, FName AirBoxName);
  void GeneratePlayerBackpackWrappers();
  void HandleEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void HandleOnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void HideDeadTombApparence();
  void OnRep_AttachedActor();
  void SwitchToDeadTombBox();
};

class UPluginCommandlet: public UCommandlet {
};

class APointLight: public ALight {
  /* offset=0x02b0 flags=0x001800104008021c */ UPointLightComponent* PointLightComponent;

  void SetLightFalloffExponent(float NewLightFalloffExponent);
  void SetRadius(float NewRadius);
};

class UPointLightComponent: public ULightComponent {
  /* offset=0x0360 flags=0x0018001060000200 */ float Radius;
  /* offset=0x0364 flags=0x0018001240000215 */ float AttenuationRadius;
  /* offset=0x0368 flags=0x0018041000000015 */ uint8 bUseInverseSquaredFalloff:1;
  /* offset=0x036c flags=0x0018041240000215 */ float LightFalloffExponent;
  /* offset=0x0370 flags=0x0018001040000215 */ float SourceRadius;
  /* offset=0x0374 flags=0x0018001040000215 */ float SoftSourceRadius;
  /* offset=0x0378 flags=0x0018001040000215 */ float SourceLength;
  /* offset=0x037c flags=0x0010001000000001 */ struct FLightmassPointLightSettings LightmassSettings;

  void SetAttenuationRadius(float NewRadius);
  void SetLightFalloffExponent(float NewLightFalloffExponent);
  void SetSoftSourceRadius(float bNewValue);
  void SetSourceLength(float NewValue);
  void SetSourceRadius(float bNewValue);
};

class UPolys: public UObject {
};

class UPopupNotice_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x023c flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* Distance;
  /* offset=0x0244 flags=0x000a0010c008020c */ UGridPanel* MsgBox;
  /* offset=0x0248 flags=0x000a0010c008020c */ UCanvasPanel* MsgNode;
  /* offset=0x024c flags=0x000a0010c008020c */ UTextBlock* TextBlock_WindowsTitle;
  /* offset=0x0250 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_TipsContent;
  /* offset=0x0254 flags=0x0008001040010a05 */ Abp_popup_notice_C* MySelfBp;
  /* offset=0x0258 flags=0x0000000000010205 */ TArray<FString> NoticeMsgList;
  /* offset=0x0264 flags=0x0000000000010205 */ TArray<FString> NoticeMsgFastList;

  void BndEvt__Button_CloseUI_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Close();
  void Construct();
  void ExecuteUbergraph_PopupNotice_BP(int32 EntryPoint, UItemPopUpNotice_BP_C* CallFunc_Create_ReturnValue, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, FString K2Node_CustomEvent_msg, Abp_popup_notice_C* K2Node_DynamicCast_AsBp_Popup_Notice, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void FlyingOut();
  void OnPopMsgReceived(FString msg);
  void RemoveAllNotice();
  void RemoveFastPopNotice(bool CallFunc_Array_IsValidIndex_ReturnValue);
  void RemovePopNotice(bool CallFunc_Array_IsValidIndex_ReturnValue);
  void ShowMsgBox(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void ShowNextPopNotice(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, UItemPopUpNotice_BP_C* CallFunc_Create_ReturnValue, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
  void ShowNextPopNoticeFast(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, UItemPopUpNotice_BP_C* CallFunc_Create_ReturnValue, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
  void ShowPopNotice(UItemPopUpNotice_BP_C* CallFunc_Create_ReturnValue, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
  void ShowPopNoticeFast(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void ShowPopNoticeQueue(int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void UIHide();
  void UIShow();
};

class UPoseAsset: public UAnimationAsset {
  /* offset=0x005c flags=0x0040000000000000 */ struct FPoseDataContainer PoseContainer;
  /* offset=0x00c8 flags=0x0048001040000200 */ bool bAdditivePose;
  /* offset=0x00cc flags=0x0048001040000200 */ int32 BasePoseIndex;
  /* offset=0x00d0 flags=0x0018001040000201 */ FName RetargetSource;
};

class UPoseWatch: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UEdGraphNode* Node;
  /* offset=0x0020 flags=0x0018001040000000 */ struct FColor PoseWatchColour;
};

class UPoseableMeshComponent: public USkinnedMeshComponent {
  void CopyPoseFromSkeletalComponent(USkeletalMeshComponent* InComponentToCopy);
  struct FVector GetBoneLocationByName(FName BoneName, uint8 BoneSpace);
  struct FRotator GetBoneRotationByName(FName BoneName, uint8 BoneSpace);
  struct FVector GetBoneScaleByName(FName BoneName, uint8 BoneSpace);
  struct FTransform GetBoneTransformByName(FName BoneName, uint8 BoneSpace);
  void ResetBoneTransformByName(FName BoneName);
  void SetBoneLocationByName(FName BoneName, struct FVector InLocation, uint8 BoneSpace);
  void SetBoneRotationByName(FName BoneName, struct FRotator InRotation, uint8 BoneSpace);
  void SetBoneScaleByName(FName BoneName, struct FVector InScale3D, uint8 BoneSpace);
  void SetBoneTransformByName(FName BoneName, struct FTransform InTransform, uint8 BoneSpace);
};

class UPostProcessComponent: public USceneComponent {
  /* offset=0x0280 flags=0x0010000200000005 */ struct FPostProcessSettings Settings;
  /* offset=0x0750 flags=0x0018001040000205 */ float Priority;
  /* offset=0x0754 flags=0x0018001240000205 */ float BlendRadius;
  /* offset=0x0758 flags=0x0018001240000205 */ float BlendWeight;
  /* offset=0x075c flags=0x0018001000000005 */ uint8 bEnabled:1;
  /* offset=0x075c flags=0x0018001000000005 */ uint8 bUnbound:1;

  void AddOrUpdateBlendable(UInterface<UBlendableInterface>* InBlendableObject, float InWeight);
};

class APostProcessVolume: public AVolume {
  /* offset=0x02e0 flags=0x0010000200000005 */ struct FPostProcessSettings Settings;
  /* offset=0x07b0 flags=0x0018001040000205 */ float Priority;
  /* offset=0x07b4 flags=0x0018001240000205 */ float BlendRadius;
  /* offset=0x07b8 flags=0x0018001240000205 */ float BlendWeight;
  /* offset=0x07bc flags=0x0018001000000005 */ uint8 bEnabled:1;
  /* offset=0x07bc flags=0x0018001000000005 */ uint8 bUnbound:1;

  void AddOrUpdateBlendable(UInterface<UBlendableInterface>* InBlendableObject, float InWeight);
};

class UPostureRecognitionComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0010000010080200 */ FAccelerateMoveDelegate OnAccelerateMoveUpdate;
  /* offset=0x027c flags=0x0010000010080200 */ FDccelerateMoveDelegate OnDecelerateMoveUpdate;
  /* offset=0x0288 flags=0x0010000010080200 */ FUniformMoveDelegate OnUniformMoveUpdate;
  /* offset=0x0294 flags=0x0010000010080200 */ FChangeMovingStateDelegate OnChangeMovingState;
  /* offset=0x02a0 flags=0x0018001040010215 */ float MinAccelerationThreshold;
  /* offset=0x02a4 flags=0x0018001040010215 */ float MinDccelerationThreshold;
  /* offset=0x02a8 flags=0x0018001040000014 */ struct FVector CurMoveSpeed;
  /* offset=0x02b4 flags=0x0018001040000014 */ struct FVector CurMoveAcc;
  /* offset=0x02c0 flags=0x0018001040000214 */ uint8 CurMovingType;
};

class APrecomputedVisibilityOverrideVolume: public AVolume {
  /* offset=0x02d0 flags=0x0010000000000205 */ TArray<AActor*> OverrideVisibleActors;
  /* offset=0x02dc flags=0x0010000000000205 */ TArray<AActor*> OverrideInvisibleActors;
  /* offset=0x02e8 flags=0x0010000000000205 */ TArray<FName> OverrideInvisibleLevels;
};

class APrecomputedVisibilityVolume: public AVolume {
};

class UPreviewCollectionInterface: public UInterface {
};

class UPreviewMeshCollection: public UDataAsset {
  /* offset=0x0024 flags=0x0018011040020201 */ USkeleton* Skeleton;
  /* offset=0x0028 flags=0x0010000000000201 */ TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes;
};

class UPrimaryAssetLabel: public UPrimaryDataAsset {
  /* offset=0x0020 flags=0x0010001000000001 */ struct FPrimaryAssetRules Rules;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bLabelAssetsInMyDirectory:1;
  /* offset=0x0030 flags=0x0018001000000001 */ uint8 bIsRuntimeLabel:1;
  /* offset=0x0034 flags=0x0014000000000201 */ TArray<UObject*> ExplicitAssets;
  /* offset=0x0040 flags=0x0014000000000201 */ TArray<UClass<UObject>*> ExplicitBlueprints;
  /* offset=0x0050 flags=0x0010001000000001 */ struct FCollectionReference AssetCollection;
};

class UPrimaryDataAsset: public UDataAsset {
};

class UPrimitiveComponent: public USceneComponent {
  /* offset=0x0274 flags=0x0018041040000215 */ float CullingScreenSize;
  /* offset=0x0278 flags=0x0018041040000215 */ float MinDrawDistance;
  /* offset=0x027c flags=0x0018041040000215 */ float LDMaxDrawDistance;
  /* offset=0x0280 flags=0x0018041040020215 */ float CachedMaxDrawDistance;
  /* offset=0x0284 flags=0x0018001040000200 */ uint8 DepthPriorityGroup;
  /* offset=0x0285 flags=0x0018001040000200 */ uint8 ViewOwnerDepthPriorityGroup;
  /* offset=0x0286 flags=0x0018041000000015 */ uint8 bAlwaysCreatePhysicsState:1;
  /* offset=0x0286 flags=0x0018001000000005 */ uint8 bGenerateOverlapEvents:1;
  /* offset=0x0286 flags=0x0018041000000005 */ uint8 bMultiBodyOverlap:1;
  /* offset=0x0286 flags=0x0018041000000005 */ uint8 bCheckAsyncSceneOnMove:1;
  /* offset=0x0286 flags=0x0018041000000005 */ uint8 bTraceComplexOnMove:1;
  /* offset=0x0287 flags=0x0018041000000005 */ uint8 bReturnMaterialOnMove:1;
  /* offset=0x0287 flags=0x0018001000000000 */ uint8 bUseViewOwnerDepthPriorityGroup:1;
  /* offset=0x0287 flags=0x0018041000000015 */ uint8 bAllowCullDistanceVolume:1;
  /* offset=0x0287 flags=0x0018001000000000 */ uint8 bHasMotionBlurVelocityMeshes:1;
  /* offset=0x0287 flags=0x0018041000000015 */ uint8 bVisibleInReflectionCaptures:1;
  /* offset=0x0287 flags=0x0018041000000015 */ uint8 bRenderInMainPass:1;
  /* offset=0x0287 flags=0x0018041000000015 */ uint8 bRenderInMono:1;
  /* offset=0x0287 flags=0x0018041000000015 */ uint8 bReceivesDecals:1;
  /* offset=0x0288 flags=0x0018041000000015 */ uint8 bOwnerNoSee:1;
  /* offset=0x0288 flags=0x0018041000000015 */ uint8 bOnlyOwnerSee:1;
  /* offset=0x0288 flags=0x0018041000000015 */ uint8 bTreatAsBackgroundForOcclusion:1;
  /* offset=0x0288 flags=0x0018041000000015 */ uint8 bUseAsOccluder:1;
  /* offset=0x0288 flags=0x0018001000000000 */ uint8 bSelectable:1;
  /* offset=0x0288 flags=0x0018041000000015 */ uint8 bForceMipStreaming:1;
  /* offset=0x0288 flags=0x0018001000000000 */ uint8 bHasPerInstanceHitProxies:1;
  /* offset=0x0288 flags=0x0018001000000015 */ uint8 CastShadow:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bAffectDynamicIndirectLighting:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bAffectDistanceFieldLighting:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bCastDynamicShadow:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bCastStaticShadow:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bCastVolumetricTranslucentShadow:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bSelfShadowOnly:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bCastFarShadow:1;
  /* offset=0x0289 flags=0x0018041000000015 */ uint8 bCastInsetShadow:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bCastCinematicShadow:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bCastHiddenShadow:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bCastShadowAsTwoSided:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bLightAsIfStatic:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bLightAttachmentsAsGroup:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bReceiveCombinedCSMAndStaticShadowsFromStationaryLights:1;
  /* offset=0x028a flags=0x0018041000000015 */ uint8 bSingleSampleShadowFromStationaryLights:1;
  /* offset=0x028a flags=0x0018001000000005 */ uint8 bIgnoreRadialImpulse:1;
  /* offset=0x028b flags=0x0018001000000005 */ uint8 bIgnoreRadialForce:1;
  /* offset=0x028b flags=0x0018001000000005 */ uint8 bApplyImpulseOnDamage:1;
  /* offset=0x028b flags=0x0018001000000000 */ uint8 AlwaysLoadOnClient:1;
  /* offset=0x028b flags=0x0018001000000000 */ uint8 AlwaysLoadOnServer:1;
  /* offset=0x028b flags=0x0018001000000000 */ uint8 bUseEditorCompositing:1;
  /* offset=0x028b flags=0x0018041000000015 */ uint8 bRenderCustomDepth:1;
  /* offset=0x028c flags=0x0018001040000200 */ uint8 bHasCustomNavigableGeometry;
  /* offset=0x028e flags=0x0018001040000205 */ uint8 CanCharacterStepUpOn;
  /* offset=0x028f flags=0x0010041000000015 */ struct FLightingChannels LightingChannels;
  /* offset=0x0290 flags=0x0018041040000215 */ enum ERendererStencilMask CustomDepthStencilWriteMask;
  /* offset=0x0294 flags=0x0018041040000215 */ int32 CustomDepthStencilValue;
  /* offset=0x0298 flags=0x0018041040000215 */ int32 TranslucencySortPriority;
  /* offset=0x029c flags=0x0018001040000200 */ int32 VisibilityId;
  /* offset=0x02ac flags=0x0018041040000201 */ float BoundsScale;
  /* offset=0x02b0 flags=0x0018001040002200 */ float LastSubmitTime;
  /* offset=0x02b4 flags=0x0018001040002200 */ float LastRenderTime;
  /* offset=0x02b8 flags=0x0018001040002200 */ float LastRenderTimeOnScreen;
  /* offset=0x02bc flags=0x0010000000202200 */ TArray<AActor*> MoveIgnoreActors;
  /* offset=0x02c8 flags=0x0010008000202208 */ TArray<UPrimitiveComponent*> MoveIgnoreComponents;
  /* offset=0x02e0 flags=0x0010000000000015 */ struct FBodyInstance BodyInstance;
  /* offset=0x04d0 flags=0x0010000010080200 */ FComponentHitSignature OnComponentHit;
  /* offset=0x04dc flags=0x0010000010080200 */ FComponentBeginOverlapSignature OnComponentBeginOverlap;
  /* offset=0x04e8 flags=0x0010000010080200 */ FComponentEndOverlapSignature OnComponentEndOverlap;
  /* offset=0x04f4 flags=0x0010000010080200 */ FComponentWakeSignature OnComponentWake;
  /* offset=0x0500 flags=0x0010000010080200 */ FComponentSleepSignature OnComponentSleep;
  /* offset=0x0518 flags=0x0010000010080200 */ FComponentBeginCursorOverSignature OnBeginCursorOver;
  /* offset=0x0524 flags=0x0010000010080200 */ FComponentEndCursorOverSignature OnEndCursorOver;
  /* offset=0x0530 flags=0x0010000010080200 */ FComponentOnClickedSignature OnClicked;
  /* offset=0x053c flags=0x0010000010080200 */ FComponentOnReleasedSignature OnReleased;
  /* offset=0x0548 flags=0x0010000010080200 */ FComponentOnInputTouchBeginSignature OnInputTouchBegin;
  /* offset=0x0554 flags=0x0010000010080200 */ FComponentOnInputTouchEndSignature OnInputTouchEnd;
  /* offset=0x0560 flags=0x0010000010080200 */ FComponentBeginTouchOverSignature OnInputTouchEnter;
  /* offset=0x056c flags=0x0010000010080200 */ FComponentEndTouchOverSignature OnInputTouchLeave;
  /* offset=0x0580 flags=0x0048001040280208 */ UPrimitiveComponent* LODParentPrimitive;
  /* offset=0x0584 flags=0x0010000000000000 */ struct FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;

  void AddAngularImpulse(struct FVector Impulse, FName BoneName, bool bVelChange);
  void AddAngularImpulseInDegrees(struct FVector Impulse, FName BoneName, bool bVelChange);
  void AddAngularImpulseInRadians(struct FVector Impulse, FName BoneName, bool bVelChange);
  void AddForce(struct FVector Force, FName BoneName, bool bAccelChange);
  void AddForceAtLocation(struct FVector Force, struct FVector Location, FName BoneName);
  void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, FName BoneName);
  void AddImpulse(struct FVector Impulse, FName BoneName, bool bVelChange);
  void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, FName BoneName);
  void AddRadialForce(struct FVector Origin, float Radius, float Strength, uint8 Falloff, bool bAccelChange);
  void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, uint8 Falloff, bool bVelChange);
  void AddTorque(struct FVector Torque, FName BoneName, bool bAccelChange);
  void AddTorqueInDegrees(struct FVector Torque, FName BoneName, bool bAccelChange);
  void AddTorqueInRadians(struct FVector Torque, FName BoneName, bool bAccelChange);
  bool CanCharacterStepUp(APawn* Pawn);
  void ClearMoveIgnoreActors();
  void ClearMoveIgnoreComponents();
  TArray<AActor*> CopyArrayOfMoveIgnoreActors();
  TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
  UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32 ElementIndex);
  UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32 ElementIndex, UMaterialInterface* Parent);
  UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32 ElementIndex, UMaterialInterface* SourceMaterial);
  float GetAngularDamping();
  struct FVector GetCenterOfMass(FName BoneName);
  float GetClosestPointOnCollision(struct FVector Point, struct FVector OutPointOnBody, FName BoneName);
  uint8 GetCollisionEnabled();
  uint8 GetCollisionObjectType();
  FName GetCollisionProfileName();
  uint8 GetCollisionResponseToChannel(uint8 Channel);
  struct FVector GetInertiaTensor(FName BoneName);
  float GetLinearDamping();
  float GetMass();
  float GetMassScale(FName BoneName);
  UMaterialInterface* GetMaterial(int32 ElementIndex);
  UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32 FaceIndex, int32 SectionIndex);
  int32 GetNumMaterials();
  void GetOverlappingActors(TArray<AActor*> OverlappingActors, UClass<AActor>* ClassFilter);
  void GetOverlappingComponents(TArray<UPrimitiveComponent*> InOverlappingComponents);
  struct FVector GetPhysicsAngularVelocity(FName BoneName);
  struct FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);
  struct FVector GetPhysicsAngularVelocityInRadians(FName BoneName);
  struct FVector GetPhysicsLinearVelocity(FName BoneName);
  struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, FName BoneName);
  struct FWalkableSlopeOverride GetWalkableSlopeOverride();
  void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore);
  void IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore);
  bool IsAnyRigidBodyAwake();
  bool IsGravityEnabled();
  bool IsOverlappingActor(AActor* Other);
  bool IsOverlappingComponent(UPrimitiveComponent* OtherComp);
  bool K2_IsCollisionEnabled();
  bool K2_IsPhysicsCollisionEnabled();
  bool K2_IsQueryCollisionEnabled();
  bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector HitLocation, struct FVector HitNormal, FName BoneName, struct FHitResult OutHit);
  void PutRigidBodyToSleep(FName BoneName);
  struct FVector ScaleByMomentOfInertia(struct FVector InputVector, FName BoneName);
  void SetAllMassScale(float InMassScale);
  void SetAllPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent);
  void SetAllPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent);
  void SetAllPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent);
  void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent);
  void SetAngularDamping(float InDamping);
  void SetBoundsScale(float NewBoundsScale);
  void SetCastShadow(bool NewCastShadow);
  void SetCenterOfMass(struct FVector CenterOfMassOffset, FName BoneName);
  void SetCollisionEnabled(uint8 NewType);
  void SetCollisionObjectType(uint8 Channel);
  void SetCollisionProfileName(FName InCollisionProfileName);
  void SetCollisionResponseToAllChannels(uint8 NewResponse);
  void SetCollisionResponseToChannel(uint8 Channel, uint8 NewResponse);
  void SetConstraintMode(uint8 ConstraintMode);
  void SetCullDistance(float NewCullDistance);
  void SetCustomDepthStencilValue(int32 Value);
  void SetCustomDepthStencilWriteMask(enum ERendererStencilMask WriteMaskBit);
  void SetEnableGravity(bool bGravityEnabled);
  void SetLinearDamping(float InDamping);
  void SetLockedAxis(uint8 LockedAxis);
  void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);
  void SetMassScale(FName BoneName, float InMassScale);
  void SetMaterial(int32 ElementIndex, UMaterialInterface* Material);
  void SetMaterialByName(FName MaterialSlotName, UMaterialInterface* Material);
  void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
  void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
  void SetOwnerNoSee(bool bNewOwnerNoSee);
  void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial);
  void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);
  void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);
  void SetReceivesDecals(bool bNewReceivesDecals);
  void SetRenderCustomDepth(bool bValue);
  void SetRenderInMainPass(bool bValue);
  void SetRenderInMono(bool bValue);
  void SetSimulatePhysics(bool bSimulate);
  void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
  void SetTranslucentSortPriority(int32 NewTranslucentSortPriority);
  void SetWalkableSlopeOverride(struct FWalkableSlopeOverride NewOverride);
  void WakeAllRigidBodies();
  void WakeRigidBody(FName BoneName);
};

class AProceduralFoliageBlockingVolume: public AVolume {
  /* offset=0x02d0 flags=0x0018001040000201 */ AProceduralFoliageVolume* ProceduralFoliageVolume;
};

class UProceduralFoliageComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ UProceduralFoliageSpawner* FoliageSpawner;
  /* offset=0x00b0 flags=0x0018001040000205 */ float TileOverlap;
  /* offset=0x00b4 flags=0x0048001040000200 */ AVolume* SpawningVolume;
  /* offset=0x00b8 flags=0x0048001040000000 */ struct FGuid ProceduralGuid;
};

class UProceduralFoliageSpawner: public UObject {
  /* offset=0x001c flags=0x0018001040000215 */ int32 RandomSeed;
  /* offset=0x0020 flags=0x0018001040000215 */ float TileSize;
  /* offset=0x0024 flags=0x0018001040000215 */ int32 NumUniqueTiles;
  /* offset=0x0028 flags=0x0018001040000215 */ float MinimumQuadTreeSize;
  /* offset=0x0030 flags=0x0040000000000201 */ TArray<struct FFoliageTypeObject> FoliageTypes;
  /* offset=0x003c flags=0x0048001040000200 */ bool bNeedsSimulation;

  void Simulate(int32 NumSteps);
};

class UProceduralFoliageTile: public UObject {
  /* offset=0x001c flags=0x0048001040000200 */ UProceduralFoliageSpawner* FoliageSpawner;
  /* offset=0x0098 flags=0x0040000000000200 */ TArray<struct FProceduralFoliageInstance> InstancesArray;
};

class AProceduralFoliageVolume: public AVolume {
  /* offset=0x02d0 flags=0x00180010400a021d */ UProceduralFoliageComponent* ProceduralComponent;
};

class UProgressBar: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000005 */ struct FProgressBarStyle WidgetStyle;
  /* offset=0x0208 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x020c flags=0x0018001060000200 */ USlateBrushAsset* BackgroundImage;
  /* offset=0x0210 flags=0x0018001060000200 */ USlateBrushAsset* FillImage;
  /* offset=0x0214 flags=0x0018001060000200 */ USlateBrushAsset* MarqueeImage;
  /* offset=0x0218 flags=0x0018001040000215 */ float percent;
  /* offset=0x021c flags=0x0018001040000215 */ uint8 BarFillType;
  /* offset=0x021d flags=0x0018001040000215 */ bool bIsMarquee;
  /* offset=0x0220 flags=0x0018001040000015 */ struct FVector2D BorderPadding;
  /* offset=0x0228 flags=0x0010001000080200 */ FGetFloat PercentDelegate;
  /* offset=0x0238 flags=0x0018001040000015 */ struct FLinearColor FillColorAndOpacity;
  /* offset=0x0248 flags=0x0010001000080200 */ FGetLinearColor FillColorAndOpacityDelegate;

  void SetFillColorAndOpacity(struct FLinearColor InColor);
  void SetIsMarquee(bool InbIsMarquee);
  void SetPercent(float InPercent);
};

class UProgressWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000005 */ struct FProgressBarStyle ProgressBarStyle;
};

class UProjectileMovementComponent: public UMovementComponent {
  /* offset=0x00e4 flags=0x0018001040000205 */ float InitialSpeed;
  /* offset=0x00e8 flags=0x0018001040000205 */ float MaxSpeed;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bRotationFollowsVelocity:1;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bShouldBounce:1;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bInitialVelocityInLocalSpace:1;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bForceSubStepping:1;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bIsHomingProjectile:1;
  /* offset=0x00ec flags=0x0018001000000005 */ uint8 bBounceAngleAffectsFriction:1;
  /* offset=0x00ec flags=0x0018001000020815 */ uint8 bIsSliding:1;
  /* offset=0x00f0 flags=0x0018001040020a15 */ float PreviousHitTime;
  /* offset=0x00f4 flags=0x0018001040020815 */ struct FVector PreviousHitNormal;
  /* offset=0x0100 flags=0x0018001040000205 */ float ProjectileGravityScale;
  /* offset=0x0104 flags=0x0018001040000200 */ float Buoyancy;
  /* offset=0x0108 flags=0x0018001040000205 */ float Bounciness;
  /* offset=0x010c flags=0x0018001040000205 */ float Friction;
  /* offset=0x0110 flags=0x0018001040000205 */ float BounceVelocityStopSimulatingThreshold;
  /* offset=0x0114 flags=0x0010000010080200 */ FOnProjectileBounceDelegate OnProjectileBounce;
  /* offset=0x0120 flags=0x0010000010080200 */ FOnProjectileStopDelegate OnProjectileStop;
  /* offset=0x012c flags=0x0018001040000205 */ float HomingAccelerationMagnitude;
  /* offset=0x0130 flags=0x001c0010400a0a0d */ USceneComponent* HomingTargetComponent;
  /* offset=0x0138 flags=0x0018001040000205 */ float MaxSimulationTimeStep;
  /* offset=0x013c flags=0x0018001040000205 */ int32 MaxSimulationIterations;

  struct FVector LimitVelocity(struct FVector NewVelocity);
  void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult ImpactResult, struct FVector ImpactVelocity);
  void OnProjectileStopDelegate__DelegateSignature(struct FHitResult ImpactResult);
  void SetVelocityInLocalSpace(struct FVector NewVelocity);
  void StopSimulating(struct FHitResult HitResult);
};

class UPromotionDigit_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UImage* digit;
  /* offset=0x0234 flags=0x000a0010c008020c */ USizeBox* ImgSize;

  void ShowDigit(FString digit, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsNumeric_ReturnValue);
};

class UPromotionNumber_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UHorizontalBox* NumCon;

  void Construct();
  void ExecuteUbergraph_PromotionNumber_BP(int32 EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue);
  void ShowNum(FString Num, TArray<FString> CallFunc_GetCharacterArrayFromString_ReturnValue, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_IsNumeric_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, struct FMargin K2Node_MakeStruct_Margin, struct FMargin K2Node_MakeStruct_Margin2, UPromotionDigit_BP_C* CallFunc_Create_ReturnValue, UHorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue);
};

class UPromotionRegisterFriend_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobbypromoterFriendinvitation_UIBP_C* LobbypromoterFriendinvitation_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UWrapBox* friendBox;
  /* offset=0x023c flags=0x0008001040010205 */ UTextBlock* labelFriendNum;
  /* offset=0x0240 flags=0x0008001040010205 */ UCanvasPanel* noFriend;
  /* offset=0x0244 flags=0x0008001040010a05 */ Abp_promotion_C* BpPromotion;

  void Construct();
  void ExecuteUbergraph_PromotionRegisterFriend_BP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_promotion_C* K2Node_DynamicCast_AsBp_Promotion, bool K2Node_DynamicCast_bSuccess);
  void OnCloseUI();
  void ShowReigsterFriends();
  void UpdateRegFriendInfos(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ULobbyPromoterRegFriendItem_UIBP_C* CallFunc_Create_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, struct FBP_STRUCT_Promotion_Friend_Info CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
};

class UPromotion_Award_Item_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x0008001040010205 */ UButton* BtnShareGet;
  /* offset=0x01b8 flags=0x0008001040010205 */ UCommon_Item_BP_C* awardIcon;
  /* offset=0x01bc flags=0x0000100010010205 */ FClickShareGet ClickShareGet;
  /* offset=0x01c8 flags=0x0008000000010005 */ struct FBP_STRUCT_Promotion_Award_Info ItemData;
  /* offset=0x01e8 flags=0x0008001040010205 */ ULobbypromotersitem_UIBP_C* UIBP;
  /* offset=0x01ec flags=0x0008001040010205 */ UImage* hasGot;
  /* offset=0x01f0 flags=0x0000001040010205 */ bool isShared;
  /* offset=0x01f4 flags=0x0008001040010205 */ UTextBlock* TextBtnShare;

  void ClickBtnShareGet();
  void ClickShareGet__DelegateSignature(struct FBP_STRUCT_Promotion_Award_Info itemInfo, UPromotion_Award_Item_BP_C* ItemBP);
  void Construct();
  void ExecuteUbergraph_Promotion_Award_Item_BP(int32 EntryPoint);
  void HideItemTip();
  void InitUIBP(ULobbypromotersitem_UIBP_C* uiWidget, FOnButtonReleasedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonPressedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3);
  void SetShared();
  void ShowItemTip(FString CallFunc_GetItemTimeS_time_s, bool CallFunc_GetItemTimeS_is_have_limit, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData);
  void UpdateItem(struct FBP_STRUCT_Promotion_Award_Info Info, FString CallFunc_GetItemTimeS_time_s, bool CallFunc_GetItemTimeS_is_have_limit, struct FBP_STRUCT_CommonItemData K2Node_MakeStruct_BP_STRUCT_CommonItemData, bool K2Node_SwitchInteger_CmpSuccess, UCommon_Item_BP_C* CallFunc_InitView_itemTarget);
};

class UPromotion_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobbypromoters_UIBP_C* Lobbypromoters_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UButton* BtnClose;
  /* offset=0x023c flags=0x0008001040010a05 */ Abp_promotion_C* bp_promotion;
  /* offset=0x0240 flags=0x0008001040010205 */ UButton* BtnRule;
  /* offset=0x0244 flags=0x0008001040010205 */ UButton* BtnCallAll;
  /* offset=0x0248 flags=0x0008001040010205 */ UProgressBar* Progress;
  /* offset=0x024c flags=0x0000000000010205 */ TArray<UPromotion_Award_Item_BP_C*> awardList;
  /* offset=0x0258 flags=0x0000000000010205 */ TArray<UPromotion_Friend_Item_BP_C*> firendList;
  /* offset=0x0264 flags=0x0008001040010205 */ USlider* sliderPro;
  /* offset=0x0268 flags=0x0008001040010205 */ UTextBlock* labelTitle;
  /* offset=0x026c flags=0x0008001040010205 */ UUTRichTextBlock* labelDesc;
  /* offset=0x0270 flags=0x0000000000010205 */ TArray<UTextBlock*> labelNeed;
  /* offset=0x027c flags=0x0008001040010205 */ UButton* BtnView;
  /* offset=0x0280 flags=0x0008001040010205 */ UTextBlock* labelInviteNum;

  void Construct();
  void CreateAwardItemBP(ULobbypromotersitem_UIBP_C* awardItemUIBP, UPromotion_Award_Item_BP_C* CallFunc_Create_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void CreateFriendItemBP(ULobbypromotersfriend_UIBP_C* friendItemUIBP, UPromotion_Friend_Item_BP_C* CallFunc_Create_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
  void ExecuteUbergraph_Promotion_BP(int32 EntryPoint, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_promotion_C* K2Node_DynamicCast_AsBp_Promotion, bool K2Node_DynamicCast_bSuccess, struct FBP_STRUCT_Promotion_Friend_Info K2Node_CustomEvent_friendInfo, int32 CallFunc_Array_Length_ReturnValue, UPromotion_Award_Item_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, struct FBP_STRUCT_Promotion_Award_Info K2Node_CustomEvent_itemInfo, UPromotion_Award_Item_BP_C* K2Node_CustomEvent_itemBp, int32 ___int_Array_Index_Variable2, UPromotion_Friend_Item_BP_C* CallFunc_Array_Get_Item2, FClickShareGet K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnClickInviteFriend K2Node_CreateDelegate_OutputDelegate3, int32 ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3);
  void OnClickClose();
  void OnClickInviteFriend(struct FBP_STRUCT_Promotion_Friend_Info friendInfo);
  void OnClickItemShareGet(struct FBP_STRUCT_Promotion_Award_Info itemInfo, UPromotion_Award_Item_BP_C* ItemBP);
  void OnClickRule();
  void OnShareSuccess(int32 CallFunc_Subtract_IntInt_ReturnValue, UPromotion_Award_Item_BP_C* CallFunc_Array_Get_Item);
  void OnViewRegFriend();
  void UIHide();
  void UIShow();
  void UpdateAwardData(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UTextBlock* CallFunc_Array_Get_Item, UPromotion_Award_Item_BP_C* CallFunc_Array_Get_Item2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
  void UpdateFriendData(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, UPromotion_Friend_Item_BP_C* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);
  void UpdateProgress(int32 CallFunc_Array_Length_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue);
};

class UPromotion_Friend_Item_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x0008000000010005 */ struct FBP_STRUCT_Promotion_Friend_Info friendInfo;
  /* offset=0x01dc flags=0x0008001040010205 */ UTextBlock* labelName;
  /* offset=0x01e0 flags=0x0008001040010205 */ UCommon_Avatar_BP_C* headIcon;
  /* offset=0x01e4 flags=0x0008001040010205 */ UButton* BtnInvite;
  /* offset=0x01e8 flags=0x0000100010010205 */ FOnClickInviteFriend OnClickInviteFriend;
  /* offset=0x01f4 flags=0x0008001040010205 */ ULobbypromotersfriend_UIBP_C* UIBP;
  /* offset=0x01f8 flags=0x0008001040010205 */ UButton* hasInvited;
  /* offset=0x01fc flags=0x0008001040010205 */ UCanvasPanel* InvitedSucc;

  void ClickBtnInvite();
  void Construct();
  void ExecuteUbergraph_Promotion_Friend_Item_BP(int32 EntryPoint);
  void InitUIBP(ULobbypromotersfriend_UIBP_C* uiWid, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate);
  void OnClickInviteFriend__DelegateSignature(struct FBP_STRUCT_Promotion_Friend_Info friendInfo);
  void SetItemVisible(bool IsVisible);
  void UpdateFriendInfo(struct FBP_STRUCT_Promotion_Friend_Info friendInfo, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
};

class UProperty: public UField {
};

class UPropertyBinding: public UObject {
  /* offset=0x001c flags=0x001c001040000200 */ UObject* SourceObject;
  /* offset=0x0024 flags=0x0010000000000000 */ struct FDynamicPropertyPath SourcePath;
  /* offset=0x0030 flags=0x0018001040000200 */ FName DestinationProperty;
};

class UQuickFriendsText_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UUTRichTextBlock* friendName;
  /* offset=0x0234 flags=0x000a0010c008020c */ UUTRichTextBlock* lastMsg;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* msgNum;
  /* offset=0x023c flags=0x000a0010c008020c */ UCanvasPanel* redpoint;
  /* offset=0x0240 flags=0x0008000000010205 */ FString gid;
  /* offset=0x024c flags=0x0008000000010205 */ FString Name;
  /* offset=0x0258 flags=0x0000100010010205 */ FClickChatFriend ClickChatFriend;
  /* offset=0x0264 flags=0x0008001040010205 */ int32 unreadNum;

  void AddUnread(int32 CallFunc_Add_IntInt_ReturnValue);
  void ClearUnread();
  void ClickChatFriend__DelegateSignature(FString friendGid);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  void ShowUnread(bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2);
};

class UQuickMenu_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UVerticalBox* BtnBox;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* BtnReturnFirstChat;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_accept;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_Refuse;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_sendfriend;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_Teamsend;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* ButtonFriends;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* ButtonRecord;
  /* offset=0x0254 flags=0x000a0010c008020c */ UButton* ButtonShortcut;
  /* offset=0x0258 flags=0x000a0010c008020c */ UCanvasPanel* Canva_FriendSend;
  /* offset=0x025c flags=0x000a0010c008020c */ UCanvasPanel* Canvas_Teamsend;
  /* offset=0x0260 flags=0x000a0010c008020c */ UCheckBox* CheckBox_disturb;
  /* offset=0x0264 flags=0x000a0010c008020c */ UCustomScrollBox* friendBox;
  /* offset=0x0268 flags=0x000a0010c008020c */ UCustomScrollBox* friendChatBox;
  /* offset=0x026c flags=0x000a0010c008020c */ UEditableText* friendChatMsg;
  /* offset=0x0270 flags=0x000a0010c008020c */ UWidgetSwitcher* friendPanelSwitch;
  /* offset=0x0274 flags=0x000a0010c008020c */ UCanvasPanel* friendRedPoint;
  /* offset=0x0278 flags=0x000a0010c008020c */ UCanvasPanel* Friends_SH;
  /* offset=0x027c flags=0x000a0010c008020c */ UCanvasPanel* Friends_SQ;
  /* offset=0x0280 flags=0x000a0010c008020c */ UTextBlock* FriendTipsNum;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0290 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0298 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x029c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* Image_Friends_SQ1;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image_Friends_SQ2;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* Image_line;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UEditableText* inputText;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UButton* InviteClose;
  /* offset=0x02bc flags=0x000a0010c008020c */ UTextBlock* InviteNextBattleText;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UCanvasPanel* QuickMenuTIPS;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBox_Quick;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UCustomScrollBox* ScrollBoxHistory;
  /* offset=0x02cc flags=0x000a0010c008020c */ UWidgetSwitcher* Switcher_BAR;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_team;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Friends;
  /* offset=0x02d8 flags=0x0000001040010205 */ bool bInit;
  /* offset=0x02dc flags=0x0008000000010205 */ FString currFriendGid;
  /* offset=0x02e8 flags=0x0008001040010205 */ int32 currChatType;
  /* offset=0x02ec flags=0x0008000000010205 */ FString InviteNextBattleGid;
  /* offset=0x02f8 flags=0x0000001040010205 */ bool isSingle;
  /* offset=0x02fc flags=0x0008000000010205 */ FString InviteNextBattleName;

  void AddChatToHistory(FString Message, bool isMe, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, FText CallFunc_Conv_StringToText_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP, bool K2Node_DynamicCast_bSuccess, UPanelSlot* CallFunc_AddChild_ReturnValue);
  void AddFriendChat(FString gid, FString Name, FString content, bool isSelf, int32 msgID, bool bReply, FString chatGid, FString CallFunc_MakeFriendLastText_msg, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FClickChatFriend K2Node_CreateDelegate_OutputDelegate, int32 ___int_Variable, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, UQuickFriendsText_BP_C* K2Node_DynamicCast_AsQuick_Friends_Text_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Add_IntInt_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UQuickFriendsText_BP_C* K2Node_DynamicCast_AsQuick_Friends_Text_BP2, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2);
  void AddFriendSecondChat(FString gid, FString Name, FString content, bool isSelf, int32 MsgType, bool bReply, FString CallFunc_MakeFriendChatText_text, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, bool CallFunc_EqualEqual_StrStr_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP2, bool K2Node_DynamicCast_bSuccess2, UPanelSlot* CallFunc_AddChild_ReturnValue);
  void BndEvt__BtnReturnFirstChat_K2Node_ComponentBoundEvent_62_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__ButtonFriends_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__ButtonRecord_K2Node_ComponentBoundEvent_27_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__ButtonShortcut_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Refuse_K2Node_ComponentBoundEvent_86_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Teamsend_K2Node_ComponentBoundEvent_54_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_accept_K2Node_ComponentBoundEvent_103_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_sendfriend_K2Node_ComponentBoundEvent_105_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__EditableText_0_K2Node_ComponentBoundEvent_36_OnEditableTextChangedEvent__DelegateSignature(FText Text);
  void BndEvt__InviteClose_K2Node_ComponentBoundEvent_164_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__friendChatMsg_K2Node_ComponentBoundEvent_106_OnEditableTextCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void BndEvt__inputText_K2Node_ComponentBoundEvent_13_OnEditableTextCommittedEvent__DelegateSignature(FText Text, uint8 CommitMethod);
  void BndEvt__inputText_K2Node_ComponentBoundEvent_176_OnEditableTextChangedEvent__DelegateSignature(FText Text);
  void ClearUnreadByGid(FString gid, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UQuickFriendsText_BP_C* K2Node_DynamicCast_AsQuick_Friends_Text_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void ClickAChatFriend(FString gid, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess);
  void ExecuteUbergraph_QuickMenu_BP(int32 EntryPoint, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue2, FText K2Node_ComponentBoundEvent_Text2, uint8 K2Node_ComponentBoundEvent_CommitMethod2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue3, FText K2Node_ComponentBoundEvent_Text3, bool CallFunc_EqualEqual_StrStr_ReturnValue, FText K2Node_ComponentBoundEvent_Text4, FText K2Node_ComponentBoundEvent_Text, uint8 K2Node_ComponentBoundEvent_CommitMethod, FString CallFunc_GetPlatformName_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue2, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue2, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UChatComponent* CallFunc_GetChatComponentFromCharacter_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, UChatComponent* CallFunc_GetChatComponentFromCharacter_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess5, FOnRepPlayerState K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TArray<ASTExtraPlayerState*> CallFunc_GetTeamMatePlayerStateList_OutList, bool CallFunc_IsValid_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue5, FText CallFunc_GetText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FText CallFunc_GetText_ReturnValue2);
  void InitQuickMsg(int32 msgID, int32 ___int_Loop_Counter_Variable, int32 ___int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UChatComponent* CallFunc_GetChatComponentFromCharacter_ReturnValue, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP, bool K2Node_DynamicCast_bSuccess, UWidget* CallFunc_GetChildAt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP2, bool K2Node_DynamicCast_bSuccess2, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2);
  void MakeFriendChatText(FString Name, FString content, bool isSelf, int32 MsgType, bool Reply, FString Text, bool bReply, bool playerIsSelf, FString playerContent, FString PlayerName, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_GetLocalizeText_Text, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13);
  void MakeFriendLastText(int32 MsgType, FString content, FString msg, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);
  void MultiPlayerSetting(UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  void ReceiveFriendInvite(FString gid, FString Name, bool succ, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void ReceivePlayerStateData();
  void ReceivedInitWidget();
  void RemindChatBtn(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsChecked_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void SelectOpt(int32 Type, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);
  void SendFriendChat(FText InText, FString chatString, FString CallFunc_Conv_TextToString_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, int32 CallFunc_Len_ReturnValue2, UFrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, UGameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3);
  void SendTeamChat(FText InText, FString chatString, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, int32 CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Len_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);
  void ShowAllUnRead(int32 Total, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UQuickFriendsText_BP_C* K2Node_DynamicCast_AsQuick_Friends_Text_BP, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2);
  void SingleplayerSetting(UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void SingleplayerSetting2();
  void UpdateFriendSecondChatByGid(FString gid, FString PlayerName, FString playerGid, int32 boxChildCount, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue2, UUAEUserWidget* CallFunc_CreateUAEUserWidget_Widget, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP, bool K2Node_DynamicCast_bSuccess, UWidget* CallFunc_GetChildAt_ReturnValue, UQuickText_BP_C* K2Node_DynamicCast_AsQuick_Text_BP2, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UChatComponent* CallFunc_GetChatComponentFromCharacter_ReturnValue, struct FIngameFriendChat CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FIngameFriendChatMsg CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, FString CallFunc_MakeFriendChatText_text, FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_RemoveChildAt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);
};

class UQuickText_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008020c */ UUTRichTextBlock* RichTextBlock;
  /* offset=0x0234 flags=0x0000001040010205 */ bool QuickSend;
  /* offset=0x0238 flags=0x0008001040010205 */ int32 msgID;
  /* offset=0x023c flags=0x0000001040010205 */ bool Invite;
  /* offset=0x0240 flags=0x0008000000010205 */ FString gid;
  /* offset=0x024c flags=0x0008000000010205 */ FString Name;
  /* offset=0x0258 flags=0x0008001040010205 */ int32 MsgType;
  /* offset=0x025c flags=0x0000001040010205 */ bool bReply;

  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, struct FEventReply K2Node_MakeStruct_EventReply2, ASTExtraPlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply3, bool CallFunc_ReceiveFriendInvite_succ, ASTExtraPlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool K2Node_SwitchInteger_CmpSuccess);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply);
};

class UQuitMatchCallbackProxy: public UOnlineBlueprintCallProxyBase {
  /* offset=0x001c flags=0x0010000010080200 */ FEmptyOnlineDelegate OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FEmptyOnlineDelegate OnFailure;

  UQuitMatchCallbackProxy* QuitMatch(UObject* WorldContextObject, APlayerController* PlayerController, FString MatchID, uint8 Outcome, int32 TurnTimeoutInSeconds);
};

class URVOAvoidanceInterface: public UInterface {
};

class ARadialForceActor: public ARigidBodyBase {
  /* offset=0x02a8 flags=0x00480010400a021d */ URadialForceComponent* ForceComponent;

  void DisableForce();
  void EnableForce();
  void FireImpulse();
  void ToggleForce();
};

class URadialForceComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000205 */ float Radius;
  /* offset=0x0274 flags=0x0018001040000205 */ uint8 Falloff;
  /* offset=0x0278 flags=0x0018001040000205 */ float ImpulseStrength;
  /* offset=0x027c flags=0x0018001000000005 */ uint8 bImpulseVelChange:1;
  /* offset=0x027c flags=0x0018001000000005 */ uint8 bIgnoreOwningActor:1;
  /* offset=0x0280 flags=0x0018001040000205 */ float ForceStrength;
  /* offset=0x0284 flags=0x0018001040000205 */ float DestructibleDamage;
  /* offset=0x0288 flags=0x0020080000000201 */ TArray<uint8> ObjectTypesToAffect;

  void AddObjectTypeToAffect(uint8 ObjectType);
  void FireImpulse();
  void RemoveObjectTypeToAffect(uint8 ObjectType);
};

class ARadiationCircle: public AActor {
  /* offset=0x02a8 flags=0x0018001040080208 */ UStaticMeshComponent* CylinderMesh;
  /* offset=0x02ac flags=0x0018001040080208 */ UStaticMeshComponent* CylinderMeshBase;
  /* offset=0x02b0 flags=0x0018001040000200 */ ASTExtraGameStateBase* SGameStatNew;
  /* offset=0x02c4 flags=0x0028081040000200 */ UMaterialInstanceDynamic* DynamicMat;
  /* offset=0x02c8 flags=0x0028081040000200 */ UMaterialInstanceDynamic* DynamicMatBase;

  void HandleOnSafeZoneTips(float Val);
  void InitRadiationCircle();
};

class URecastFilter_UseDefaultArea: public UNavigationQueryFilter {
};

class ARecastNavMesh: public ANavigationData {
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawTriangleEdges:1;
  /* offset=0x03e0 flags=0x0018001000004001 */ uint8 bDrawPolyEdges:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawFilledPolys:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawNavMeshEdges:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawTileBounds:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawPathCollidingGeometry:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawTileLabels:1;
  /* offset=0x03e0 flags=0x0018001000000001 */ uint8 bDrawPolygonLabels:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawDefaultPolygonCost:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawLabelsOnPathNodes:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawNavLinks:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawFailedNavLinks:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawClusters:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawOctree:1;
  /* offset=0x03e1 flags=0x0018001000004000 */ uint8 bDistinctlyDrawTilesBeingBuilt:1;
  /* offset=0x03e1 flags=0x0018001000000001 */ uint8 bDrawNavMesh:1;
  /* offset=0x03e4 flags=0x0018001040004201 */ float DrawOffset;
  /* offset=0x03e8 flags=0x0018001000004001 */ uint8 bFixedTilePoolSize:1;
  /* offset=0x03ec flags=0x0018001040004201 */ int32 TilePoolSize;
  /* offset=0x03f0 flags=0x0018001040004201 */ float TileSizeUU;
  /* offset=0x03f4 flags=0x0018001040004201 */ float CellSize;
  /* offset=0x03f8 flags=0x0018001040004201 */ float CellHeight;
  /* offset=0x03fc flags=0x0018001040004201 */ float AgentRadius;
  /* offset=0x0400 flags=0x0018001040004201 */ float AgentHeight;
  /* offset=0x0404 flags=0x0018001040004201 */ float AgentMaxHeight;
  /* offset=0x0408 flags=0x0018001040004201 */ float AgentMaxSlope;
  /* offset=0x040c flags=0x0018001040004201 */ float AgentMaxStepHeight;
  /* offset=0x0410 flags=0x0018001040004201 */ float MinRegionArea;
  /* offset=0x0414 flags=0x0018001040004201 */ float MergeRegionSize;
  /* offset=0x0418 flags=0x0018001040004201 */ float MaxSimplificationError;
  /* offset=0x041c flags=0x0018041040004201 */ int32 MaxSimultaneousTileGenerationJobsCount;
  /* offset=0x0420 flags=0x0018041040004201 */ int32 TileNumberHardLimit;
  /* offset=0x0424 flags=0x0018041040020201 */ int32 PolyRefTileBits;
  /* offset=0x0428 flags=0x0018041040020201 */ int32 PolyRefNavPolyBits;
  /* offset=0x042c flags=0x0018041040020201 */ int32 PolyRefSaltBits;
  /* offset=0x0430 flags=0x0018001040004200 */ float DefaultDrawDistance;
  /* offset=0x0434 flags=0x0018001040004200 */ float DefaultMaxSearchNodes;
  /* offset=0x0438 flags=0x0018001040004200 */ float DefaultMaxHierarchicalSearchNodes;
  /* offset=0x043c flags=0x0018041040004201 */ uint8 RegionPartitioning;
  /* offset=0x043d flags=0x0018041040004201 */ uint8 LayerPartitioning;
  /* offset=0x0440 flags=0x0018041040004201 */ int32 RegionChunkSplits;
  /* offset=0x0444 flags=0x0018041040004201 */ int32 LayerChunkSplits;
  /* offset=0x0448 flags=0x0018001000004001 */ uint8 bSortNavigationAreasByCost:1;
  /* offset=0x0448 flags=0x0018041000004001 */ uint8 bPerformVoxelFiltering:1;
  /* offset=0x0448 flags=0x0018041000004001 */ uint8 bMarkLowHeightAreas:1;
  /* offset=0x0448 flags=0x0018041000004001 */ uint8 bDoFullyAsyncNavDataGathering:1;
  /* offset=0x0448 flags=0x0018001000004000 */ uint8 bUseBetterOffsetsFromCorners:1;
  /* offset=0x0448 flags=0x0018001000004000 */ uint8 bStoreEmptyTileLayers:1;
  /* offset=0x0448 flags=0x0018001000004000 */ uint8 bUseVirtualFilters:1;
  /* offset=0x0448 flags=0x0018001000004000 */ uint8 bAllowNavLinkAsPathEnd:1;
  /* offset=0x0449 flags=0x0018001040004201 */ bool bOnlySavedOnDS;
  /* offset=0x044a flags=0x0048001000004000 */ uint8 bUseVoxelCache:1;
  /* offset=0x044c flags=0x0048001040004200 */ float TileSetUpdateInterval;
  /* offset=0x0450 flags=0x0018001040004201 */ float HeuristicScale;
  /* offset=0x0454 flags=0x0018001040004201 */ float VerticalDeviationFromGroundCompensation;
};

class URecastNavMeshDataChunk: public UNavigationDataChunk {
};

class UReconnect_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UReconnect_UIBP_C* Reconnect_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UTextBlock* TextNumber;
  /* offset=0x023c flags=0x0008001040010205 */ UTextBlock* TextInfo;
  /* offset=0x0240 flags=0x0008001040010205 */ UHorizontalBox* BoxText;
  /* offset=0x0244 flags=0x0000001040010205 */ bool isShowText;
  /* offset=0x0248 flags=0x0008001040010205 */ int32 StartTime;
  /* offset=0x024c flags=0x0008001040010205 */ float lastTickTime;
  /* offset=0x0250 flags=0x0008001040010205 */ float curTickTIme;

  void Construct();
  void ExecuteUbergraph_Reconnect_BP(int32 EntryPoint, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);
  void HideText();
  void ShowText();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIHide();
  void UIShow();
  void UpdateTime(FString Time);
};

class UReconnect_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Bullet;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button_Bg;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image_bullet_001;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image_bullet_002;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image_bullet_003;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image_bullet_004;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image_bullet_005;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image_bullet_006;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* Image_bullet_007;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UImage* Image_bullet_008;

  void BndEvt__Button_Bg_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_Reconnect_UIBP(int32 EntryPoint);
};

class AReflectionCapture: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UReflectionCaptureComponent* CaptureComponent;
};

class UReflectionCaptureComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040080208 */ UBillboardComponent* CaptureOffsetComponent;
  /* offset=0x0274 flags=0x0018001040000215 */ enum EReflectionSourceType ReflectionSourceType;
  /* offset=0x0278 flags=0x0018001040000215 */ UTextureCube* Cubemap;
  /* offset=0x027c flags=0x0018001040000215 */ float SourceCubemapAngle;
  /* offset=0x0280 flags=0x0018001040000215 */ float Brightness;
  /* offset=0x0284 flags=0x0018041040000005 */ struct FVector CaptureOffset;
  /* offset=0x02a4 flags=0x0048001040000000 */ struct FGuid stateID;
};

class UReloadWeaponState: public UWeaponStateBase {
  /* offset=0x00f0 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
};

class URendererOverrideSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bSupportAllShaderPermutations:1;
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bPermutateHDRShaders:1;
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bForceRecomputeTangents:1;
};

class URendererSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bMobileHDR:1;
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bMobileDisableVertexFog:1;
  /* offset=0x0030 flags=0x0018001000004001 */ uint8 bMobileVTFLandscape:1;
  /* offset=0x0034 flags=0x0018001040004201 */ int32 MaxMobileCascades;
  /* offset=0x0038 flags=0x0018001040004201 */ uint8 MobileMSAASampleCount;
  /* offset=0x003c flags=0x0018001040004201 */ float CharacterDiffuseScale;
  /* offset=0x0040 flags=0x0018001040004201 */ float CharacterDiffuseOffset;
  /* offset=0x0044 flags=0x0018001040004201 */ float CharacterDiffusePower;
  /* offset=0x0048 flags=0x0018001040004201 */ float CharacterMinShadowFactor;
  /* offset=0x004c flags=0x0018001040004201 */ float StaticMeshDiffuseScale;
  /* offset=0x0050 flags=0x0018001040004201 */ float StaticMeshDiffuseOffset;
  /* offset=0x0054 flags=0x0018001040004201 */ float StaticMeshDiffusePower;
  /* offset=0x0058 flags=0x0018001040004201 */ float StaticMeshMinShadowFactor;
  /* offset=0x005c flags=0x0018001000004001 */ uint8 bDiscardUnusedQualityLevels:1;
  /* offset=0x0060 flags=0x0018001040004201 */ float GlobalStaticMeshCullingScreenSize;
  /* offset=0x0064 flags=0x0018001040004201 */ float GlobalStaticMeshCullingScreenSizeHigh;
  /* offset=0x0068 flags=0x0018001000004001 */ uint8 bOcclusionCulling:1;
  /* offset=0x006c flags=0x0018001040004201 */ float MinScreenRadiusForLights;
  /* offset=0x0070 flags=0x0018001040004201 */ float MinScreenRadiusForEarlyZPass;
  /* offset=0x0074 flags=0x0018001040004201 */ float MinScreenRadiusForCSMdepth;
  /* offset=0x0078 flags=0x0018001000004001 */ uint8 bPrecomputedVisibilityWarning:1;
  /* offset=0x0078 flags=0x0018001000004001 */ uint8 bTextureStreaming:1;
  /* offset=0x0078 flags=0x0018001000004001 */ uint8 bUseDXT5NormalMaps:1;
  /* offset=0x0078 flags=0x0018001000004001 */ uint8 bClearCoatEnableSecondNormal:1;
  /* offset=0x007c flags=0x0018001040004201 */ int32 ReflectionCaptureResolution;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 ReflectionEnvironmentLightmapMixBasedOnRoughness:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bForwardShading:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bVertexFoggingForOpaque:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bAllowStaticLighting:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bUseNormalMapsForStaticLighting:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bGenerateMeshDistanceFields:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bEightBitMeshDistanceFields:1;
  /* offset=0x0080 flags=0x0018001000004001 */ uint8 bGenerateLandscapeGIData:1;
  /* offset=0x0081 flags=0x0018001000004001 */ uint8 bCompressMeshDistanceFields:1;
  /* offset=0x0084 flags=0x0018001040004201 */ float TessellationAdaptivePixelsPerTriangle;
  /* offset=0x0088 flags=0x0018001000004001 */ uint8 bSeparateTranslucency:1;
  /* offset=0x0089 flags=0x0018001040004201 */ uint8 TranslucentSortPolicy;
  /* offset=0x008c flags=0x0018001040004001 */ struct FVector TranslucentSortAxis;
  /* offset=0x0098 flags=0x0018001040004201 */ uint8 CustomDepthStencil;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bCustomDepthTaaJitter:1;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bEnableAlphaChannelInPostProcessing:1;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bDefaultFeatureBloom:1;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bDefaultFeatureAmbientOcclusion:1;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bDefaultFeatureAmbientOcclusionStaticFraction:1;
  /* offset=0x0099 flags=0x0018001000004001 */ uint8 bDefaultFeatureAutoExposure:1;
  /* offset=0x009a flags=0x0018001040004201 */ uint8 DefaultFeatureAutoExposure;
  /* offset=0x009b flags=0x0018001000004001 */ uint8 bDefaultFeatureMotionBlur:1;
  /* offset=0x009b flags=0x0018001000004001 */ uint8 bDefaultFeatureLensFlare:1;
  /* offset=0x009c flags=0x0018001040004201 */ uint8 DefaultFeatureAntiAliasing;
  /* offset=0x009d flags=0x0018001000004001 */ uint8 bRenderUnbuiltPreviewShadowsInGame:1;
  /* offset=0x009d flags=0x0018001000004001 */ uint8 bStencilForLODDither:1;
  /* offset=0x009e flags=0x0018001040004201 */ uint8 EarlyZPass;
  /* offset=0x009f flags=0x0018001000004001 */ uint8 bEarlyZPassMovable:1;
  /* offset=0x009f flags=0x0018001000004001 */ uint8 bEarlyZPassOnlyMaterialMasking:1;
  /* offset=0x009f flags=0x0018001000004001 */ uint8 bDBuffer:1;
  /* offset=0x00a0 flags=0x0018001040004201 */ uint8 ClearSceneMethod;
  /* offset=0x00a1 flags=0x0018001000004001 */ uint8 bBasePassOutputsVelocity:1;
  /* offset=0x00a1 flags=0x0018001000004001 */ uint8 bSelectiveBasePassOutputs:1;
  /* offset=0x00a1 flags=0x0018001000004001 */ uint8 bDefaultParticleCutouts:1;
  /* offset=0x00a1 flags=0x0018001000004001 */ uint8 bGlobalClipPlane:1;
  /* offset=0x00a2 flags=0x0018001040004201 */ uint8 GBufferFormat;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bUseGPUMorphTargets:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bNvidiaAftermathEnabled:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bInstancedStereo:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bMultiView:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bMobileMultiView:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bMobileMultiViewDirect:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bMonoscopicFarField:1;
  /* offset=0x00a3 flags=0x0018001000004001 */ uint8 bDebugCanvasInLayer:1;
  /* offset=0x00a4 flags=0x0018001040004201 */ float WireframeCullThreshold;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bSupportStationarySkylight:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bSupportLowQualityLightmaps:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bSupportPointLightWholeSceneShadows:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bSupportAtmosphericFog:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bSupportSkinCacheShaders:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bMobileEnableStaticAndCSMShadowReceivers:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bMobileAllowDistanceFieldShadows:1;
  /* offset=0x00a8 flags=0x0018001000004001 */ uint8 bMobileAllowMovableDirectionalLights:1;
  /* offset=0x00ac flags=0x0018001040004201 */ uint32 MobileNumDynamicPointLights;
  /* offset=0x00b0 flags=0x0018001000004001 */ uint8 bMobileDynamicPointLightsUseStaticBranch:1;
  /* offset=0x00b4 flags=0x0018001040004201 */ float SkinCacheSceneMemoryLimitInMB;
  /* offset=0x00b8 flags=0x0018001000004001 */ uint8 bGPUSkinLimit2BoneInfluences:1;
  /* offset=0x00b8 flags=0x0018001000004001 */ uint8 bSupportDepthOnlyIndexBuffers:1;
  /* offset=0x00b8 flags=0x0018001000004001 */ uint8 bSupportReversedIndexBuffers:1;
};

class UReporterBase: public UObject {
};

class UReporterGraph: public UReporterBase {
};

class URetainerBox: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000201 */ bool RenderOnInvalidation;
  /* offset=0x00d6 flags=0x0018001040000201 */ bool RenderOnPhase;
  /* offset=0x00d8 flags=0x0018001040000201 */ int32 Phase;
  /* offset=0x00dc flags=0x0018001040000201 */ int32 PhaseCount;
  /* offset=0x00e0 flags=0x0028081040000215 */ UMaterialInterface* EffectMaterial;
  /* offset=0x00e8 flags=0x0028081040000215 */ FName TextureParameter;

  UMaterialInstanceDynamic* GetEffectMaterial();
  void RequestRender();
  void SetEffectMaterial(UMaterialInterface* EffectMaterial);
  void SetTextureParameter(FName TextureParameter);
};

class UReuseList_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanelBg;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanelList;
  /* offset=0x01bc flags=0x000a0010c008020c */ UScrollBox* ScrollBoxList;
  /* offset=0x01c0 flags=0x000a0010c008020c */ USizeBox* SizeBoxBg;
  /* offset=0x01c4 flags=0x0008001040010005 */ struct FVector2D ViewSize;
  /* offset=0x01cc flags=0x0008001040010005 */ struct FVector2D ContentSize;
  /* offset=0x01d4 flags=0x0008001040010205 */ UClass<UUserWidget>* ItemClass;
  /* offset=0x01d8 flags=0x0008001040010205 */ int32 ItemCacheNum;
  /* offset=0x01dc flags=0x0008001040010205 */ int32 ItemCount;
  /* offset=0x01e0 flags=0x0008001040010205 */ int32 ItemHeight;
  /* offset=0x01e4 flags=0x0008001040010205 */ int32 MaxPos;
  /* offset=0x01e8 flags=0x0008001040010205 */ int32 Offset;
  /* offset=0x01ec flags=0x0000000000010205 */ TMap<int32, UUserWidget*> ItemMap;
  /* offset=0x0228 flags=0x0008001040010205 */ int32 OffsetEnd;
  /* offset=0x022c flags=0x0000100010010205 */ FOnUpdateItem OnUpdateItem;
  /* offset=0x0238 flags=0x0000100010010205 */ FOnScrollItem OnScrollItem;
  /* offset=0x0244 flags=0x0000000000010205 */ TArray<UUserWidget*> ItemPool;
  /* offset=0x0250 flags=0x0008001040010205 */ int32 Style;
  /* offset=0x0254 flags=0x0008001040010205 */ int32 ItemWidth;
  /* offset=0x0258 flags=0x0008001040010205 */ int32 BIdx;
  /* offset=0x025c flags=0x0008001040010205 */ int32 EIdx;
  /* offset=0x0260 flags=0x0008001040010205 */ int32 ColNum;
  /* offset=0x0264 flags=0x0008001040010205 */ int32 RowNum;
  /* offset=0x0268 flags=0x0000001040010205 */ bool ReloadDonotJump;

  void BndEvt__ScrollBoxList_K2Node_ComponentBoundEvent_1_OnUserScrolledEvent__DelegateSignature(float CurrentOffset);
  void Clear();
  void Construct();
  void DoReload(float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Conv_IntToFloat_ReturnValue2, int32 CallFunc_Multiply_IntInt_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, int32 CallFunc_FCeil_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Max_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue2, int32 CallFunc_Multiply_IntInt_ReturnValue3, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, float CallFunc_Conv_IntToFloat_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, struct FVector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, UUserWidget* K2Node_DynamicCast_AsUser_Widget, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue5, struct FVector2D CallFunc_MakeVector2D_ReturnValue3, float CallFunc_GetScrollOffset_ReturnValue);
  void ExecuteUbergraph_ReuseList(int32 EntryPoint, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float K2Node_ComponentBoundEvent_CurrentOffset, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, struct FVector2D CallFunc_GetLocalSize_ReturnValue, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue);
  void JumpByIdx(int32 Idx, int32 TmpIdx, float TmpScroll, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X5, float CallFunc_BreakVector2D_Y5, float CallFunc_BreakVector2D_X6, float CallFunc_BreakVector2D_Y6, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_BreakVector2D_X7, float CallFunc_BreakVector2D_Y7, float CallFunc_BreakVector2D_X8, float CallFunc_BreakVector2D_Y8, float CallFunc_BreakVector2D_X9, float CallFunc_BreakVector2D_Y9, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_FMax_ReturnValue, float CallFunc_BreakVector2D_X10, float CallFunc_BreakVector2D_Y10, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue2, float CallFunc_FMin_ReturnValue2, float CallFunc_BreakVector2D_X11, float CallFunc_BreakVector2D_Y11, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue2, float CallFunc_BreakVector2D_X12, float CallFunc_BreakVector2D_Y12, int32 CallFunc_FTrunc_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue3, int32 CallFunc_Divide_IntInt_ReturnValue3, float CallFunc_BreakVector2D_X13, float CallFunc_BreakVector2D_Y13, int32 CallFunc_Subtract_IntInt_ReturnValue4, int32 CallFunc_FTrunc_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue2, int32 CallFunc_Multiply_IntInt_ReturnValue3, int32 CallFunc_Subtract_IntInt_ReturnValue5, int32 CallFunc_Divide_IntInt_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue6, float CallFunc_Conv_IntToFloat_ReturnValue3);
  void NewItem(UUserWidget* ret, UUserWidget* Tmp, UUserWidget* CallFunc_Array_Get_Item, UUserWidget* CallFunc_Create_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);
  void OnScrollItem__DelegateSignature(int32 BeginIdx, int32 EndIdx);
  void OnUpdateItem__DelegateSignature(UUserWidget* Widget, int32 Idx);
  void Refresh(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<int32> CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
  void RefreshOne(int32 Idx, UUserWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void ReleaseItem(UUserWidget* Item, int32 CallFunc_Array_AddUnique_ReturnValue);
  void Reload(int32 ItemCount, int32 ItemHeight, int32 ItemWidth, int32 Style, UClass<UUserWidget>* Class, bool NeedClearCache, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);
  void RemoveNotUsed(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<int32> CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, UUserWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void ScrollUpdate(float Offset, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Max_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Min_ReturnValue);
  void ScrollUpdateStyle0(UUserWidget* CallFunc_NewItem_Ret, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, struct FAnchors K2Node_MakeStruct_Anchors, float CallFunc_Conv_IntToFloat_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 ___int_Variable, int32 CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, struct FMargin K2Node_MakeStruct_Margin, UUserWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Divide_IntInt_ReturnValue2, int32 CallFunc_Min_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, int32 CallFunc_Max_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, int32 CallFunc_Min_ReturnValue2);
  void ScrollUpdateStyle1(float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue, UUserWidget* CallFunc_NewItem_Ret, struct FAnchors K2Node_MakeStruct_Anchors, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 ___int_Variable, int32 CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue5, struct FMargin K2Node_MakeStruct_Margin, struct FMargin K2Node_MakeStruct_Margin2, UUserWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Divide_IntInt_ReturnValue2, int32 CallFunc_Min_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, int32 CallFunc_Max_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue3, int32 CallFunc_Min_ReturnValue2);
  void ScrollUpdateStyle2(UUserWidget* CallFunc_NewItem_Ret, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, struct FAnchors K2Node_MakeStruct_Anchors, float CallFunc_Conv_IntToFloat_ReturnValue, UPanelSlot* CallFunc_AddChild_ReturnValue, int32 ___int_Variable, int32 CallFunc_Percent_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, int32 CallFunc_Multiply_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, struct FMargin K2Node_MakeStruct_Margin, UUserWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue4, float CallFunc_Conv_IntToFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_FCeil_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue2, int32 CallFunc_Multiply_IntInt_ReturnValue3, int32 CallFunc_Multiply_IntInt_ReturnValue4, int32 CallFunc_Subtract_IntInt_ReturnValue2, int32 CallFunc_Max_ReturnValue, int32 CallFunc_Min_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, int32 CallFunc_Min_ReturnValue2);
  void SetReloadDonotJump(bool DonotJump);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdateContentSize(UWidget* Widget, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, struct FMargin K2Node_MakeStruct_Margin, UCanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot2, bool K2Node_DynamicCast_bSuccess2, struct FAnchors K2Node_MakeStruct_Anchors, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FMargin K2Node_MakeStruct_Margin2, bool K2Node_SwitchInteger_CmpSuccess, struct FAnchors K2Node_MakeStruct_Anchors2);
};

class UReverbEffect: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ float Density;
  /* offset=0x0020 flags=0x0018001040000201 */ float Diffusion;
  /* offset=0x0024 flags=0x0018001040000201 */ float Gain;
  /* offset=0x0028 flags=0x0018001040000201 */ float GainHF;
  /* offset=0x002c flags=0x0018001040000201 */ float DecayTime;
  /* offset=0x0030 flags=0x0018001040000201 */ float DecayHFRatio;
  /* offset=0x0034 flags=0x0018001040000201 */ float ReflectionsGain;
  /* offset=0x0038 flags=0x0018001040000201 */ float ReflectionsDelay;
  /* offset=0x003c flags=0x0018001040000201 */ float LateGain;
  /* offset=0x0040 flags=0x0018001040000201 */ float LateDelay;
  /* offset=0x0044 flags=0x0018001040000201 */ float AirAbsorptionGainHF;
  /* offset=0x0048 flags=0x0018001040000201 */ float RoomRolloffFactor;
};

class UReverbPluginSourceSettingsBase: public UObject {
};

class URichTextBlock: public UTextLayoutWidget {
  /* offset=0x00ec flags=0x0020080000000001 */ FText Text;
  /* offset=0x00f8 flags=0x0020081000080200 */ FGetText TextDelegate;
  /* offset=0x0108 flags=0x0028080000000015 */ struct FSlateFontInfo Font;
  /* offset=0x0148 flags=0x0028081040000015 */ struct FLinearColor Color;
  /* offset=0x0158 flags=0x0020088000000209 */ TArray<URichTextBlockDecorator*> Decorators;
};

class URichTextBlockDecorator: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ bool bReveal;
  /* offset=0x0020 flags=0x0018001040000205 */ int32 RevealedIndex;
};

class URig: public UObject {
  /* offset=0x001c flags=0x0040000000000241 */ TArray<struct FTransformBase> TransformBases;
  /* offset=0x0028 flags=0x0040000000000241 */ TArray<struct FNode> Nodes;
};

class ARigidBodyBase: public AActor {
};

class URotatingMovementComponent: public UMovementComponent {
  /* offset=0x00e4 flags=0x0010001040000005 */ struct FRotator RotationRate;
  /* offset=0x00f0 flags=0x0018001040000005 */ struct FVector PivotTranslation;
  /* offset=0x00fc flags=0x0018001000000005 */ uint8 bRotationInLocalSpace:1;
};

class URuntimeMeshComponent: public UMeshComponent {
  /* offset=0x05e0 flags=0x0010000010080200 */ FRuntimeMeshCollisionUpdatedDelegate CollisionUpdated;
  /* offset=0x05ec flags=0x0018001040000215 */ bool bUseComplexAsSimpleCollision;
  /* offset=0x05ed flags=0x0018001040000215 */ bool bUseAsyncCooking;
  /* offset=0x05ee flags=0x0018001040000215 */ bool bShouldSerializeMeshData;
  /* offset=0x05ef flags=0x0018001040000205 */ enum ERuntimeMeshCollisionCookingMode CollisionMode;
  /* offset=0x05f0 flags=0x001a001040080208 */ UBodySetup* BodySetup;
  /* offset=0x0614 flags=0x0040000000002200 */ TArray<struct FRuntimeMeshCollisionSection> MeshCollisionSections;
  /* offset=0x0620 flags=0x0040000000002200 */ TArray<struct FRuntimeConvexCollisionSection> ConvexCollisionSections;
  /* offset=0x062c flags=0x0040001040002000 */ struct FBoxSphereBounds LocalBounds;
  /* offset=0x0648 flags=0x0040000000002000 */ struct FRuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;
  /* offset=0x0684 flags=0x0040000000002200 */ TArray<UBodySetup*> AsyncBodySetupQueue;

  void AddCollisionConvexMesh(TArray<struct FVector> ConvexVerts);
  void BeginBatchUpdates();
  void ClearAllMeshCollisionSections();
  void ClearAllMeshSections();
  void ClearCollisionConvexMeshes();
  void ClearMeshCollisionSection(int32 CollisionSectionIndex);
  void ClearMeshSection(int32 SectionIndex);
  void CookCollisionNow();
  void CreateMeshSection_Blueprint(int32 SectionIndex, TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector> Normals, TArray<struct FRuntimeMeshTangent> Tangents, TArray<struct FVector2D> UV0, TArray<struct FVector2D> UV1, TArray<struct FLinearColor> Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum EUpdateFrequency UpdateFrequency);
  bool DoesSectionExist(int32 SectionIndex);
  void EndBatchUpdates();
  int32 FirstAvailableMeshSectionIndex();
  int32 GetLastSectionIndex();
  int32 GetNumSections();
  bool IsMeshSectionCastingShadows(int32 SectionIndex);
  bool IsMeshSectionCollisionEnabled(int32 SectionIndex);
  bool IsMeshSectionVisible(int32 SectionIndex);
  void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();
  void SetMeshCollisionSection(int32 CollisionSectionIndex, TArray<struct FVector> Vertices, TArray<int32> Triangles);
  void SetMeshSectionCastsShadow(int32 SectionIndex, bool bNewCastsShadow);
  void SetMeshSectionCollisionEnabled(int32 SectionIndex, bool bNewCollisionEnabled);
  void SetMeshSectionVisible(int32 SectionIndex, bool bNewVisibility);
  void SetSectionTessellationTriangles(int32 SectionIndex, TArray<int32> TessellationTriangles, bool bShouldMoveArray);
  void UpdateMeshSection_Blueprint(int32 SectionIndex, TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector> Normals, TArray<struct FRuntimeMeshTangent> Tangents, TArray<struct FVector2D> UV0, TArray<struct FVector2D> UV1, TArray<struct FLinearColor> Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);
};

class URuntimeMeshLibrary: public UBlueprintFunctionLibrary {
  void CalculateTangentsForMesh(TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector2D> UVs, TArray<struct FVector> Normals, TArray<struct FRuntimeMeshTangent> Tangents);
  void ConvertQuadToTriangles(TArray<int32> Triangles, int32 Vert0, int32 Vert1, int32 Vert2, int32 Vert3);
  void CopyRuntimeMeshFromStaticMeshComponent(UStaticMeshComponent* StaticMeshComp, int32 LODIndex, URuntimeMeshComponent* RuntimeMeshComp, bool bShouldCreateCollision);
  void CreateBoxMesh(struct FVector BoxRadius, TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector> Normals, TArray<struct FVector2D> UVs, TArray<struct FRuntimeMeshTangent> Tangents);
  void CreateGridMeshTriangles(int32 NumX, int32 NumY, bool bWinding, TArray<int32> Triangles);
  void GenerateTessellationIndexBuffer(TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector2D> UVs, TArray<struct FVector> Normals, TArray<struct FRuntimeMeshTangent> Tangents, TArray<int32> OutTessTriangles);
  void GetSectionFromStaticMesh(UStaticMesh* InMesh, int32 LODIndex, int32 SectionIndex, TArray<struct FVector> Vertices, TArray<int32> Triangles, TArray<struct FVector> Normals, TArray<struct FVector2D> UVs, TArray<struct FRuntimeMeshTangent> Tangents);
};

class USCS_Node: public UObject {
  /* offset=0x001c flags=0x0018001040000200 */ UClass<UObject>* ComponentClass;
  /* offset=0x0020 flags=0x0018001040080208 */ UActorComponent* ComponentTemplate;
  /* offset=0x0028 flags=0x0010000000000000 */ struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;
  /* offset=0x0060 flags=0x0018001040002200 */ FName VariableName;
  /* offset=0x0068 flags=0x0018001040000200 */ FName AttachToName;
  /* offset=0x0070 flags=0x0018001040000200 */ FName ParentComponentOrVariableName;
  /* offset=0x0078 flags=0x0018001040000200 */ FName ParentComponentOwnerClassName;
  /* offset=0x0080 flags=0x0018001040000200 */ bool bIsParentComponentNative;
  /* offset=0x0084 flags=0x0010000000000200 */ TArray<USCS_Node*> ChildNodes;
  /* offset=0x0090 flags=0x0010000000000201 */ TArray<struct FBPVariableMetaDataEntry> MetaDataArray;
  /* offset=0x009c flags=0x0018001040000000 */ struct FGuid VariableGuid;
  /* offset=0x00ac flags=0x0018001060000200 */ bool bIsFalseRoot;
  /* offset=0x00ad flags=0x0018001060000200 */ bool bIsNative;
  /* offset=0x00b0 flags=0x0018001060000200 */ FName NativeComponentName;
  /* offset=0x00b8 flags=0x0018001060000200 */ bool bVariableNameAutoGenerated;
  /* offset=0x00c0 flags=0x0048001040000200 */ FName InternalVariableName;
};

class USTBaseBuff: public UObject {
  /* offset=0x001c flags=0x0018000000002200 */ FString BuffName;
  /* offset=0x0028 flags=0x0018000000000205 */ FString DisplayName;
  /* offset=0x0034 flags=0x0018000000000205 */ FString Message;
  /* offset=0x0040 flags=0x0018001040000205 */ UTexture2D* Icon;
  /* offset=0x0044 flags=0x0018001040000205 */ USoundBase* SoundData;
  /* offset=0x0048 flags=0x0018001040000205 */ bool IsDeBuff;
  /* offset=0x0049 flags=0x0018001040000205 */ bool IgnoreMagicalImmunity;
  /* offset=0x004a flags=0x0018001040000205 */ bool Layerable;
  /* offset=0x004b flags=0x0018001040000205 */ bool ReplaceExsist;
  /* offset=0x004c flags=0x0018001040000205 */ bool StaysOnDeath;
  /* offset=0x0050 flags=0x0018001040000205 */ int32 LayerMax;
  /* offset=0x0054 flags=0x0018001040000205 */ int32 InitialLayerCount;
  /* offset=0x0058 flags=0x0018001040020215 */ int32 LayerCount;
  /* offset=0x005c flags=0x0018001040000205 */ float ValidityTime;
  /* offset=0x0060 flags=0x0018001040000205 */ float Internal;
  /* offset=0x0064 flags=0x001000800000020d */ TArray<UUTSkillCondition*> BuffConditions;
  /* offset=0x0070 flags=0x0018001040000200 */ float Expiry;
  /* offset=0x0074 flags=0x0010000000000205 */ TArray<struct FStatusChange> StatusChanges;
  /* offset=0x0080 flags=0x0018001040000205 */ bool NeedSimulateToClientMulticast;
  /* offset=0x0081 flags=0x0018001040000205 */ bool NeedSimulateToClient;
  /* offset=0x0082 flags=0x0018001040000205 */ uint8 SimulateAddBuffRole;
  /* offset=0x0084 flags=0x0010000000000205 */ TArray<FName> MutexBuffers;
  /* offset=0x0090 flags=0x0010008000000205 */ TArray<struct FBuffActionItem> BuffActions;
  /* offset=0x009c flags=0x0010008000000205 */ TArray<struct FBuffEventActionItem> EventBuffActions;
  /* offset=0x00a8 flags=0x0018001040000205 */ float fADScale;
  /* offset=0x00ac flags=0x0018001040000205 */ float fAPScale;
  /* offset=0x00b0 flags=0x0018001040000201 */ bool IsAlwaysExists;
  /* offset=0x00b4 flags=0x0018001040000200 */ AController* CauserPawnController;
  /* offset=0x00b8 flags=0x0018001040000200 */ APawn* Target;
  /* offset=0x00c4 flags=0x0018001040000200 */ AActor* BuffApplier;

  float GetBuffPassPercentage();
};

class USTBaseBuffCarrierInterface: public UInterface {
  int32 AddBuff(FName BuffName, AController* SkillActor, int32 LayerCount, AActor* BuffApplierActor);
  bool AddBuffExpiry(FName BuffName, float ExpirySeconds);
  bool AddBuffLayer(FName BuffName, int32 layerNum);
  USTBaseBuff* GetBuffByName(FName BuffName);
  bool HasBuff(FName BuffName);
  bool IsSameTeamWithFirstPC();
  bool RemoveBuff(FName BuffName, bool RemoveLayerOnly);
  void SyncInvincibleData(float TotalTime);
};

class USTBaseBuffConditionBase: public UActorComponent {
  /* offset=0x00ac flags=0x001c001040082208 */ USTBaseBuff* OwnerBuff;
};

class USTBaseBuffEventType: public UObject {
};

class USTBaseBuffEventType_ConditionNotMatch: public USTBaseBuffEventType {
};

class USTBaseBuffEventType_LayerMax: public USTBaseBuffEventType {
};

class USTBaseBuffEventType_LayerSpecific: public USTBaseBuffEventType {
  /* offset=0x0020 flags=0x0018001040000205 */ int32 LayerCountParam;
};

class USTBaseBuffEventType_OnAttach: public USTBaseBuffEventType {
};

class USTBaseBuffEventType_Removed: public USTBaseBuffEventType {
};

class USTBaseBuffEventType_TakeBuffDamage: public USTBaseBuffEventType {
};

class USTBaseBuffList: public UObject {
  /* offset=0x001c flags=0x0010008000000205 */ TArray<struct FSTBaseBuffTemplateItem> BuffList;
};

class USTBaseBuffManager: public UObject {
  /* offset=0x001c flags=0x0010008000000205 */ TArray<struct FSTBaseBuffTemplateItem> BuffList;
  /* offset=0x0028 flags=0x0014000000000205 */ TArray<UClass<USTBaseBuffList>*> BuffListTemplates;
};

class USTBaseBuffStatusType: public UObject {
};

class USTBaseBuffStatusType_ImmuneDebuff: public USTBaseBuffStatusType {
};

class USTBaseBuffSystemComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010008000000200 */ TArray<struct FBuffInstancedItem> AllBuffs;
  /* offset=0x00b8 flags=0x001c001040000200 */ APawn* PawnOwner;

  int32 AddBuff(FName BuffName, AController* BuffCauser, int32 LayerCount, AActor* BuffApplierActor);
  int32 AddBuffByID(int32 BuffID, AController* BuffCauser, int32 LayerCount, AActor* BuffApplierActor);
  bool AddBuffExpiry(FName BuffName, float ExpirySeconds);
  bool AddBuffLayer(FName BuffName, int32 layerNum);
  bool CheckBuffStatus(UClass<USTBaseBuffStatusType>* status, bool Value);
  void ClearBuff(bool bDebuff, bool bGainBuff);
  /* CL* */ void ClientMulticastSimulateAddBuff(FName BuffName, AController* BuffCauser, int32 LayerCount);
  /* CL* */ void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly);
  /* CL  */ void ClientSimulateAddBuff(FName BuffName, AController* BuffCauser, int32 LayerCount);
  /* CL  */ void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly);
  USTBaseBuff* GetBuffByName(FName BuffName);
  int32 GetBuffID(FName BuffName);
  FName GetBuffName(int32 BuffID);
  bool HasBuff(FName BuffName);
  void InitModifier(APawn* TempPawn);
  bool IsBufferMutexed(FName NewBuffName);
  bool RemoveBuff(FName BuffName, bool RemoveLayerOnly);
  bool RemoveBuffByID(int32 BuffID, bool RemoveLayerOnly, AController* pCauser);
  bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, AController* pCauser);
  void ResetForDeath();
};

class USTBuffAction_PlaySCAppearance: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString AppearanceKeyString;
  /* offset=0x00f8 flags=0x0018001040000201 */ UMaterialInterface* AppearanceMaterial;
  /* offset=0x00fc flags=0x0018001040000201 */ float LifeSpan;
  /* offset=0x0100 flags=0x0018001040002200 */ UMaterialInstanceDynamic* DynamicMat;
};

class USTCharacterMovementComponent: public UCharacterMovementComponent {
  /* offset=0x060e flags=0x0018001040000204 */ bool StopTick;
  /* offset=0x0610 flags=0x0018001040000204 */ float TimeSpeedFactor;
  /* offset=0x0614 flags=0x0018001040000204 */ bool CheatCheckSumFailed;
  /* offset=0x0615 flags=0x0018001040000204 */ bool bCanSendCmdAck;
  /* offset=0x0616 flags=0x0018001040000204 */ bool bCheatClientLocation;
  /* offset=0x0618 flags=0x0018041040000205 */ float MaxDecideClientTimeSpeedDeltaTime;
  /* offset=0x061c flags=0x0018041000000005 */ uint8 bUseTimeSpeedAntiCheatCheck:1;
  /* offset=0x061c flags=0x0018041000000005 */ uint8 bUseUserCmdDeltaCompress:1;
  /* offset=0x0620 flags=0x0018001040000205 */ float SimulatedNearDistanceSqAtClient;
  /* offset=0x0624 flags=0x0018001040000205 */ float SimulatedNearTickIntervalAtClient;
  /* offset=0x0628 flags=0x0018001040000205 */ float SimulatedMiddleDistanceSqAtClient;
  /* offset=0x062c flags=0x0018001040000205 */ float SimulatedMiddleTickIntervalAtClient;
  /* offset=0x0630 flags=0x0018001040000205 */ float SimulatedFarDistanceSqAtClient;
  /* offset=0x0634 flags=0x0018001040000205 */ float SimulatedFarTickIntervalAtClient;
  /* offset=0x0638 flags=0x0018001040000205 */ float WalkSpeedCurveScale;
  /* offset=0x063c flags=0x0018001040000205 */ UCurveFloat* MaxWalkSpeedCurve;
  /* offset=0x0640 flags=0x0018001040000201 */ float ProneFloorAngle;
  /* offset=0x0644 flags=0x0018001040020201 */ float ProneFloorZ;
  /* offset=0x0648 flags=0x0018001040000201 */ float JumpFloorAngle;
  /* offset=0x064c flags=0x0018001040020201 */ float JumpFloorZ;

  /* CL  */ void ClientUserMoveCmdAck(int32 Sequence);
  bool DragOnGround(float DeltaTime);
  float GetLastServerMoveTime();
  bool IsWalkable(struct FHitResult Hit);
  float K2_GetJumpFloorAngle();
  float K2_GetJumpFloorZ();
  float K2_GetProneFloorAngle();
  float K2_GetProneFloorZ();
  /* CL  */ void OnClientCloseUserCmdDelta();
  void OnPreReconnectOnServer();
  /* CL  */ void Ping2Client(float ServerTime);
  /* SRV */ void Ping2Server(float ServerTime, float ClientTime);
  /* SRV */ void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, UPrimitiveComponent* ClientMovementBase, TArray<uint8> UserCmd);
  /* SRV */ void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, UPrimitiveComponent* ClientMovementBase, TArray<uint8> UserCmd, TArray<uint8> UserCmdDelta);
  /* SRV */ void ServerUserMoveCmdOld(int32 ClientApplySequence, TArray<uint8> UserCmdDelta);
  void SetJumpFloorAngle(float InJumpFloorAngle);
  void SetJumpFloorZ(float InJumpFloorZ);
  void SetProneFloorAngle(float InProneFloorAngle);
  void SetProneFloorZ(float InProneFloorZ);
  /* SRV */ void TimeSpeedCheck(bool Val);
  /* SRV */ void ToggleUserCmdDelta(bool Val);
};

class USTCharacterNearDeathComp: public UActorComponent {
  /* offset=0x00b8 flags=0x0018001040000205 */ float BreathMax;
  /* offset=0x00bc flags=0x0018001040000205 */ float AssistAccountableDuration;
  /* offset=0x00c0 flags=0x0018001040000205 */ float EnterNearDeathDamageInvincibleTime;
  /* offset=0x00c4 flags=0x0018001040000205 */ bool IsTurnOnDebugSameTeamAccountable;
  /* offset=0x00c8 flags=0x0018001040010201 */ UCurveFloat* CurveLayeredDeathInterval;
  /* offset=0x00cc flags=0x0018001040010201 */ int32 MaxDeathTimes;
  /* offset=0x00d0 flags=0x0018001040000205 */ bool IsDebugging;
  /* offset=0x00d8 flags=0x0028081040000200 */ ASTExtraBaseCharacter* PawnOwner;
  /* offset=0x00dc flags=0x0028081040000200 */ float EnterNearDeathSeconds;
  /* offset=0x00e0 flags=0x0028081140000235 */ float Breath;
  /* offset=0x00e4 flags=0x0028081040010201 */ int32 NearDeathRestoredOrignalHealth;
  /* offset=0x00e8 flags=0x0028081040010201 */ int32 NearDeathRestoredOrignalBreathAmount;

  void AddDeadBuff();
  float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);
  void ClearNearDeathTeammate();
  void DoFinishLastBreath();
  float GetBreath();
  float GetBreathMax();
  bool GotoLastBreathStatus(AController* EventInstigator, AActor* DamageCauser, struct FDamageEvent DamageEvent, float _finalDamage);
  void InitializeOwner(APawn* TempPawn);
  bool IsFinishedLastBreathStatus();
  bool IsHaveLastBreathStatus();
  bool IsHealthAlive();
  void OnRep_BreathChanged();
  void RescueFinishSuccessfully();
  /* CL  */ void S2C_BeHelpedByOther(ACharacter* ByWho, bool IsTurnInfo, float RemainingRescueTime);
  /* CL  */ void S2C_HelpOther(ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
  float SetHealthSafety(float AddVal);
};

class USTCharacterRescueOtherComp: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ int32 WanderingRadius;
  /* offset=0x00b0 flags=0x0010001000000005 */ struct FanPickerData FanData;
  /* offset=0x00d8 flags=0x0018001040000200 */ ASTExtraBaseCharacter* RescueWho;
  /* offset=0x00dc flags=0x0018001040000200 */ float RescueingStatusStartTimeSeconds;
  /* offset=0x00f8 flags=0x0018001040010215 */ float RestoringDuration;
  /* offset=0x00fc flags=0x001c001040002200 */ ASTExtraBaseCharacter* PawnOwner;
  /* offset=0x0104 flags=0x0018001040080208 */ USTCharacterNearDeathComp* ParentNDComp;

  void DrawDebugFan();
  void InitializeOwner(APawn* _TempPawn, USTCharacterNearDeathComp* _Outer);
  bool IsInRescueingStatus();
  void OnRep_IsRescueingOtherStatusChange();
  bool PickTargetsAsHelper(TArray<ASTExtraBaseCharacter*> pickedTargets);
  bool PlayerConfirmToRescueClientSide();
  void RescueingProcessFinished();
  void RescueingState_ActOnSatisfied(float DeltaTime);
  void RescueingState_ActOnUnsatisfied();
  bool RescueingState_IsConditionSatisfied();
  void SelectedPickedTargetChangeNotifyHUD(APawn* previousTarget);
  /* SRV */ void ServerPlayerConfirm(ASTExtraBaseCharacter* _RescueWho);
  void TickAsHelper(float DeltaTime);
  void WaitingConfirmState_ActOnSatisfied(float DeltaTime);
  void WaitingConfirmState_ActOnUnsatisfied();
  bool WaitingConfirmState_IsConditionSatisfied();
};

class USTEActorCacheComponent: public UActorComponent {
  /* offset=0x00e8 flags=0x0018001040010201 */ int32 PoolSizeLimit_Bullet;
  /* offset=0x00ec flags=0x0018001040010201 */ int32 PoolSizeLimit_BulletImpactEffect;

  ASTECachableActor* GetActorFromPool(uint8 ID);
  bool PushActorToPool(uint8 ID, ASTECachableActor* Target);
};

class ASTECachableActor: public AActor {
  /* offset=0x02a8 flags=0x00180010400a0209 */ USTEActorCacheComponent* ActorCacheComponent;

  bool PushToPool(uint8 ID);
  void RegisterCachePool(USTEActorCacheComponent* Pool);
};

class ASTEShootWeaponBulletImpactEffect: public AActor {
  /* offset=0x02ac flags=0x0018001040010201 */ UParticleSystem* DefaultFX;
  /* offset=0x02b0 flags=0x0018001040010201 */ UParticleSystem* ConcreteFX;
  /* offset=0x02b4 flags=0x0018001040010201 */ UParticleSystem* DirtFX;
  /* offset=0x02b8 flags=0x0018001040010201 */ UParticleSystem* WaterFX;
  /* offset=0x02bc flags=0x0018001040010201 */ UParticleSystem* MetalFX;
  /* offset=0x02c0 flags=0x0018001040010201 */ UParticleSystem* WoodFX;
  /* offset=0x02c4 flags=0x0018001040010201 */ UParticleSystem* GlassFX;
  /* offset=0x02c8 flags=0x0018001040010201 */ UParticleSystem* GrassFX;
  /* offset=0x02cc flags=0x0018001040010201 */ UParticleSystem* FleshFX;
  /* offset=0x02d0 flags=0x0018001040010201 */ UParticleSystem* SteelFX;
  /* offset=0x02d4 flags=0x0018001040010201 */ UParticleSystem* SandbagFX;
  /* offset=0x02d8 flags=0x0018001040010201 */ UParticleSystem* SandFX;
  /* offset=0x02dc flags=0x0018001040010201 */ UParticleSystem* ClothFX;
  /* offset=0x02e0 flags=0x0018001040010201 */ UParticleSystem* PlasticFX;
  /* offset=0x02e4 flags=0x0018001040010201 */ UParticleSystem* LeatherFX;
  /* offset=0x02e8 flags=0x0018001040010201 */ UParticleSystem* CeramicsFX;
  /* offset=0x02ec flags=0x0018001040010201 */ UParticleSystem* PaperFX;
  /* offset=0x02f0 flags=0x0018001040010201 */ UParticleSystem* StoneFX;
  /* offset=0x02f4 flags=0x0018001040010201 */ UParticleSystem* SnowFX;
  /* offset=0x02f8 flags=0x0018001040010201 */ UParticleSystem* PopCanFX;
  /* offset=0x02fc flags=0x0018001040010201 */ UParticleSystem* PyreflyFX;
  /* offset=0x0300 flags=0x0018001040010201 */ UParticleSystem* LeafFX;
  /* offset=0x0304 flags=0x0018001040010201 */ UParticleSystem* CarFX;
  /* offset=0x0308 flags=0x0018001040010201 */ UParticleSystem* AsphaltFX;
  /* offset=0x030c flags=0x0018001040010201 */ bool bForceDefaultFX;
  /* offset=0x0310 flags=0x0018001040010201 */ UAkAudioEvent* DefaultSound;
  /* offset=0x0314 flags=0x0018001040010201 */ UAkAudioEvent* ConcreteSound;
  /* offset=0x0318 flags=0x0018001040010201 */ UAkAudioEvent* DirtSound;
  /* offset=0x031c flags=0x0018001040010201 */ UAkAudioEvent* WaterSound;
  /* offset=0x0320 flags=0x0018001040010201 */ UAkAudioEvent* MetalSound;
  /* offset=0x0324 flags=0x0018001040010201 */ UAkAudioEvent* WoodSound;
  /* offset=0x0328 flags=0x0018001040010201 */ UAkAudioEvent* GlassSound;
  /* offset=0x032c flags=0x0018001040010201 */ UAkAudioEvent* GrassSound;
  /* offset=0x0330 flags=0x0018001040010201 */ UAkAudioEvent* FleshSound;
  /* offset=0x0334 flags=0x0018001040010201 */ UAkAudioEvent* SteelSound;
  /* offset=0x0338 flags=0x0018001040010201 */ UAkAudioEvent* SandbagSound;
  /* offset=0x033c flags=0x0018001040010201 */ UAkAudioEvent* SandSound;
  /* offset=0x0340 flags=0x0018001040010201 */ UAkAudioEvent* ClothSound;
  /* offset=0x0344 flags=0x0018001040010201 */ UAkAudioEvent* PlasticSound;
  /* offset=0x0348 flags=0x0018001040010201 */ UAkAudioEvent* LeatherSound;
  /* offset=0x034c flags=0x0018001040010201 */ UAkAudioEvent* CeramicsSound;
  /* offset=0x0350 flags=0x0018001040010201 */ UAkAudioEvent* PaperSound;
  /* offset=0x0354 flags=0x0018001040010201 */ UAkAudioEvent* StoneSound;
  /* offset=0x0358 flags=0x0018001040010201 */ UAkAudioEvent* SnowSound;
  /* offset=0x035c flags=0x0018001040010201 */ UAkAudioEvent* PopCanSound;
  /* offset=0x0360 flags=0x0018001040010201 */ UAkAudioEvent* PyreflySound;
  /* offset=0x0364 flags=0x0018001040010201 */ UAkAudioEvent* LeafSound;
  /* offset=0x0368 flags=0x0018001040010201 */ UAkAudioEvent* CarSound;
  /* offset=0x036c flags=0x0018001040010201 */ UAkAudioEvent* AsphaltSound;
  /* offset=0x0370 flags=0x0010001000010001 */ struct FDecalData DefaultDecal;
  /* offset=0x038c flags=0x0010001000010001 */ struct FDecalData ConcreteDecal;
  /* offset=0x03a8 flags=0x0010001000010001 */ struct FDecalData DirtDecal;
  /* offset=0x03c4 flags=0x0010001000010001 */ struct FDecalData WaterDecal;
  /* offset=0x03e0 flags=0x0010001000010001 */ struct FDecalData MetalDecal;
  /* offset=0x03fc flags=0x0010001000010001 */ struct FDecalData WoodDecal;
  /* offset=0x0418 flags=0x0010001000010001 */ struct FDecalData GrassDecal;
  /* offset=0x0434 flags=0x0010001000010001 */ struct FDecalData GlassDecal;
  /* offset=0x0450 flags=0x0010001000010001 */ struct FDecalData FleshDecal;
  /* offset=0x046c flags=0x0010001000010001 */ struct FDecalData SteelDecal;
  /* offset=0x0488 flags=0x0010001000010001 */ struct FDecalData SandbagDecal;
  /* offset=0x04a4 flags=0x0010001000010001 */ struct FDecalData SandDecal;
  /* offset=0x04c0 flags=0x0010001000010001 */ struct FDecalData ClothDecal;
  /* offset=0x04dc flags=0x0010001000010001 */ struct FDecalData PlasticDecal;
  /* offset=0x04f8 flags=0x0010001000010001 */ struct FDecalData LeatherDecal;
  /* offset=0x0514 flags=0x0010001000010001 */ struct FDecalData CeramicsDecal;
  /* offset=0x0530 flags=0x0010001000010001 */ struct FDecalData PaperDecal;
  /* offset=0x054c flags=0x0010001000010001 */ struct FDecalData StoneDecal;
  /* offset=0x0568 flags=0x0010001000010001 */ struct FDecalData SnowDecal;
  /* offset=0x0584 flags=0x0010001000010001 */ struct FDecalData PopCanDecal;
  /* offset=0x05a0 flags=0x0010001000010001 */ struct FDecalData PyreflyDecal;
  /* offset=0x05bc flags=0x0010001000010001 */ struct FDecalData LeafDecal;
  /* offset=0x05d8 flags=0x0010001000010001 */ struct FDecalData CarDecal;
  /* offset=0x05f4 flags=0x0010001000010001 */ struct FDecalData AsphaltDecal;
  /* offset=0x0610 flags=0x0010009000000014 */ struct FBulletHitInfoUploadData SurfaceHit;
  /* offset=0x0668 flags=0x0018001040000214 */ bool bAudioOnly;
  /* offset=0x0680 flags=0x0018001040080208 */ USceneComponent* TargetImpactComp;
};

class USTEShootWeaponInstantComponent: public USTExtraShootWeaponComponent {
};

class USTEShootWeaponProjectComponent: public USTExtraShootWeaponComponent {
};

class ASTExtraAIShootWeapon: public ASTExtraShootWeapon {
};

class ASTExtraAirborne: public ACharacter {
  /* offset=0x05a4 flags=0x0018001040000025 */ struct FVector CurrentForwardSpeedV2;
  /* offset=0x05b0 flags=0x0018001040000025 */ struct FVector CurrentTurnSpeedV2;
  /* offset=0x05bc flags=0x0010001000000005 */ struct FAirborneSpeed FallSpeed2;
  /* offset=0x05fc flags=0x0010001000000005 */ struct FAirborneSpeed OpenSpeed2;
  /* offset=0x063c flags=0x0018001140000234 */ uint8 AirborneState2;
  /* offset=0x0640 flags=0x0018001040000205 */ float CurrentAltitude2;
  /* offset=0x0644 flags=0x0010001000000005 */ struct FCameraSettings FreefallCameraSetting2;
  /* offset=0x0658 flags=0x0010001000000005 */ struct FCameraSettings OpeningCameraSetting2;
  /* offset=0x066c flags=0x001800104008020d */ UAkComponent* AkComponent;
  /* offset=0x0670 flags=0x001800104008020d */ USpringArmComponent* SpringArmFromBP;
  /* offset=0x0674 flags=0x001800104008020d */ UTimelineComponent* LerpCameraTimeline;
  /* offset=0x0678 flags=0x0018001040000205 */ UCurveFloat* CameraCurve;
  /* offset=0x0690 flags=0x001800104008020d */ UCameraSettingComponentFromBP* CameraSettingComponentFromBP;
  /* offset=0x0694 flags=0x0018001040000205 */ UAkAudioEvent* FreeFallAkEvent;
  /* offset=0x0698 flags=0x0018001040000205 */ UAkAudioEvent* OpeningAkEvent;
  /* offset=0x069c flags=0x0018001040000205 */ UCameraAnim* AirborneCameraAnim;
  /* offset=0x06a0 flags=0x0010000010080200 */ FOnAirborneJumpDelegate OnAirborneJump;
  /* offset=0x06ac flags=0x0018001040000205 */ APawn* GroundPawnFromBP;
  /* offset=0x06b0 flags=0x0018001040010205 */ float HaveToOpenAltitude;
  /* offset=0x06b4 flags=0x0010000010080200 */ FOnAirborneStateChangeDelegate AirborneStateChangeDelegate;

  /* SRV */ void ChangeCurForwardSpeedVFromBP(struct FVector Speed);
  void DoMoveForward(float Rate);
  void DoMoveRight(float Rate);
  struct FVector GetAirborneVelocity2();
  struct FVector GetVerticalSpeed2();
  bool IsAutonomousFromBP();
  void MoveForward(float Rate);
  void MoveRight(float Rate);
  struct FVector NormalSpeedFromBP();
  void OnCameraSettingLerp(float LerpAlpha);
  void OnRep_AirbornStateChange();
  /* CL* */ void OnStateChangeMultiCastFromBP();
  /* SRV */ void OnStateChangeServerFromBP();
  /* CL* */ void RotateMulticastFromBP(struct FRotator Rotator);
  void ServerAndAirbornAfterLand();
  /* SRV */ void ServerSetStateFromBP(uint8 AirborneStateBP);
  void StateChangeClientFromBP();
  void StateChangeServerFromBP();
  void SwitchCameraFromBP(struct FCameraSettings CameraSetting);
};

class USTExtraAnimInstance: public UAnimInstance {
  /* offset=0x02ec flags=0x0010001040000014 */ struct FRotator OwnerAimRotation;
  /* offset=0x02f8 flags=0x0018001040000204 */ int32 AnimInstanceIndex;
  /* offset=0x02fc flags=0x0018001040000214 */ float PeekFrameRate;
  /* offset=0x0304 flags=0x0018001040004200 */ float PeekSpeed;

  void HandleOwnerAnimEvent(FName EventMsg);
};

class ASTExtraBaseCharacter: public AUAECharacter {
  /* offset=0x05fc flags=0x0010000010080200 */ FOnPlayerTeleportDelegate OnPlayerTeleport;
  /* offset=0x0608 flags=0x0010000010080200 */ FOnCharacterDeathDelegate OnDeath;
  /* offset=0x0614 flags=0x0010000010080200 */ FOnPlayerPawnHPChange OnPlayerPawnHPChange;
  /* offset=0x0620 flags=0x0010000010080200 */ FOnBulletChangeDelegate OnBulletChange;
  /* offset=0x062c flags=0x0010000010080200 */ FOnCharacterChangePoseDelegate OnPlayerPoseChange;
  /* offset=0x0638 flags=0x0010000010080200 */ FOnCharacterEnterRescueingStatusDelegate OnPlayerEnterRescueingStatus;
  /* offset=0x0644 flags=0x0010000010080200 */ FOnCharacterPickUpActorDelegate OnPlayerPickUp;
  /* offset=0x0650 flags=0x0010000010080200 */ FOnCharacterWeaponStateChanged OnPlayerWeaponChangeState;
  /* offset=0x065c flags=0x0010000010080200 */ FOnWeaponFireModeChangeDelegate OnWeaponFireModeChangeDelegate;
  /* offset=0x0668 flags=0x0010000010080200 */ FOnHideUIAfterPlayerDeadDelegate OnHideUIAfterPlayerDeadDelegate;
  /* offset=0x0674 flags=0x0010000010080200 */ FOnHandFoldedChanged OnPlayerHandFoldedChanged;
  /* offset=0x0680 flags=0x0010000010080200 */ FIsEnterNearDeathDelegate IsEnterNearDeathDelegate;
  /* offset=0x068c flags=0x0010000010080200 */ FCharacterAimModeChanged OnCharacterAimModeChanged;
  /* offset=0x0698 flags=0x0010000010080200 */ FOnDoSomethingDelaySomeFramesDelegate OnDoSomethingDelaySomeFrames;
  /* offset=0x06a4 flags=0x0010000010080200 */ FOnReconnectNotifyDelegate OnReconnectNotifyDelegate;
  /* offset=0x06b0 flags=0x0010000010080200 */ FOnStartInitDelegate OnStartInitDelegate;
  /* offset=0x06bc flags=0x0010000010080200 */ FCharacterAnimEvent CharacterAnimEventDelegate;
  /* offset=0x06c8 flags=0x0010000000080200 */ FCharacterStartFireDelegate OnCharacterStartFireDelegate;
  /* offset=0x06d4 flags=0x0010000000080200 */ FCharacterStopFireDelegate OnCharacterStopFireDelegate;
  /* offset=0x06e0 flags=0x0010000000080200 */ FCharacterShootDelegate OnCharacterShootDelegate;
  /* offset=0x06ec flags=0x0018001040010201 */ UAkAudioEvent* DeathSound;
  /* offset=0x06f0 flags=0x0018001040010201 */ UAkAudioEvent* PickupSound;
  /* offset=0x06f4 flags=0x0018001040010201 */ UAkAudioEvent* ThrowawayWeaponSound;
  /* offset=0x06f8 flags=0x0018001040010201 */ UAkAudioEvent* SwitchFireModeSound;
  /* offset=0x06fc flags=0x0018001040010201 */ UAkAudioEvent* SwitchSightSound;
  /* offset=0x0700 flags=0x0018001040010201 */ UAkAudioEvent* MountAccessoriesSound;
  /* offset=0x0704 flags=0x0018001000000005 */ uint8 IsInvincible:1;
  /* offset=0x0704 flags=0x0018001000000005 */ uint8 bShowName:1;
  /* offset=0x0704 flags=0x0018001000000005 */ uint8 bShowDamageToOther:1;
  /* offset=0x0708 flags=0x0018001040000205 */ float NetDelayMinAniCompensate;
  /* offset=0x070c flags=0x0018001140000225 */ float Money;
  /* offset=0x0710 flags=0x0018001000000014 */ uint8 bDead:1;
  /* offset=0x0711 flags=0x0018001040000214 */ bool bHasHandleDead;
  /* offset=0x0712 flags=0x0018001000000014 */ uint8 bDying:1;
  /* offset=0x0712 flags=0x0018001000000014 */ uint8 bIgnoreInput:1;
  /* offset=0x0713 flags=0x0018001040000215 */ uint8 TeamNum;
  /* offset=0x0714 flags=0x0018001040000215 */ bool FriendThread;
  /* offset=0x0715 flags=0x0018001040000215 */ bool bUseSameTeamDamage;
  /* offset=0x0718 flags=0x0018001040000215 */ float MaxSwimSprintSpeed;
  /* offset=0x071c flags=0x0018001000000005 */ uint8 IsFiveTimesWalkSpeed:1;
  /* offset=0x071d flags=0x0018001040000205 */ bool bIsDrawLocation;
  /* offset=0x071e flags=0x0018001040000205 */ bool bIsGunADS;
  /* offset=0x0720 flags=0x0018001040000200 */ float PreviousValueToSetForHealthPredict;
  /* offset=0x0724 flags=0x0018001040000200 */ float ValueLimitForHealthPredict;
  /* offset=0x0728 flags=0x0018001040000215 */ FName HeadSocketName;
  /* offset=0x0730 flags=0x001800104008020d */ UMoveAntiCheatComponent* MoveAntiCheatComponent;
  /* offset=0x0734 flags=0x001800104008020d */ ULagCompensationComponent* LagCompensationComponent;
  /* offset=0x0738 flags=0x001800104008020d */ UBaseCharacterEffectCom* EffectComponent;
  /* offset=0x073c flags=0x001800104008020d */ UEffectComponent* NewEffectComponent;
  /* offset=0x0740 flags=0x001800104008020d */ UCharacterParachuteComponent* ParachuteComponent;
  /* offset=0x0744 flags=0x0018001040080209 */ UNavigationInvokerComponent* NavigationInvokerComponent;
  /* offset=0x0748 flags=0x0018001040000234 */ bool bIsWeaponFiring;
  /* offset=0x074c flags=0x0010001040000034 */ struct FRotator ServerControlRotation;
  /* offset=0x0758 flags=0x0018001140000224 */ uint8 PoseState;
  /* offset=0x075c flags=0x0018001040000205 */ float AnimDeathLifeSpan;
  /* offset=0x0760 flags=0x001c001040000201 */ UClass<ASTExtraShootWeapon>* AutoEquipWeaponTemplate;
  /* offset=0x0764 flags=0x0010000000010201 */ TArray<struct FWeaponSlotSwitchTimeData> SwitchSlotTimeDataList;
  /* offset=0x0770 flags=0x0010000000000214 */ TArray<AActor*> PlayerSlotData;
  /* offset=0x077c flags=0x0010000000000234 */ TArray<AActor*> InventoryData;
  /* offset=0x07dc flags=0x0018001040080208 */ UAkComponent* FootstepSound_Comp;
  /* offset=0x07e0 flags=0x0018001040010201 */ UAkAudioEvent* FootstepSound;
  /* offset=0x07e4 flags=0x0018001040080208 */ UAkComponent* WeaponSound_Comp;
  /* offset=0x07e8 flags=0x00180010400a021d */ USceneComponent* MeshContainer;
  /* offset=0x07ec flags=0x00180010400a021d */ USTBaseBuffSystemComponent* BuffSystemComponent;
  /* offset=0x07f0 flags=0x0018001040000224 */ bool bVaultIsOpen;
  /* offset=0x07f4 flags=0x00180010400a021d */ USTCharacterNearDeathComp* NearDeatchComponent;
  /* offset=0x07f8 flags=0x00180010400a021d */ USTCharacterRescueOtherComp* RescueOtherComponent;
  /* offset=0x07fc flags=0x0018001140000234 */ bool IsRescueingOther;
  /* offset=0x07fd flags=0x0018001140000234 */ bool IsBeingRescued;
  /* offset=0x0800 flags=0x0010001000010015 */ struct FBodyTypeDef ProneBodyDef;
  /* offset=0x0808 flags=0x0010001000010015 */ struct FBodyTypeDef StandBodyDef;
  /* offset=0x0810 flags=0x0010001000010015 */ struct FBodyTypeDef CrouchBodyDef;
  /* offset=0x0818 flags=0x0010001000010015 */ struct FBodyTypeDef DyingBodyDef;
  /* offset=0x0820 flags=0x0010001000010015 */ struct FBodyTypeDef VechicleBodyDef;
  /* offset=0x0828 flags=0x0018001040010015 */ struct FVector ScopeNewIdleLoc;
  /* offset=0x0834 flags=0x0018001040010015 */ struct FVector ScopeNewAimLoc;
  /* offset=0x0840 flags=0x0018001040010201 */ float ScopeMoveInOutSpeed;
  /* offset=0x0844 flags=0x0018001040010001 */ struct FVector ScopeAimShootSpreadDir;
  /* offset=0x0850 flags=0x0018001040010201 */ float ScopeAimShootSpreadAddDirValSpeed;
  /* offset=0x0854 flags=0x0018001040010201 */ float ScopeAimShootSpreadDecDirValSpeed;
  /* offset=0x0858 flags=0x0018001040010201 */ float ScopeAimShootSpreadDirValMax;
  /* offset=0x0860 flags=0x0010001040010001 */ struct FRotator ScopeAimShootSpreadRot;
  /* offset=0x086c flags=0x0018001040010201 */ float ScopeAimShootSpreadAddRotValSpeed;
  /* offset=0x0870 flags=0x0018001040010201 */ float ScopeAimShootSpreadDecRotValSpeed;
  /* offset=0x0874 flags=0x0018001040010201 */ float ScopeAimShootSpreadRotValMax;
  /* offset=0x087c flags=0x0018001040010201 */ float ScopeLagScale;
  /* offset=0x0880 flags=0x0018001040010201 */ float ScopeAimCrosshairUIScale;
  /* offset=0x0884 flags=0x001c001040010201 */ UClass<APlayerTombBox>* DeadInventoryBoxTemplate;
  /* offset=0x0888 flags=0x0018001040010201 */ float DeadInventoryBoxOverrideFindPutDownPointZThreshold;
  /* offset=0x088c flags=0x0018001040010201 */ int32 FirstDamageTypeSpesificID;
  /* offset=0x0890 flags=0x0018001040010201 */ float RefreshUITimeAfterSpawn;
  /* offset=0x0894 flags=0x0018001040010201 */ float RefreshUITimeAfterSpawnInterval;
  /* offset=0x08a0 flags=0x0018001040000004 */ struct FVector ScopeNewTargetLoc;
  /* offset=0x08ac flags=0x0018001040000204 */ bool bMarkScopeLocDirty;
  /* offset=0x08b0 flags=0x0018001040080208 */ UCustomSpringArmComponent* SpringArmComp;
  /* offset=0x08b4 flags=0x0018001040080208 */ UCameraComponent* ThirdPersonCameraComponent;
  /* offset=0x08b8 flags=0x0018001040000205 */ bool bHasStuckOperation;
  /* offset=0x08bc flags=0x0010001100000034 */ struct FSyncAKEvent SyncAKEvent;
  /* offset=0x08cc flags=0x0010000010080200 */ FOnJoyStickInteruptDelegate OnJoyStickInteruptDelegate;
  /* offset=0x08d8 flags=0x0010000010080200 */ FOnPlayerAttrChangeDelegate OnPlayerAttrChangeDelegate;
  /* offset=0x08e4 flags=0x0010000010080200 */ FOnCharacterAttrChangedWithDetail OnCharacterAttrChangedWithDetail;
  /* offset=0x08f0 flags=0x0018001040000214 */ bool bIsDelayingMove;
  /* offset=0x08f1 flags=0x0018001040000205 */ bool bDebugNewWeaponSystem;
  /* offset=0x08f4 flags=0x00180010400a021d */ UBoxComponent* ProneBoxComponent;
  /* offset=0x08f8 flags=0x0010000000010215 */ TArray<struct FDamageCauserRecordData> DamageCauserRecords;
  /* offset=0x0904 flags=0x00180010400a021d */ USTCharacterMovementComponent* STCharacterMovement;
  /* offset=0x0908 flags=0x0010001040000034 */ struct FSimViewData SimulateViewData;
  /* offset=0x090c flags=0x0010000100000035 */ struct FKilledTipsBlock BlockData;
  /* offset=0x0934 flags=0x0018001040000205 */ bool IsInWater;
  /* offset=0x0938 flags=0x0028081040000014 */ struct FVector CurInputVector;
  /* offset=0x0944 flags=0x0028081040080208 */ UStaticMeshComponent* ScopComp;
  /* offset=0x094c flags=0x0018001040010201 */ float voiceCheckCD;
  /* offset=0x0950 flags=0x0018001040010201 */ float voiceCheckShowCD;
  /* offset=0x0954 flags=0x0018001040010201 */ float VoiceCheckDis;
  /* offset=0x0970 flags=0x001800104008021d */ UAttrModifyComponent* AttrModifyComp;
  /* offset=0x0974 flags=0x0018001040000200 */ ASTExtraPlayerState* STExtraPlayerState;
  /* offset=0x0978 flags=0x0018001040000200 */ uint8 MovementModeBeforeNearDeath;
  /* offset=0x097c flags=0x0018001040000200 */ ASTExtraPlayerState* WhoKillMeRecord;
  /* offset=0x0980 flags=0x0018001040000224 */ int32 HandFolderRatio;
  /* offset=0x0984 flags=0x0018001040010205 */ float SwimUpRate;
  /* offset=0x0988 flags=0x0018001040010205 */ bool IsSwimUpWater;
  /* offset=0x098c flags=0x0018001040010205 */ float UpWaterHeight;
  /* offset=0x09a4 flags=0x0028081040000020 */ struct FVector MoveInputState;
  /* offset=0x09e8 flags=0x0048001040000200 */ bool hHasCallGameModeKill;
  /* offset=0x0a04 flags=0x0040001000010001 */ struct FPoseChangeTime SwitchPoseTime;
  /* offset=0x0a20 flags=0x0040001040010001 */ struct FTransform HitBoxLeanTransL;
  /* offset=0x0a50 flags=0x0040001040010001 */ struct FTransform HitBoxLeanTransR;
  /* offset=0x0a98 flags=0x0048001040000200 */ UWeaponOwnerProxy* WeaponOwnerProxy;
  /* offset=0x0a9c flags=0x0048001040000200 */ UBaseCharacterPickupProxy* PickupProxy;
  /* offset=0x0aa0 flags=0x0048001040080208 */ UCharacterWeaponManagerComponent* WeaponManagerComponent;
  /* offset=0x0aa4 flags=0x0048001040010201 */ float DelayHideDuration;
  /* offset=0x0c4c flags=0x0028081140000220 */ uint8 ThrowGrenadeMode;
  /* offset=0x0c5c flags=0x0018001040000214 */ bool IsPeekLeft;
  /* offset=0x0c5d flags=0x0018001040004200 */ bool IsEnablePeek;
  /* offset=0x0c60 flags=0x0018001040010215 */ float PeekCheckCollisionTimer;
  /* offset=0x0c68 flags=0x0018001140000220 */ bool PeekHasCollision;
  /* offset=0x0c70 flags=0x0018001040000215 */ float HighWalkSpeed;
  /* offset=0x0c74 flags=0x0018001040000215 */ float WalkSpeedChangeRate;
  /* offset=0x0c78 flags=0x0018001040000215 */ float WalkSpeedThreshold;
  /* offset=0x0c7c flags=0x0018001040000215 */ float MaxCrouchSpeed;
  /* offset=0x0c80 flags=0x0018001040000215 */ float MaxProneSpeed;
  /* offset=0x0c84 flags=0x0018001040000215 */ float MaxSprintSpeed;
  /* offset=0x0c88 flags=0x0018001040000215 */ float MaxSprintCrouchSpeed;
  /* offset=0x0c8c flags=0x0018001040000215 */ float MaxSwimSpeed;
  /* offset=0x0c90 flags=0x0018001140000225 */ float Health;
  /* offset=0x0c94 flags=0x0018001140000225 */ float HealthPredict;
  /* offset=0x0c98 flags=0x0018001040000205 */ float HealthMax;
  /* offset=0x0c9c flags=0x0018001140000225 */ float BreathAmount;
  /* offset=0x0ca0 flags=0x0018001040000205 */ bool bShouldDrowningHurt;
  /* offset=0x0ca4 flags=0x0018001040000205 */ float SpeedDynamicScale;
  /* offset=0x0ca8 flags=0x0018001040010215 */ float TurnInPlaceAngel;
  /* offset=0x0cac flags=0x0018001140000224 */ uint8 HealthStatus;
  /* offset=0x0cb0 flags=0x0010000000010215 */ TMap<enum EAvatarDamagePosition, struct FBodyPartCfg> BodyPartConfigMap;
  /* offset=0x0cec flags=0x0018001040000225 */ bool bIsLastTwoCircle;
  /* offset=0x0cf0 flags=0x0028081040000215 */ float SpeedScale;
  /* offset=0x0cf4 flags=0x0028081040000215 */ float SpeedValue;
  /* offset=0x0cf8 flags=0x0028081040000235 */ float PawnBackpackCapacity;
  /* offset=0x0cfc flags=0x0020080100000035 */ struct FCharacterEnergyData Energy;
  /* offset=0x0d28 flags=0x0028081040000215 */ bool bCheckRelevantWithFOV;
  /* offset=0x0d2c flags=0x0028081040000215 */ float FarDistanceAimFOV;
  /* offset=0x0d30 flags=0x0028081040000215 */ float FarRelevantDistanceSqured;
  /* offset=0x0d34 flags=0x0028081040000215 */ float MiddleDistanceAimFOV;
  /* offset=0x0d38 flags=0x0028081040000215 */ float MiddleRelevantDistanceSqured;
  /* offset=0x0d40 flags=0x0028081040010201 */ float VerticalSpeedFallingDamageThrehod;
  /* offset=0x0d44 flags=0x0028081040010201 */ float VerticalFallingDamageCoefficient;
  /* offset=0x0d48 flags=0x0028081040010201 */ float HorizontalSpeedFallingDamageThrehod;
  /* offset=0x0d4c flags=0x0028081040010201 */ UCurveFloat* CurveHorizontalSpeedFallingDamage;
  /* offset=0x0d50 flags=0x0028081040010215 */ float StandHalfHeight;
  /* offset=0x0d54 flags=0x0028081040010215 */ float CrouchHalfHeight;
  /* offset=0x0d58 flags=0x0028081040010215 */ float ProneHalfHeight;
  /* offset=0x0d5c flags=0x0020080000000200 */ TArray<struct FHealthPredictShowData> HealthPredictShowDataList;
  /* offset=0x0d68 flags=0x0048001040080208 */ USecuryInfoComponent* SecuryComponent;
  /* offset=0x0d78 flags=0x0028081040000214 */ bool bWasOnVehicle;
  /* offset=0x0d80 flags=0x0018001140000220 */ ASTExtraVehicleBase* CurrentVehicle;
  /* offset=0x0d84 flags=0x0010000010080200 */ FOnAttachedToVehicleDelegate OnAttachedToVehicle;
  /* offset=0x0d90 flags=0x0010000010080200 */ FOnDetachedFromVehicleDelegate OnDetachedFromVehicle;
  /* offset=0x0d9c flags=0x0010000010080200 */ FOnCharacterStateEnter StateEnterHandler;
  /* offset=0x0da8 flags=0x0010000010080200 */ FOnCharacterStateEnter StateLeaveHandler;
  /* offset=0x0e30 flags=0x0010000010080200 */ FOnCharacterStateInterruptBluePrint StateInterruptedHandlerBP;
  /* offset=0x0e3c flags=0x0018001140000220 */ int32 CurrentStates;
  /* offset=0x0ec8 flags=0x0028081040000200 */ ASTExtraWeapon* CurrentReloadWeapon;
  /* offset=0x0ed0 flags=0x0048001040004200 */ bool EnableStatesInterruptRPC;
  /* offset=0x0ed1 flags=0x0048001040004200 */ bool EnableSprintSync;
  /* offset=0x0ed4 flags=0x0048001040004200 */ float NetCullingDistanceOnVeryLowDevice;

  void AIStartFireOnServer(int32 BurstShootBulletsLimit, float BurstShootTimeLimit, uint8 ShootMode, struct FVector SimpleShootTarget);
  int32 AddBuff(FName BuffName, AController* BuffCauser, int32 LayerCount, AActor* BuffApplierActor);
  bool AddHealthSafety(float AddVal, AController* DamageInstigator);
  void AddMoveOffSet(float Forward, float Right, float Up);
  void AddOneDamageCauserRecord(AController* causer, int32 HSChangeMargin, struct FDamageEvent DamageEvent, bool IsHeadshot, AActor* DamageCauser);
  bool AllowState(enum EPawnState State, bool withLog);
  void AttachWeapon();
  void BPDie(float KillingDamage, AController* EventInstigator, AActor* DamageCauser, struct FDamageEvent DamageEvent);
  void BPNotifyDeathEnd(AController* Killer, AActor* DamageCauser, struct FHitResult KillingHitInfo, struct FVector KillingHitImpulseDir, UClass<UDamageType>* KillingHitDamageType);
  void BPNotifyStartDying(AController* Killer, AActor* DamageCauser, struct FHitResult KillingHitInfo, struct FVector KillingHitImpulseDir, UClass<UDamageType>* KillingHitDamageType);
  void BPReceiveDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
  void BPReceiveMeleeDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);
  void BPReceivePointDamage(float Damage, UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, struct FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, struct FHitResult HitInfo);
  void BPReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, struct FVector Origin, float Radius, struct FHitResult HitInfo, AController* InstigatedBy, AActor* DamageCauser);
  void BPResetCharacter();
  float BPTakeDamage(float Damage, AController* EventInstigator, AActor* DamageCauser, struct FDamageEvent DamageEvent);
  /* CL* */ void BroadcastClientsSimulateDrowningDamage(float BaseDamage, struct FDrowningDamageEvent DrowningDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulateFallingDamage(float BaseDamage, struct FFallingDamageEvent FallingDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulateMeleeDamage(float BaseDamage, struct FMeleeDamageEvent MeleeDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulatePointDamage(float BaseDamage, struct FSTPointDamageEvent PointDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulatePoisonDamage(float BaseDamage, struct FPoisonDamageEvent PoisonDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulateRadialDamage(float BaseDamage, struct FRadialDamageEvent PointDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost);
  /* CL* */ void BroadcastClientsSimulateVehicleDamage(float BaseDamage, struct FVehicleDamageEvent VehicleDamageEvent, APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost);
  /* CL* */ void BroadcastFatalDamageInfo(AUAECharacter* causer, AUAECharacter* VictimName, int32 DamageType, int32 AdditionalParam, bool IsHeadshot, int32 ResultHealthStatus, int32 PreviousHealthStatus, AUAECharacter* WhoKillMe, int32 KillerKillCount);
  void BroadcastFatalDamageInfoWrapper(AUAECharacter* causer, AUAECharacter* VictimName, int32 DamageType, int32 AdditionalParam, bool IsHeadshot, int32 ResultHealthStatus, int32 PreviousHealthStatus, AUAECharacter* WhoKillMe, int32 KillerKillCount);
  /* CL* */ void BroadcastOtherClientsDie(AController* Killer, AActor* DamageCauser, struct FHitResult KillingHitInfo, struct FVector KillingHitImpulseDir, struct FDamageEvent DamageEvent, bool bIsPointDamage);
  /* CL* */ void BulletChange();
  /* SRV */ void C2S_RequestBeingRescuedRemainingTime();
  bool CanChangeThrowMode();
  bool CanEnterState(enum EPawnState NewState);
  void CharacterMovementUpdatedCallback(float DeltaTime, struct FVector OldLocation, struct FVector OldVelocity);
  bool CheckPlayerNeedUpdateAnimation();
  void ClearHPUI();
  void ClearOnDeath(AController* EventInstigater);
  /* CL  */ void ClientOnPossessBy(AController* NewController);
  /* CL  */ void ClientSetLeaveVehicleLocation(struct FVector LeaveLocation);
  uint8 ConvertCharacterPoseStateToPoseType(uint8 InPoseState);
  uint8 ConvertWeaponFireModeToWeaponAnimType(uint8 FireMode);
  uint8 ConvertWeaponSlotToCharacterAnimType(uint8 WeaponSlot);
  void DelayCustomDepth(float Time);
  void DelayHidden();
  void DelayMove(float Time);
  void DelayMoveEnd();
  void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();
  bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);
  void DettachWeapon();
  void DisappearOnDeath();
  void EnableCurrentWeaponInfiniteBullets(bool bEnable);
  /* SRV */ void EnterServerState(enum EPawnState State);
  bool EnterState(enum EPawnState State);
  void EquipWeapon(uint8 Slot, bool bSwitchWeapon);
  void EquipWeaponFinish();
  int32 ExtractDamageParams(struct FDamageEvent DamageEvent, AActor* DamagetCauser, int32 DamageType);
  void FillPlayerAnimRate(struct FPlayerAnimList InAnimList);
  void GMShowName();
  USpringArmComponent* GetActiveSpringArm();
  float GetCharacterAttributeValue(FString AttrName);
  struct FCharacterEnergyData GetCharacterEnergy();
  ASTExtraShootWeapon* GetCurrentShootWeapon();
  ASTExtraVehicleBase* GetCurrentVehicle();
  ASTExtraWeapon* GetCurrentWeapon();
  FString GetGrenadeNameByGrenadeType(uint8 grenadeType);
  struct FVector GetHeadLocation(bool bUseHeadBone);
  enum EAvatarDamagePosition GetHitBodyTypeByHitPos(struct FVector hitPos);
  UPrimitiveComponent* GetHitBoxByState(enum EPawnState InPoseState);
  struct FAnimParamList GetPlayerAnimParam(float DeltaTime);
  struct FPlayerAnimList GetPlayerAnimation();
  struct FPlayerAnimData GetPlayerAnimationByEventType(uint8 AnimEventType);
  ASTExtraPlayerController* GetPlayerControllerSafety();
  int32 GetPlayerIdentifier();
  uint8 GetPlayerJumpType();
  FString GetPlayerNameSafety();
  ASTExtraPlayerState* GetPlayerStateSafety();
  struct FAnimVehParamList GetPlayerVehAnimParam(float DeltaTime);
  struct FPlayerVehAnimList GetPlayerVehAnimation();
  uint8 GetPlayerWeaponEquipSlot();
  uint8 GetPlayerWeaponFireMode();
  struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);
  uint8 GetThrowGrenadeMode();
  float GetValueLimitForHealthPredict();
  struct FRotator GetViewRotation();
  UWeaponManagerComponent* GetWeaponManager();
  /* SRV */ void GrenadeBackToWeaponServerCall();
  void HandleAutoSwitchWeaponDelay();
  void HandleConsumeItemSkillBreak();
  void HandlePlayerPickUpActor(AActor* WrapperActor);
  void HandlePlayerPoseChanged(uint8 LastPose, uint8 NewPose);
  void HandleWeaponOnShoot();
  bool HasBuff(FName BuffName);
  bool HasState(enum EPawnState State);
  void InsertDelayStateRelation(enum EPawnState OldState, enum EPawnState NewState);
  bool IsAlive();
  bool IsAllowScopeIn();
  bool IsFirstPerson();
  bool IsHandleInFold();
  bool IsHealthyAlive();
  bool IsInEditor();
  bool IsNearDeath();
  bool IsOnVehicle();
  bool IsProneMove();
  bool IsSameTeam(APawn* Other);
  bool IsSameTeamWithPlayerState(APlayerState* otherPS);
  /* SRV */ void LeaveServerState(enum EPawnState State);
  void LeaveState(enum EPawnState State);
  void LogWeaponsDataInWeaponManagerAndBackpack();
  void Melee();
  /* CL* */ void MeleeBroadcastOtherClients();
  void MeleeLocal();
  void MeleeReleased();
  /* SRV */ void MeleeServer();
  /* CL* */ void NM_SetPeekState(bool Enable, bool IsLeft);
  void OnActorHitHandle(AActor* SelfActor, AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit);
  void OnBPHealthChange();
  void OnBPMoneyChange();
  void OnBeforeGetUp();
  void OnCurEquipedShootWeaponChangeState(uint8 State);
  void OnEquipWeapon();
  void OnNotifyHurt();
  void OnPoseStateChange(uint8 LastState, uint8 CurState);
  void OnRep_AKEventNotify();
  void OnRep_BreathAmmountChange();
  void OnRep_CurrentStates();
  void OnRep_CurrentVehicle(ASTExtraVehicleBase* LastVehicle);
  void OnRep_EnergyChange();
  void OnRep_Health();
  void OnRep_HealthPredict();
  void OnRep_IsBeingRescuedStatusChange();
  void OnRep_IsRescueingOtherStatusChange();
  void OnRep_KillTipsNotify();
  void OnRep_MoneyNotify();
  void OnRep_PeekHasCollision();
  void OnRep_PoseStateNotify(uint8 LastState);
  void OnRep_StatusChanged(uint8 prevStatus);
  void OnRep_ThrowGrenadeMode();
  void OnScopeIn(bool bTeleport);
  void OnScopeInterrupt(bool bTeleport);
  void OnScopeTempTransformFromFPP();
  void OnScopeTempTransformToFPP();
  void OnShowName(bool _IsShow, FString _Name);
  void OnStartFire(uint8 isAuto);
  void OnStateEnter(enum EPawnState EnteredState);
  void OnStateLeave(enum EPawnState EnteredState);
  void OnStopFire();
  void OnUnEquipWeapon();
  void PawnVaultAllBluePrint(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint);
  /* CL* */ void PawnVaultAllCPP(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint);
  void PawnVaultServerBluePrint(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint, AActor* WindowActor);
  /* SRV */ void PawnVaultServerCPP(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint, AActor* WindowActor);
  void PickUpActor(AActor* Target, int32 AdditionalParam);
  void PickUpWrapperActor(AActor* Target, struct FPickUpItemData ItemData);
  void PlayChangeMagazineSound();
  void PlayFootstepSound(uint8 FootStepState);
  void PlayLoadBulletSound();
  void PlayLocalShellDropFX();
  void PlayMagINSound();
  void PlayMagOUTSound();
  void PlayMountAccessoriesSound();
  void PlayOperateItemSound(FString BankName, FString SoundName);
  void PlayPullBoltSound();
  void PlaySelfThrowAwayWeaponSound();
  void PlaySwitchFireModeSound();
  void PlaySwitchSightSound();
  bool PlayerConfirmToRescue();
  void PostGetPlayerAnimation();
  /* CL  */ void RPC_Client_CircleRun(int32 Index, int32 TotalNum);
  /* CL  */ void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();
  /* CL  */ void RPC_Client_DestroyWeapon(FName LogicSocket, bool bEnableBroadcast);
  /* CL  */ void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);
  /* CL  */ void RPC_Client_OnDamageNotifyRecord(int32 DamagerID, float fHealth, int32 OtherHealthStatus, float ShootDistance);
  /* CL  */ void RPC_Client_OnDeathStopRecordingNotify(FName SpectatorName);
  /* CL  */ void RPC_Client_SetReloadCurWeapon(ASTExtraWeapon* Weapon);
  /* CL  */ void RPC_Client_ShootVertifyRes(uint8 VertifyRes, struct FBulletHitInfoUploadData HistoryShootData, struct FCharacterHistoryData HistoryChData);
  /* CL  */ void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);
  /* CL  */ void RPC_Client_SwitchWeapon(uint8 Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
  /* SRV */ void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();
  /* SRV */ void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);
  /* SRV */ void RPC_Server_SetHandFoldRatio(int32 Ratio);
  /* SRV */ void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);
  /* SRV */ void RPC_Server_SwitchWeapon(uint8 Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
  void RefreshMoveAttrModifier();
  bool ReloadCurrentWeapon();
  bool ReloadWeaponFilter();
  bool RemoveBuff(FName BuffName, bool RemoveLayerOnly);
  void ResetCamera();
  void ResetValueLimitForHealthPredict();
  void RestoreMeshUpdateFlag();
  /* CL* */ void S2C_InterruptState(int32 stateID, int32 interruptedBy);
  void SaveMeshUpdateFlag();
  TArray<struct FSearchedPickUpItemResult> SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);
  TArray<struct FSearchedTombBoxAndWrapperListResult> SearchTombBoxes();
  /* SRV */ void ServerChangeThrowGrenadeMode(uint8 ThrowMode);
  /* SRV */ void ServerSetMovementState(struct FVector Input);
  /* SRV */ void ServerSetPeekCollision(bool HasCollision);
  /* SRV */ void ServerSetPeekState(bool IsLeft);
  /* SRV */ void ServerTriggerJump();
  void SetAnimParamIsNearDeathStatus(bool Val);
  void SetAnimParamIsRescueing(bool Val);
  /* CL* */ void SetCheatSpeedModifier(float NewModifier);
  void SetDelayStateSwitchTime(float DelayTime);
  void SetHandFoldRatio(int32 Ratio);
  void SetHealthSafety(float NewHealth, uint8 Reason);
  void SetHighWalkSpeed(float WalkSpeed);
  void SetReloadMethod(uint8 reloadMethod);
  void SetThrowGrenadeMode(uint8 ThrowMode);
  void SetWeaponShootType(uint8 shootType);
  bool ShouldUpdateHPOnUI();
  void ShowDebugEquipOrUnequipFlow();
  void ShowDebugPickUpFlow();
  void ShowDebugRecordData();
  void ShowDebugRole();
  ASTExtraWeapon* SpawnAndBackpackWeaponOnServer(UClass<ASTExtraWeapon>* Template, struct FItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);
  ASTExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);
  ASTExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);
  /* SRV */ void SpawnAndSwithToGrenadeServerCall(uint8 grenadeType);
  void StartFire(int32 BurstShootBulletsLimit, float BurstShootTimeLimit, uint8 ShootMode, struct FVector SimpleShootTarget);
  bool StartFireFilter();
  void StartFireSimple();
  void StopFire();
  bool StopFireFilter();
  bool SwitchPoseState(uint8 State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt);
  void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
  void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
  void SwitchWeaponBySlot(uint8 Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
  void SyncDeadTombBoxToController(APlayerTombBox* _DeadTombBox);
  void TakeDamageWhenThrowedDelegate__DelegateSignature();
  void TriggerCustomEvent_Implementation(uint8 EventType);
  void TriggerEntryEvent_Implementation(enum EUTSkillEntry EntryEvent);
  void TryPeek(bool IsLeft);
  void TryToBroadcastFatalDamageEvent(AController* causer, int32 HSChangeMargin, struct FDamageEvent DamageEvent, bool IsHeadshot, AActor* DamageCauser);
  void UnequipWeapon(uint8 Slot, bool bSwitchWeapon);
  void UnequipWeaponFinish();
  void VaultFailPawnBluePrint(FString content);
  /* CL* */ void VaultFailPawnCPP(FString content);
};

class USTExtraBlueprintFunctionLibrary: public UBlueprintFunctionLibrary {
  void AddDistributedImpulseAtLocation(USkeletalMeshComponent* SkelMesh, struct FVector Impulse, struct FVector Location, FName BoneName, float DistriburedImpulseScale);
  void AddPlayerDamageEffectToTargetPawn(APawn* Pawn, AController* Controller);
  bool ApplyRadiusDamageSTE(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass<UDamageType>* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, float CollisionFreeRadius, bool DrawVisibleTraceDebugLine);
  bool ApplyRadiusDamageSTEWithMomentum(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, struct FVector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass<UDamageType>* DamageTypeClass, TArray<AActor*> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, float CollisionFreeRadius, float AddtionalDamage, bool IsVehicleExplode, bool DrawVisibleTraceDebugLine);
  bool ComponentIsVisibleFromExplosion(UPrimitiveComponent* VictimComp, struct FVector Origin, AActor* IgnoredActor, TArray<AActor*> IgnoreActors, uint8 TraceChannel, bool DrawVisibleTraceDebugLine);
  bool CreateMyLandscape(UObject* WorldContextObject);
  TArray<struct FVector> Generate3StageBezierPointsSrcToDst(struct FVector Src, struct FVector Ctl, struct FVector Dst, int32 Num);
  UObject* GetAssetByAssetReference(struct FSoftObjectPath AssetReference);
  void GetAssetByAssetReferenceAsync(struct FSoftObjectPath AssetReference, FAssetLoadSuccessDelegate AssetLoadSuccessDelegate);
  UBackpackComponent* GetBackpackComponentFromCharacter(ACharacter* Character);
  UBackpackComponent* GetBackpackComponentFromController(AController* Controller);
  UChatComponent* GetChatComponentFromCharacter(ACharacter* Character);
  UChatComponent* GetChatComponentFromController(AController* Controller);
  struct FWeightedBlendable GetPostProcessBlendEffectWeightByIndex(APostProcessVolume* PostProcessVolume, uint8 Index);
  float GetRadialDamageImpulseAtLocation(struct FVector Location, UDamageType* DamageType, struct FVector Origin, float Radius);
  float GetUIShowLocationAngle(UObject* WorldContextObject, struct FVector2D InPosition, struct FVector4 Limit);
  bool GetWorldToUIShowLocationRect(UObject* WorldContextObject, struct FVector WorldLocation, struct FVector4 Limit, struct FVector2D UIOffset, struct FVector2D OutPosition);
  bool IsPlayerCantBlock(AActor* DamageCauser, struct FHitResult HitResult);
  struct FRotator LimitRotator(struct FRotator CurRot, struct FRotator MaxRot);
  struct FVector LimitVector(struct FVector CurVec, struct FVector MaxVec);
  void RemovePlayerDamageEffectFromTargetPawn(APawn* Pawn);
  void SetCollisionResponseForBodies(USkeletalMeshComponent* SkelMesh, uint8 Channel, uint8 NewResponse, TArray<FName> BodyNames);
  void SetPostProcessBlendEffectWeightByIndex(APostProcessVolume* PostProcessVolume, uint8 Index, float Weight);
  void SetUpPostProcessSetting(APostProcessVolume* PostProcessVolume, TArray<UMaterialInstanceDynamic*> Blends);
  UCustomParticleSystemComponent* SpawnCustomEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, bool bAutoDestroy);
  UCustomParticleSystemComponent* SpawnCustomEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName AttachPointName, struct FVector Location, struct FRotator Rotation, uint8 LocationType, bool bAutoDestroy);
  bool TraceBlock(UObject* ContextObject, struct FVector Start, struct FVector End, struct FHitResult HitInfo, TArray<AActor*> IgnoreActors, bool bForceStatic);
  bool TraceGround(UObject* ContextObject, struct FVector AboveGroundLoc, float TraceDeepDis, struct FHitResult HitInfo, bool bForceStatic);
  struct FRotator Vector2Rotator(struct FVector ver);
};

class USTExtraBuffAction_AdjustStunPostMat: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018001040010201 */ float FadeInDuration;
  /* offset=0x00f0 flags=0x0018001040010201 */ bool IsUseBreathPercentageAsAlpha;
  /* offset=0x00f4 flags=0x0018001040010201 */ float FadeOutDuration;
  /* offset=0x00f8 flags=0x0018001040000201 */ bool ResetOnRemove;
  /* offset=0x00fc flags=0x0018001040000201 */ UMaterialInterface* ParentMaterial;
  /* offset=0x0100 flags=0x0018001040000201 */ FName ShaderUniformName;
  /* offset=0x010c flags=0x0018001040002200 */ UMaterialInstanceDynamic* DynamicMat;
  /* offset=0x0110 flags=0x0018001040000201 */ bool IsUniqueEffect;
  /* offset=0x0114 flags=0x0048001040082208 */ UStaticMeshComponent* CameraStaticMeshCom;
};

class USTExtraBuffAction_Attachment: public UUTSkillAction {
  /* offset=0x00ec flags=0x0010008000000205 */ TArray<struct FUTBuffAttachment> Attachments;
};

class USTExtraBuffAction_Dot: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ float IntervalTime;
  /* offset=0x00f0 flags=0x0018001040000205 */ float DotValue;
  /* offset=0x00f4 flags=0x0018001040010201 */ UCurveFloat* CurveLayeredDamage;
};

class USTExtraBuffAction_DrowningDamage: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ float IntervalTime;
  /* offset=0x00f0 flags=0x0018001040000205 */ float DotValue;
  /* offset=0x00f4 flags=0x0018001040000205 */ float BreathAmountThrehold;
};

class USTExtraBuffAction_EnableAttrModifier: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString AttrConfigItemName;
};

class USTExtraBuffAction_Log: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString LogString;
};

class USTExtraBuffAction_PeriodAction: public UUTSkillAction {
  /* offset=0x00ec flags=0x0018001040080209 */ UUTSkillAction* Action;
  /* offset=0x00f0 flags=0x0018001040000201 */ float Interval;
  /* offset=0x00f4 flags=0x0018001040000201 */ float CurrentTickDeltaTime;
};

class USTExtraBuffAction_PlayAnimation: public UUTSkillAction {
  /* offset=0x00f0 flags=0x0010000000000005 */ struct FBuffAnimationItem BuffAnimations;
  /* offset=0x0198 flags=0x0010001000000005 */ struct FBuffAnimationTagItem BuffAnimationTags;
};

class USTExtraBuffAction_StopMovement: public UUTSkillAction {
};

class USTExtraBuffApplierComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018000000010201 */ FString OverlapCheckComponnentName;
  /* offset=0x00b8 flags=0x0010000000010201 */ TArray<struct FBuffApplierConditionPair> BuffConditionArray;
  /* offset=0x00de flags=0x0028081040000204 */ bool IsIgnoreThrower;

  void OverlapCheckerOverlapeed(AActor* OtherActor);
  void SetIsEnableChecking(bool Enable);
};

class USTExtraBuffStatusType_CanAttack: public USTBaseBuffStatusType {
};

class USTExtraBuffStatusType_CanMove: public USTBaseBuffStatusType {
};

class USTExtraDelegateMgr: public UBlueprintFunctionLibrary {
  /* offset=0x001c flags=0x0010000010080200 */ FOnPlayerStateNameChange OnPlayerStateNameChange;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnCharacterHPChangeDelegate OnHPChange;
  /* offset=0x0034 flags=0x0010000010080200 */ FOnCharacterCanRescueChangeDelegate OnCanRescueOtherChange;
  /* offset=0x0040 flags=0x0010000010080200 */ FOnCharacterEnterRescueingStatusChangeDelegate OnRescueingStatusChangeChange;
  /* offset=0x004c flags=0x0010000010080200 */ FOnCharacterBreathChangeDelegate OnBreathChange;
  /* offset=0x0058 flags=0x0010000010080200 */ FOnCharacterKilledTipsDelegate OnKilledTips;
  /* offset=0x0064 flags=0x0010000010080200 */ FOnVehicleHPChangeDelegate OnVehicleHPChange;
  /* offset=0x0070 flags=0x0010000010080200 */ FOnCharacterStateChangeDelegate OnCharacterStateChangeDelegate;
  /* offset=0x007c flags=0x0010000010080200 */ FOnEnterBornIsland OnEnterBornIsland;

  USTExtraDelegateMgr* STExtraDelegateMgrInstance();
};

class ASTExtraExplosionEffect: public AActor {
  /* offset=0x02a8 flags=0x0028081040010201 */ UParticleSystem* FarComplexEffect;
  /* offset=0x02ac flags=0x0028081040010201 */ UParticleSystem* NearSimpleEffect;
  /* offset=0x02b0 flags=0x0028081040010201 */ float NearToFarDistance;
  /* offset=0x02b4 flags=0x0028081040010201 */ UAkAudioEvent* ExplosionSound;
};

class ASTExtraExplosiveActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040010201 */ float BaseDamage;
  /* offset=0x02ac flags=0x0018001040010201 */ float MinimumDamage;
  /* offset=0x02b0 flags=0x0018001040010201 */ float DamageInnerRadius;
  /* offset=0x02b4 flags=0x0018001040010201 */ float DamageOuterRadius;
  /* offset=0x02b8 flags=0x0018001040010201 */ float DamageFreeRadius;
  /* offset=0x02bc flags=0x0018001040010201 */ float DamageFalloff;
  /* offset=0x02c0 flags=0x001c001040010201 */ UClass<UDamageType>* DamageTypeClass;
  /* offset=0x02c4 flags=0x001c001040010201 */ UClass<ASTExtraExplosionEffect>* ExplosionEffectTemplate;
  /* offset=0x02c8 flags=0x0018001040010201 */ bool DrawExplodeVisibleTraceDebugLine;

  void Explode(APawn* InstigatorPawn, AActor* DamageCauser, TArray<AActor*> IgnoreActors, struct FVector Origin, bool bReplicateToClients);
};

class ASTExtraFloatingVehicle: public ASTExtraVehicleBase {
  /* offset=0x0470 flags=0x00280810400b021d */ USTExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;

  void HandleOnMeshAwake(UPrimitiveComponent* WakingComponent, FName BoneName);
};

class USTExtraFloatingVehicleMovementComponent: public UPawnMovementComponent {
  /* offset=0x0114 flags=0x0018001040000205 */ float MaxAcceleration;
  /* offset=0x0118 flags=0x0018001040000205 */ float StartAccelerationRate;
  /* offset=0x011c flags=0x0018001040000205 */ float StopAccelerationRate;
  /* offset=0x0120 flags=0x0018001040000205 */ float MaxRotationYawAngle;
  /* offset=0x0124 flags=0x0018001040000205 */ float RotationYawRate;
  /* offset=0x0128 flags=0x0018001040000205 */ float BackwardForceScale;
  /* offset=0x012c flags=0x0018001040000214 */ float Acceleration;
  /* offset=0x0130 flags=0x0018001040000214 */ float RotationYawAngle;
  /* offset=0x0134 flags=0x0018001040000205 */ UCurveFloat* SlideCompensationCurve;
  /* offset=0x0140 flags=0x0028081040000220 */ float STThrottleInput;
  /* offset=0x0144 flags=0x0028081040000220 */ float STSteeringInput;

  float GetThrottleInput();
  /* SRV */ void ServerUpdateInput(float InSteeringInput, float InThrottleInput);
};

class USTExtraGameInstance: public UUAEGameInstance {
  /* offset=0x0280 flags=0x0010001000000000 */ struct FUserDetailSetting UserDetailSetting;
  /* offset=0x02a0 flags=0x0020080010080200 */ FOnSearchGameCompleteDelegate OnSearchGameCompleteDel;
  /* offset=0x0398 flags=0x0048001040000200 */ UWonderfulRecordingCut* WonderfulRecordingCut;
  /* offset=0x039c flags=0x0048001040000200 */ UDeathPlayback* DeathPlayback;
  /* offset=0x03a0 flags=0x0048001040000200 */ ULobbyRenderSettings* LobbyRenderSettings;
  /* offset=0x03a4 flags=0x0018001040000204 */ int32 PlayerNum;
  /* offset=0x03a8 flags=0x0018001040000204 */ bool bBattleHasStarted;
  /* offset=0x03a9 flags=0x0018001040000204 */ bool bNeedJumpPlane;

  void ActiveLDR(int32 Level);
  void AutoActiveLDR();
  void CancelSearchGame();
  void ClearSession();
  bool DeleteSavedFiles(bool allfilesSaved);
  void EnableStreamingLevelLOD(bool bEnable);
  void ExecuteCMD(FString CMDkey, FString CMDvalue);
  void ExitGame();
  void GMStandalone(FString Map);
  FString GetAutoRunAccount();
  FString GetAutoRunPassWD();
  int32 GetAutoRunTestServerIdx();
  UDeathPlayback* GetDeathPlayback();
  int32 GetDeviceLevel();
  int32 GetDeviceLimit();
  TArray<FString> GetSearchGameResults();
  int32 GetUserHDRSetting();
  int32 GetUserQualitySettingLevel();
  UWonderfulRecordingCut* GetWonderfulRecordingCut();
  bool IsAutoRunRoomOwner();
  bool IsAutoRunTestGame();
  bool IsOpenLDR();
  bool IsSupportLDR();
  void JoinGameByName(FString TargetSessionOwnerID);
  void OnCreatePresenceSessionComplete(bool bWasSuccessful);
  void OnSearchGameComplete(bool bRet);
  void OnSearchGameCompleteDelegate__DelegateSignature(bool bRet);
  void QuitGame();
  void SearchGames();
  void SetLDRLevel(int32 Level);
  void SetUserSetingMobilceContentSCale(float mcs);
  void SetUserSetingRenderLevel(int32 quality);
  void SetUserSetingShadowQuality(int32 shadowQuality);
  void SetWorldCompositionRelativeDistance(int32 LODIndex, float Distance);
  void ShowSessionStatus();
  void StartMultiplayerPlayerGame(FString MapName);
  void StartSinglePlayerGame(FString MapName);
};

class ASTExtraGameMode: public AUAEGameMode {
  /* offset=0x0a28 flags=0x0018001040010205 */ float PlaneFlyHeight;
  /* offset=0x0a2c flags=0x0018001040010205 */ float PlaneStartDistance;
  /* offset=0x0a30 flags=0x0018001040010205 */ float PlaneFlySpeed;
  /* offset=0x0a34 flags=0x0018001040010205 */ float PlaneFlyPathRandomRadius;
  /* offset=0x0a38 flags=0x0018001040010205 */ float HaveToJumpDistance;
  /* offset=0x0a3c flags=0x0018001040010205 */ float PrachuteHaveToOpeningHeight;
  /* offset=0x0a40 flags=0x0018001040010205 */ float ParachuteHaveToLandHeight;
  /* offset=0x0a44 flags=0x0018000000000214 */ FString MapName;

  void OnGameEnd();
};

class ASTExtraGameSession: public AGameSession {
};

class ASTExtraGameStateBase: public AUAEGameState {
  /* offset=0x02f8 flags=0x0018001040000205 */ bool IsTest;
  /* offset=0x02fc flags=0x0018001040010015 */ struct FVector BlueCircle;
  /* offset=0x0308 flags=0x0018001040010015 */ struct FVector WhiteCircle;
  /* offset=0x0314 flags=0x0010000000000000 */ struct FAirAttackOrder AirAttackOrder;
  /* offset=0x0330 flags=0x0018001040000005 */ struct FVector AirAttackArea;
  /* offset=0x033c flags=0x0010000010080200 */ FOnCharacterSafeZoneTipsDelegate OnSafeZoneTips;
  /* offset=0x0348 flags=0x0010000010080200 */ FOnCharacterBlueCirclePreWarningDelegate OnBlueCirclePreWarning;
  /* offset=0x0354 flags=0x0010000010080200 */ FOnCharacterBlueCircleRunDelegate OnBlueCircleRun;
  /* offset=0x0360 flags=0x0010000010080200 */ FOnCharacterCircleSizeAndPosition OnBlueCircleSizeAndPosition;
  /* offset=0x036c flags=0x0010000010080200 */ FOnCharacterCircleWaveOver OnCharacterCircleWaveOver;
  /* offset=0x0378 flags=0x0018001140010225 */ int32 PlayerNum;
  /* offset=0x037c flags=0x0018001040010215 */ bool IsUseGameStartCountDown;
  /* offset=0x0380 flags=0x0010000010080200 */ FOnPlayerNumChangeDelegate OnPlayerNumChange;
  /* offset=0x038c flags=0x0010000010080200 */ FOnBeKilledNumChangeDelegate OnBeKilledNumChange;
  /* offset=0x0398 flags=0x0010000010080200 */ FGameEnd OnGameEnd;
  /* offset=0x03a4 flags=0x0010000010080200 */ FAirAttackNotify OnAirAttack;
  /* offset=0x03b0 flags=0x0018001140000220 */ bool bReadyStateCountingDown;
  /* offset=0x03c0 flags=0x0018001140000220 */ int32 ReadyStateTime;
  /* offset=0x03c8 flags=0x0018001140000220 */ FName GameModeState;
  /* offset=0x03d0 flags=0x0010000010080200 */ FReConnectGameStateInfoNotify ReConnectGameStateInfoNotify;
  /* offset=0x0438 flags=0x0018001140010225 */ int32 AlivePlayerNum;
  /* offset=0x043c flags=0x0018001140010225 */ int32 PlayerNumOnPlane;
  /* offset=0x0440 flags=0x0018001040000220 */ enum EGameModeType GameModeType;

  /* CL* */ void BroadcastAirAttackOrder(struct FAirAttackOrder airAttackOrderSrc, int32 waveindex);
  /* CL* */ void BroadcastAirAttackWarning(struct FVector airAttackAreaSrc, int32 waveindex);
  /* CL* */ void BroadcastCircleInfo(uint8 circleInfo, float Time, struct FVector BlueCircleSync, struct FVector WhiteCircleSync, int32 CircleInvertedIndex);
  /* CL* */ void BroadcastCircleSizeAndPosition(struct FVector BlueCircleSync, struct FVector WhiteCircleSync, int32 Index);
  /* CL* */ void BroadcastCircleWaveOver(int32 Index);
  /* CL* */ void BroadcastRoute(struct FVector StartLoc, struct FVector StopLoc);
  struct FVector GetAirplaneStartLoc();
  struct FVector GetAirplaneStopLoc();
  FName GetGameModeState();
  struct FReConnectGameStateInfo GetReConnectGameStateInfo();
  void OnRep_AlivePlayerNum();
  void OnRep_GameModeState();
  void OnRep_PlayerNumChange();
  void OnRep_PlayerNumOnPlane();
  void OnRep_ReadyStateCountingDown();
  void OnRep_ReadyStateTime();
  void SetCurAirAttackType(uint8 airattacktype);
  void SetCurAirAttackWave(int32 AirAttackWave);
  void SetReConnectGameStateInfo(struct FReConnectGameStateInfo ReConnectInfo);
  void SyncAirplaneRoute(struct FVector StartLoc, struct FVector StopLoc);
};

class USTExtraGameplayStatics: public UGameplayStatics {
  void PostSyncAkEvent(int32 AkEventID, AActor* pSouceActor, struct FVector AkLocation, bool IsFireSound);
  float STApplyPointDamage(AActor* DamagedActor, float BaseDamage, struct FVector HitFromDirection, struct FHitResult HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass<UDamageType>* DamageTypeClass);
  void StopSyncSound(AActor* pSouceActor);
};

class USTExtraGlobalData: public UBlueprintFunctionLibrary {
  /* offset=0x001c flags=0x0010001000000005 */ struct FGM GMData;
  /* offset=0x0020 flags=0x0018001040000205 */ uint8 GameMap;
  /* offset=0x0021 flags=0x0018001040000205 */ bool bIsUpdateRCityWeather;
  /* offset=0x0022 flags=0x0018001040000204 */ bool HadPlayedSplash;

  FString CurVersionNumber();
  USTExtraGlobalData* STExtraGlobalDataInstance();
};

class USTExtraInputInterface: public UInterface {
  void MoveForward(float Rate);
  void MoveRight(float Rate);
  void MoveUp(float Rate);
};

class USTExtraMapFunctionLibrary: public UBlueprintFunctionLibrary {
  struct FVector2D AdjustMapPosition(UCanvasPanelSlot* MapCanvas, struct FVector2D MapCenterToPlayer, float RotateAngle, float MiniMapWindowHalfSize, float MapImageSize);
  float CalPlayerToMarkerDelYaw(APlayerController* PC, float LevelLandScapeExtent, struct FVector LevelLanscapeCenter, struct FVector MarkerLocAligInLevel);
  float CalPlayerToMarkerDist(APlayerController* PC, float LevelLandScapeExtent, struct FVector2D MarkerInMap);
  void DrawAirplaneRouteInEntiremap(struct FPaintContext InContext, float DashSize, struct FLinearColor DashColor, float MapWindowExtent, float MapImageExtent, float MinimapWindowExtent, float MiniMapImageExtent, struct FVector MapCenterToPlayer, struct FVector2D StartCoord, struct FVector2D EndCoord, float LineThickness, bool bAntiAlias);
  void DrawAirplaneRouteInMiniMap(struct FPaintContext InContext, float DashSize, struct FLinearColor DashColor, float MapWindowExtent, float MapImageExtent, struct FVector MapCenterToPlayer, struct FVector2D EndCoord, struct FVector2D PlayerCoord, struct FVector2D RouteVelocity, float LineThickness, bool bAntiAlias);
  void DrawCircle(struct FPaintContext InContext, struct FVector2D CircleCenter, struct FLinearColor CircleColor, float CircleRadius, float MapWindowExtent, struct FVector2D PlayerCoord, uint8 MapType, bool bAntiAlias);
  void DrawGuideLine(struct FPaintContext InContext, float DashSize, struct FLinearColor DashColor, float MapWindowExtent, float MapImageExtent, struct FVector2D WhiteCircleCenter, struct FVector2D PlayerCoord, uint8 MapType, float LineThickness, bool bAntiAlias);
  void DrawPlayerMarker(ASTExtraPlayerController* PC, UPanelWidget* PlayerMarkerPanel, struct FVector2D PlayerCoord, uint8 PlayerOperation, float RotateAngle);
  void DrawPlayerMarkerInGrid(ASTExtraPlayerController* PC, UGridSlot* PlayerMarkerPanelSlot, struct FVector2D PlayerCoord, UPanelWidget* PlayerMarkerImagePanel, uint8 PlayerOperation, float RotateAngle);
  void GameThreadSetBigCore(bool isbig);
  int32 GetAlivePlayerNumber();
  struct FVector2D GetLandscapeMidPoint(UObject* WorldContextObject);
  float GetLevelLandscapeBounds(UObject* WorldContextObject);
  struct FMapRealTimeInfo GetMapRealTimeInfo(ASTExtraPlayerController* PC, ASTExtraGameStateBase* GS, struct FVector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, struct FMapRealTimeInfo CacheMapInfo);
  AMiniMapStandardPoint* GetMapStandardPoint(UObject* WorldContextObject);
  struct FVector2D GetRotatedVector2D(struct FVector2D InputVector, float RotateAngle);
  bool IsNeedDrawGuideLine(float WhiteCircleRadius, struct FVector2D PlayerCoord, struct FVector2D WhiteCircleCoord);
  struct FVector MapCenterToPointVector(struct FVector PointLocationInLevel, struct FVector LevelLandScapeCenter, float LevelToMapScale);
  USTExtraMapFunctionLibrary* MapFuncLibInstance();
  void RnederThreadSetBigCore(bool isbig);
  void UpdateTeamMateLocAndRot(TArray<ASTExtraPlayerState*> TeamMateStateArray, TArray<UPanelWidget*> TeamMateInfoGridArray, TArray<UImage*> TeamMateInfoImageArray, struct FVector LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, ASTExtraPlayerState* myPS);
};

class USTExtraOnlineSession: public UOnlineSession {
};

class ASTExtraPlayerCharacter: public ASTExtraBaseCharacter {
  /* offset=0x0ed8 flags=0x001c000000000005 */ UClass<UUserWidget>* SettleAccountUI;
  /* offset=0x0f00 flags=0x0010000010080200 */ FOnHasPickupPropsAvailableChanged OnHasPickupPropsAvailableChanged;
  /* offset=0x0f0c flags=0x0010000010080200 */ FOnHasTombBoxesAvailableChanged OnHasTombBoxesAvailableChanged;
  /* offset=0x0f18 flags=0x0010000010080200 */ FOnSkillFinishedDelegate OnSkillFinishedDelegate;
  /* offset=0x0f24 flags=0x0018001040080208 */ UWeaponAutoAimingComponent* AutoAimComp;
  /* offset=0x0f28 flags=0x00180010400a020d */ USTScreenAppearanceComponent* ScreenAppearaceComp;
  /* offset=0x0f2c flags=0x001800104008020d */ UBoxComponent* BoxEar;
  /* offset=0x0f34 flags=0x0018001140000234 */ uint8 ParachuteState;
  /* offset=0x0f38 flags=0x0010001000000005 */ struct FCameraSettings FreefallCameraSetting;
  /* offset=0x0f4c flags=0x0010001000000005 */ struct FCameraSettings OpeningCameraSetting;
  /* offset=0x0f60 flags=0x0018001040000205 */ bool bInputMoveForward;
  /* offset=0x0f61 flags=0x0018001040000205 */ bool bInputMoveRight;
  /* offset=0x0f64 flags=0x0010001040000005 */ struct FParachuteStateParams ParachuteFreeFallingParams;
  /* offset=0x0f98 flags=0x0010001040000005 */ struct FParachuteStateParams ParachuteOpeningParams;
  /* offset=0x0fcc flags=0x0018001040010205 */ float HaveToOpenHeightToGround;
  /* offset=0x0fd0 flags=0x0018001040010205 */ float HaveToLandHeightToGround;
  /* offset=0x0fd4 flags=0x0018001040010205 */ float SwimZDir;
  /* offset=0x0fd8 flags=0x0018001040000225 */ bool Indoor;
  /* offset=0x0fdc flags=0x0018001040000205 */ float VehicleForwardInputRate;
  /* offset=0x0fe0 flags=0x0018001040000205 */ float VehicleRightInputRate;
  /* offset=0x0fe4 flags=0x0018001040010201 */ bool bDrawBoxEarBulletOverlapRay;
  /* offset=0x0fe8 flags=0x0010001100000025 */ struct FBulletFlySoundReplicatedData BulletFlySoundReplicatedData;
  /* offset=0x0ffc flags=0x0018001040020235 */ ASTExtraPlayerController* STPlayerController;

  void ClearHPUI();
  void DoMoveForward(float Rate);
  void DoMoveRight(float Rate);
  struct FVector GetBonePos(FName BoneName);
  ASTExtraPlayerController* GetPlayerControllerSafety();
  void HandleBulletOverlap(AActor* BulletActor, struct FHitResult HitResult, TArray<struct FHitResult> HitResults);
  void HandleParachuteStateChanged(uint8 NewState);
  bool IsGrenadeEmpty();
  void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);
  void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);
  void OnRank(int32 Kills, int32 Rank);
  void OnRep_ParachuteState();
  void OnRep_TriggerEarSoundNotify();
  void OnSkillFinishedDelegate__DelegateSignature(enum UTSkillStopReason StopReason);
  void ProneWithTerrain(struct FRotator CharacterRotation, bool isMoving, float Offset, float deap);
  void PushTrigger(enum EControllerHand Hand);
  void ReleaseTrigger(enum EControllerHand Hand);
  /* SRV */ void ServerSetBulletFlySoundData(ASTExtraPlayerCharacter* PlayerCharacter, ASTExtraShootWeapon* InstigateWeapon, struct FVector FlySoundPos);
  /* SRV */ void ServerUpdateParachuteState(struct FRotator Rotation, float FallingSpeed);
  void SetParachuteState(uint8 State);
  bool ShouldDropBagItem(struct FItemDefineID SkillItemID);
  bool ShouldTriggerEntryEvent(enum EUTSkillEntry EntryEvent);
  void SyncDeadTombBoxToController(APlayerTombBox* _DeadTombBox);
  void TouchCancelSkillLock();
  void UpdateParachuteState(struct FRotator Rotation, float FallingSpeed);
};

class ASTExtraPlayerController: public AUAEPlayerController {
  /* offset=0x05dc flags=0x0028081040010201 */ float FreeCameraStartMinPitchMin;
  /* offset=0x05e0 flags=0x0028081040010201 */ float FreeCameraStartMinPitchMax;
  /* offset=0x05e8 flags=0x0020080000000214 */ TSet<int32> TouchIndexSet;
  /* offset=0x0624 flags=0x0028081040000204 */ uint8 OnFireTouchFingerIndex;
  /* offset=0x0628 flags=0x0020080000000204 */ TArray<uint8> IgnoreCameraMovingIndexArray;
  /* offset=0x0634 flags=0x0028081040000204 */ bool bNeedSetFireTouchFingerIndex;
  /* offset=0x0635 flags=0x0028081040000204 */ uint8 OnFreeCameraFingerIndex;
  /* offset=0x0638 flags=0x0028081040000205 */ float FreeCameraSPL_Hor;
  /* offset=0x063c flags=0x0028081040000205 */ float FreeCameraSPL_Ver;
  /* offset=0x0640 flags=0x0028081040000205 */ float FreeCameraSPL_Hor_Parachute;
  /* offset=0x0644 flags=0x0028081040000205 */ float FreeCameraSPL_Ver_Parachute;
  /* offset=0x0648 flags=0x0028081040000205 */ float RecoverLagDelayTime;
  /* offset=0x064c flags=0x0028081040000000 */ struct FVector2D StartPosition;
  /* offset=0x0658 flags=0x0010001040000000 */ struct FRotator FreeCameraStartRotation;
  /* offset=0x0664 flags=0x0018001040000214 */ bool bHasInitUIFinished;
  /* offset=0x0665 flags=0x0018001040000215 */ bool isShowVaultEnable;
  /* offset=0x0668 flags=0x001a001040080208 */ UPlayerControllerStateMachine* PlayerControllerStateMachine;
  /* offset=0x066c flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateActive;
  /* offset=0x0670 flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateFlying;
  /* offset=0x0674 flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateJumping;
  /* offset=0x0678 flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateLanding;
  /* offset=0x067c flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateFighting;
  /* offset=0x0680 flags=0x001a001040080209 */ UPlayerControllerState* PlayerControllerStateFinished;
  /* offset=0x0684 flags=0x0018001040000005 */ struct FLinearColor CrossHairColor;
  /* offset=0x0694 flags=0x0018001040010205 */ uint8 AutoAimType;
  /* offset=0x0698 flags=0x0018001140000234 */ FName PlayerControllerState;
  /* offset=0x06a0 flags=0x0010000000000204 */ TArray<struct FClientFatalDamageRecordData> ClientFatalDamageRecords;
  /* offset=0x06ac flags=0x0010001000000004 */ struct FSensibilityConfig SensibilityConfig;
  /* offset=0x06e8 flags=0x0018001040000204 */ int32 UseMotionControlType;
  /* offset=0x06ec flags=0x0010000010080200 */ FOnCharacterNearDeathOrRescueingOtherNotifyDelegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;
  /* offset=0x06f8 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerEnterFlying;
  /* offset=0x0704 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerExitFlying;
  /* offset=0x0710 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerEnterJumping;
  /* offset=0x071c flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerExitJumping;
  /* offset=0x0728 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerEnterParachute;
  /* offset=0x0734 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerExitParachute;
  /* offset=0x0740 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerEnterFighting;
  /* offset=0x074c flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerExitFighting;
  /* offset=0x0758 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerEnterFinished;
  /* offset=0x0764 flags=0x0010000010080200 */ FOnTeammateHPChangeDelegate OnTeammateHPChangeDelegate;
  /* offset=0x0770 flags=0x0010000010080200 */ FOnCharacterBreathChangeDelegate OnCharacterBreathChange;
  /* offset=0x077c flags=0x0010000000000014 */ struct FKillOrPutDownMessage KillOrPutDownMessageData;
  /* offset=0x0810 flags=0x0010000000080200 */ FOnStartFireDelegate OnStartFireEvent;
  /* offset=0x081c flags=0x0010000010080200 */ FOnStopFireDelegate OnStopFireEvent;
  /* offset=0x0828 flags=0x0010000010080200 */ FOnReleaseFireBtnDelegate OnReleaseFireBtn;
  /* offset=0x0834 flags=0x0010000010080200 */ FOnSwitchCameraModeStartDelegate OnSwitchCameraModeStart;
  /* offset=0x0840 flags=0x0010000010080200 */ FOnSwitchCameraModeEndDelegate OnSwitchCameraModeEnd;
  /* offset=0x084c flags=0x0010000010080200 */ FOnPlayerPickUpActorDelegate OnPlayerPickUpActor;
  /* offset=0x0858 flags=0x0010000010080200 */ FOnPlayerPutDownActorDelegate OnPlayerPutDownActor;
  /* offset=0x0864 flags=0x0010000010080200 */ FOnPlayerPutDownAllPropDelegate OnPlayerPutDownAllProp;
  /* offset=0x0870 flags=0x0010000010080200 */ FOnSwitchWeaponDelegate OnSwitchWeapon;
  /* offset=0x087c flags=0x0010000010080200 */ FOnEquipWeaponDelegate OnEquipWeaponDel;
  /* offset=0x0888 flags=0x0010000010080200 */ FOnUnequipWeaponDelegate OnUnequipWeaponDel;
  /* offset=0x0894 flags=0x0010000010080200 */ FOnUseInventoryItemDelegate OnUseInventoryItem;
  /* offset=0x08a0 flags=0x0010000010080200 */ FOnChangeBattleOwnerDelegate OnChangeBattleOwnerDel;
  /* offset=0x08ac flags=0x0010000010080200 */ FOnDamageToOtherDelegate OnDamageToOther;
  /* offset=0x08b8 flags=0x0010000010080200 */ FOnLocalCharacterHPChangeDelegate OnLocalCharacterHPChangeDel;
  /* offset=0x08c4 flags=0x0010000010080200 */ FOnRank OnRank;
  /* offset=0x08d0 flags=0x0010000010080200 */ FOnGameStartCountDownDelegate OnGameStartCountDownDelegate;
  /* offset=0x08dc flags=0x0010000010080200 */ FOnGameStartDelegate OnGameStartDelegate;
  /* offset=0x08e8 flags=0x0010000010080200 */ FOnPlayerNameChange OnPlayerNameChange;
  /* offset=0x08f4 flags=0x0010000010080200 */ FOnUseMainSlot OnUseMainSlot;
  /* offset=0x0900 flags=0x0010000010080200 */ FOnBackpackMainSlot OnBackpackMainSlot;
  /* offset=0x090c flags=0x0010000010080200 */ FOnRemoveMainSlot OnRemoveMainSlot;
  /* offset=0x0918 flags=0x0010000010080200 */ FOnRepPlayerState OnRepPlayerState;
  /* offset=0x0924 flags=0x0010000010080200 */ FOnRepTeammateChange OnRepTeammateChange;
  /* offset=0x0934 flags=0x0010000010080200 */ FOnMapMarkChangeDelegate OnMapMarkChangeDelegate;
  /* offset=0x0940 flags=0x0010000010080200 */ FOnShowSkillPromptDelegate OnShowSkillPrompt;
  /* offset=0x094c flags=0x0010000010080200 */ FOnStartAutoSprintCountDown OnStartAutoSprintCountDown;
  /* offset=0x0958 flags=0x0010000010080200 */ FOnShowAutoSprintButton OnShowAutoSprintButton;
  /* offset=0x0964 flags=0x0010000010080200 */ FOnInterruptAutoSprintCountDown OnInterruptAutoSprintCountDown;
  /* offset=0x0970 flags=0x0010000010080200 */ FOnAutoSprintActive OnAutoSprintActive;
  /* offset=0x097c flags=0x0010000010080200 */ FOnTakeDamaged OnTakeDamagedDelegate;
  /* offset=0x0988 flags=0x0010000010080214 */ FOnLostConnection OnLostConnection;
  /* offset=0x0994 flags=0x0010000010080214 */ FOnReconnected OnReconnected;
  /* offset=0x09a0 flags=0x0010000010080214 */ FOnExitGame OnExitGame;
  /* offset=0x09ac flags=0x0010000010080214 */ FOnSpectatorChange OnSpectatorChange;
  /* offset=0x09b8 flags=0x0010000010080214 */ FOnStopResultPageCutDown OnStopResultPageCutDown;
  /* offset=0x09c4 flags=0x0010000010080214 */ FOnCharacterRecoveryHealth OnCharacterRecoveryHealth;
  /* offset=0x09d0 flags=0x0010000010080214 */ FRunOnNextFrame RunOnNextFrameDelegate;
  /* offset=0x09e0 flags=0x0018001040004200 */ bool EnableAsyncLoading;
  /* offset=0x09e1 flags=0x0018001040004215 */ bool EnableNetCullingDistOnVeryLowDevice;
  /* offset=0x09e4 flags=0x0018001040000215 */ float PC_CameraMoveRateX;
  /* offset=0x09e8 flags=0x0018001040000215 */ float PC_CameraMoveRateY;
  /* offset=0x09ec flags=0x0018001040000205 */ float Mobile_CameraMoveRateX;
  /* offset=0x09f0 flags=0x0018001040000205 */ float Mobile_CameraMoveRateY;
  /* offset=0x09f4 flags=0x0018001040000201 */ UCurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;
  /* offset=0x09f8 flags=0x0018001040000201 */ UCurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;
  /* offset=0x09fc flags=0x0018001040000205 */ bool bUseDisCurve;
  /* offset=0x0a00 flags=0x0010001000000015 */ struct FCommonCameraModeData NormalCameraModeData;
  /* offset=0x0a24 flags=0x0010001000000015 */ struct FCommonCameraModeData NearCameraModeData;
  /* offset=0x0a48 flags=0x0018001040000005 */ struct FVector2D NearCameraModeCameraMoveAdditionalRate;
  /* offset=0x0a50 flags=0x0018001040000015 */ struct FVector2D NearCameraModeCameraMoveMaxSpeed;
  /* offset=0x0a58 flags=0x0010001000000015 */ struct FAimCameraModeData AimCameraModeData;
  /* offset=0x0a7c flags=0x0018001040000005 */ struct FVector2D AimCameraModeCameraMoveAdditionalRate;
  /* offset=0x0a84 flags=0x0018001040000015 */ struct FVector2D AimCameraModeCameraMoveMaxSpeed;
  /* offset=0x0a8c flags=0x0010001000000015 */ struct FCommonCameraModeData PlaneCameraModeData;
  /* offset=0x0ab0 flags=0x0010000000000215 */ TMap<uint8, struct FCameraViewPitchLimitData> CameraViewPitchLimitDataMap;
  /* offset=0x0aec flags=0x0018001040000205 */ float MoveCameraMinDistanceThreshold;
  /* offset=0x0af0 flags=0x0018001040000205 */ float MoveCameraMinTimeThreshold;
  /* offset=0x0af4 flags=0x0018001040000204 */ bool ShouldShowPawnDetailInfoOnHUD;
  /* offset=0x0af5 flags=0x0018001040000214 */ uint8 CurCameraMode;
  /* offset=0x0af8 flags=0x0018001040000215 */ FName AutoScopeAimCompName;
  /* offset=0x0b00 flags=0x0018001040000215 */ float AutoScopeAimTraceDistance;
  /* offset=0x0b04 flags=0x0018001040000204 */ bool bMoveable;
  /* offset=0x0b05 flags=0x0018001040000204 */ bool bMoveableSwitchPose;
  /* offset=0x0b06 flags=0x0018001040000204 */ bool bSwitchingPose;
  /* offset=0x0b07 flags=0x0018001040000204 */ bool bMoveablePickup;
  /* offset=0x0b08 flags=0x0018001040000204 */ bool bMoveableAirborne;
  /* offset=0x0b09 flags=0x0018001040000204 */ bool bMoveableLandHard;
  /* offset=0x0b0c flags=0x0018001040000204 */ float CanSprintCDTime;
  /* offset=0x0b10 flags=0x0018001040004200 */ float AutoSprintRequestCD;
  /* offset=0x0b14 flags=0x0018001040000204 */ bool bCanGetTouchInput;
  /* offset=0x0b18 flags=0x0018001040000014 */ struct FVector CurScreenMoveSpeed;
  /* offset=0x0b24 flags=0x0018001040000204 */ float Mobile_CameraMoveAdjustSensitiveValue;
  /* offset=0x0b28 flags=0x0018001140000234 */ bool bIsBattleOwner;
  /* offset=0x0b29 flags=0x0018001040000224 */ bool bIsAutoAimEnabled;
  /* offset=0x0b2c flags=0x0018001140000234 */ ASTExtraBaseCharacter* STExtraBaseCharacter;
  /* offset=0x0b30 flags=0x0018001040000205 */ bool CharacterTouchMove;
  /* offset=0x0b31 flags=0x0018001040000234 */ bool IsDeadForLogout;
  /* offset=0x0b34 flags=0x0010001100000034 */ struct FServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;
  /* offset=0x0b3c flags=0x0018001040000201 */ bool bDebugShowYawInput;
  /* offset=0x0b40 flags=0x0018001040000204 */ float AccumulateYawInput;
  /* offset=0x0b44 flags=0x0018001040000215 */ float LandAfterJumpPlaneDelayMoveTime;
  /* offset=0x0b48 flags=0x0018001040000204 */ bool bLandAfterJumpPlane;
  /* offset=0x0b49 flags=0x0018001040000204 */ bool bIsLandingOnGround;
  /* offset=0x0b4a flags=0x0018001040010205 */ bool bIsNeedCheckPullPercentage;
  /* offset=0x0b4c flags=0x0018001040010205 */ float NoRespondArea;
  /* offset=0x0b50 flags=0x0018001040010205 */ float ComfortableSwipeAddition;
  /* offset=0x0b54 flags=0x0018001040010205 */ bool bIsLeftScreenUseComfortableSwipe;
  /* offset=0x0b55 flags=0x0018001040010205 */ bool bIsRightScreenUseComfortableSwipe;
  /* offset=0x0b56 flags=0x0018001040010205 */ uint8 sprintOptType;
  /* offset=0x0b58 flags=0x0018001040010205 */ float JoystickSprintDisThreshold;
  /* offset=0x0b5c flags=0x0018001040010205 */ float JoystickSprintDisThresholdNew;
  /* offset=0x0b60 flags=0x0018001040010205 */ float JoystickSprintBtnHeight;
  /* offset=0x0b64 flags=0x0018001040010205 */ float JoystickSprintAngleThreshold;
  /* offset=0x0b68 flags=0x0018001040000205 */ bool bIsUseDisOrSpeedMove;
  /* offset=0x0b69 flags=0x0018001040010205 */ uint8 JoystickOperatingMode;
  /* offset=0x0b6c flags=0x0018001040010205 */ float EasyGoStraightAngle;
  /* offset=0x0b70 flags=0x0018001040000204 */ bool bIsTouching;
  /* offset=0x0b71 flags=0x0018001040000205 */ bool bIsAutoAimOnlyInTouch;
  /* offset=0x0b72 flags=0x0018001040000205 */ bool bIsAutoAimOnlyOnFire;
  /* offset=0x0b73 flags=0x0018001040000205 */ bool bMoveInMiniMap;
  /* offset=0x0b74 flags=0x0018001040000204 */ bool bAutoSprint;
  /* offset=0x0b78 flags=0x0018001040010205 */ float AutoSprintBtnTime;
  /* offset=0x0b7c flags=0x0018001040010205 */ float AutoSprintWaitingTime;
  /* offset=0x0b80 flags=0x0018001040010205 */ float AutoSprintThreshold;
  /* offset=0x0b84 flags=0x0018001040000214 */ float JoystickTriggerSprintDuration;
  /* offset=0x0b88 flags=0x0018001040010215 */ float InHouseSpringArmLengthModifier;
  /* offset=0x0b8c flags=0x0018001040000215 */ float InHouseSpringArmLengthModifierChangeSpeed;
  /* offset=0x0b90 flags=0x0018001040000205 */ bool IsPlayerUnableToDoAutoSprintOperation;
  /* offset=0x0b94 flags=0x0018001040000204 */ float CurrentCameraFOV;
  /* offset=0x0b98 flags=0x0018001040004201 */ float MinFovChangeView;
  /* offset=0x0ba0 flags=0x0010000100000020 */ struct FWeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;
  /* offset=0x0bc8 flags=0x0018001040000214 */ int32 GameTipMsgID;
  /* offset=0x0bcc flags=0x0018000000000214 */ FString GameTipParam1;
  /* offset=0x0bd8 flags=0x0018000000000214 */ FString GameTipParam2;
  /* offset=0x0be4 flags=0x0018001040000214 */ float AutoSprintCD;
  /* offset=0x0be8 flags=0x0010000000000200 */ TArray<struct FTeamMateStateInfo> TeamMateStates;
  /* offset=0x0bf8 flags=0x0018001140000220 */ APlayerTombBox* DeadTombBox;
  /* offset=0x0bfc flags=0x0048001040000200 */ bool DiedisableInput;
  /* offset=0x0cb0 flags=0x0048001040000200 */ ASTExtraBaseCharacter* closedAimTarget;
  /* offset=0x0d34 flags=0x0048001140080228 */ UBackpackComponent* BackpackComponent;
  /* offset=0x0d38 flags=0x0048001040080208 */ UCommonBtnComponent* CommonBtnComponent;
  /* offset=0x0d3c flags=0x0048001040080208 */ UChatComponent* ChatComponent;
  /* offset=0x0d50 flags=0x0018001040000205 */ int32 FireMode;
  /* offset=0x0d54 flags=0x0018001040000205 */ bool bNotMoveFire;
  /* offset=0x0d55 flags=0x0018001040000205 */ bool bAlreadyFired;
  /* offset=0x0d58 flags=0x0010000000000205 */ TArray<ASTExtraBaseCharacter*> nowNearCharacterList;
  /* offset=0x0d64 flags=0x0010000000000205 */ TArray<ASTExtraVehicleBase*> nowNearVehicleList;
  /* offset=0x0d7c flags=0x0010000000000205 */ TArray<ASTExtraShootWeapon*> nowShotWeaponList;
  /* offset=0x0d94 flags=0x0010000000000205 */ TArray<AActor*> nowGrenadeList;
  /* offset=0x0da0 flags=0x0018001040000225 */ bool bIsLastTwoCircle;
  /* offset=0x0da4 flags=0x0010000010080200 */ FOnCharacterCheckVoiceTriggerDelegate triggerVoiceCheckDelegate;
  /* offset=0x0db0 flags=0x0010100010080200 */ FOnCharacterMoveCheckVoiceTriggerDelegate triggerMoveVoiceCheckDelegate;
  /* offset=0x0dbc flags=0x0010100010080200 */ FOnCharacterShotCheckVoiceTriggerDelegate triggerShotVoiceCheckDelegate;
  /* offset=0x0dc8 flags=0x0010100010080200 */ FOnCharacterVehicleCheckVoiceTriggerDelegate triggerVehicleVoiceCheckDelegate;
  /* offset=0x0dd4 flags=0x0018001140000234 */ bool bCanJump;
  /* offset=0x0dd8 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerCanJump;
  /* offset=0x0de4 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerCannotJump;
  /* offset=0x0df0 flags=0x0018001140000234 */ bool bCanOpenParachute;
  /* offset=0x0df4 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerCanOpenParachute;
  /* offset=0x0e00 flags=0x0010000010080200 */ FPlayerControllerDelegate OnPlayerCannotOpenParachute;
  /* offset=0x0e0c flags=0x0018001040000220 */ bool bCanCloseParachute;
  /* offset=0x0e10 flags=0x0018001040000234 */ float PlaneFlyHeightFromGameMode;
  /* offset=0x0e14 flags=0x0018001040000234 */ float CanOpenParachuteHeight;
  /* offset=0x0e18 flags=0x0018001040000234 */ float ForceOpenParachuteHeight;
  /* offset=0x0e1c flags=0x0018001040000234 */ float CloseParachuteHeight;
  /* offset=0x0e20 flags=0x0018001040000214 */ float RealTimePawnHeight;
  /* offset=0x0e24 flags=0x0018001140000220 */ AActor* ThePlane;
  /* offset=0x0e2c flags=0x0018001040000204 */ float GameAssistantJoyStickOpacity;
  /* offset=0x0e48 flags=0x0028080000000200 */ FString murderName;
  /* offset=0x0e54 flags=0x0028081040000200 */ bool MurderIsAI;
  /* offset=0x0e58 flags=0x0028081040080208 */ UVehicleUserComponent* VehicleUserComp;

  void ActivateTouchInterface(UTouchInterface* NewTouchInterface);
  void AddItem(int32 ID, int32 Count);
  void BackToGameDataRefresh();
  void BeginTouchScreen(struct FVector Loc, uint8 FingerIndex);
  /* CL* */ void BroadcastClientsSpawnExplosionEffect(UClass<ASTExtraExplosionEffect>* Template, struct FTransform Trans, AActor* ActorOwner, APawn* InstigatorPawn, enum ESpawnActorCollisionHandlingMethod method);
  /* CL  */ void BroadcastFatalDamageToClient(FString causerName, FString VictimName, int32 DamageType, int32 AdditionalParam, bool IsHeadshot, int32 ResultHealthStatus, int32 Relationship, int32 PreviousHealthStatus, FString realKillerName, int32 realKillerNewKillNum);
  void CallTeamMateStateChanged(ASTExtraPlayerState* STPlayerState, struct FVector Location, struct FRotator Rotation, float Health, int32 VoiceID);
  void CanSeeAllUI(bool bUIVisibility);
  /* CL  */ void ClientDisplayGameTipWithMsgID(int32 ID);
  /* CL  */ void ClientEndOnlineGame();
  /* CL  */ void ClientGameStarted();
  /* CL  */ void ClientHearSound(int32 AkEventID, struct FVector AkLocation);
  /* CL  */ void ClientOnDamageToOther(float _DamageToOther);
  /* CL  */ void ClientOnHurt();
  /* CL  */ void ClientOnMsg(FString msg);
  /* CL  */ void ClientSendRoundEndEvent(bool bIsWinner, int32 ExpendedTimeInSeconds);
  /* CL  */ void ClientStartOnlineGame();
  /* CL  */ void CorrectVehicleState(int32 InCorrectionId, struct FVector_NetQuantize100 ServerLocation, struct FVector_NetQuantize100 ServerLinearVelocity, struct FVector_NetQuantizeNormal ServerRotator, struct FVector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);
  void DealGetAllNearMoveCharacter(float checkDis);
  void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);
  void DealGetAllNearShotWeapon(float disRate);
  void DebugSetUIVisibility(bool bUIVisibility);
  void DisableMyLandscapeDraw();
  void DispatchPlayerExitEvent();
  void DispatchPlayerLostEvent();
  void DispatchPlayerReconnectedEvent();
  void DisplayGameTipWithMsgID(int32 ID);
  void DisplayGameTipWithMsgIDAndString(int32 ID, FString param1, FString param2);
  void DoTouchMove(float Yaw, float Pitch);
  void DoUITouchMove(struct FVector Loc);
  void EnableMyLandscapeDraw();
  void EnablePlayerInHouse(bool bIsIn);
  void EndTouchScreen(struct FVector Loc, uint8 FingerIndex);
  void ExitFreeCamera();
  void Fight();
  void FireTakeDamagedEvent(struct FVector CauserLocation);
  void ForceReleaseCurTouchMoveFinger();
  void FreeCameraTouchMove(struct FVector Loc, uint8 FingerIndex);
  /* SRV */ void GMServerTeleport(AActor* Teleporter);
  void GMTeleport(AActor* Teleporter);
  void GameModeGotoFightingState();
  void GameModeGotoNextState();
  UBackpackComponent* GetBackpackComponent();
  UChatComponent* GetChatComponent();
  struct FVector GetControlLookPoint(int32 LineTraceRange, bool HitTaget);
  struct FRotator GetControlLookRotation();
  APawn* GetCurPawn();
  struct FVector GetCurPawnLocation();
  int32 GetCurPlayerId();
  ASTExtraPlayerState* GetCurPlayerState();
  struct FVector GetFocalLocation();
  int32 GetFriendDistance();
  void GetGameScreenSize();
  /* SRV */ void GetGameStateReconnectInfoOnServer();
  bool GetIsSwitchingCamera();
  struct FVector2D GetJoyStickCenter();
  struct FVector2D GetJoyStickVisualSize();
  bool GetMurderIsAI();
  FString GetMurderName();
  ASTExtraBaseCharacter* GetPlayerCharacterSafety();
  struct FRotator GetSensibilityRate(bool bIsMotionControl);
  USpringArmComponent* GetTargetedSpringArm();
  bool GetUseMotionControlEnable();
  bool GetUseMotionControlLog();
  float GetViewPortDPIScale();
  int32 GetWriteCircleDistance();
  void GotoFlying();
  int32 GotoSpectating(int32 TeammatePlayerid);
  void HandleClientHasReactivated();
  void HandleLandOnGroundEnd();
  void InitJoyStickAfterActivation();
  void InsertGrenadeIDInOrder(int32 GrenadeID);
  void InsertGrenadeIDToName(int32 GrenadeID, FName Name);
  bool IsAGMPlayer();
  bool IsAllowActorTouchMove();
  bool IsInFreeCameraView();
  bool IsInSpectating();
  bool IsLastBreathOrRescueingOther();
  bool IsMoveable();
  bool IsSameTeam(APawn* Other);
  bool IsViewTarget(AActor* pActor);
  void JoystickTriggerSprint(bool bIsSprint);
  void JumpFromPlane();
  void KillAll();
  void KillSomeOne(FString InPlayerName);
  void LocalGetGameStateReconnectInfo();
  void MemberVoice(int32 member, int32 status);
  void ModifyTouchIndex(struct FVector Loc, uint8 FingerIndex);
  void MoveTo(float X, float Y, float Z);
  void MoveToAI();
  void NotifyInOutPickUpActorWrapperBP(bool bIsIn);
  void OnAutoSprintActive__DelegateSignature();
  void OnBackpackMainSlot__DelegateSignature(uint8 Slot);
  void OnCameraAimInterrupt();
  void OnChangeBattleOwnerDelegate__DelegateSignature();
  void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, ACharacter* OwnerCharacter, int32 HealthStatus);
  void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(AActor* nowActor, float checkDis);
  void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(ASTExtraBaseCharacter* nowCharacter, struct FVector posVector, float showTime);
  void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);
  void OnCharacterRecoveryHealthEvent();
  void OnCharacterRecoveryHealth__DelegateSignature();
  void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(ASTExtraShootWeapon* nowWeapon, struct FVector posVector, float showTime, bool isslience);
  void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(ASTExtraVehicleBase* nowVehicle, struct FVector posVector, float showTime);
  void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);
  void OnEquipWeaponDelegate__DelegateSignature();
  void OnExitGame__DelegateSignature();
  void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);
  void OnGameStartDelegate__DelegateSignature();
  void OnInterruptAutoSprintCountDown__DelegateSignature();
  void OnItemOperation(struct FItemDefineID DefineID, enum EBattleItemOperationType operationType, uint8 Reason);
  void OnLandOnGroundAfterJumpPlaneEnd();
  void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
  void OnLostConnection__DelegateSignature();
  void OnMapMarkChangeDelegate__DelegateSignature(int32 TeamMateSerialNumber);
  /* CL  */ void OnPlayerLostConnection(int32 LostPlayerKey);
  void OnPlayerNameChange__DelegateSignature(FString changedplayername);
  void OnPlayerPickUpActorDelegate__DelegateSignature(uint8 SurvivePickUpGlobalCategory, int32 ID);
  void OnPlayerPutDownActorDelegate__DelegateSignature(ASTExtraBaseCharacter* TargetPlayer, AActor* TargetActor);
  void OnPlayerPutDownAllPropDelegate__DelegateSignature();
  /* CL  */ void OnPlayerReConnected(int32 LostPlayerKey);
  void OnPlayerStateChanged();
  void OnRank__DelegateSignature(int32 Kills, int32 Rank);
  void OnReconnected__DelegateSignature();
  void OnReleaseFireBtnDelegate__DelegateSignature();
  void OnRemoveMainSlot__DelegateSignature(uint8 Slot);
  void OnRepNotify_ServerHitEnemyReplicatedData();
  void OnRepNotify_SetBattleOwner();
  void OnRepPlayerState__DelegateSignature();
  void OnRepTeammateChange__DelegateSignature();
  void OnRep_BackpackComponent();
  void OnRep_CanJump();
  void OnRep_CanOpenParachute();
  void OnRep_DeadTombBox();
  void OnRep_Plane();
  void OnRep_PlayerControllerState();
  void OnRep_STExtraBaseCharacter();
  void OnRep_WeaponSystemReconnectReplicateData();
  void OnShowAutoSprintButton__DelegateSignature(bool visible, struct FVector2D showPos, bool IsInside);
  void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText);
  void OnSpectatorCameraChange(bool bDie);
  void OnSpectatorChange__DelegateSignature();
  void OnStartAutoSprintCountDown__DelegateSignature();
  void OnStartFireDelegate__DelegateSignature();
  void OnStopFireDelegate__DelegateSignature();
  void OnStopResultPageCutDownEvent(bool isStop);
  void OnStopResultPageCutDown__DelegateSignature(bool isStop);
  void OnSwitchCameraModeEndDelegate__DelegateSignature(uint8 CameraMode);
  void OnSwitchCameraModeStartDelegate__DelegateSignature(uint8 CameraMode);
  void OnSwitchWeaponDelegate__DelegateSignature();
  void OnTakeDamaged__DelegateSignature(float DamageAngel);
  void OnTeamMateAttachedToVehicle(ASTExtraVehicleBase* InVehicle);
  void OnTeamMateDetachedFromVehicle();
  void OnTeammateHPChangeDelegate__DelegateSignature();
  void OnUnequipWeaponDelegate__DelegateSignature();
  void OnUseInventoryItemDelegate__DelegateSignature();
  void OnUseMainSlot__DelegateSignature(uint8 Slot);
  void OnWeaponEquipAttachment(uint8 WeaponPropSlot, struct FItemDefineID DefineID, bool bEquip);
  void OpenParachute();
  void PressFire(int32 FingerIndex);
  void PressGrenade(bool isThrow);
  void PrintStringToScreen(FString inString, struct FLinearColor TextColor, float Duration);
  /* CL  */ void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(uint8 WeaponPropSlot, struct FItemDefineID DefineID, bool bEquip);
  /* CL  */ void RPC_OwnerClient_PlayerAddEnergy(float AddVal, uint8 Reason);
  /* CL  */ void RPC_OwnerClient_PlayerAddHealth(float AddVal, uint8 Reason);
  /* CL  */ void RPC_OwnerClient_PlayerConsumeItem(struct FItemDefineID ID, int32 Count);
  /* CL  */ void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, struct FAttrModifyItem ItemData);
  /* CL  */ void RPC_OwnerClient_SetMurderInfo(FString murderName, bool IsAI);
  /* SRV */ void RPC_Server_ClientHasFinishedRecoverWeapon(ASTExtraWeapon* Weapon, struct FWeaponReconnectReplicateData RecoverData);
  /* SRV */ void RPC_Server_ClientHasReactivated();
  /* SRV */ void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();
  /* SRV */ void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon();
  void ReceiveBackpackComponent();
  void ReceiveClientRestart();
  void RefreshTopMostUIPanel(uint8 Type);
  /* SRV */ void RequireNetCullingDistanceByDevice();
  void ResetMissingUIUpdate();
  void RestoreDefaultInteractionSize(int32 JSIndex);
  float RetriveMobileContentScaleFactor();
  void RunOnNextFrameEvent();
  void RunOnNextFrame__DelegateSignature();
  void SendStringMsg(FString Message, int32 msgID);
  /* SRV */ void ServerAddItem(int32 ID, int32 Count);
  void ServerCMD(FString Cmd);
  /* SRV */ void ServerCMD_RPC(FString Cmd);
  /* SRV */ void ServerDisuseItem(struct FItemDefineID DefineID, enum EBattleItemDisuseReason Reason);
  /* SRV */ void ServerDropItem(struct FItemDefineID DefineID, int32 Count, enum EBattleItemDropReason Reason);
  /* SRV */ void ServerFight();
  /* SRV */ void ServerGameModeGotoFightingState();
  /* SRV */ void ServerGameModeGotoNextState();
  /* SRV */ void ServerGotoFlying();
  /* SRV */ void ServerHearSound(int32 AkEventID, struct FVector AkLocation);
  /* SRV */ void ServerJumpFromPlane();
  /* SRV */ void ServerKillAll();
  /* SRV */ void ServerKillSomeOne(FString InPlayerName);
  /* SRV */ void ServerMoveTo(struct FVector TargetPos);
  /* SRV */ void ServerOnMsg(FString msg);
  /* SRV */ void ServerOpenParachute();
  /* SRV */ void ServerReplicateExplosionEffect(UClass<ASTExtraExplosionEffect>* Template, struct FTransform Trans, AActor* ActorOwner, APawn* InstigatorPawn, enum ESpawnActorCollisionHandlingMethod method);
  /* SRV */ void ServerSetAirAttackEnable(bool Enable);
  /* SRV */ void ServerSetAirDropEnable(bool Enable);
  /* SRV */ void ServerSetControlRotation(struct FRotator NewRotation);
  /* SRV */ void ServerSetMaxHealth(float HP);
  /* SRV */ void ServerSetReloadMethod(ASTExtraBaseCharacter* TargetCharacter, uint8 reloadMethod);
  /* SRV */ void ServerSetShootType(ASTExtraBaseCharacter* TargetCharacter, uint8 shootType);
  /* SRV */ void ServerSetSpeed(float Modifier);
  /* SRV */ void ServerSpawnAI(int32 Num);
  /* SRV */ void ServerSpawnVehicle(FString Path);
  /* SRV */ void ServerStartAirAttack(int32 Index);
  /* SRV */ void ServerStartAirAttackSpecified(float X, float Y, float Radius);
  /* SRV */ void ServerStartAirDrop(int32 Index);
  /* SRV */ void ServerStartAirDropSpecified(float X, float Y);
  /* SRV */ void ServerStartBarrel(ASTExtraBaseCharacter* TargetCharacter);
  /* SRV */ void ServerStartFire(ASTExtraBaseCharacter* TargetCharacter, int32 BurstShootBulletsLimit, float BurstShootTimeLimit, uint8 ShootMode, struct FVector SimpleShootTarget, struct FVector2D ClientScreenSize);
  /* SRV */ void ServerStartGame();
  /* SRV */ void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, struct FVector P_MapCenterLoc, struct FVector P_PlaneStartLoc, float P_PlaneStartYaw);
  /* SRV */ void ServerStartReadyCountDown();
  /* SRV */ void ServerStopFire(ASTExtraBaseCharacter* TargetCharacter, ASTExtraShootWeapon* TargetWeapon, int32 CurrentBullet);
  /* SRV */ void ServerTriggerCharacterCustomEvent(uint8 SkillEvent);
  /* SRV */ void ServerTriggerCharacterEntryEvent(enum EUTSkillEntry EntryEvent);
  /* SRV */ void ServerTriggerSelectGrenade(int32 GrenadeID);
  /* SRV */ void ServerUseItem(struct FItemDefineID DefineID, struct FBattleItemUseTarget Target, enum EBattleItemUseReason Reason);
  void SetAirAttackEnable(bool Enable);
  void SetAirDropEnable(bool Enable);
  void SetControlRotation(struct FRotator NewRotation);
  /* SRV */ void SetCurrentCameraFOV(float FOV, uint8 Mode);
  /* CL  */ void SetGameStateReconnectInfoToClient(struct FReConnectGameStateInfo ReConnectInfo);
  void SetJoyStickCenter(struct FVector2D JSCenter);
  void SetJoyStickInteractionSize(struct FVector2D JSInteractionSize);
  void SetJoyStickOpacity(float JSOpacity);
  void SetJoyStickScale(float JSScale);
  void SetJoystickOperatingMode(uint8 OperatingMode, float GoStraightAngle);
  void SetMaxHealth(float HP);
  /* SRV */ void SetPlayerMark(struct FVector Loc);
  void SetSpeed(float Modifier);
  void SetTimeSpeedCheck(bool Val);
  void SetTimeSpeedFactor(float Val);
  void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);
  void SetVirtualStickVisibility(bool bJSVisiable);
  void ShowAllRoles();
  /* CL  */ void ShowBulletShoot(struct FVector StartLoc, struct FRotator Rot);
  void ShowFireBtn(bool bShow);
  void ShowVaultEnable();
  void SoftReconnectRecoverData(AUAEPlayerController* PC);
  void SpawnAI(int32 Num);
  void SpawnVehicle();
  void SpawnVehicleWithPath(FString Path);
  /* CL  */ void SpectatorCameraChange_Broadcast(bool bDie);
  void StartAirAttack(int32 Index);
  void StartAirAttackSpecified(float X, float Y, float Radius);
  void StartAirDrop(int32 Index);
  void StartAirDropSpecified(float X, float Y);
  void StartFreeCamera(uint8 FigerIndex);
  void StartGame();
  void StartLandOnGroundAfterJumpPlane();
  void StartReadyCountDown();
  void StartSwitchCameraMode();
  void SwitchCameraMode(uint8 Mode);
  void SwitchCameraModeByOrder();
  void SwitchCameraModeScope(uint8 Mode);
  /* CL  */ void SwitchPoseStateClient(ASTExtraBaseCharacter* TargetCharacter, uint8 PoseState);
  /* CL  */ void SwitchPoseStateFailedResponse(ASTExtraBaseCharacter* TargetCharacter, uint8 PoseState);
  /* SRV */ void SwitchPoseStateServer(ASTExtraBaseCharacter* TargetCharacter, uint8 PoseState);
  /* CL  */ void TeamMateStateChanged(ASTExtraPlayerState* STPlayerState, struct FVector_NetQuantize100 Location, uint32 View, uint8 Roll, float Health, int32 VoiceID);
  void ToggleCheatLocation(bool Val);
  void ToggleServerAcknowledgePossession(bool Val);
  void ToggleUserCmdDelta(bool Val);
  void ToggleUserCmdDeltaCheckSum(bool Val);
  void ToggleUserCmdDeltaFlag(bool Val);
  void ToggleUserCmdDeltaSendAck(bool Val);
  void ToggleVehicleSync(bool Val);
  void TouchMove(struct FVector Loc, uint8 FingerIndex);
  void ViewPlane();
  void ViewVehicle(float YawAdd, float PitchAdd, struct FVector Loc);
  void VisualizeItem();
};

class ASTExtraPlayerStart: public APlayerStart {
  /* offset=0x02c8 flags=0x0018001040000205 */ bool bUseAsReSpawn;
  /* offset=0x02c9 flags=0x0018001040000205 */ bool bUseAsFirstSpawn;
  /* offset=0x02ca flags=0x0018001040000200 */ bool bMarkOccupied;
};

class ASTExtraPlayerState: public AUAEPlayerState {
  /* offset=0x03d4 flags=0x0018001140020235 */ int32 Rank;
  /* offset=0x03d8 flags=0x0018001140000234 */ enum ExtraPlayerLiveState LiveState;
  /* offset=0x03dc flags=0x0018001040000214 */ ASTExtraBaseCharacter* CharacterOwner;
  /* offset=0x03e0 flags=0x0018001040000214 */ float PlayerHealth;
  /* offset=0x03e4 flags=0x0018001040000214 */ float PlayerHealthMax;
  /* offset=0x03e8 flags=0x0010001000000014 */ struct FCharacterLocAndRot SelfLocAndRot;
  /* offset=0x0400 flags=0x0018001040000034 */ struct FVector PlayerDeadLocation;
  /* offset=0x040c flags=0x0018001140000024 */ struct FVector MapMark;
  /* offset=0x0418 flags=0x0014000100000220 */ TArray<ASTExtraPlayerState*> TeamMatePlayerStateList;
  /* offset=0x0424 flags=0x0018001140000220 */ int32 TeamMatePlayerStateIndex;
  /* offset=0x0428 flags=0x0018001140000224 */ int32 Breath;
  /* offset=0x042c flags=0x0010001000020005 */ struct FDriveCarNotify DriveCarNotify;
  /* offset=0x0438 flags=0x0018001040000205 */ float EnegyBuffStage1;
  /* offset=0x043c flags=0x0018001040000205 */ float EnegyBuffStage2;
  /* offset=0x0440 flags=0x0018001040000205 */ float EnegyBuffStage3;
  /* offset=0x0444 flags=0x0018001040000205 */ float EnegyBuffStage4;
  /* offset=0x0448 flags=0x0018001040000205 */ float EnegyBuffReduceSpeedPerSec;
  /* offset=0x044c flags=0x0018001040000234 */ float CurEnegyBuff;
  /* offset=0x0450 flags=0x0018001040000205 */ float EnegyBuffStage1RecoverHealthTime;
  /* offset=0x0454 flags=0x0018001040000205 */ float EnegyBuffStage1RecoverHealthVal;
  /* offset=0x0458 flags=0x0018001040000205 */ float EnegyBuffStage2RecoverHealthTime;
  /* offset=0x045c flags=0x0018001040000205 */ float EnegyBuffStage2RecoverHealthVal;
  /* offset=0x0460 flags=0x0018001040000205 */ float EnegyBuffStage3RecoverHealthTime;
  /* offset=0x0464 flags=0x0018001040000205 */ float EnegyBuffStage3RecoverHealthVal;
  /* offset=0x0468 flags=0x0018001040000205 */ float EnegyBuffStage4RecoverHealthTime;
  /* offset=0x046c flags=0x0018001040000205 */ float EnegyBuffStage4RecoverHealthVal;
  /* offset=0x0470 flags=0x0010000010080200 */ FOnLocalCharacterHPChangeDelegate OnLocalCharacterHPChangeDel;
  /* offset=0x047c flags=0x0010000010080200 */ FOnPlayerKillsChangeDelegate OnPlayerKillsChangeDelegate;
  /* offset=0x0489 flags=0x0018001040000204 */ bool IsShowingRescueingUI;
  /* offset=0x0494 flags=0x0018001140000224 */ bool isReconnected;
  /* offset=0x0495 flags=0x0018001140000224 */ bool isLostConnection;
  /* offset=0x0498 flags=0x0010000100000224 */ TArray<int32> TeamMatesExitState;

  void AddEnegySafety(float AddVal);
  uint8 CalculateEnegyStage();
  void ClearPlayerTeamMateVec();
  float GetBreathPercentage();
  float GetMaxEnegyBuff();
  ASTExtraBaseCharacter* GetPlayerCharacter();
  float GetPlayerHealth();
  float GetPlayerMaxHealth();
  int32 GetPlayerTeamIndex();
  TArray<FString> GetPlayerTeamMateVec();
  void GetTeamMatePlayerStateList(TArray<ASTExtraPlayerState*> OutList, bool ExcludeMyself);
  uint32 GetUserIDByMemberID(int32 memberID);
  bool IsAlive();
  bool IsSinglePlayer();
  void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
  void OnPlayerKillsChangeDelegate__DelegateSignature();
  void OnRep_BPS();
  void OnRep_BreathChanged();
  void OnRep_HPChanged();
  void OnRep_MapMarkNotify();
  void OnRep_PlayerExitGameEvent();
  void OnRep_PlayerKillsChange();
  void OnRep_PlayerLiveState();
  void OnRep_PlayerLostConnectionEvent();
  void OnRep_PlayerName();
  void OnRep_PlayerReconnectEvent();
  void OnRep_RankNotify();
  void OnRep_TeamMatePlayerStateIndex();
  void OnRep_TeamMatePlayerStateList();
  void RespondToPawnBreathChange(float _health, uint8 _healthStatus, ASTExtraBaseCharacter* param2);
  void RespondToPawnCanRescueOtherStatusChange(ASTExtraBaseCharacter* _helpWho, ASTExtraBaseCharacter* _ownerPawn, bool IsTurningInto);
  void RespondToPawnRescueingStatusChange(ACharacter* _helpWho, ACharacter* _ownerPawn, bool IsTurningInto, float RemainingRescueTime);
};

class ASTExtraProp: public AActor {
  /* offset=0x02a8 flags=0x0018001040010201 */ bool bKeepRelevantWhenHiddenInGame;
  /* offset=0x02ac flags=0x0018001040000214 */ ASTExtraBaseCharacter* OwnerPlayer;
  /* offset=0x02b0 flags=0x0018001040000214 */ ASTExtraBaseCharacter* LastOwnerPlayer;
  /* offset=0x02c0 flags=0x0010001040000014 */ struct FTransform OriginTrans;
  /* offset=0x02f0 flags=0x0028081040000201 */ FName PropAttachSocket;
  /* offset=0x02f8 flags=0x0028081040000201 */ UAkAudioEvent* EquipSound;
  /* offset=0x02fc flags=0x0028081040000201 */ UAkAudioEvent* UnEquipSound;
};

class ASTExtraShootWeapon: public ASTExtraWeapon {
  /* offset=0x034c flags=0x0018001040010201 */ float voiceCheckCD;
  /* offset=0x0350 flags=0x0018001040010201 */ float voiceCheckShowCD;
  /* offset=0x0354 flags=0x0018001040010201 */ bool isDefaultSlienceWeapon;
  /* offset=0x036e flags=0x0018001040010215 */ bool bIsPistol;
  /* offset=0x036f flags=0x0018001040000204 */ bool bIsAIOwner;
  /* offset=0x0370 flags=0x0010000010080200 */ FOnShootWeaponAutoReloadDelegate OnShootWeaponAutoReloadDel;
  /* offset=0x037c flags=0x0010000010080200 */ FOnCurBulletChange OnCurBulletChange;
  /* offset=0x0388 flags=0x0010000010080200 */ FOnStartFireDelegate OnStartFireDelegate;
  /* offset=0x0394 flags=0x0010000010080200 */ FOnStopFireDelegate OnStopFireDelegate;
  /* offset=0x03a0 flags=0x0010000010080200 */ FOnWeaponShootDelegate OnWeaponShootDelegate;
  /* offset=0x03ac flags=0x0010000010080200 */ FOnWeaponShootHitDelegate OnWeaponShootHitDelegate;
  /* offset=0x03b8 flags=0x0010000010080200 */ FOnWeaponReloadStartDelegate OnWeaponReloadStartDelegate;
  /* offset=0x03c4 flags=0x0010000010080200 */ FOnWeaponReloadEndDelegage OnWeaponReloadEndDelegage;
  /* offset=0x03d0 flags=0x0010000010080200 */ FOnWeaponEquipDelegate OnWeaponEquipDelegate;
  /* offset=0x03dc flags=0x0010000010080200 */ FOnWeaponUnEquipDelegate OnWeaponUnEquipDelegate;
  /* offset=0x03e8 flags=0x0010000010080200 */ FOnWeaponSecurityLogShootActorDelegate OnWeaponSecurityLogShootActorDelegate;
  /* offset=0x03f4 flags=0x00180010400a021d */ USTExtraShootWeaponComponent* ShootWeaponComponent;
  /* offset=0x03f8 flags=0x0018001040000214 */ int32 CurBulletNumInClip;
  /* offset=0x03fc flags=0x0018001140000234 */ int32 CurMaxBulletNumInOneClip;
  /* offset=0x0400 flags=0x0018001040000234 */ int32 CurBulletNumInBarrel;
  /* offset=0x0404 flags=0x0018001040000234 */ uint8 ShootMode;
  /* offset=0x0405 flags=0x0018001140000234 */ uint8 CurShootType;
  /* offset=0x0408 flags=0x0018001040000234 */ int32 CurShootTotalType;
  /* offset=0x040c flags=0x0018001040010205 */ float VoiceCheckDis;
  /* offset=0x0410 flags=0x0018001040010205 */ float SilenceVoiceCheckDis;
  /* offset=0x0414 flags=0x0018001040000204 */ float nowVoiceCheckDis;
  /* offset=0x0418 flags=0x0018001040000004 */ struct FVector ShootTargetLoc;
  /* offset=0x0428 flags=0x0018001040000204 */ uint8 TraceChannel;
  /* offset=0x042c flags=0x0018001040000014 */ struct FVector LastImpactEffectLocation;
  /* offset=0x0438 flags=0x0018001040000214 */ float LastImpactEffectTime;
  /* offset=0x0440 flags=0x0018001040000214 */ int32 CurBurstShootIndex;
  /* offset=0x0450 flags=0x0010001040010015 */ struct FTransform BoltActionTransform;
  /* offset=0x0480 flags=0x0018001040000214 */ bool bHasFinishConfirmedFromServer;
  /* offset=0x0484 flags=0x0018001040000214 */ int32 ClientShootTimes;
  /* offset=0x0488 flags=0x0018001040010201 */ UAkAudioEvent* BulletFlySound;
  /* offset=0x048c flags=0x0018001040010201 */ UAkAudioEvent* LoadBulletSound;
  /* offset=0x0490 flags=0x0018001040010201 */ UAkAudioEvent* ChangeMagazineSound;
  /* offset=0x0494 flags=0x0018001040010201 */ UAkAudioEvent* MagazineINSound;
  /* offset=0x0498 flags=0x0018001040010201 */ UAkAudioEvent* MagazineOUTSound;
  /* offset=0x049c flags=0x0018001040010201 */ UAkAudioEvent* PullBoltSound;
  /* offset=0x04a0 flags=0x0018001040010001 */ struct FVector BulletDecalScale;
  /* offset=0x04ac flags=0x0028081040000214 */ uint8 CurShootWeaponState;
  /* offset=0x04b0 flags=0x00280810400a021d */ UStaticMeshComponent* DefaultScopeComponent;
  /* offset=0x04c5 flags=0x0018001040000220 */ bool IsEquipSilencer;
  /* offset=0x04c6 flags=0x0018001040000220 */ bool IsEquipFiringSuppressor;
  /* offset=0x04c8 flags=0x001800104008021d */ UWeaponAvatarComponent* WeaponAvatarComponent;
  /* offset=0x04cc flags=0x0018001040010015 */ struct FVector OffsetFPPLocation;
  /* offset=0x04d8 flags=0x0010001040010015 */ struct FRotator OffsetFPPRotation;
  /* offset=0x04e4 flags=0x0018001040010015 */ struct FVector OffsetFPPCrouchLocation;
  /* offset=0x04f0 flags=0x0010001040010015 */ struct FRotator OffsetFPPCrouchRotation;
  /* offset=0x04fc flags=0x0018001040010015 */ struct FVector OffsetFPPProneLocation;
  /* offset=0x0508 flags=0x0010001040010015 */ struct FRotator OffsetFPPProneRotation;
  /* offset=0x0514 flags=0x0010001040010015 */ struct FRotator OffsetFPPScopeRotation;
  /* offset=0x0520 flags=0x0018001040010215 */ bool DefaultScopeVisiable;
  /* offset=0x0530 flags=0x002808104008021d */ UAttrModifyComponent* AttrModifierCompoment;
  /* offset=0x0534 flags=0x0020080000010215 */ TArray<struct FWeaponAttrModifyConfig> WeaponAttrModifyConfigList;
  /* offset=0x0554 flags=0x0010000100002220 */ TArray<struct FMeshSynData> synData;

  void ClearWeaponAttrModifier();
  void EnableInfiniteBullets(bool bEnable);
  bool GetADSManualStop();
  float GetAccessoriesDeviationFactor();
  float GetAccessoriesHRecoilFactor();
  float GetAccessoriesRecoveryFactor();
  float GetAccessoriesVRecoilFactor();
  bool GetAutoReloadFromEntity();
  TArray<enum EWeaponAttachmentSocketType> GetAvailableWeaponAttachmentSocketTypeList();
  float GetBaseImpactDamageEntity();
  float GetBulletFireSpeedFromEntity();
  float GetBulletNumSingleShotFromEntity();
  float GetBulletRangeEntity();
  struct FItemDefineID GetBulletTypeFromEntity();
  int32 GetBurstShootBulletsNumFromEntity();
  float GetBurstShootIntervalFromEntity();
  UMeshComponent* GetChildMeshComp(FName compTag);
  bool GetClipHasInfiniteBulletsFromEntity();
  float GetCrossHairBurstSpeed();
  float GetCrossHairInitSize();
  uint8 GetCurReloadMethod();
  float GetCurReloadTime();
  uint8 GetCurSightType();
  struct FSDeviation GetDeviationInfoFromEntity();
  float GetFireSensitivePitchRate();
  float GetFireSensitiveYawRate();
  FName GetFiringSuppressorSocketNameFromEntity();
  float GetGameDeviationFactor();
  struct FWeaponHitPartCoff GetHitPartCoff();
  float GetImpactEffectSkipDistanceFromEntity();
  int32 GetMaxBulletNumInOneClipFromEntity();
  float GetMaxImpactEffectSkipTimeFromEntity();
  FName GetMuzzleSocketNameFromEntity();
  struct FTransform GetMuzzleTransform();
  float GetPreFireTimeFromEntity();
  TArray<struct FSRangeAttenuateConfig> GetRangeAttenuateFromEntity();
  float GetRangeModifier();
  struct FSRecoilInfo GetRecoilInfoFromEntity();
  float GetReferenceDistance();
  struct FTransform GetRelativeMuzzleTransform();
  float GetReloadDurationLoopFromEntity();
  float GetReloadDurationStartFromEntity();
  FName GetReloadTIDName(uint8 method);
  float GetReloadTacticalTimeFromEntity();
  float GetReloadTimeFromEntity();
  float GetReloadTimeMagOutFromEntity();
  UMeshComponent* GetScopeAimCameraTransform(FName SocketName, int32 SocketIndex);
  FName GetShellDropSocketNameFromEntity();
  float GetShootIntervalFromEntity();
  uint8 GetShootTypeFromEntity();
  UShootWeaponEntity* GetShootWeaponEntityComponent();
  FName GetSilencerSocketNameFromEntity();
  float GetTraceDistanceFromEntity();
  float GetWeaponBodyLength();
  uint8 GetWeaponReloadType();
  void LocalSetBulletNumInClip(int32 Count);
  /* CL* */ void NotifyClientNoneShootAction();
  /* SRV */ void NotifyServerNoneShootAction();
  void OnCurBulletChange__DelegateSignature();
  void OnRep_AvatarMeshChanged();
  void OnRep_CurMaxBulletNumChange();
  void OnShootWeaponAutoReloadDelegate__DelegateSignature();
  void OnStartFireDelegate__DelegateSignature();
  void OnStopFireDelegate__DelegateSignature();
  void OnWeaponEquipDelegate__DelegateSignature();
  void OnWeaponReloadEndDelegage__DelegateSignature();
  void OnWeaponReloadStartDelegate__DelegateSignature();
  void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(AActor* InHitActor, struct FSecurityLogHitTargetInfo TargetInfo);
  void OnWeaponShootDelegate__DelegateSignature();
  void OnWeaponShootHitDelegate__DelegateSignature(struct FShootWeaponDamageEvent DamageDetail, struct FBulletHitInfoUploadData HitData, struct FLocalShootHitData LocalHitData);
  void OnWeaponUnEquipDelegate__DelegateSignature();
  /* CL  */ void RPC_Client_SetBulletNumInClip(int32 Count);
  void ResetInitialBulletNumInClip(bool bSetZero);
  /* SRV */ void ServerHandleHitDataArray(TArray<struct FBulletHitInfoUploadData> DataArray, int32 ShootTimes, TArray<struct FLocalShootHitData> ShootHitData);
  void SetAvailableWeaponAttachmentSocketTypeList(TArray<enum EWeaponAttachmentSocketType> List);
  void SetCurReloadMethod(uint8 method);
  void SetCurShootType(uint8 shootType);
  void SetCurrentBulletNumInClipOnClient(int32 Count);
  void SetCurrentBulletNumInClipOnServer(int32 Count);
  void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);
  void ShowDefaultScope(bool bShow);
  void StartDoBarrel();
  void StartFire();
  bool StartFireFilter();
  int32 StartReload();
  void StopFire(uint8 ToState);
  bool StopFireFilter();
};

class ASTExtraShootWeaponBulletBase: public AActor {
  /* offset=0x02a8 flags=0x00180010400a0209 */ UBulletMovementComponent* PMComp;
  /* offset=0x02ac flags=0x0018001040010201 */ bool bLaunchWithGravity;
  /* offset=0x02b0 flags=0x0018001040010201 */ int32 MaxNoGravityRange;
  /* offset=0x02b4 flags=0x0018001040010201 */ float LaunchGravityScale;
  /* offset=0x02b8 flags=0x0018001040010201 */ int32 PunctureTimes;
  /* offset=0x02bc flags=0x001c001040010201 */ UClass<ASTEShootWeaponBulletImpactEffect>* ImpactActorTemplate;
  /* offset=0x02c0 flags=0x001c001040010201 */ UClass<UDamageType>* DamageType;
  /* offset=0x02c4 flags=0x0018001040010201 */ UParticleSystem* NormalTailFX;
  /* offset=0x02c8 flags=0x0018001040010201 */ bool bShowNormalTailFXImpactInfo;
  /* offset=0x02c9 flags=0x0018001040010201 */ bool bDrawImpactNormal;
  /* offset=0x02cc flags=0x0018001040010201 */ UParticleSystem* BeamTailFX;
  /* offset=0x02d0 flags=0x0018001040000014 */ struct FVector ShootDir;
  /* offset=0x02e8 flags=0x0020080010080200 */ FResetBulletDelegate OnResetBullet;
  /* offset=0x02f4 flags=0x0020080010080200 */ FOnImpactDelegate OnBulletImpact;
  /* offset=0x0300 flags=0x0020080010080200 */ FLaunchBulletDelegate OnLaunchBullet;
  /* offset=0x030c flags=0x0028081040080208 */ UParticleSystemComponent* BeamTailFXComp;
  /* offset=0x0310 flags=0x0028081040002200 */ ASTExtraShootWeapon* OwningShootWeapon;
  /* offset=0x0314 flags=0x0028081040002200 */ ASTExtraBaseCharacter* InstigatorCharacter;

  void LaunchBulletDelegate__DelegateSignature();
  void OnImpact(struct FHitResult _ImpactResult);
  void OnImpactDelegate__DelegateSignature(struct FHitResult HitInfo);
  void ResetBulletDelegate__DelegateSignature();
};

class USTExtraShootWeaponComponent: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0018001040010201 */ FName NormalBulletsTrackCompTag;
  /* offset=0x00b8 flags=0x0018001040010201 */ FName ScopeBulletsTrackCompTag;
  /* offset=0x00c0 flags=0x0018001040010201 */ bool bDrawShootLine;
  /* offset=0x00c4 flags=0x0018001040010201 */ float DrawShootLineTime;
  /* offset=0x00c8 flags=0x0018001040010201 */ bool bDrawShootPointOnScreen;
  /* offset=0x00cc flags=0x0018001040010201 */ float DrawShootPointOnScreenTime;
  /* offset=0x00d0 flags=0x0018001040010201 */ float DrawShootPointOnScreenSize;
  /* offset=0x00d4 flags=0x0018001040010201 */ float DrawShootPoint3DSize;
  /* offset=0x00d8 flags=0x001800104008021c */ UBulletTrackComponent* ShootWeaponBulletsTrackComponent;
  /* offset=0x00dc flags=0x001800104008021c */ UBulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;
  /* offset=0x00e0 flags=0x001800104008021c */ UShootWeaponEntity* ShootWeaponEntityComponent;
  /* offset=0x00e4 flags=0x0018001040000214 */ bool bIsContinuousShooting;
  /* offset=0x00e8 flags=0x0018001040000214 */ int32 ContinuousShootingBulletsNum;
  /* offset=0x00ec flags=0x0010000010080200 */ FShootDelegate OnShoot;
  /* offset=0x00f8 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
  /* offset=0x00fc flags=0x0020088100000234 */ TArray<struct FBulletHitInfoUploadData> HitDataArray;

  void OnContinuousShootDelegate__DelegateSignature(int32 BulletsNum);
  void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);
  void OnRep_HitDataArray();
  void OnWeaponBulletChanged();
  void ShootDelegate__DelegateSignature();
};

class USTExtraUIUtils: public UBlueprintFunctionLibrary {
  FString GetBattleID(UUAEUserWidget* UAEUserWidget);
  ASTExtraPlayerState* GetCurPlayerState(UUAEUserWidget* UAEUserWidget);
  FText GetFloatAsStringWithPrecision(float TheFloat, int32 Precision, bool IncludeLeadingZero);
  ASTExtraPlayerController* GetOwningPlayer(UUAEUserWidget* UAEUserWidget);
  ASTExtraPlayerController* GetOwningPlayerNoDefault(UUAEUserWidget* UAEUserWidget);
  FString GetOwningPlayerOpenID(UUAEUserWidget* UAEUserWidget);
  ASTExtraPlayerCharacter* GetOwningPlayerPawnOrVehicleDriver(UUAEUserWidget* UAEUserWidget);
  FString GetOwningPlayerRoleID(UUAEUserWidget* UAEUserWidget);
  void PrintGameLog(FString LogContent);
};

class ASTExtraVehicleBase: public APawn {
  /* offset=0x02f0 flags=0x0018001040000205 */ enum ESTExtraVehicleType VehicleType;
  /* offset=0x02f4 flags=0x0018001040000205 */ UMaterialInterface* BrokenMat;
  /* offset=0x02f8 flags=0x0018001040000205 */ UParticleSystem* PS_Explosion;
  /* offset=0x02fc flags=0x0018001040000205 */ UParticleSystem* PS_OnHitObstacles;
  /* offset=0x0300 flags=0x0018001040000205 */ UTexture2D* VehicleIcon;
  /* offset=0x0304 flags=0x0018001040000205 */ bool bUseSyncAtClient;
  /* offset=0x0305 flags=0x0018001040000205 */ bool bCheckOnGround;
  /* offset=0x0308 flags=0x0018001040000205 */ float LanscapeCheckDistance;
  /* offset=0x030c flags=0x0018001040004200 */ float NetCullingDistanceOnVeryLowDevice;
  /* offset=0x0310 flags=0x0018001040010201 */ float voiceCheckCD;
  /* offset=0x0314 flags=0x0018001040010201 */ float voiceCheckShowCD;
  /* offset=0x0318 flags=0x0018001040010201 */ float VoiceCheckDis;
  /* offset=0x031c flags=0x0018001040010201 */ float voiceUsingHornCheckDis;
  /* offset=0x0320 flags=0x0018001040010201 */ float voiceCheckSpeed;
  /* offset=0x0350 flags=0x0028081140000234 */ enum ESTExtraVehicleHealthState VehicleHealthState;
  /* offset=0x0351 flags=0x0028081140000234 */ bool bIsEngineStarted;
  /* offset=0x0352 flags=0x0028081040000234 */ bool bIsUsingHorn;
  /* offset=0x0354 flags=0x0028081040010215 */ UParticleSystem* PSHurtBloodTemplate;
  /* offset=0x0358 flags=0x0028081040010015 */ struct FVector BloodEffectScale;
  /* offset=0x0364 flags=0x00280810400b021d */ USkeletalMeshComponent* Mesh;
  /* offset=0x0368 flags=0x00280810400b021d */ UVehicleSeatComponent* VehicleSeats;
  /* offset=0x036c flags=0x00280810400b021d */ UVehicleDamageComponent* VehicleDamage;
  /* offset=0x0370 flags=0x00280810400b021d */ UVehicleCommonComponent* VehicleCommon;
  /* offset=0x0374 flags=0x00280810400b021d */ UBuoyancyForceComponent* BuoyancyForceComponent;
  /* offset=0x0378 flags=0x00280810400b021d */ UVehicleSyncComponent* VehicleSyncComponent;
  /* offset=0x037c flags=0x0028081040000205 */ float VehicleHitThreshold;
  /* offset=0x0380 flags=0x0028081040000205 */ float VehicleHitCharacterThreshold;
  /* offset=0x0390 flags=0x0028081040000205 */ float AndroidGLES2TailLightScale;
  /* offset=0x03a4 flags=0x0028081040000205 */ float VehicleEnterDistance;
  /* offset=0x03a8 flags=0x0028081040000205 */ float TickEnterSphereInterval;
  /* offset=0x03b5 flags=0x0028081040000205 */ bool bPeneTerrainProtectionEnabled;
  /* offset=0x03b8 flags=0x0028081040000205 */ float PeneTerrainProtectionInterval;
  /* offset=0x03bc flags=0x0028081040000205 */ float SaveValidTransformInterval;
  /* offset=0x03c0 flags=0x0028081040000005 */ struct FVector PeneTerrainProtectionFixOffset;
  /* offset=0x03f0 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_EngineLoop;
  /* offset=0x03f4 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Boost;
  /* offset=0x03f8 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_FireLoop;
  /* offset=0x03fc flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Landing;
  /* offset=0x0400 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Explosion;
  /* offset=0x0404 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_HitBody;
  /* offset=0x0408 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_HitMetal;
  /* offset=0x040c flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Horn;
  /* offset=0x0410 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Throttle;
  /* offset=0x0450 flags=0x0028081040000205 */ float RPMSfxScale;
  /* offset=0x0454 flags=0x0028081040000205 */ float ThrottleSfxMinSpeed;
  /* offset=0x0458 flags=0x0018001040000220 */ float ReplicatedServerLastTransformUpdateTimeStamp;
  /* offset=0x045c flags=0x0010000010080200 */ FVehicleHealthStateChangedDelegate OnVehicleHealthStateChanged;
  /* offset=0x0468 flags=0x0018001040000205 */ bool bAlwaysIgnoreRideCheck;
  /* offset=0x046c flags=0x0018001040000205 */ float MinRideAngleDgree;

  /* CL* */ void BroadcastClientVehicleExplosionEffect();
  float GetForwardSpeed();
  void HandleOnSeatAttached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void HandleOnSeatChanged(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType LastSeatType, int32 LastSeatIdx, enum ESTExtraVehicleSeatType NewSeatType, int32 NewSeatIdx);
  void HandleOnSeatDetached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void HandleOnVehicleHealthStateChanged(enum ESTExtraVehicleHealthState InVehicleHealthState);
  void InitVehicle(int32 FuelPercent, bool bEngineOn);
  bool IsInWater();
  void OnEngineStart();
  void OnEngineStop();
  void OnRep_IsEngineStarted();
  void OnRep_VehicleHealthState();
  void OnSetTailLightValue(float LightValue);
  void OnUpdateEffects();
  void PlaySfxOneShot(UAkAudioEvent* AkEvent);
};

class USTExtraVehicleMovementComponent4W: public UWheeledVehicleMovementComponent4W {
  /* offset=0x035c flags=0x0010000000000201 */ TArray<struct FWheelHubSetup> WheelHubSetups;
  /* offset=0x0368 flags=0x0010000000000201 */ TArray<FName> ExtraOptBoneNames;
  /* offset=0x0380 flags=0x0020080000202214 */ TArray<UVehicleWheel*> WheelHubs;

  void HandleOnSeatAttached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void HandleOnSeatChanged(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType LastSeatType, int32 LastSeatIdx, enum ESTExtraVehicleSeatType NewSeatType, int32 NewSeatIdx);
  void HandleOnSeatDetached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
};

class USTExtraVehicleUtils: public UObject {
  ASTExtraBaseCharacter* GetCharacter(ASTExtraPlayerController* PC);
  FString GetCharacterInfo(ASTExtraBaseCharacter* CH);
  ASTExtraPlayerController* GetController(ASTExtraBaseCharacter* Character);
  UVehicleUserComponent* GetFirstVehicleUserComp(UWorld* World);
  FString GetVehicleInfo(ASTExtraVehicleBase* VH);
  enum EAvatarDamagePosition GetVehiclePartByBoneName(ASTExtraVehicleBase* Vehicle, FName BoneName);
  UVehicleUserComponent* GetVehicleUserComp(ASTExtraBaseCharacter* Character);
  bool IsDriver(ASTExtraBaseCharacter* Character);
  bool IsPassenger(ASTExtraBaseCharacter* Character);
};

class USTExtraVehicleWheel: public UVehicleWheel {
  /* offset=0x00c8 flags=0x0018001040000001 */ struct FVector SuspensionTravelDir;
  /* offset=0x00d4 flags=0x0018001040000001 */ struct FVector TireForceOffset;
  /* offset=0x00e0 flags=0x0018001040000201 */ uint8 QueryChannel;
};

class ASTExtraWeapon: public AActor {
  /* offset=0x02a8 flags=0x0018001040010201 */ FName WeaponStaticMeshCompTag;
  /* offset=0x02b0 flags=0x0018001040000214 */ UWeaponOwnerProxy* OwnerProxy;
  /* offset=0x02b4 flags=0x0010000010080200 */ FWeaponEffectActionDelegate WeaponEffectActionDelegate;
  /* offset=0x02c0 flags=0x0010000010080200 */ FOnShootWeaponChangeStateDelegate OnShootWeaponChangeState;
  /* offset=0x02cc flags=0x001800104008021c */ UWeaponEntity* WeaponEntityComp;
  /* offset=0x02d0 flags=0x0018001040000214 */ uint8 CurFreshWeaponState;
  /* offset=0x02d8 flags=0x0010000100000024 */ struct FWeaponReconnectReplicateData WeaponReconnectReplicateData;
  /* offset=0x0330 flags=0x00280810400a021d */ USkeletalMeshComponent* WeaponMeshComp;
  /* offset=0x0334 flags=0x00280810400a021d */ USkeletalMeshComponent* WeaponStaticMeshComp;
  /* offset=0x0338 flags=0x0028081040000214 */ uint8 CurWeaponState;
  /* offset=0x033c flags=0x0028081040000234 */ AActor* SimulatedOwnerActor;
  /* offset=0x0340 flags=0x0028081140000234 */ APawn* SimulatedOwnerPawn;

  void ChangeSequenceState(uint8 StateType);
  UItemHandleBase* GetBackpackItemHandle();
  struct FWeaponComponentItemData GetComponentSlotTarget(uint8 Slot);
  struct FItemDefineID GetItemDefineID();
  AActor* GetOwnerActor();
  AController* GetOwnerController();
  FString GetOwnerName();
  APawn* GetOwnerPawn();
  APlayerController* GetOwnerPlayerController();
  UWeaponSpecificHandler* GetSpecificHandler();
  FName GetWeaponAttachSocket();
  UWeaponEntity* GetWeaponEntityComponent();
  UMeshComponent* GetWeaponMeshComponent();
  FString GetWeaponName();
  bool HasComponentSlot(uint8 Slot);
  bool JudgeHasEquipedComponentSlot(uint8 Slot);
  void OnPushTrigger();
  void OnReleaseTrigger();
  void OnRep_SimulatedOwnerPawn();
  void OnRep_WeaponReconnectReplicateData();
  void OnShootWeaponChangeStateDelegate__DelegateSignature(uint8 State);
  void PlayLocalShellDropFX();
  /* CL* */ void RPC_ClientChangeFreshWeaponState(uint8 State);
  void WeaponEffectActionDelegate__DelegateSignature(uint8 Action);
  void WeaponNotifyChangeStateDelegate__DelegateSignature(uint8 State);
};

class ASTExtraWheeledVehicle: public ASTExtraVehicleBase {
  /* offset=0x0470 flags=0x0028081040010201 */ USTVehicleWheelDustConfig* DustConfig;
  /* offset=0x0474 flags=0x0028081040082208 */ UParticleSystemComponent* DustPSC;
  /* offset=0x0484 flags=0x0020088000002208 */ TArray<UParticleSystemComponent*> PSCs;
  /* offset=0x0490 flags=0x00280810400b021d */ USTExtraVehicleMovementComponent4W* VehicleMovement;
  /* offset=0x0498 flags=0x0028081040000205 */ float WheelEffectUpdateInterval;
  /* offset=0x049c flags=0x0028081040000205 */ float LongSlipEffectThreshold;
  /* offset=0x04a0 flags=0x0028081040000205 */ float LatSlipEffectThreshold;
  /* offset=0x04a4 flags=0x0028081040000205 */ int32 ValidTransformMinWheelNum;
  /* offset=0x04a8 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_MoveConcrete;
  /* offset=0x04ac flags=0x0028081040000205 */ UAkAudioEvent* Sfx_MoveMud;
  /* offset=0x04b0 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_MoveWater;
  /* offset=0x04b4 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_Slip;
  /* offset=0x04b8 flags=0x0028081040000205 */ UAkAudioEvent* Sfx_TireExplosion;
  /* offset=0x04bc flags=0x0028081040000205 */ UCurveFloat* Sfx_RPMRelativeCurve;
  /* offset=0x04e4 flags=0x0010001140002020 */ struct FSTReplicatedVehicleState STReplicatedState;

  /* CL* */ void BroadcastClientVehicleWheelDestroyEffect();
  float GetVehicleSpeed();
  void OnRep_ReplicatedState();
  /* SRV */ void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);
};

class USTScreenAppearanceComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000010215 */ TArray<struct FAppearanceMatData> AppearancePresentList;
  /* offset=0x00c0 flags=0x0010001040010015 */ struct FTransform AppearanceMeshRelativeTransform;
  /* offset=0x00f0 flags=0x0048001040080208 */ UStaticMeshComponent* OwnerAppearanceMesh;
  /* offset=0x00f4 flags=0x0040000000000200 */ TArray<struct FAppearanceMatData> CurAppearanceList;

  bool IsScreenAppearancePlaying(FString AppearanceName);
  UMaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, UMaterialInterface* MatToPlay, float LifeSpan);
  UMaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);
  void StopScreenAppearance(FString AppearanceName);
};

class USTVehicleWheelDustConfig: public UDataAsset {
  /* offset=0x0020 flags=0x0010000000010201 */ TArray<struct FSTVehicleWheelDust> WheelDusts;
};

class USafeZone: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000215 */ bool PadLeft;
  /* offset=0x00d6 flags=0x0018001040000215 */ bool PadRight;
  /* offset=0x00d7 flags=0x0018001040000215 */ bool PadTop;
  /* offset=0x00d8 flags=0x0018001040000215 */ bool PadBottom;

  void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);
};

class USafeZoneSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0018001040000215 */ bool bIsTitleSafe;
  /* offset=0x0028 flags=0x0010001000000015 */ struct FMargin SafeAreaScale;
  /* offset=0x0038 flags=0x0018001040000215 */ uint8 HAlign;
  /* offset=0x0039 flags=0x0018001040000215 */ uint8 VAlign;
  /* offset=0x003c flags=0x0010001000000015 */ struct FMargin Padding;
};

class USaveGame: public UObject {
};

class UScaleBox: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000215 */ uint8 Stretch;
  /* offset=0x00d6 flags=0x0018001040000215 */ uint8 StretchDirection;
  /* offset=0x00d8 flags=0x0018001040000215 */ float UserSpecifiedScale;
  /* offset=0x00dc flags=0x0018001040000215 */ bool IgnoreInheritedScale;
  /* offset=0x00dd flags=0x0018001040004215 */ bool bSingleLayoutPass;

  void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);
  void SetStretch(uint8 InStretch);
  void SetStretchDirection(uint8 InStretchDirection);
  void SetUserSpecifiedScale(float InUserSpecifiedScale);
};

class UScaleBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UScene: public UObject {
};

class ASceneCapture: public AActor {
  /* offset=0x02a8 flags=0x0048001040080208 */ UStaticMeshComponent* meshComp;
};

class ASceneCapture2D: public ASceneCapture {
  /* offset=0x02ac flags=0x00480010400a021d */ USceneCaptureComponent2D* CaptureComponent2D;
  /* offset=0x02b0 flags=0x0048001040080208 */ UDrawFrustumComponent* DrawFrustum;

  void OnInterpToggle(bool bEnable);
};

class USceneCaptureComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ enum ESceneCapturePrimitiveRenderMode PrimitiveRenderMode;
  /* offset=0x0274 flags=0x0014008000000208 */ TArray<UPrimitiveComponent*> HiddenComponents;
  /* offset=0x0280 flags=0x0010000000000205 */ TArray<AActor*> HiddenActors;
  /* offset=0x028c flags=0x0014008000000208 */ TArray<UPrimitiveComponent*> ShowOnlyComponents;
  /* offset=0x0298 flags=0x0010000000000205 */ TArray<AActor*> ShowOnlyActors;
  /* offset=0x02a4 flags=0x0018001040000205 */ bool bCaptureEveryFrame;
  /* offset=0x02a5 flags=0x0018001040000205 */ bool bCaptureOnMovement;
  /* offset=0x02a6 flags=0x0018001040000205 */ bool bAlwaysPersistRenderingState;
  /* offset=0x02a8 flags=0x0018041040000201 */ float LODDistanceFactor;
  /* offset=0x02ac flags=0x0018001040000205 */ float MaxViewDistanceOverride;
  /* offset=0x02b0 flags=0x0018001040000215 */ int32 CaptureSortPriority;
  /* offset=0x02b4 flags=0x0010000200000205 */ TArray<struct FEngineShowFlagsSetting> ShowFlagSettings;

  void ClearHiddenComponents();
  void ClearShowOnlyComponents(UPrimitiveComponent* InComponent);
  void HideActorComponents(AActor* InActor);
  void HideComponent(UPrimitiveComponent* InComponent);
  void RemoveShowOnlyActorComponents(AActor* InActor);
  void RemoveShowOnlyComponent(UPrimitiveComponent* InComponent);
  void SetCaptureSortPriority(int32 NewCaptureSortPriority);
  void ShowOnlyActorComponents(AActor* InActor);
  void ShowOnlyComponent(UPrimitiveComponent* InComponent);
};

class USceneCaptureComponent2D: public USceneCaptureComponent {
  /* offset=0x02d8 flags=0x0018001040000205 */ uint8 ProjectionType;
  /* offset=0x02dc flags=0x0018001240000205 */ float FOVAngle;
  /* offset=0x02e0 flags=0x0018001040000205 */ float OrthoWidth;
  /* offset=0x02e4 flags=0x0018001040000205 */ UTextureRenderTarget2D* TextureTarget;
  /* offset=0x02e8 flags=0x0018001240000205 */ uint8 CaptureSource;
  /* offset=0x02e9 flags=0x0018001040000205 */ uint8 CompositeMode;
  /* offset=0x02f0 flags=0x0010000200000005 */ struct FPostProcessSettings PostProcessSettings;
  /* offset=0x07c0 flags=0x0018001240000205 */ float PostProcessBlendWeight;
  /* offset=0x07c4 flags=0x0018041040000204 */ bool bUseCustomProjectionMatrix;
  /* offset=0x07d0 flags=0x0010041040000004 */ struct FMatrix CustomProjectionMatrix;
  /* offset=0x0810 flags=0x0018041040000205 */ bool bEnableClipPlane;
  /* offset=0x0814 flags=0x0018041040000005 */ struct FVector ClipPlaneBase;
  /* offset=0x0820 flags=0x0018041040000005 */ struct FVector ClipPlaneNormal;
  /* offset=0x082c flags=0x0018001000002004 */ uint8 bCameraCutThisFrame:1;

  void AddOrUpdateBlendable(UInterface<UBlendableInterface>* InBlendableObject, float InWeight);
  void CaptureScene();
};

class USceneCaptureComponentCube: public USceneCaptureComponent {
  /* offset=0x02d8 flags=0x0018001040000205 */ UTextureRenderTargetCube* TextureTarget;

  void CaptureScene();
};

class ASceneCaptureCube: public ASceneCapture {
  /* offset=0x02ac flags=0x00480010400a021d */ USceneCaptureComponentCube* CaptureComponentCube;
  /* offset=0x02b0 flags=0x0048001040080208 */ UDrawFrustumComponent* DrawFrustum;

  void OnInterpToggle(bool bEnable);
};

class USceneComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x004c001040002200 */ APhysicsVolume* PhysicsVolume;
  /* offset=0x00b8 flags=0x0048001140080228 */ USceneComponent* AttachParent;
  /* offset=0x00c0 flags=0x0048001140000220 */ FName AttachSocketName;
  /* offset=0x00c8 flags=0x0040008100002228 */ TArray<USceneComponent*> AttachChildren;
  /* offset=0x00d4 flags=0x0040008000002208 */ TArray<USceneComponent*> ClientAttachedChildren;
  /* offset=0x0108 flags=0x0018001140000035 */ struct FVector RelativeLocation;
  /* offset=0x0114 flags=0x0010001140000035 */ struct FRotator RelativeRotation;
  /* offset=0x0120 flags=0x0018001340000035 */ struct FVector RelativeScale3D;
  /* offset=0x0190 flags=0x0018001040000000 */ struct FVector ComponentVelocity;
  /* offset=0x019c flags=0x0048001000002000 */ uint8 bComponentToWorldUpdated:1;
  /* offset=0x019c flags=0x0018041100000025 */ uint8 bAbsoluteLocation:1;
  /* offset=0x019c flags=0x0018041100000025 */ uint8 bAbsoluteRotation:1;
  /* offset=0x019c flags=0x0018041100000025 */ uint8 bAbsoluteScale:1;
  /* offset=0x019c flags=0x0018001100000035 */ uint8 bVisible:1;
  /* offset=0x019c flags=0x0018001000000015 */ uint8 bHiddenInGame:1;
  /* offset=0x019c flags=0x0018041000000005 */ uint8 bShouldUpdatePhysicsVolume:1;
  /* offset=0x019c flags=0x0018001000000000 */ uint8 bBoundsChangeTriggersStreamingDataRebuild:1;
  /* offset=0x019d flags=0x0018041000000005 */ uint8 bUseAttachParentBound:1;
  /* offset=0x019d flags=0x0018041000000005 */ uint8 bShouldUpdateOverLaps:1;
  /* offset=0x019d flags=0x0048001020000000 */ uint8 bAbsoluteTranslation:1;
  /* offset=0x019e flags=0x0018001040000215 */ uint8 Mobility;
  /* offset=0x019f flags=0x0018041040000215 */ uint8 DetailMode;
  /* offset=0x01e0 flags=0x0010000010080200 */ FPhysicsVolumeChanged PhysicsVolumeChangedDelegate;

  void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
  bool DoesSocketExist(FName InSocketName);
  TArray<FName> GetAllSocketNames();
  USceneComponent* GetAttachParent();
  FName GetAttachSocketName();
  USceneComponent* GetChildComponent(int32 ChildIndex);
  void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*> Children);
  struct FVector GetComponentVelocity();
  struct FVector GetForwardVector();
  int32 GetNumChildrenComponents();
  void GetParentComponents(TArray<USceneComponent*> Parents);
  APhysicsVolume* GetPhysicsVolume();
  struct FTransform GetRelativeTransform();
  struct FVector GetRightVector();
  struct FVector GetSocketLocation(FName InSocketName);
  struct FQuat GetSocketQuaternion(FName InSocketName);
  struct FRotator GetSocketRotation(FName InSocketName);
  struct FTransform GetSocketTransform(FName InSocketName, uint8 TransformSpace);
  struct FVector GetUpVector();
  bool IsAnySimulatingPhysics();
  bool IsSimulatingPhysics(FName BoneName);
  bool IsVisible();
  void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddLocalTransform(struct FTransform DeltaTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_AddWorldTransform(struct FTransform DeltaTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  bool K2_AttachTo(USceneComponent* InParent, FName InSocketName, uint8 AttachType, bool bWeldSimulatedBodies);
  bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, enum EAttachmentRule LocationRule, enum EAttachmentRule RotationRule, enum EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
  void K2_DetachFromComponent(enum EDetachmentRule LocationRule, enum EDetachmentRule RotationRule, enum EDetachmentRule ScaleRule, bool bCallModify);
  struct FVector K2_GetComponentLocation();
  struct FRotator K2_GetComponentRotation();
  struct FVector K2_GetComponentScale();
  struct FTransform K2_GetComponentToWorld();
  void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetRelativeTransform(struct FTransform NewTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void K2_SetWorldTransform(struct FTransform NewTransform, bool bSweep, struct FHitResult SweepHitResult, bool bTeleport);
  void OnRep_AttachChildren();
  void OnRep_AttachParent();
  void OnRep_AttachSocketName();
  void OnRep_Transform();
  void OnRep_Visibility(bool OldValue);
  void ResetRelativeTransform();
  void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
  void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
  void SetRelativeScale3D(struct FVector NewScale3D);
  void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
  void SetWorldScale3D(struct FVector NewScale);
  bool SnapTo(USceneComponent* InParent, FName InSocketName);
  void ToggleVisibility(bool bPropagateToChildren);
};

class UScreenSettings_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Btn_OK;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0244 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_Bg2;
  /* offset=0x024c flags=0x000a0010c008020c */ UCanvasPanel* Select1;
  /* offset=0x0250 flags=0x000a0010c008020c */ UCanvasPanel* Select2;
  /* offset=0x0254 flags=0x000a0010c008020c */ UCanvasPanel* Select3;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityDesc1;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityDesc2;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityDesc3;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityTitle1;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityTitle2;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock_QualityTitle3;
  /* offset=0x0270 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock_Top;
  /* offset=0x0274 flags=0x0000000000010005 */ struct FSlateColor White;
  /* offset=0x0290 flags=0x0000000000010005 */ struct FSlateColor Yellow;

  void BndEvt__Btn_OK_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void ExecuteUbergraph_ScreenSettings_UIBP(int32 EntryPoint);
  void InitDeviceData(FString CallFunc_GetLocalizeString_textValue, FString CallFunc_GetLocalizeString_textValue2, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetLocalizeString_textValue3, FText CallFunc_Conv_StringToText_ReturnValue3, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
  void UIHide();
  void UIShow(USaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsFirstLogin_isFirst, UPlayerPrefs_C* K2Node_DynamicCast_AsPlayer_Prefs, bool K2Node_DynamicCast_bSuccess);
  void isFirstLogin(bool isFirst, USaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, UPlayerPrefs_C* K2Node_DynamicCast_AsPlayer_Prefs, bool K2Node_DynamicCast_bSuccess, UPlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue);
};

class UScreenshotMaker: public UObject {
  int32 GetSaveStatus();
  bool HasCaptured(FString pathStr);
  FString MakeBugReprotPic(bool isShowUI);
  FString MakePicture(bool isShowUI);
  void ReMakePicture(FString pathStr, struct FVector4 Vector4);
  bool SaveToPhotosAlbum(FString pathStr);
  bool SaveToPhotosAlbumEx(FString pathStr);
};

class UScriptBlueprint: public UBlueprint {
  /* offset=0x0154 flags=0x0010000000000200 */ TArray<uint8> ByteCode;
  /* offset=0x0160 flags=0x0018000000000200 */ FString SourceCode;
};

class UScriptBlueprintGeneratedClass: public UBlueprintGeneratedClass {
  /* offset=0x01d4 flags=0x0010000000000200 */ TArray<uint8> ByteCode;
  /* offset=0x01e0 flags=0x0018000000000200 */ FString SourceCode;
  /* offset=0x01ec flags=0x0010000000000200 */ TArray<UProperty*> ScriptProperties;
};

class UScriptContext: public UObject {
  void CallScriptFunction(FString FunctionName);
};

class UScriptContextComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x0028081040000200 */ ULuaStateWrapper* OwningLuaStateWrapper;

  void CallScriptFunction(FString FunctionName);
  void FetchAllScriptPropertyValues();
  void FetchOneScriptPropertyValues(FString ParamName);
  void PushAllScriptPropertyValues();
  void PushOneScriptPropertyValues(FString ParamName);
};

class UScriptHelperClient: public UObject {
  void ClipBoardCopy(FString Text);
  void CloseVideoListDialog();
  void ConnectToURL(UInterface<UClientNetInterface>* ClientNetInterface, FString URL);
  void Disconnect(UInterface<UClientNetInterface>* ClientNetInterface);
  FString EncryptUID(FString sUid, FString sKey);
  void EnterBattle(UGameFrontendHUD* GameFrontendHUD, FString HostnameOrIP, uint32 Port, uint32 PlayerKey, FString PlayerName, FString PacketKey, uint64 gameId);
  void EnterFightChat(UGameFrontendHUD* GameFrontendHUD, FString gid);
  void ExitGame();
  void GEMEventReport(UGameFrontendHUD* GameFrontendHUD, FString EventKey, FString EventValue);
  void GameJoyClearMomentsVideo();
  void GameJoyEndMomentsRecord();
  void GameJoyGenerateMomentsVideo(TArray<struct FTimeStamp> shortVideosTimeStampList, TArray<struct FTimeStamp> largeVideosTimeStampList, FString Title, TMap<FString, FString> extraInfo);
  bool GameJoyIsSDKFeatureSupport();
  void GameJoySetCurrentRecorderPosition(float X, float Y);
  void GameJoySetMomentRecordSwitchOn(int32 isOn);
  void GameJoySetVideoQuality(int32 quality);
  void GameJoyStartManualRecord();
  void GameJoyStartMomentsRecord();
  void GameJoyStopManualRecord();
  void GameJoySwitchOn(int32 isOn);
  void GenerateQRImage(UInterface<UClientNetInterface>* ClientNetInterface, int32 Tag, int32 Size, FString content, FString logoPath);
  FString GetAccessToken(UInterface<UClientNetInterface>* ClientNetInterface);
  FString GetAppVersion();
  FString GetCpuType();
  int32 GetCurrentLanguage_LuaState();
  FString GetCurrentOpenedUI();
  int32 GetCurrentZoneID();
  FString GetDSVersion(UGameFrontendHUD* GameFrontendHUD);
  FString GetDevicePlatformName();
  FString GetEmulatorName();
  FString GetEncodeUrl(FString URL);
  float GetFPS();
  FString GetGLType();
  FString GetGLVersion();
  FString GetGameStatus(UGameFrontendHUD* GameFrontendHUD);
  struct FGroupInfoWrapper GetGroupInfo(UInterface<UClientNetInterface>* ClientNetInterface, int32 SnsAction);
  FString GetInstallChannelID(UInterface<UClientNetInterface>* ClientNetInterface);
  FString GetIpAddr();
  int32 GetLocalTimezone_LuaState();
  int32 GetLoginChannel(UInterface<UClientNetInterface>* ClientNetInterface);
  int32 GetMemorySize();
  int32 GetMemoryStats_LuaState();
  FString GetNetWorkType();
  FString GetOSVersion();
  FString GetPhoneDeviceID();
  FString GetPhoneType();
  FString GetPingReportData(UGameFrontendHUD* GameFrontendHUD);
  FString GetRegisterChannelID(UInterface<UClientNetInterface>* ClientNetInterface);
  int32 GetScreenDensity();
  int32 GetScreenHight();
  int32 GetScreenWidth();
  int32 GetTableCount(FString TableName);
  int32 GetTableData_LuaState();
  int32 GetTable_LuaState();
  FString GetTelecomSvr();
  FString GetUnrealNetworkStatus(UGameFrontendHUD* GameFrontendHUD);
  bool HasActiveWifi();
  int32 HasNotice_LuaState();
  void HelpshiftClearUnreadMessgesCount();
  int32 HelpshiftGetUnreadMessgesCount();
  void HelpshiftRequestUnreadMessagesCount();
  void HelpshiftShowConversion();
  void InitLoginAccount(UInterface<UClientNetInterface>* ClientNetInterface, uint64 AccUin, FString AccPswd);
  void InstallNewApp(UGameFrontendHUD* GameFrontendHUD);
  bool IsConnected(UInterface<UClientNetInterface>* ClientNetInterface);
  bool IsEmulator();
  bool IsEmulatorWhenInit();
  bool IsInstallQQ(UInterface<UClientNetInterface>* ClientNetInterface);
  bool IsInstallWX(UInterface<UClientNetInterface>* ClientNetInterface);
  void JoinLbsVoiceRoom(UGameFrontendHUD* GameFrontendHUD, FString lbsRoomName, FString userId);
  void JoinVoiceRoom(UGameFrontendHUD* GameFrontendHUD, FString roomName, FString userId);
  void Login(UInterface<UClientNetInterface>* ClientNetInterface, uint32 Channel);
  void Logout(UInterface<UClientNetInterface>* ClientNetInterface);
  FString MD5HashAnsiString(FString str);
  void OnBattleResult(UGameFrontendHUD* GameFrontendHUD, struct FBattleResultData BattleResultData);
  void OnFilterFinish(UGameFrontendHUD* GameFrontendHUD, FString filterText);
  void OnInviteNextBattle(UGameFrontendHUD* GameFrontendHUD, FString gid, FString Name);
  void OnNotifyFightFriendChat(UGameFrontendHUD* GameFrontendHUD, struct FFightFriendChat Data);
  void OpenURL(FString URL);
  void QQAddFriend(UInterface<UClientNetInterface>* ClientNetInterface, FString OpenID, FString Desc, FString Message);
  void QQShare(UInterface<UClientNetInterface>* ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _imgUrl, FString _url, int32 _shareScene);
  void QQShareToFriend(UInterface<UClientNetInterface>* ClientNetInterface, int32 act, FString OpenID, FString Title, FString Desc, FString targetUrl, FString imgUrl, FString previewText, FString gameTag, FString msdkExtInfo);
  void QQShareWithPhoto(UInterface<UClientNetInterface>* ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, int32 _shareScene);
  void QQShareWithPhotoExtra(UInterface<UClientNetInterface>* ClientNetInterface, FString _imgPath, FString _extraScene, FString _messageExt, int32 _shareScene);
  void QuitFightChat(UGameFrontendHUD* GameFrontendHUD);
  void QuitLbsVoiceRoom(UGameFrontendHUD* GameFrontendHUD);
  void QuitVoiceRoom(UGameFrontendHUD* GameFrontendHUD);
  void ReplyInvite(UGameFrontendHUD* GameFrontendHUD, FString gid, bool bReply);
  void ReportEventLoadingCompleted();
  void ReportEventRegisterCompleted();
  void ReturnToLobby(UGameFrontendHUD* GameFrontendHUD);
  void SendDirtyToFilter(UGameFrontendHUD* GameFrontendHUD, FString dirtyString);
  void SendLobbyChat(UGameFrontendHUD* GameFrontendHUD, FString gid, FString content);
  bool SetFontStyle(FString StyleName, int32 FontSize, FString FontPath, FString FontColor, bool UseShadow);
  void SetGameSrvID(UGameFrontendHUD* GameFrontendHUD, int32 GameSrvID);
  void SetGameStatusMap(UGameFrontendHUD* GameFrontendHUD, TMap<FName, FString> GameStatusMap);
  bool SetImageStyle(FString StyleName, int32 ImageSize, FString imagePath, FString ImageColor);
  bool SetLinkStyle(FString StyleName, int32 FontSize, FString FontPath, FString FontColor, bool ShowUnderline);
  void SetPlayerBaseInfo(UGameFrontendHUD* GameFrontendHUD, FString OpenID, uint64 RoleID, FString PlayerName, FString HeadIconUrl);
  void ShowScreenDebugMessage(FString Message);
  void ShowVideoListDialog();
  void ShutdownUnrealNetwork(UGameFrontendHUD* GameFrontendHUD);
  bool StartGrayUpdate(UGameFrontendHUD* GameFrontendHUD);
  void SuspendSound();
  void SwitchSceneCamera(UGameFrontendHUD* GameFrontendHUD, FString SceneCameraName, float BlendTime, bool bForce);
  void SwitchUser(UInterface<UClientNetInterface>* ClientNetInterface, bool useExternalAccount);
  void TApmDisconnectReport(UGameFrontendHUD* GameFrontendHUD, int32 EventID);
  void WakeupFromSuspendSound();
  void WeChatShareWithMiniApp(UInterface<UClientNetInterface>* ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _webpageUrl, FString _userName, FString _path, FString _messageExt, FString _messageAction, int32 _shareScene);
  void WechatCreateGroup(UInterface<UClientNetInterface>* ClientNetInterface, FString unionId, FString chatRoomName, FString chatRoomNickName);
  void WechatJoinGroup(UInterface<UClientNetInterface>* ClientNetInterface, FString unionId, FString chatRoomNickName);
  void WechatQueryGroup(UInterface<UClientNetInterface>* ClientNetInterface, FString unionId, FString OpenIdList);
  void WechatShare(UInterface<UClientNetInterface>* ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _mediaTagName, FString _messageExt);
  void WechatShareToFriend(UInterface<UClientNetInterface>* ClientNetInterface, FString OpenID, FString Title, FString Desc, FString mediaId, FString messageExt, FString mediaTagName, FString msdkExtInfo);
  void WechatShareWithPhoto(UInterface<UClientNetInterface>* ClientNetInterface, FString _imgPath, FString _mediaTagName, FString _messageExt, FString _messageAction, int32 _shareScene);
  void WechatShareWithUrlInfo(UInterface<UClientNetInterface>* ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _url, int32 _shareScene);
};

class UScriptHelperEngine: public UObject {
};

class UScriptHelperNetInterface: public UObject {
  void Connect(UInterface<UNetInterface>* NetInterface, int32 Timeout);
  void Disconnect(UInterface<UNetInterface>* NetInterface);
  int32 SendPacket_LuaState();
};

class UScriptPluginComponent: public UObject {
  bool CallScriptFunction(FString FunctionName);
};

class UScriptProfiler: public UObject {
};

class UScriptStruct: public UStruct {
};

class AScriptTestActor: public AActor {
  /* offset=0x02a8 flags=0x0018000000000205 */ FString TestString;
  /* offset=0x02b4 flags=0x0018001040000205 */ float TestValue;
  /* offset=0x02b8 flags=0x0018001040000205 */ bool TestBool;

  float TestFunction(float InValue, float InFactor, bool bMultiply);
};

class UScriptViewportClient: public UObject {
};

class UScrollBar: public UWidget {
  /* offset=0x00c8 flags=0x0010000000000005 */ struct FScrollBarStyle WidgetStyle;
  /* offset=0x0478 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x047c flags=0x0018001040000201 */ bool bAlwaysShowScrollbar;
  /* offset=0x047d flags=0x0018001040000201 */ uint8 Orientation;
  /* offset=0x0480 flags=0x0018001040000001 */ struct FVector2D Thickness;

  void SetState(float InOffsetFraction, float InThumbSizeFraction);
};

class UScrollBarWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FScrollBarStyle ScrollBarStyle;
};

class UScrollBox: public UPanelWidget {
  /* offset=0x00d8 flags=0x0010000000000005 */ struct FScrollBoxStyle WidgetStyle;
  /* offset=0x0280 flags=0x0010000000000005 */ struct FScrollBarStyle WidgetBarStyle;
  /* offset=0x0630 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x0634 flags=0x0018001060000200 */ USlateWidgetStyleAsset* BarStyle;
  /* offset=0x0638 flags=0x0018001040000215 */ uint8 Orientation;
  /* offset=0x0639 flags=0x0018001040000215 */ enum ESlateVisibility ScrollBarVisibility;
  /* offset=0x063a flags=0x0018001040000215 */ enum EConsumeMouseWheel ConsumeMouseWheel;
  /* offset=0x063c flags=0x0018001040000015 */ struct FVector2D ScrollbarThickness;
  /* offset=0x0644 flags=0x0018001040000215 */ bool AlwaysShowScrollbar;
  /* offset=0x0645 flags=0x0018001040000215 */ bool AllowOverscroll;
  /* offset=0x0646 flags=0x0018001040000215 */ enum EDescendantScrollDestination NavigationDestination;
  /* offset=0x0648 flags=0x0018001040000215 */ float NavigationScrollPadding;
  /* offset=0x064c flags=0x0018001040000215 */ bool bAllowRightClickDragScrolling;
  /* offset=0x0650 flags=0x0010000010080200 */ FOnUserScrolledEvent OnUserScrolled;

  float GetScrollOffset();
  void ScrollToEnd();
  void ScrollToStart();
  void ScrollWidgetIntoView(UWidget* WidgetToFind, bool AnimateScroll, enum EDescendantScrollDestination ScrollDestination);
  void SetAllowOverscroll(bool NewAllowOverscroll);
  void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);
  void SetOrientation(uint8 NewOrientation);
  void SetScrollBarVisibility(enum ESlateVisibility NewScrollBarVisibility);
  void SetScrollOffset(float NewScrollOffset);
  void SetScrollbarThickness(struct FVector2D NewScrollbarThickness);
};

class UScrollBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
};

class UScrollBoxWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FScrollBoxStyle ScrollBoxStyle;
};

class USecurityLogWeaponCollector: public UActorComponent {
  bool IsInADSAimState();
  void OnCharacterAimModeChanged(uint8 Mode);
  void OnCharacterShootTarget(AActor* InHitActor, struct FSecurityLogHitTargetInfo TargetInfo);
  void OnCharacterUsingWeaponChanged(uint8 TargetChangeSlot);
  void OnCharacterWeaponShootHit(struct FShootWeaponDamageEvent DamageDetail, struct FBulletHitInfoUploadData HitData, struct FLocalShootHitData LocalHitData);
};

class USecuryInfoComponent: public UActorComponent {
  /* SRV */ void ReportAimFlow(struct FAimFlow AimFlow);
  /* SRV */ void ReportAttackFlow(struct FAttackFlow AttackFlow);
  /* SRV */ void ReportCircleFlow(struct FClientCircleFlow CircleFlow);
  /* SRV */ void ReportGameBaseInfo(struct FGameBaseInfo BaseInfo);
  /* SRV */ void ReportGameEndFlow(struct FClientGameEndFlow GameEndFlow);
  /* SRV */ void ReportGameStartFlow(struct FClientGameStartFlow GameStartFlow);
  /* SRV */ void ReportHurtFlow(struct FHurtFlow HurtFlow);
};

class USelection: public UObject {
};

class USetProperty: public UProperty {
};

class USettingConfig_C: public USaveGame {
  /* offset=0x0020 flags=0x0008001040000205 */ int32 CrossHairColor;
  /* offset=0x0024 flags=0x0000001040000205 */ bool AimAssist;
  /* offset=0x0025 flags=0x0000001040000205 */ bool HitFeedBack;
  /* offset=0x0026 flags=0x0000001040000205 */ bool LeftRightShoot;
  /* offset=0x0027 flags=0x0000001040000205 */ bool IntelligentDrugs;
  /* offset=0x0028 flags=0x0008001040000205 */ int32 LeftHandFire;
  /* offset=0x002c flags=0x0008001040000205 */ int32 Gyroscope;
  /* offset=0x0030 flags=0x0008001040000205 */ int32 ArtQuality;
  /* offset=0x0034 flags=0x0008001040000205 */ float ViewPercentage;
  /* offset=0x0038 flags=0x0008001040010205 */ int32 FireMode;
  /* offset=0x003c flags=0x0008001040010205 */ int32 VehicleControlMode;
  /* offset=0x0040 flags=0x0000001040010205 */ bool JoystickLRSwitcher;
  /* offset=0x0041 flags=0x0000001040010205 */ bool ButtonLRSwitcher;
  /* offset=0x0044 flags=0x0008001040010205 */ int32 CameraLensSensibility;
  /* offset=0x0048 flags=0x0008001040010205 */ float CamLensSenNoneSniper;
  /* offset=0x004c flags=0x0008001040010205 */ float CamLensSenRedDotSniper;
  /* offset=0x0050 flags=0x0008001040010205 */ float CamLensSen2XSniper;
  /* offset=0x0054 flags=0x0008001040010205 */ float CamLensSen4XSniper;
  /* offset=0x0058 flags=0x0008001040010205 */ float CamLensSen8XSniper;
  /* offset=0x005c flags=0x0008001040010205 */ int32 FireCameraLensSensibility;
  /* offset=0x0060 flags=0x0008001040010205 */ float FireCamLensSenNoneSniper;
  /* offset=0x0064 flags=0x0008001040010205 */ float FireCamLensSenRedDotSniper;
  /* offset=0x0068 flags=0x0008001040010205 */ float FireCamLensSen2XSniper;
  /* offset=0x006c flags=0x0008001040010205 */ float FireCamLensSen4XSniper;
  /* offset=0x0070 flags=0x0008001040010205 */ float FireCamLensSen8XSniper;
  /* offset=0x0074 flags=0x0008001040010205 */ int32 GyroscopeSensibility;
  /* offset=0x0078 flags=0x0008001040010205 */ float GyroscopeSenNoneSniper;
  /* offset=0x007c flags=0x0008001040010205 */ float GyroscopeSenRedDotSniper;
  /* offset=0x0080 flags=0x0008001040010205 */ float GyroscopeSen2XSniper;
  /* offset=0x0084 flags=0x0008001040010205 */ float GyroscopeSen4XSniper;
  /* offset=0x0088 flags=0x0008001040010205 */ float GyroscopeSen8XSniper;
  /* offset=0x008c flags=0x0000001040010205 */ bool MainVolumSwitcher;
  /* offset=0x0090 flags=0x0008001040010205 */ float MainVolumValue;
  /* offset=0x0094 flags=0x0000001040010205 */ bool EffectVolumSwitcher;
  /* offset=0x0098 flags=0x0008001040010205 */ float EffectVolumValue;
  /* offset=0x009c flags=0x0000001040010205 */ bool UIVolumSwitcher;
  /* offset=0x00a0 flags=0x0008001040010205 */ float UIVolumValue;
  /* offset=0x00a4 flags=0x0000001040010205 */ bool BGMVolumSwitcher;
  /* offset=0x00a8 flags=0x0008001040010205 */ float BGMVolumValue;
  /* offset=0x00ac flags=0x0000001040010205 */ bool VoiceSwitcher;
  /* offset=0x00b0 flags=0x0008001040010205 */ int32 VoiceChannel;
  /* offset=0x00b4 flags=0x0000001040010205 */ bool MicphoneVolumSwitcher;
  /* offset=0x00b8 flags=0x0008001040010205 */ float MicphoneVolumValue;
  /* offset=0x00bc flags=0x0000001040010205 */ bool SpeakerVolumSwitcher;
  /* offset=0x00c0 flags=0x0008001040010205 */ float SpeakerVolumValue;
  /* offset=0x00c4 flags=0x0000001040010205 */ bool AutoPickupSwitcher;
  /* offset=0x00c5 flags=0x0000001040010205 */ bool DisableAutoPickupSwitcher;
  /* offset=0x00c6 flags=0x0000001040010205 */ bool AkeyPickupSwitcher;
  /* offset=0x00c7 flags=0x0000001040010205 */ bool AutoPickupGun;
  /* offset=0x00c8 flags=0x0000001040010205 */ bool AutoPickupBullet;
  /* offset=0x00c9 flags=0x0000001040010205 */ bool AutoPickupPart;
  /* offset=0x00ca flags=0x0000001040010205 */ bool AutoPickupShieldBag;
  /* offset=0x00cb flags=0x0000001040010205 */ bool AutoPickupDrug;
  /* offset=0x00cc flags=0x0000001040010205 */ bool BandageSwitcher;
  /* offset=0x00cd flags=0x0000001040010205 */ bool MedicalSwitcher;
  /* offset=0x00ce flags=0x0000001040010205 */ bool AnodyneSwitcher;
  /* offset=0x00cf flags=0x0000001040010205 */ bool EnergyDrinksSwitcher;
  /* offset=0x00d0 flags=0x0000001040010205 */ bool AdrenalineSwitcher;
  /* offset=0x00d1 flags=0x0000001040010205 */ bool AutoPickupGrenade;
  /* offset=0x00d2 flags=0x0000001040010205 */ bool ShouLiuDanSwitcher;
  /* offset=0x00d3 flags=0x0000001040010205 */ bool YanWuDanSwitcher;
  /* offset=0x00d4 flags=0x0000001040010205 */ bool StunBombSwitcher;
  /* offset=0x00d5 flags=0x0000001040010205 */ bool FireBombSwitcher;
  /* offset=0x00d8 flags=0x0008001040010205 */ int32 LimitBandage;
  /* offset=0x00dc flags=0x0008001040010205 */ int32 LimitMedical;
  /* offset=0x00e0 flags=0x0008001040010205 */ int32 LimitAnodyne;
  /* offset=0x00e4 flags=0x0008001040010205 */ int32 LimitEnergyDrinks;
  /* offset=0x00e8 flags=0x0008001040010205 */ int32 LimitAdrenaline;
  /* offset=0x00ec flags=0x0008001040010205 */ int32 LimitShouliudan;
  /* offset=0x00f0 flags=0x0008001040010205 */ int32 LimitYanwudan;
  /* offset=0x00f4 flags=0x0008001040010205 */ int32 LimitZhenbaodan;
  /* offset=0x00f8 flags=0x0008001040010205 */ int32 LimitRanshaodan;
  /* offset=0x00fc flags=0x0008001040010205 */ int32 LimitBullet9mm;
  /* offset=0x0100 flags=0x0008001040010205 */ int32 LimitBullet7_62mm;
  /* offset=0x0104 flags=0x0008001040010205 */ int32 Limit12koujing;
  /* offset=0x0108 flags=0x0008001040010205 */ int32 Limit45koujing;
  /* offset=0x010c flags=0x0008001040010205 */ int32 Limit300magenandanyao;
  /* offset=0x0110 flags=0x0008001040010205 */ int32 Limitbolt;
  /* offset=0x0114 flags=0x0008001040010205 */ int32 LimitBullet5;
  /* offset=0x0118 flags=0x0000001040010205 */ bool 3DTouchSwitcher;
  /* offset=0x011c flags=0x0008001040010205 */ int32 FPSLevel;
  /* offset=0x0120 flags=0x0008001040000205 */ int32 ArtStyle;
  /* offset=0x0124 flags=0x0008001040010205 */ int32 RecordTipShowLastTime;
  /* offset=0x0128 flags=0x0000000000000205 */ TMap<FString, struct FDateTime> XinyueLastClickTime;
  /* offset=0x0164 flags=0x0000000000000205 */ TMap<FString, struct FDateTime> HuatiLastClickTime;
  /* offset=0x01a0 flags=0x0000001040010205 */ bool MomentSwitch;
  /* offset=0x01a1 flags=0x0000001040010205 */ bool FreeModeSwitch;
  /* offset=0x01a2 flags=0x0000001040010205 */ bool HDModeSwitch;
  /* offset=0x01a4 flags=0x0000000000000205 */ TMap<FString, struct FDateTime> CollectEquipClickTime;
  /* offset=0x01e0 flags=0x0000001040010205 */ bool IsSimulatorFirstStartup;
  /* offset=0x01e4 flags=0x0008000000010205 */ FString XGLanguageTag;
  /* offset=0x01f0 flags=0x0008000000010205 */ FString XGTimezoneTag;
  /* offset=0x01fc flags=0x0008000000010205 */ FString currentLanguage;
};

class UShaderPlatformQualitySettings: public UObject {
  /* offset=0x001c flags=0x0010001000004001 */ struct FMaterialQualityOverrides QualityOverrides;
};

class UShadowMapTexture2D: public UTexture2D {
  /* offset=0x00c0 flags=0x0018001040000200 */ uint8 ShadowmapFlags;
};

class UShapeComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018041040000015 */ struct FColor ShapeColor;
  /* offset=0x05c4 flags=0x0018001040202200 */ UBodySetup* ShapeBodySetup;
  /* offset=0x05c8 flags=0x0018001000000000 */ uint8 bDrawOnlyIfSelected:1;
  /* offset=0x05c8 flags=0x0018001000000000 */ uint8 bShouldCollideWhenPlacing:1;
  /* offset=0x05c8 flags=0x0018001000000001 */ uint8 bDynamicObstacle:1;
  /* offset=0x05cc flags=0x001c001040000201 */ UClass<UNavArea>* AreaClass;
};

class UShare_CJ_LogicBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ USpring_FukubukuroUIBP_C* Spring_FukubukuroUIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UButton* btn_share;
  /* offset=0x023c flags=0x0008001040010205 */ UButton* btn_close;
  /* offset=0x0240 flags=0x0008001040010a05 */ Abp_share_cjhb_C* bp_share_cjhb;
  /* offset=0x0244 flags=0x0008001040010205 */ UButton* btn_qqshare;
  /* offset=0x0248 flags=0x0008001040010205 */ UButton* btn_wxshare;

  void Construct();
  void DelayShowUI(FText CallFunc_Conv_StringToText_ReturnValue);
  void ExecuteUbergraph_Share_CJ_LogicBP(int32 EntryPoint, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, Abp_share_cjhb_C* K2Node_DynamicCast_AsBp_Share_Cjhb, bool K2Node_DynamicCast_bSuccess, Abp_global_C* CallFunc_GetGlobalData_globalObj, bool K2Node_SwitchInteger_CmpSuccess);
  void HideUI();
  void OnClickQQShare();
  void OnClickWXShare();
  void OnCloseUI();
  void ShowUI(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
};

class UShare_ExcitingPartyBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UShareinterface_UIBP_C* Shareinterface_UIBP;
  /* offset=0x0238 flags=0x000a0010c008020c */ USharemore_UIBP_C* Sharemore_UIBP;
  /* offset=0x023c flags=0x0000001040010205 */ bool IsTick;
  /* offset=0x0240 flags=0x0008000000010205 */ FString pathStr;
  /* offset=0x024c flags=0x0000001040010205 */ bool isClickQQFriend;
  /* offset=0x024d flags=0x0000001040010205 */ bool isClickQQZone;
  /* offset=0x024e flags=0x0000001040010205 */ bool isClickWXFriend;
  /* offset=0x024f flags=0x0000001040010205 */ bool isClickWXZone;
  /* offset=0x0250 flags=0x0008001040010a05 */ Abp_share_exciting_party_C* BpShareExcitingParty;
  /* offset=0x0254 flags=0x0008001040010205 */ UWidgetSwitcher* switcher;
  /* offset=0x0258 flags=0x0000000000010205 */ TArray<UPromotionNumber_BP_C*> NumberList;
  /* offset=0x0264 flags=0x0008001040010205 */ UImage* PartyBG;
  /* offset=0x0268 flags=0x0000001040010205 */ bool isClickSave;

  void AddNumberToList(UPromotionNumber_BP_C* Num, int32 CallFunc_Array_Add_ReturnValue);
  void EventShareBtn(bool CallFunc_SaveToPhotosAlbum_ReturnValue);
  void ExecuteUbergraph_Share_ExcitingPartyBP(int32 EntryPoint, FString CallFunc_MakePicture_ReturnValue, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_HasCaptured_ReturnValue, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, struct FVector2D CallFunc_LocalToAbsolute_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_GetAbsoluteSize_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, struct FVector4 K2Node_MakeStruct_Vector4);
  void InitUI(FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_share_exciting_party_C* K2Node_DynamicCast_AsBp_Share_Exciting_Party, bool K2Node_DynamicCast_bSuccess);
  void LoadIconHead();
  void MakePic();
  void OnClose();
  void OnQQFriend();
  void OnQQZone();
  void OnSaveLocal();
  void OnWXFriend();
  void OnWXZone();
  void RetSetClickFlag();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIHide();
  void UIShow();
  void UpdateContent(FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UPromotionNumber_BP_C* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, UObject* CallFunc_UIGetResWithPath_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
};

class UShare_Normal_CJ_LogicBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UActivity_RedEnvelopesUIBP_C* Activity_RedEnvelopesUIBP;
  /* offset=0x0238 flags=0x0008001040010a05 */ Abp_share_normal_cjhb_C* cj_logic_bp;
  /* offset=0x023c flags=0x0008001040010205 */ int32 TotalCJHBMoney;

  void CJHongbaoClicked(UWidget* CallFunc_GetActiveWidget_ReturnValue, UButton* K2Node_DynamicCast_AsButton, bool K2Node_DynamicCast_bSuccess);
  void Construct();
  void DelayShowUI(int32 CallFunc_Multiply_IntInt_ReturnValue, int32 CallFunc_Multiply_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int32 CallFunc_FFloor_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UWidget* CallFunc_GetWidgetAtIndex_ReturnValue, UWidget* CallFunc_GetWidgetAtIndex_ReturnValue2, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue3, int32 CallFunc_Multiply_IntInt_ReturnValue3, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue4, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_FTrunc_ReturnValue2, struct FSlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow4, bool CallFunc_GetDataTableRowFromName_ReturnValue4, FText CallFunc_Conv_StringToText_ReturnValue5, int32 ___int_Variable, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, UTextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Multiply_IntInt_ReturnValue4, int32 CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue6, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow5, bool CallFunc_GetDataTableRowFromName_ReturnValue5, FText CallFunc_Conv_StringToText_ReturnValue7, Abp_global_C* CallFunc_GetGlobalData_globalObj, bool K2Node_SwitchInteger_CmpSuccess, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow6, bool CallFunc_GetDataTableRowFromName_ReturnValue6, FText CallFunc_Conv_StringToText_ReturnValue8, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void ExecuteUbergraph_Share_Normal_CJ_LogicBP(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_share_normal_cjhb_C* K2Node_DynamicCast_AsBp_Share_Normal_Cjhb, bool K2Node_DynamicCast_bSuccess, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate2, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate5, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate6);
  void HongbaoRecevieSuccess(struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Abp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue2, Abp_global_C* CallFunc_GetGlobalData_globalObj2, struct FBP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool K2Node_SwitchInteger2_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue3);
  void OnBtnCloseClicked();
  void OnBtnDetermineClicked();
  void OnBtnQQHongbaoClicked();
  void OnBtnQQHongbaoRecevied();
  void OnBtnWXHongbaoClicked();
  void OnBtnWXHongbaoRecevied();
  void ShowUI(struct FTimerHandle CallFunc_K2_SetTimer_ReturnValue);
};

class UShareinterface_UIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_local;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button_qq_friend;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button_qq_gameZone;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button_qq_zone;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_wx_friend;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button_wx_gameZone;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button_wx_zone;
  /* offset=0x0254 flags=0x000a0010c008020c */ UCommon_Avatar_BP_C* Common_Avatar_BP;
  /* offset=0x0258 flags=0x000a0010c008020c */ UCommon_UIPanelBG_C* Common_UIPanelBG;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0274 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x027c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0280 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x028c flags=0x000a0010c008020c */ UNamedSlot* NamedSlot_Holder;
  /* offset=0x0290 flags=0x000a0010c008020c */ UGridPanel* QQerweima;
  /* offset=0x0294 flags=0x000a0010c008020c */ UHorizontalBox* ShareQQ;
  /* offset=0x0298 flags=0x000a0010c008020c */ UHorizontalBox* ShareWX;
  /* offset=0x029c flags=0x000a0010c008020c */ UTextBlock* Text_name;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UGridPanel* WXerweima;
  /* offset=0x02a4 flags=0x0008001040010a05 */ Abp_share_C* bp_share;
  /* offset=0x02a8 flags=0x0000001040010205 */ bool CheckSaveStatus;

  void BndEvt__Button_close_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_local_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_qq_friend_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_qq_zone_K2Node_ComponentBoundEvent_24_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_wx_friend_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_wx_zone_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
  void Construct();
  void EventSaveLocalFail();
  void EventSaveLocalSuccess();
  void ExecuteUbergraph_Shareinterface_UIBP(int32 EntryPoint, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int32 CallFunc_GetSaveStatus_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void InitUI(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_share_C* K2Node_DynamicCast_AsBp_Share, bool K2Node_DynamicCast_bSuccess3);
  void ShareToFriend();
  void StructShare();
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UpdatePlatForm(Abp_global_C* CallFunc_GetGlobalData_globalObj, bool K2Node_SwitchInteger_CmpSuccess);
  void UpdateRoleData(FText CallFunc_Conv_StringToText_ReturnValue);
};

class USharemore_UIBP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* BG;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* bg04;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01bc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01dc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01ec flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x01fc flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0200 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0204 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0208 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x020c flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0210 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0214 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0218 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x021c flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0220 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x0224 flags=0x000a0010c008020c */ UPromotionNumber_BP_C* Number1;
  /* offset=0x0228 flags=0x000a0010c008020c */ UPromotionNumber_BP_C* Number2;
  /* offset=0x022c flags=0x000a0010c008020c */ UPromotionNumber_BP_C* Number3;
  /* offset=0x0230 flags=0x000a0010c008020c */ UPromotionNumber_BP_C* Number4;
  /* offset=0x0234 flags=0x000a0010c008020c */ UPromotionNumber_BP_C* Number5;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* PartyBG;
  /* offset=0x023c flags=0x000a0010c008020c */ UWidgetSwitcher* switcher;
};

class UShineInterface_C: public UInterface {
  void ShowNormal();
  void ShowShine();
};

class UShootWeaponEffectComponent: public UWeaponEffectComponent {
  /* offset=0x00f4 flags=0x001c001040010201 */ UClass<UCameraShake>* CameraShakeTemplate_NormalCameraMode;
  /* offset=0x00f8 flags=0x001c001040010201 */ UClass<UCameraShake>* CameraShakeTemplate_NearCameraMode;
  /* offset=0x00fc flags=0x001c001040010201 */ UClass<UCameraShake>* CameraShakeTemplate_AimCameraMode;
  /* offset=0x0100 flags=0x0018001040010201 */ float CameraShakeInnerRadius;
  /* offset=0x0104 flags=0x0018001040010201 */ float CameraShakeOuterRadius;
  /* offset=0x0108 flags=0x0018001040010201 */ float CameraShakFalloff;
  /* offset=0x010c flags=0x0018001040010201 */ UParticleSystem* MuzzleFX;
  /* offset=0x0110 flags=0x0018001040010001 */ struct FVector LocalMuzzelFXScale;
  /* offset=0x011c flags=0x0018001040010201 */ UParticleSystem* RemoteMuzzleFX;
  /* offset=0x0120 flags=0x0018001040010001 */ struct FVector RemoteMuzzelFXScale;
  /* offset=0x012c flags=0x0010001000010001 */ struct FFXDistancaScaleStruct RemoteMuzzleFXDistanceScale;
  /* offset=0x013c flags=0x0018001040010201 */ UParticleSystem* LocalSilencerMuzzleFX;
  /* offset=0x0140 flags=0x0018001040010001 */ struct FVector LocalSilencerMuzzelFXScale;
  /* offset=0x014c flags=0x0018001040010201 */ UParticleSystem* RemoteSilencerMuzzleFX;
  /* offset=0x0150 flags=0x0018001040010001 */ struct FVector RemoteSilencerMuzzelFXScale;
  /* offset=0x015c flags=0x0010001000010001 */ struct FFXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;
  /* offset=0x016c flags=0x0018001040010201 */ UParticleSystem* LocalFiringSuppressorMuzzleFX;
  /* offset=0x0170 flags=0x0018001040010001 */ struct FVector LocalFiringSuppressorMuzzelFXScale;
  /* offset=0x017c flags=0x0018001040010201 */ UParticleSystem* RemoteFiringSuppressorMuzzleFX;
  /* offset=0x0180 flags=0x0018001040010001 */ struct FVector RemoteFiringSuppressorMuzzelFXScale;
  /* offset=0x018c flags=0x0010001000010001 */ struct FFXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;
  /* offset=0x019c flags=0x0018001040010201 */ bool bIsActiveShellDropFXWhenShoot;
  /* offset=0x01a0 flags=0x0018001040010201 */ UParticleSystem* ShellDropFX;
  /* offset=0x01a4 flags=0x0018001040010001 */ struct FVector ShellDropFXScale;
  /* offset=0x01b0 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
  /* offset=0x01b4 flags=0x0028081040080208 */ UParticleSystemComponent* MuzzleFXComp;
  /* offset=0x01b8 flags=0x0028081040000000 */ struct FVector MuzzleFXOriginalScale;
  /* offset=0x01c4 flags=0x0028081040000200 */ float MuzzleFXPrevDistanceScaler;
  /* offset=0x01c8 flags=0x0028081040080208 */ UParticleSystemComponent* ShellDropFXComp;

  void ActiveLocalShellDropFX();
  void HandleWeaponAction(uint8 Action);
  void OnWeaponEuiped();
  void OnWeaponUnEquiped();
};

class UShootWeaponEntity: public UWeaponEntity {
  /* offset=0x0150 flags=0x001c001040010215 */ UClass<ASTExtraShootWeaponBulletBase>* BulletTemplate;
  /* offset=0x0154 flags=0x0018001040010215 */ float BulletFireSpeed;
  /* offset=0x0158 flags=0x0018001040010215 */ int32 MaxBulletNumInOneClip;
  /* offset=0x015c flags=0x0018001040010215 */ int32 ExtendMaxBulletNumInOneClip;
  /* offset=0x0160 flags=0x0018001040010215 */ float ShootInterval;
  /* offset=0x0164 flags=0x0018001040010215 */ bool bHasSingleFireMode;
  /* offset=0x0165 flags=0x0018001040010215 */ bool bHasAutoFireMode;
  /* offset=0x0166 flags=0x0018001040010215 */ bool bHasBurstFireMode;
  /* offset=0x0168 flags=0x0018001040010215 */ int32 BurstShootBulletsNum;
  /* offset=0x016c flags=0x0018001040010215 */ float BurstShootInterval;
  /* offset=0x0170 flags=0x0018001040010215 */ int32 BulletNumSingleShot;
  /* offset=0x0178 flags=0x0018001040010215 */ FName MuzzleSocketName;
  /* offset=0x0180 flags=0x0018001040010215 */ FName SilencerSocketName;
  /* offset=0x0188 flags=0x0018001040010215 */ FName FiringSuppressorSocketName;
  /* offset=0x0190 flags=0x0018001040010215 */ FName ShellDropSocketName;
  /* offset=0x0198 flags=0x0018001040010215 */ float ImpactEffectSkipDistance;
  /* offset=0x019c flags=0x0018001040010215 */ float MaxImpactEffectSkipTime;
  /* offset=0x01a0 flags=0x0018001040010215 */ uint8 shootType;
  /* offset=0x01a4 flags=0x0018001040000214 */ int32 ShootTotalType;
  /* offset=0x01a8 flags=0x0018001040010215 */ bool ADSManualStop;
  /* offset=0x01ac flags=0x0010001000010015 */ struct FWeaponHitPartCoff WeaponHitPartCoff;
  /* offset=0x01b8 flags=0x0018001040010215 */ float BaseImpactDamage;
  /* offset=0x01bc flags=0x0018001040010215 */ float BulletRange;
  /* offset=0x01c0 flags=0x001c001040010215 */ UClass<ASTEShootWeaponBulletImpactEffect>* ImpactActorTemplate;
  /* offset=0x01c4 flags=0x0018001040010215 */ uint8 ImpactDirType;
  /* offset=0x01c8 flags=0x0010000000010215 */ TArray<struct FSRangeAttenuateConfig> RangeAttenuate;
  /* offset=0x01d4 flags=0x0018001040010215 */ float RangeModifier;
  /* offset=0x01d8 flags=0x0018001040010215 */ float ReferenceDistance;
  /* offset=0x01dc flags=0x001c001040010215 */ UClass<UDamageType>* DamageType;
  /* offset=0x01e0 flags=0x0018001000010005 */ struct FItemDefineID BulletType;
  /* offset=0x01f8 flags=0x0018001040010215 */ bool bHasInfiniteClips;
  /* offset=0x01f9 flags=0x0018001040010215 */ bool bClipHasInfiniteBullets;
  /* offset=0x01fc flags=0x0018001040010215 */ int32 InitBulletInClip;
  /* offset=0x0200 flags=0x0018001040010215 */ bool bAutoReload;
  /* offset=0x0204 flags=0x0018001040010215 */ float TraceDistance;
  /* offset=0x0208 flags=0x0018001040010215 */ uint8 ReloadType;
  /* offset=0x020c flags=0x0018001040010215 */ float PreFireTime;
  /* offset=0x0210 flags=0x0018001040010215 */ float ReloadDurationStart;
  /* offset=0x0214 flags=0x0018001040010215 */ float ReloadDurationLoop;
  /* offset=0x0218 flags=0x0018001040010215 */ float ReloadTime;
  /* offset=0x021c flags=0x0018001040010215 */ float ReloadTimeTactical;
  /* offset=0x0220 flags=0x0018001040010215 */ float ReloadTimeMagOut;
  /* offset=0x0224 flags=0x0018001040010215 */ float ReloadTimeMagIn;
  /* offset=0x0228 flags=0x0018001040010215 */ FName ReloadAllTIDName;
  /* offset=0x0230 flags=0x0018001040010215 */ FName ReloadTacticalTIDName;
  /* offset=0x0238 flags=0x0010001000000005 */ struct FAutoAimingConfig AutoAimingConfig;
  /* offset=0x029c flags=0x0010001000000005 */ struct FSRecoilInfo RecoilInfo;
  /* offset=0x0300 flags=0x0018001040000205 */ float AccessoriesVRecoilFactor;
  /* offset=0x0304 flags=0x0018001040000205 */ float AccessoriesHRecoilFactor;
  /* offset=0x0308 flags=0x0018001040000205 */ float AccessoriesRecoveryFactor;
  /* offset=0x030c flags=0x0010001000000005 */ struct FSDeviation DeviationInfo;
  /* offset=0x034c flags=0x0018001040010215 */ float ShotGunSpread;
  /* offset=0x0350 flags=0x0018001040000205 */ float GameDeviationFactor;
  /* offset=0x0354 flags=0x0018001040000205 */ float GameDeviationAccuracy;
  /* offset=0x0358 flags=0x0018001040000205 */ float AccessoriesDeviationFactor;
  /* offset=0x035c flags=0x0018001040010215 */ uint8 CrossHairType;
  /* offset=0x0360 flags=0x0018001040010215 */ float CrossHairInitialSize;
  /* offset=0x0364 flags=0x0018001040010215 */ float CrossHairBurstSpeed;
  /* offset=0x0368 flags=0x0018001040010215 */ FName DefaultScopeSocket;
  /* offset=0x0370 flags=0x0018001040010215 */ float WeaponBodyLength;
  /* offset=0x0374 flags=0x0010000000010215 */ TArray<FName> OpticalSightAttachmentSocketNameList;
  /* offset=0x0384 flags=0x0018001040010215 */ float WeaponAimFOV;
  /* offset=0x0388 flags=0x0018001040010215 */ float WeaponAimInTime;
  /* offset=0x038c flags=0x0018001040010215 */ float WeaponAimPitchRate;
  /* offset=0x0390 flags=0x0018001040010215 */ float WeaponAimYawRate;
  /* offset=0x0394 flags=0x0018001040010215 */ float GameMotionYawRate;
  /* offset=0x0398 flags=0x0018001040010215 */ float GameMotionPitchRate;
  /* offset=0x039c flags=0x0018001040010215 */ float SensitiveFireYawRate;
  /* offset=0x03a0 flags=0x0018001040010215 */ float SensitiveFirePitchRate;
  /* offset=0x03a4 flags=0x0018001040010215 */ uint8 SightType;
  /* offset=0x03a8 flags=0x0018001040010215 */ float MaxBulletImpactFXClampDistance;
  /* offset=0x03ac flags=0x0018001040010215 */ int32 MaxBulletImpactFXSpawnNum;
};

class UShootWeaponStateManager: public UWeaponStateManager {
};

class UShootingUIPanel_C: public UShootingUIWidget {
  /* offset=0x02a0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02a4 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SwimDown_Unlock;
  /* offset=0x02a8 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SwimDown_Locked;
  /* offset=0x02ac flags=0x000a0010c008021c */ UWidgetAnimation* DX_SwimUP_Unlock;
  /* offset=0x02b0 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SwimUP_Locked;
  /* offset=0x02b4 flags=0x000a0010c008021c */ UWidgetAnimation* ReloadCountDown;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UCanvasPanel* AimGrid_SwimControl;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* AimTriggerBG;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UBorder* AttackBtnBorder_Lside;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UCanvasPanel* AttackBtnPanel_Lside;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UCanvasPanel* AttackBtnPanel_Rside;
  /* offset=0x02cc flags=0x000a0010c008020c */ UWidgetSwitcher* AttackModeSwitcher_Rside;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UBorder* Border_AimBtn;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UBorder* Border_Chat;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UBorder* Border_close;
  /* offset=0x02dc flags=0x000a0010c008020c */ UBorder* Border_CrouchBtn;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UBorder* Border_JumpBtn;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UBorder* Border_Lean_Lside;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UBorder* Border_Lean_Rside;
  /* offset=0x02ec flags=0x000a0010c008020c */ UBorder* Border_Melee;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UBorder* Border_Normal;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UBorder* Border_Pistol;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UBorder* Border_Prone;
  /* offset=0x02fc flags=0x000a0010c008020c */ UBorder* Border_RightFireSide;
  /* offset=0x0300 flags=0x000a0010c008020c */ UBorder* Border_Sigh_yellow;
  /* offset=0x0304 flags=0x000a0010c008020c */ UBorder* Border_Swim;
  /* offset=0x0308 flags=0x000a0010c008020c */ UBorder* Border_Unarmed;
  /* offset=0x030c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0310 flags=0x000a0010c008020c */ UButton* Button_B_Sigh_yellow;
  /* offset=0x0314 flags=0x000a0010c008020c */ UButton* Button_Border_close;
  /* offset=0x0318 flags=0x000a0010c008020c */ UButton* Button_Chat;
  /* offset=0x031c flags=0x000a0010c008020c */ UButton* Button_LeftSideOfTheBody;
  /* offset=0x0320 flags=0x000a0010c008020c */ UButton* Button_RightSideOfTheBody;
  /* offset=0x0324 flags=0x000a0010c008020c */ UButton* Button_Throw_Mode;
  /* offset=0x0328 flags=0x000a0010c008020c */ UCancelGrenadeBtn_C* CancelGrenadeBtn;
  /* offset=0x032c flags=0x000a0010c008020c */ UCanvasPanel* CancelThrowGrenade;
  /* offset=0x0330 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0334 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0338 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x033c flags=0x000a0010c008020c */ UCanvasPanel* CDMask;
  /* offset=0x0340 flags=0x000a0010c008020c */ UCanvasPanel* Chat;
  /* offset=0x0344 flags=0x000a0010c008020c */ UUTRichTextBlock* ChatChannelText;
  /* offset=0x0348 flags=0x000a0010c008020c */ UScrollBox* ChatScrollBox;
  /* offset=0x034c flags=0x000a0010c008020c */ UConsumableItemList_C* ConsumableItemList;
  /* offset=0x0350 flags=0x000a0010c008020c */ UCanvasPanel* ConsumeList_SwimControl;
  /* offset=0x0354 flags=0x000a0010c008020c */ UCanvasPanel* ConsumeListPanel;
  /* offset=0x0358 flags=0x000a0010c008020c */ UCanvasPanel* Crouch;
  /* offset=0x035c flags=0x000a0010c008020c */ UGridPanel* CrouchProne;
  /* offset=0x0360 flags=0x000a0010c008020c */ USwitchWeaponSlot_C* CurSwitchWeaponSlot;
  /* offset=0x0364 flags=0x000a0010c008020c */ UCanvasPanel* FirBtnL_SwimControl;
  /* offset=0x0368 flags=0x000a0010c008020c */ UCanvasPanel* FirBtnR_SwimControl;
  /* offset=0x036c flags=0x000a0010c008020c */ UImage* FXLight_Down_01;
  /* offset=0x0370 flags=0x000a0010c008020c */ UImage* FXLight_UP_01;
  /* offset=0x0374 flags=0x000a0010c008020c */ UGrenadeAimBtn_C* GrenadeAimBtn_Rside;
  /* offset=0x0378 flags=0x000a0010c008020c */ UImage* GrenadeBtnBG_Rside;
  /* offset=0x037c flags=0x000a0010c008020c */ UImage* GrenadeBtnImage_Rside;
  /* offset=0x0380 flags=0x000a0010c008020c */ UGrenadeList_C* GrenadeList;
  /* offset=0x0384 flags=0x000a0010c008020c */ UCanvasPanel* GrenadeListPanel;
  /* offset=0x0388 flags=0x000a0010c008020c */ UCanvasPanel* GridPanel_ReloadBtn;
  /* offset=0x038c flags=0x000a0010c008020c */ UBorder* GridPnael_SprintBtn;
  /* offset=0x0390 flags=0x000a0010c008020c */ UImage* Image_AimTrigger;
  /* offset=0x0394 flags=0x000a0010c008020c */ UImage* Image_CDmaskBG;
  /* offset=0x0398 flags=0x000a0010c008020c */ UImage* Image_ClickLeftSideOfTheBody;
  /* offset=0x039c flags=0x000a0010c008020c */ UImage* Image_ClickRightSideOfTheBody;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UImage* Image_CroucnBG;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UImage* Image_GrenadeIcon;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UImage* Image_JumpIcon;
  /* offset=0x03ac flags=0x000a0010c008020c */ UImage* Image_MeleeBG;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UImage* Image_PistolBG;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UImage* Image_ProneBG;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UImage* Image_ReloadBG;
  /* offset=0x03bc flags=0x000a0010c008020c */ UImage* Image_Selected_Right_Crouch;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UImage* Image_Selected_Right_Prone;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UImage* Image_SwimDown;
  /* offset=0x03c8 flags=0x000a0010c008020c */ UImage* Image_SwimUp;
  /* offset=0x03cc flags=0x000a0010c008020c */ UImage* Image_ThrowingCD;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UInvalidationBox* InvalidationBox;
  /* offset=0x03d4 flags=0x000a0010c008020c */ UButton* JumpBtn;
  /* offset=0x03d8 flags=0x000a0010c008020c */ UImage* JumpBtnBG;
  /* offset=0x03dc flags=0x000a0010c008020c */ UCanvasPanel* JumpBtnPanel;
  /* offset=0x03e0 flags=0x000a0010c008020c */ UCanvasPanel* Lean_Lside;
  /* offset=0x03e4 flags=0x000a0010c008020c */ UCanvasPanel* Lean_Rside;
  /* offset=0x03e8 flags=0x000a0010c008020c */ UCanvasPanel* Lean_SettingControl_Lside;
  /* offset=0x03ec flags=0x000a0010c008020c */ UCanvasPanel* Lean_SettingControl_Rside;
  /* offset=0x03f0 flags=0x000a0010c008020c */ UCanvasPanel* LeftSideOfTheBody;
  /* offset=0x03f4 flags=0x000a0010c008020c */ UCanvasPanel* LungIcon;
  /* offset=0x03f8 flags=0x000a0010c008020c */ UButton* MeleeBtn;
  /* offset=0x03fc flags=0x000a0010c008020c */ UImage* MeleeImage;
  /* offset=0x0400 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_AimCanvas;
  /* offset=0x0404 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_CancelGrenadeCanvas;
  /* offset=0x0408 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_ChatCanvas;
  /* offset=0x040c flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_ConsumableCanvas;
  /* offset=0x0410 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_CrouchCanvas;
  /* offset=0x0414 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_GrenadeCanvas;
  /* offset=0x0418 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_JumpCanvas;
  /* offset=0x041c flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LeanCanvas_Lside;
  /* offset=0x0420 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LeanCanvas_Rside;
  /* offset=0x0424 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LeftFireCanvas;
  /* offset=0x0428 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LeftWeaponSlot;
  /* offset=0x042c flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LungCanvas;
  /* offset=0x0430 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_ProneCanvas;
  /* offset=0x0434 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_ReloadCanvas;
  /* offset=0x0438 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_RightFireCanvas;
  /* offset=0x043c flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_RightWeaponSlot;
  /* offset=0x0440 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_SiwmUpCanvas;
  /* offset=0x0444 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_SprintPanel;
  /* offset=0x0448 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_SwimDownCanvs;
  /* offset=0x044c flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_SwitchThrowCanvas;
  /* offset=0x0450 flags=0x000a0010c008020c */ UCanvasPanel* NearDeathControl_Lean_Lside;
  /* offset=0x0454 flags=0x000a0010c008020c */ UCanvasPanel* NearDeathControl_Lean_Rside;
  /* offset=0x0458 flags=0x000a0010c008020c */ UImage* OnFireBtn_Lside;
  /* offset=0x045c flags=0x000a0010c008020c */ UImage* OnFireBtn_LsideImage;
  /* offset=0x0460 flags=0x000a0010c008020c */ UImage* OnFireBtn_Rside;
  /* offset=0x0464 flags=0x000a0010c008020c */ UImage* OnFireBtnBG_Lside;
  /* offset=0x0468 flags=0x000a0010c008020c */ UImage* OnFireBtnBG_Rside;
  /* offset=0x046c flags=0x000a0010c008020c */ UCanvasPanel* OnFireBtnPanel_Lside;
  /* offset=0x0470 flags=0x000a0010c008020c */ UCanvasPanel* OnFireBtnPanel_Rside;
  /* offset=0x0474 flags=0x000a0010c008020c */ UCanvasPanel* OnThrowGrenadePanel_Rside;
  /* offset=0x0478 flags=0x000a0010c008020c */ UButton* PistolBtn;
  /* offset=0x047c flags=0x000a0010c008020c */ UImage* PistolImage;
  /* offset=0x0480 flags=0x000a0010c008020c */ USwitchWeaponSlot_C* PreviousSwitchWeaponSlot;
  /* offset=0x0484 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Lung;
  /* offset=0x0488 flags=0x000a0010c008020c */ UCanvasPanel* Prone;
  /* offset=0x048c flags=0x000a0010c008020c */ UCanvasPanel* ReloadBtnAndBullet;
  /* offset=0x0490 flags=0x000a0010c008020c */ UBorder* ReloadBtnAndBulletBorder;
  /* offset=0x0494 flags=0x000a0010c008020c */ UImage* ReloadBtnBGImage;
  /* offset=0x0498 flags=0x000a0010c008020c */ UButton* ReloadButton;
  /* offset=0x049c flags=0x000a0010c008020c */ UImage* ReloadCDBar;
  /* offset=0x04a0 flags=0x000a0010c008020c */ UTextBlock* ReloadCountDownTextBlock;
  /* offset=0x04a4 flags=0x000a0010c008020c */ UButton* RightCrouch;
  /* offset=0x04a8 flags=0x000a0010c008020c */ UButton* RightProne;
  /* offset=0x04ac flags=0x000a0010c008020c */ UCanvasPanel* RightSideOfTheBody;
  /* offset=0x04b0 flags=0x000a0010c008020c */ UCanvasPanel* SettingConfig_FireBtn_L;
  /* offset=0x04b4 flags=0x000a0010c008020c */ UCanvasPanel* ShootAimBtn;
  /* offset=0x04b8 flags=0x000a0010c008020c */ UButton* ShootAimBtn2;
  /* offset=0x04bc flags=0x000a0010c008020c */ UButton* Sprint;
  /* offset=0x04c0 flags=0x000a0010c008020c */ UImage* SprintBtnBG;
  /* offset=0x04c4 flags=0x000a0010c008020c */ UCanvasPanel* SprintBtnPanel;
  /* offset=0x04c8 flags=0x000a0010c008020c */ UImage* SprintImg;
  /* offset=0x04cc flags=0x000a0010c008020c */ UCanvasPanel* Swim;
  /* offset=0x04d0 flags=0x000a0010c008020c */ UCanvasPanel* SwimControl_Lean_Lside;
  /* offset=0x04d4 flags=0x000a0010c008020c */ UCanvasPanel* SwimControl_Lean_Rside;
  /* offset=0x04d8 flags=0x000a0010c008020c */ UCanvasPanel* SwimControlThrowGrid;
  /* offset=0x04dc flags=0x000a0010c008020c */ UButton* SwimDown;
  /* offset=0x04e0 flags=0x000a0010c008020c */ UButton* SwimUp;
  /* offset=0x04e4 flags=0x000a0010c008020c */ UCanvasPanel* SwitchThrowPanel;
  /* offset=0x04e8 flags=0x000a0010c008020c */ USwitchWeaponSlot_Mode2_C* SwitchWeaponSlot_Mode2;
  /* offset=0x04ec flags=0x000a0010c008020c */ USwitchWeaponSlot_Mode2_C* SwitchWeaponSlot_Mode2_C;
  /* offset=0x04f0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentNumOfBullets;
  /* offset=0x04f4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxNumOfBullets;
  /* offset=0x04f8 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ThrowingTime;
  /* offset=0x04fc flags=0x000a0010c008020c */ UTextBlock* TextBlock_ThrowTextTips;
  /* offset=0x0500 flags=0x000a0010c008020c */ UImage* Throw_Mode_Image;
  /* offset=0x0504 flags=0x000a0010c008020c */ UCanvasPanel* ThrowTimeInfo;
  /* offset=0x0508 flags=0x000a0010c008020c */ UImage* UnarmedBG;
  /* offset=0x050c flags=0x000a0010c008020c */ UButton* UnarmedBtn;
  /* offset=0x0510 flags=0x000a0010c008020c */ UImage* UnarmedImage;
  /* offset=0x0514 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x0518 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x051c flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x0520 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Chat;
  /* offset=0x0524 flags=0x0008001040010205 */ int32 PoseStateOffset;
  /* offset=0x0528 flags=0x0000000000010005 */ struct FSlateBrush CrouchImg;
  /* offset=0x0590 flags=0x0000000000010005 */ struct FSlateBrush StandImg;
  /* offset=0x05f8 flags=0x0000000000010005 */ struct FSlateBrush ProneImg;
  /* offset=0x0660 flags=0x0008001040010205 */ float ReloadingCD;
  /* offset=0x0668 flags=0x0000000000010005 */ struct FSlateBrush BackpackImgSplashBrush;
  /* offset=0x06d0 flags=0x0000000000010005 */ struct FSlateBrush BackpackImgNormalBrush;
  /* offset=0x0738 flags=0x0008001040010205 */ uint8 PoseStateBackup;
  /* offset=0x0739 flags=0x0008001040010205 */ enum ESlateVisibility PickUpPanelVisibility;
  /* offset=0x073a flags=0x0008001040010205 */ enum ESlateVisibility CollapseBtnVisibility;
  /* offset=0x073b flags=0x0008001040010205 */ enum ESlateVisibility ExpandBtnVisibility;
  /* offset=0x073c flags=0x0000001040010205 */ bool NormalAimMode;
  /* offset=0x0740 flags=0x0000000000010005 */ struct FSlateBrush SprintNormalBrush;
  /* offset=0x07a8 flags=0x0000000000010005 */ struct FSlateBrush SprintLightBrush;
  /* offset=0x0810 flags=0x0000001040010205 */ bool bPlayerHasWeaponOnHand;
  /* offset=0x0811 flags=0x0000001040010205 */ bool IsFirePressed;
  /* offset=0x0814 flags=0x0000000000010205 */ TArray<struct FSlateBrush> BtnSelectedStatusGroup;
  /* offset=0x0820 flags=0x0000000000010205 */ TArray<struct FSlateBrush> BtnNormalStatusGroup;
  /* offset=0x082c flags=0x0008001040010205 */ uint8 ThrowMode;
  /* offset=0x0830 flags=0x0000000000010005 */ struct FSlateBrush HighThrowBrush;
  /* offset=0x0898 flags=0x0000000000010005 */ struct FSlateBrush LowThrowBrush;
  /* offset=0x0900 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Frag_NormalIcon;
  /* offset=0x0968 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Frag_HighLightIcon;
  /* offset=0x09d0 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Smoke_NormalIcon;
  /* offset=0x0a38 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Smoke_HighLightIcon;
  /* offset=0x0aa0 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Fire_NormalIcon;
  /* offset=0x0b08 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Fire_HighLightIcon;
  /* offset=0x0b70 flags=0x0000000000010005 */ struct FSlateBrush Fire_NormalIcon;
  /* offset=0x0bd8 flags=0x0000000000010005 */ struct FSlateBrush Fire_HighLightIcon;
  /* offset=0x0c40 flags=0x0000000000010005 */ struct FSlateBrush FireBG_NormalIcon;
  /* offset=0x0ca8 flags=0x0000000000010005 */ struct FSlateBrush FireBG_HighLight;
  /* offset=0x0d10 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Stun_HighLightIcon;
  /* offset=0x0d78 flags=0x0000000000010005 */ struct FSlateBrush Grenade_Stun_NormalIcon;
  /* offset=0x0de0 flags=0x0008001040010205 */ uint8 CurGrenadeType;
  /* offset=0x0de1 flags=0x0000001040010205 */ bool unswing;
  /* offset=0x0de4 flags=0x0000000000010205 */ TMap<uint8, float> GrenadeCountDownDict;
  /* offset=0x0e20 flags=0x0000001000010005 */ struct FTimerHandle GrenadeCountDownTimer;
  /* offset=0x0e28 flags=0x0008001040010205 */ float GrenadeElapsedSeconds;
  /* offset=0x0e30 flags=0x0000000000010005 */ struct FSlateBrush Fist_NormalIcon;
  /* offset=0x0e98 flags=0x0000000000010005 */ struct FSlateBrush Fist_HighLightIcon;
  /* offset=0x0f00 flags=0x0000000000010005 */ struct FSlateBrush Melee_NormalIcon;
  /* offset=0x0f68 flags=0x0000000000010005 */ struct FSlateBrush Melee_HighLightIcon;
  /* offset=0x0fd0 flags=0x0008001040010205 */ uint8 FireBtnStatus;
  /* offset=0x0fd4 flags=0x0008001040010a05 */ ABP_STExtraPlayerController_C* STEPlayerController;
  /* offset=0x0fd8 flags=0x0008001040010205 */ UWeaponManagerComponent* weaponManager;
  /* offset=0x0fdc flags=0x0008001040010205 */ uint8 CurUsingWeaponSlot;
  /* offset=0x0fe0 flags=0x0008001040010205 */ float InitItemCDTime;
  /* offset=0x0fe4 flags=0x0008001040010205 */ float ItemCDCurTime;
  /* offset=0x0fe8 flags=0x0000001040010205 */ bool ShowItemCD;
  /* offset=0x0fec flags=0x0000000000010205 */ TMap<FName, uint8> SlotNameToGrenadeType;
  /* offset=0x1028 flags=0x0000000000010205 */ TArray<UObject*> EnterWaterHideUI;
  /* offset=0x1034 flags=0x0008001040010a05 */ ASTExtraShootWeapon* CurUsingShootWeapon;
  /* offset=0x1038 flags=0x0000000000010005 */ struct FSlateBrush GrenadeTimerShoulei;
  /* offset=0x10a0 flags=0x0000000000010005 */ struct FSlateBrush GrenadeTimerFlash;
  /* offset=0x1108 flags=0x0000000000010005 */ struct FSlateBrush GrenadeTimerYanwu;
  /* offset=0x1170 flags=0x0008001040010205 */ int32 Settings_LeftHandFire;
  /* offset=0x1178 flags=0x0000000000010005 */ struct FSlateBrush SwimUp_Press;
  /* offset=0x11e0 flags=0x0000000000010005 */ struct FSlateBrush SwimUp_Releass;
  /* offset=0x1248 flags=0x0000000000010005 */ struct FSlateBrush SwimDown_Releass;
  /* offset=0x12b0 flags=0x0000000000010005 */ struct FSlateBrush SwimDown_Press;
  /* offset=0x1318 flags=0x0008001040010205 */ float LastGrenadeThrowTime;
  /* offset=0x131c flags=0x0008001040010205 */ float CurGrenadeThrowTime;
  /* offset=0x1320 flags=0x0000000000010205 */ TArray<UCanvasPanel*> MultiLayerArray;
  /* offset=0x132c flags=0x0000001040010205 */ bool IsPreHoldGrenade;
  /* offset=0x132d flags=0x0000001040010205 */ bool IsRunning;
  /* offset=0x132e flags=0x0000001040010205 */ bool bIsShowPeek;
  /* offset=0x132f flags=0x0000001040010205 */ bool IsInVehicleStatus;

  void ActiveSprint(bool CallFunc_CanPlayerAutoSprintOrSwim_CanAutoSprintOrSwim, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_AllowState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, bool CallFunc_SwitchPoseState_ReturnValue7, bool CallFunc_SwitchPoseState_ReturnValue8, bool CallFunc_CanPlayerAutoSprintOrSwim_CanAutoSprintOrSwim2, bool CallFunc_CanPlayerAutoSprintOrSwim_CanAutoSprintOrSwim3, bool CallFunc_CanPlayerAutoSprintOrSwim_CanAutoSprintOrSwim4, bool K2Node_SwitchEnum_CmpSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_SwitchEnum2_CmpSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2);
  void AimInterupted(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, int32 CallFunc_PostEvent_ReturnValue, int32 CallFunc_PostEvent_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void ApplyCustomUIPosition(TArray<struct FDragableBtnPositionDataStruct> CustomUI, struct FVector2D ViewportPosition);
  void BeginGrenamdeTimer(float Sum);
  void BindPickupUpdateBullet();
  void BindWeaponChangeDelegate();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_60_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_B_Sigh_yellow_K2Node_ComponentBoundEvent_56_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Border_close_K2Node_ComponentBoundEvent_376_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_LeftSideOfTheBody_K2Node_ComponentBoundEvent_118_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_RightSideOfTheBody_K2Node_ComponentBoundEvent_72_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_Throw_Mode_K2Node_ComponentBoundEvent_137_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__GrenadeAimBtn_K2Node_ComponentBoundEvent_137_GrenadeTriggerHit__DelegateSignature();
  void BndEvt__GrenadeAimBtn_K2Node_ComponentBoundEvent_143_GrenadeThrown__DelegateSignature();
  void BndEvt__GrenadeList_K2Node_ComponentBoundEvent_198_OnUseFist__DelegateSignature();
  void BndEvt__GrenadeList_K2Node_ComponentBoundEvent_207_OnUseGrenade__DelegateSignature(uint8 grenadeType);
  void BndEvt__GrenadeList_K2Node_ComponentBoundEvent_43_OnGrenadeEmpty__DelegateSignature();
  void BndEvt__GrenadeList_K2Node_ComponentBoundEvent_68_OnUseMelee__DelegateSignature();
  void BndEvt__JumpBtn_K2Node_ComponentBoundEvent_209_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__JumpBtn_K2Node_ComponentBoundEvent_222_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__LeftFireBtn_K2Node_ComponentBoundEvent_222_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__LeftFireBtn_K2Node_ComponentBoundEvent_260_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__MeleeBtn_K2Node_ComponentBoundEvent_111_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__PistolBtn_K2Node_ComponentBoundEvent_168_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__ReloadButton_K2Node_ComponentBoundEvent_158_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__RightCrouch_K2Node_ComponentBoundEvent_473_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__RightProne_K2Node_ComponentBoundEvent_308_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__ShootAimBtn2_K2Node_ComponentBoundEvent_666_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Sprint_K2Node_ComponentBoundEvent_799_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__SwimDown_K2Node_ComponentBoundEvent_111_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__SwimDown_K2Node_ComponentBoundEvent_81_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__SwimUp_K2Node_ComponentBoundEvent_485_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__SwimUp_K2Node_ComponentBoundEvent_551_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__SwitchWeaponSlot_Mode2_C_0_K2Node_ComponentBoundEvent_1585_ClickOnSwitchWeapon__DelegateSignature();
  void BndEvt__SwitchWeaponSlot_Mode2_K2Node_ComponentBoundEvent_1500_ClickOnSwitchWeapon__DelegateSignature();
  void CameraModeChange(uint8 CameraMode);
  void CanPlayerAutoSprintOrSwim(bool CanAutoSprintOrSwim, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerCanDoSprintOperation_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void ChangeFireStatusAndUpdateFireBtn(uint8 status, bool K2Node_SwitchEnum_CmpSuccess, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal2, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight2);
  void CheckIsKeyDown(struct FKey KeyCode, bool IsDown, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, float CallFunc_GetInputKeyTimeDown_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
  void CombineKeyDownLogic(bool CallFunc_CheckIsKeyDown_IsDown, bool CallFunc_CheckIsKeyDown_IsDown2, bool CallFunc_CheckIsKeyDown_IsDown3, bool CallFunc_CheckIsKeyDown_IsDown4);
  void CustomEvent(bool IsShowPrompt, float LastTime, FString PromptText);
  void DealSwimForce(float upoffset, AActor* Player, bool unswing, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FAnimParamList CallFunc_GetPlayerAnimParam_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void EnableMovement(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);
  void EnterWater();
  void EventDriveIntoWater();
  void EventDriveOutWater();
  void ExecuteUbergraph_ShootingUIPanel(int32 EntryPoint, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, FOnJoyStickInteruptDelegate K2Node_CreateDelegate_OutputDelegate, uint8 K2Node_CustomEvent_NewParam, bool K2Node_SwitchEnum_CmpSuccess, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate2, bool K2Node_SwitchEnum2_CmpSuccess, float K2Node_CustomEvent_Sum, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, uint8 K2Node_ComponentBoundEvent_GrenadeType, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsPlayerCanSeeWidget_cansee, bool CallFunc_IsPlayerCanSeeWidget_cansee2, FPlayerEnterWater K2Node_CreateDelegate_OutputDelegate3, FPlayerLeaveWater K2Node_CreateDelegate_OutputDelegate4, FVaultFailDS K2Node_CreateDelegate_OutputDelegate5, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue2, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess3, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, FOnWeaponFireModeChangeDelegate K2Node_CreateDelegate_OutputDelegate6, FOnReloadCountDownChangeDelegate K2Node_CreateDelegate_OutputDelegate7, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue3, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess4, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue4, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess5, FChangeCurrentUsingWeaponDelegate K2Node_CreateDelegate_OutputDelegate8, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerCanSeeWidget_cansee3, bool CallFunc_IsPlayerCanSeeWidget_cansee4, uint8 K2Node_CustomEvent_TargetChangeSlot2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool K2Node_CustomEvent_IsShowPrompt, float K2Node_CustomEvent_LastTime, FString K2Node_CustomEvent_PromptText, struct FGeometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FOnShowSkillPromptDelegate K2Node_CreateDelegate_OutputDelegate10, uint8 K2Node_CustomEvent_TargetChangeSlot, FItemListUpdatedDelegate K2Node_CreateDelegate_OutputDelegate11, FText K2Node_CustomEvent_CountDownValue, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail, bool CallFunc_GetLayoutDetailByType_IsFound, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail2, bool CallFunc_GetLayoutDetailByType_IsFound2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail3, bool CallFunc_GetLayoutDetailByType_IsFound3, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail4, bool CallFunc_GetLayoutDetailByType_IsFound4, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail5, bool CallFunc_GetLayoutDetailByType_IsFound5, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail6, bool CallFunc_GetLayoutDetailByType_IsFound6, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail7, bool CallFunc_GetLayoutDetailByType_IsFound7, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail8, bool CallFunc_GetLayoutDetailByType_IsFound8, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail9, bool CallFunc_GetLayoutDetailByType_IsFound9, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail10, bool CallFunc_GetLayoutDetailByType_IsFound10, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail11, bool CallFunc_GetLayoutDetailByType_IsFound11, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail12, bool CallFunc_GetLayoutDetailByType_IsFound12, struct FLinearColor K2Node_MakeStruct_LinearColor, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail13, bool CallFunc_GetLayoutDetailByType_IsFound13, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail14, bool CallFunc_GetLayoutDetailByType_IsFound14, struct FLinearColor K2Node_MakeStruct_LinearColor2, struct FLinearColor K2Node_MakeStruct_LinearColor3, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetLayoutDetailByType_LayoutDetail15, bool CallFunc_GetLayoutDetailByType_IsFound15, bool CallFunc_IsValid_ReturnValue3, struct FLinearColor K2Node_MakeStruct_LinearColor4, FChangeInventoryDataDelegate K2Node_CreateDelegate_OutputDelegate12, enum UTSkillStopReason K2Node_CustomEvent_StopReason, FPlayerControllerDelegate K2Node_CreateDelegate_OutputDelegate13, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue2, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, int32 K2Node_CustomEvent_IntValue, USaveGame* CallFunc_GetUserSettings_ReturnValue2, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess7, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue4, uint8 K2Node_CustomEvent_CameraMode, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue5, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_CanChangeThrowMode_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue3, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue2, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_CanChangeThrowMode_ReturnValue2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue4, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue5, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_IsValid_ReturnValue10, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue5, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue6, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn5, bool K2Node_DynamicCast_bSuccess8, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn6, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_CheckCanVault_isActive, bool CallFunc_DealSwimForce_unswing, bool CallFunc_SwitchPoseState_ReturnValue, bool K2Node_SwitchEnum4_CmpSuccess, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn2, bool CallFunc_IsValid_ReturnValue11, bool CallFunc_IsValid_ReturnValue12, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_DealSwimForce_unswing2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue5, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn3, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_IsValid_ReturnValue13, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn4, bool CallFunc_IsValid_ReturnValue14, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn5, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn6, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_IsValid_ReturnValue16, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn7, bool CallFunc_IsValid_ReturnValue17, bool CallFunc_SwitchPoseState_ReturnValue6, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue7, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn7, bool K2Node_DynamicCast_bSuccess10, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue6, bool CallFunc_IsValid_ReturnValue18, float CallFunc_GetGameTimeSinceCreation_ReturnValue, bool K2Node_SwitchEnum5_CmpSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FOnSwitchCameraModeStartDelegate K2Node_CreateDelegate_OutputDelegate14, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate15, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue19, bool CallFunc_IsEmulatorWhenInit_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue7, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue8, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, bool CallFunc_IsValid_ReturnValue20, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ACharacter* CallFunc_GetPlayerCharacter_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess11, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn8, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsValid_ReturnValue22, UPawnMovementComponent* CallFunc_GetMovementComponent_ReturnValue, bool CallFunc_HasState_ReturnValue3, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, FOnSkillFinishedDelegate K2Node_CreateDelegate_OutputDelegate16, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue9, bool CallFunc_IsGrenadeEmpty_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue10, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue23, bool CallFunc_HasState_ReturnValue4, int32 CallFunc_Round_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess13, FTimerDynamicDelegate K2Node_CreateDelegate_OutputDelegate17, struct FTimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, int32 CallFunc_Array_Add_ReturnValue5, int32 CallFunc_Array_Add_ReturnValue6, int32 CallFunc_Array_Add_ReturnValue7, int32 CallFunc_Array_Add_ReturnValue8, int32 CallFunc_Array_Add_ReturnValue9, int32 CallFunc_Array_Add_ReturnValue10, int32 CallFunc_Array_Add_ReturnValue11, int32 CallFunc_Array_Add_ReturnValue12, TArray<UCanvasPanel*> K2Node_MakeArray_Array, bool K2Node_CustomEvent_BoolValue);
  void FireInteruptedIfProne(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess);
  void GetBP_PlayerPawn(ABP_PlayerPawn_C* PlayerPawn, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);
  void GetCurMeleeHightLightAndNormalIcon(struct FSlateBrush Normal, struct FSlateBrush highLight);
  void GetGrenadeIconByType(uint8 grenadeType, struct FSlateBrush NormalIcon, struct FSlateBrush HighLightIcon, bool K2Node_SwitchEnum_CmpSuccess);
  void GetGrenadeTimerIconByType(uint8 grenadeType, struct FSlateBrush GrenadeSlate, bool K2Node_SwitchEnum_CmpSuccess);
  void GrenadePrepareToThrow(struct FSlateBrush CallFunc_GetGrenadeIconByType_NormalIcon, struct FSlateBrush CallFunc_GetGrenadeIconByType_HighLightIcon);
  void GrenadeThrow(struct FSlateBrush CallFunc_GetGrenadeIconByType_NormalIcon, struct FSlateBrush CallFunc_GetGrenadeIconByType_HighLightIcon);
  void Grenade_Cancel();
  void HandleChangeInventoryData(uint8 TargetChangeSlot);
  void HandleCurWeaponFireModeChange(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue2, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void HandlePickupUpdateBullet();
  void HandlePlayerEnterVehicle(bool IsEnter);
  void HandleReadyThrowOutGrenade(bool K2Node_SwitchEnum_CmpSuccess);
  void HandleThrowOutGrenade(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue);
  void HandleTopRightWeaponSwitch(uint8 TopRightWeaponSlot, uint8 WeaponSlot, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName CallFunc_GetCurrentUsingLogicSocket_ReturnValue, uint8 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void HandleUIWhenPlayerLand();
  void HandleUIWhenPlayerOnPlane();
  void HandleWeaponChange(uint8 Slot, USTExtraShootWeaponComponent* CurWeaponComponent, ASTExtraShootWeapon* CurWeapon, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FOnWeaponReloadEndDelegage K2Node_CreateDelegate_OutputDelegate, FOnWeaponReloadStartDelegate K2Node_CreateDelegate_OutputDelegate2, FOnWeaponReloadEndDelegage K2Node_CreateDelegate_OutputDelegate3, FOnWeaponReloadStartDelegate K2Node_CreateDelegate_OutputDelegate4, FOnCurBulletChange K2Node_CreateDelegate_OutputDelegate5, FOnCurBulletChange K2Node_CreateDelegate_OutputDelegate6, FOnWeaponShootDelegate K2Node_CreateDelegate_OutputDelegate7, ASTExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, FName CallFunc_GetGrenadeSpecificSlotNameByWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue3, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, FOnWeaponShootDelegate K2Node_CreateDelegate_OutputDelegate8, FOnWeaponShootDelegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue4, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue3, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon3, bool K2Node_DynamicCast_bSuccess3, uint8 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void HaveBullet(bool NewParam, ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);
  void HideAutoSprintUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void HideLeanIcon();
  void HideQuickChatMenu();
  void HideRefreshUI();
  void HightLightCurUseWeapon(APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, FName CallFunc_GetCurrentUsingLogicSocket_ReturnValue, uint8 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void HightLightFireBtnByStatus(struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal2, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight2, bool K2Node_SwitchEnum_CmpSuccess);
  void Init BG();
  void IntelligentSort(bool BoolValue);
  void JumpVault();
  void LeaveWaterUI();
  void LeftHandFireEvent(int32 IntValue);
  void NormalFireBtnByStatus(struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_Normal2, struct FSlateBrush CallFunc_GetCurMeleeHightLightAndNormalIcon_HighLight2, bool K2Node_SwitchEnum_CmpSuccess);
  void OnDisablePeek();
  void OnEndThrowGrenade();
  void OnPeekLeft();
  void OnPeekRight();
  void OnPressFireBtn(uint8 FingerIndex, ABP_PlayerPawn_C* BPPlayerPawn, APawn* PlayerPawn, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ASTExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, AController* CallFunc_GetController_ReturnValue, APawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);
  void OnReadyToThrowGrenade();
  void OnReleaseFireBtn(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void OnReloadCountingDown(FText CountDownValue);
  void OnSprintStateInterrupt();
  void OnUseGrenadeChangeUI(uint8 grenadeType, struct FSlateBrush CallFunc_GetGrenadeIconByType_NormalIcon, struct FSlateBrush CallFunc_GetGrenadeIconByType_HighLightIcon);
  struct FEventReply On_BackpackBtn_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  struct FEventReply On_OnFireBtn_Lside_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_AddUnique_ReturnValue);
  struct FEventReply On_OnFireBtn_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply);
  void PlayerInfo_UpdatePlayerBreathAmmount(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue2, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue3, bool CallFunc_EqualEqual_NameName_ReturnValue4, bool CallFunc_EqualEqual_NameName_ReturnValue5);
  void RefreshGrename();
  void RefreshMeleeIcon(UObject* Image, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void RefreshPostolIcon(UObject* Image, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ReloadingCDbar(float CdValue 0-1, UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);
  void RemindQuickChatBtn(enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);
  void ResetCustomUIPosition();
  void ResetUIOnPlane();
  void RightBtnStatus(int32 Index, bool K2Node_SwitchInteger_CmpSuccess);
  void Scope();
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetGrenadeCountDown(bool IsBeginThrow, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, float CallFunc_GetGameTimeSinceCreation_ReturnValue, struct FSlateBrush CallFunc_GetGrenadeTimerIconByType_GrenadeSlate, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void SetRenderTransformIfValid(struct FVector2D Position, UGridPanel* GridPanel, struct FVector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);
  void SetSettingControlUI();
  void ShouldThrowGrenadeFunc(enum EUTSkillEntry SkillEntryEvent, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_ShouldTriggerEntryEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void Show/HideAllMultiLayerUI(bool isShow, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 ___int_Array_Index_Variable2, int32 ___int_Loop_Counter_Variable2, int32 CallFunc_Add_IntInt_ReturnValue2, UCanvasPanel* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, UCanvasPanel* CallFunc_Array_Get_Item2, bool CallFunc_IsValid_ReturnValue2, int32 CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);
  void ShowAutoSprintUI(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);
  void ShowBackpackIconSplash(bool Show, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void ShowLeanIcon();
  void ShowQuickChatMenu();
  void ShowUIByOperation(uint8 Operation, bool K2Node_SwitchEnum_CmpSuccess);
  void ShowWeaponEquipAttachmentAnim(uint8 Slot, struct FItemDefineID DefineID, bool IsEquip, bool K2Node_SwitchEnum_CmpSuccess);
  void SimReload();
  void SimSprint(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess);
  void SimulateSprint();
  void SimulateStopSprint(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2);
  void Sjump();
  void SkillFinishedEvent(enum UTSkillStopReason StopReason);
  void SprintInterupted(ABP_PlayerPawn_C* CallFunc_GetBP_PlayerPawn_PlayerPawn, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool K2Node_SwitchEnum_CmpSuccess);
  void StartReloadAnim(uint8 CallFunc_GetCurReloadMethod_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_GetCurReloadTime_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2);
  void StopMovementIfProne(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, APawn* CallFunc_K2_GetPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);
  void StopReloadAnim();
  void StopToSwitchIfSprint(uint8 NewParam);
  void SwimUICheck(APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ASTExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerCanSeeWidget_cansee, bool CallFunc_HasState_ReturnValue);
  void Swim_EnterWaterHideUI(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UObject* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, UWidget* K2Node_DynamicCast_AsWidget, bool K2Node_DynamicCast_bSuccess);
  void Swim_OutWaterShowUI(int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UObject* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, UWidget* K2Node_DynamicCast_AsWidget, bool K2Node_DynamicCast_bSuccess);
  void SwitchAimMode(bool CallFunc_Not_PreBool_ReturnValue);
  void ThrowingCDBar(float CD 0-1, UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UIChangeWhenPlayerOnPlane();
  void UIInGameEvent_BackpackOpen_StopFire(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);
  void UIInGameEvent_HideQuickChatMenu();
  void UpdateBulletLeftCountText(FText Text);
  void UpdateData();
  void UpdateGunBulletCountText(FText Text);
  void UpdateInstantPickUpList();
  void UpdateItemUsingProgress();
  void UpdateReloadCD(float NewParam);
  void UpdateReloadCountDownText(FText Text);
  void UpdateStandCrouchProneAndSprint(uint8 NewParam, bool K2Node_SwitchEnum_CmpSuccess);
  void UpdateTopRightWeapnIcon(uint8 SlotName, FString imagePath, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate2);
  void UpdateTopRightWeaponBulletWhenEquipAndUnequip(uint8 WeaponSlot, uint8 CurWeaponSlot, ASTExtraWeapon* Weapon, UWeaponManagerComponent* LocalWeaponManager, UTextBlock* TWidget, uint8 UpdateWeaponSlot, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue6, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, bool K2Node_SwitchEnum2_CmpSuccess);
  void UpdateTopRightWeaponBulletWhenUsing(ASTExtraWeapon* Weapon);
  void UpdateWeaponBulletCount(ASTExtraShootWeapon* Weapon2, ASTExtraShootWeapon* Weapon1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue3, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue2, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, struct FItemDefineID CallFunc_GetItemDefineID_ReturnValue2, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_IsValid_ReturnValue4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, UShootWeaponEntity* K2Node_DynamicCast_AsShoot_Weapon_Entity, bool K2Node_DynamicCast_bSuccess3, int32 CallFunc_GetItemCountByDefineID_ReturnValue, UShootWeaponEntity* K2Node_DynamicCast_AsShoot_Weapon_Entity2, bool K2Node_DynamicCast_bSuccess4, FString CallFunc_Conv_IntToString_ReturnValue, int32 CallFunc_GetItemCountByDefineID_ReturnValue2, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16);
  void UpdateWeaponBulletOnShoot(ASTExtraShootWeapon* Weapon, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, ASTExtraWeapon* CallFunc_GetInventoryWeaponByPropSlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue11, ASTExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Concat_StrStr_ReturnValue12, bool K2Node_SwitchEnum_CmpSuccess);
  void UpdateWeaponImage();
  void UpdateWeaponImageByDefineID(uint8 Slot, struct FItemDefineID DefineID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
  void UseItemCDbar(float CdValue 0-1);
  void VaultFailFromDS();
  void VehicleShootingCheckShootingState(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsValid_ReturnValue2, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void WeaponChange(uint8 TargetChangeSlot);
};

class UShootingUIPositionSaveData_C: public USaveGame {
  /* offset=0x0020 flags=0x0000000000010205 */ TArray<struct FDragableBtnPositionDataStruct> ShootingBtnPosition;
  /* offset=0x002c flags=0x0008000000010205 */ FString SavingSlot;
  /* offset=0x0038 flags=0x0008001040010205 */ int32 SavingSerialNum;
};

class UShootingUIWidget: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0018001040000205 */ float ReloadingCD;
  /* offset=0x0234 flags=0x0010000000000005 */ FText ReloadCountDownText;
  /* offset=0x0240 flags=0x0010000000000005 */ FText GunBulletText;
  /* offset=0x024c flags=0x0010000000000005 */ FText BulletLeftCount;
  /* offset=0x0258 flags=0x001800104008020d */ UImage* ReloadCDMask;
  /* offset=0x025c flags=0x001800104008020d */ UImage* ReloadBtnBG;
  /* offset=0x0260 flags=0x001800104008020d */ UButton* SprintBtn;
  /* offset=0x0264 flags=0x001800104008020d */ UButton* ReloadBtn;
  /* offset=0x0268 flags=0x001800104008020d */ UImage* FireBtn;
  /* offset=0x026c flags=0x0018001040000205 */ ASTExtraBaseCharacter* CurPlayerBaseCharacter;
  /* offset=0x0270 flags=0x0010000010080200 */ FOnReloadCountDownChangeDelegate OnReloadCountDownChangeDelegate;
  /* offset=0x027c flags=0x0010000010080200 */ FOnGunBulletNumChangeDelegate OnGunBulletNumChangeDelegate;
  /* offset=0x0288 flags=0x0010000010080200 */ FOnBulletLeftNumChangeDelegate OnBulletLeftNumChangeDelegate;
};

class UShortcutMenu_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* but_boxClose;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button_NormalStuff;
  /* offset=0x023c flags=0x000a0010c008020c */ UGridPanel* GridPanel_BackPackMenu;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* HandClose;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* Image_MultipleItemsTips;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_OpenBlank;
  /* offset=0x024c flags=0x000a0010c008020c */ UPickUpBtnItem_BP_C* PickUpBtnItem_BP;
  /* offset=0x0250 flags=0x000a0010c008020c */ UGridPanel* PickupGridPanel;
  /* offset=0x0254 flags=0x000a0010c008020c */ USizeBox* SizeBox_List;
  /* offset=0x0258 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x025c flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x0260 flags=0x0000100010010205 */ FClickNormal ClickNormal;
  /* offset=0x026c flags=0x0000100010010205 */ FClickClosePickup ClickClosePickup;
  /* offset=0x0278 flags=0x0000100010010205 */ FClickCloseBox ClickCloseBox;

  void BndEvt__Button_NormalStuff_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();
  void ClickCloseBox__DelegateSignature();
  void ClickClosePickup__DelegateSignature();
  void ClickNormal__DelegateSignature();
  void ExecuteUbergraph_ShortcutMenu_BP(int32 EntryPoint);
  struct FEventReply On_HandClose_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
  struct FEventReply On_but_boxClose_MouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply CallFunc_Handled_ReturnValue, struct FEventReply CallFunc_CaptureMouse_ReturnValue);
};

class UShowLoginUICallbackProxy: public UBlueprintAsyncActionBase {
  /* offset=0x001c flags=0x0010000010080200 */ FOnlineShowLoginUIResult OnSuccess;
  /* offset=0x0028 flags=0x0010000010080200 */ FOnlineShowLoginUIResult OnFailure;

  UShowLoginUICallbackProxy* ShowExternalLoginUI(UObject* WorldContextObject, APlayerController* InPlayerController);
};

class USimpleConstructionScript: public UObject {
  /* offset=0x001c flags=0x0040000000000200 */ TArray<USCS_Node*> RootNodes;
  /* offset=0x0028 flags=0x0040000000000200 */ TArray<USCS_Node*> AllNodes;
  /* offset=0x0034 flags=0x0048001040000200 */ USCS_Node* DefaultSceneRootNode;
  /* offset=0x0038 flags=0x0048001060000200 */ USCS_Node* RootNode;
  /* offset=0x003c flags=0x0040000020000200 */ TArray<USCS_Node*> ActorComponentNodes;
};

class USimpleWheeledVehicleMovementComponent: public UWheeledVehicleMovementComponent {
  void SetBrakeTorque(float BrakeTorque, int32 WheelIndex);
  void SetDriveTorque(float DriveTorque, int32 WheelIndex);
  void SetSteerAngle(float SteerAngle, int32 WheelIndex);
};

class USizeBox: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_WidthOverride:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_HeightOverride:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_MinDesiredWidth:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_MinDesiredHeight:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_MaxDesiredWidth:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_MaxDesiredHeight:1;
  /* offset=0x00d5 flags=0x0018001000000001 */ uint8 bOverride_MaxAspectRatio:1;
  /* offset=0x00d8 flags=0x0018001040000215 */ float WidthOverride;
  /* offset=0x00dc flags=0x0018001040000215 */ float HeightOverride;
  /* offset=0x00e0 flags=0x0018001040000215 */ float MinDesiredWidth;
  /* offset=0x00e4 flags=0x0018001040000215 */ float MinDesiredHeight;
  /* offset=0x00e8 flags=0x0018001040000215 */ float MaxDesiredWidth;
  /* offset=0x00ec flags=0x0018001040000215 */ float MaxDesiredHeight;
  /* offset=0x00f0 flags=0x0018001040000215 */ float MaxAspectRatio;

  void ClearHeightOverride();
  void ClearMaxAspectRatio();
  void ClearMaxDesiredHeight();
  void ClearMaxDesiredWidth();
  void ClearMinDesiredHeight();
  void ClearMinDesiredWidth();
  void ClearWidthOverride();
  void SetHeightOverride(float InHeightOverride);
  void SetMaxAspectRatio(float InMaxAspectRatio);
  void SetMaxDesiredHeight(float InMaxDesiredHeight);
  void SetMaxDesiredWidth(float InMaxDesiredWidth);
  void SetMinDesiredHeight(float InMinDesiredHeight);
  void SetMinDesiredWidth(float InMinDesiredWidth);
  void SetWidthOverride(float InWidthOverride);
};

class USizeBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class USkeletalBodySetup: public UBodySetup {
  /* offset=0x0308 flags=0x0040000000000200 */ TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData;
};

class USkeletalMesh: public UObject {
  /* offset=0x002c flags=0x0018011040020215 */ USkeleton* Skeleton;
  /* offset=0x0030 flags=0x0040001040202000 */ struct FBoxSphereBounds ImportedBounds;
  /* offset=0x004c flags=0x0040001040202000 */ struct FBoxSphereBounds ExtendedBounds;
  /* offset=0x0068 flags=0x0028081040000015 */ struct FVector PositiveBoundsExtension;
  /* offset=0x0074 flags=0x0028081040000015 */ struct FVector NegativeBoundsExtension;
  /* offset=0x0080 flags=0x0010000000202215 */ TArray<struct FSkeletalMaterial> Materials;
  /* offset=0x008c flags=0x0010000000000241 */ TArray<struct FBoneMirrorInfo> SkelMirrorTable;
  /* offset=0x0098 flags=0x0018001040000201 */ uint8 SkelMirrorAxis;
  /* offset=0x0099 flags=0x0018001040000201 */ uint8 SkelMirrorFlipAxis;
  /* offset=0x009c flags=0x0010000000000241 */ TArray<struct FSkeletalMeshLODInfo> LODInfo;
  /* offset=0x00a8 flags=0x0018001000000001 */ uint8 bUseFullPrecisionUVs:1;
  /* offset=0x00a8 flags=0x0018001000000000 */ uint8 bHasBeenSimplified:1;
  /* offset=0x00a8 flags=0x0018001000000000 */ uint8 bHasVertexColors:1;
  /* offset=0x00a8 flags=0x0018001000000001 */ uint8 bEnablePerPolyCollision:1;
  /* offset=0x00ac flags=0x0018001040002200 */ UBodySetup* BodySetup;
  /* offset=0x00b0 flags=0x0018011040000215 */ UPhysicsAsset* PhysicsAsset;
  /* offset=0x00b4 flags=0x0018011040000215 */ UPhysicsAsset* ShadowPhysicsAsset;
  /* offset=0x00b8 flags=0x0010000000000255 */ TArray<UNodeMappingContainer*> NodeMappingData;
  /* offset=0x00c4 flags=0x0010000000000204 */ TArray<UMorphTarget*> MorphTargets;
  /* offset=0x01dc flags=0x0010000020000200 */ TArray<struct FClothingAssetData_Legacy> ClothingAssets;
  /* offset=0x01e8 flags=0x001c001040000215 */ UClass<UAnimInstance>* PostProcessAnimBlueprint;
  /* offset=0x01ec flags=0x0010000000000255 */ TArray<UClothingAssetBase*> MeshClothingAssets;
  /* offset=0x01f8 flags=0x00200c8000000209 */ TArray<UAssetUserData*> AssetUserData;
  /* offset=0x0208 flags=0x0040000000000200 */ TArray<USkeletalMeshSocket*> Sockets;

  USkeletalMeshSocket* FindSocket(FName InSocketName);
  USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32 OutIndex);
  struct FBoxSphereBounds GetBounds();
  struct FBoxSphereBounds GetImportedBounds();
  UNodeMappingContainer* GetNodeMappingContainer(UBlueprint* SourceAsset);
  USkeletalMeshSocket* GetSocketByIndex(int32 Index);
  bool IsSectionUsingCloth(int32 InSectionIndex, bool bCheckCorrespondingSections);
  int32 NumSockets();
};

class ASkeletalMeshActor: public AActor {
  /* offset=0x02ac flags=0x0018041000000005 */ uint8 bShouldDoAnimNotifies:1;
  /* offset=0x02ac flags=0x0018001020000000 */ uint8 bWakeOnLevelStart:1;
  /* offset=0x02b0 flags=0x00480010400a021d */ USkeletalMeshComponent* SkeletalMeshComponent;
  /* offset=0x02b4 flags=0x0018001140002220 */ USkeletalMesh* ReplicatedMesh;
  /* offset=0x02b8 flags=0x0018001140002220 */ UPhysicsAsset* ReplicatedPhysAsset;
  /* offset=0x02bc flags=0x0018001140000220 */ UMaterialInterface* ReplicatedMaterial0;
  /* offset=0x02c0 flags=0x0018001140000220 */ UMaterialInterface* ReplicatedMaterial1;

  void OnRep_ReplicatedMaterial0();
  void OnRep_ReplicatedMaterial1();
  void OnRep_ReplicatedMesh();
  void OnRep_ReplicatedPhysAsset();
};

class USkeletalMeshComponent: public USkinnedMeshComponent {
  /* offset=0x0704 flags=0x0028081040000215 */ uint8 AnimationMode;
  /* offset=0x0708 flags=0x0018001040000214 */ UClass<UObject>* AnimBlueprintGeneratedClass;
  /* offset=0x070c flags=0x001c001040000215 */ UClass<UAnimInstance>* AnimClass;
  /* offset=0x0710 flags=0x0018001440002200 */ UAnimInstance* AnimScriptInstance;
  /* offset=0x0714 flags=0x0010000000002200 */ TArray<UAnimInstance*> SubInstances;
  /* offset=0x0720 flags=0x0018001040002200 */ UAnimInstance* PostProcessAnimInstance;
  /* offset=0x0724 flags=0x0010001000000005 */ struct FSingleAnimationPlayData AnimationData;
  /* offset=0x0758 flags=0x0010000000002200 */ TArray<struct FTransform> CachedBoneSpaceTransforms;
  /* offset=0x0764 flags=0x0010000000002200 */ TArray<struct FTransform> CachedComponentSpaceTransforms;
  /* offset=0x0784 flags=0x0018041040000205 */ float GlobalAnimRateScale;
  /* offset=0x0788 flags=0x0018041040000215 */ enum EDynamicActorScene UseAsyncScene;
  /* offset=0x0789 flags=0x0018001000002000 */ uint8 bHasValidBodies:1;
  /* offset=0x078a flags=0x0018041040000205 */ uint8 KinematicBonesUpdateType;
  /* offset=0x078b flags=0x0018001040000205 */ uint8 PhysicsTransformUpdateMode;
  /* offset=0x078c flags=0x0018001000002000 */ uint8 bBlendPhysics:1;
  /* offset=0x078c flags=0x0018041000000005 */ uint8 bEnablePhysicsOnDedicatedServer:1;
  /* offset=0x078c flags=0x0018041000000005 */ uint8 bUpdateJointsFromAnimation:1;
  /* offset=0x078c flags=0x0018001000000005 */ uint8 bDisableClothSimulation:1;
  /* offset=0x078c flags=0x0048041000000001 */ uint8 bAllowAnimCurveEvaluation:1;
  /* offset=0x078c flags=0x0048001020000000 */ uint8 bDisableAnimCurves:1;
  /* offset=0x0790 flags=0x0040000000002200 */ TArray<FName> DisallowedAnimCurves;
  /* offset=0x079c flags=0x0018001000000005 */ uint8 bCollideWithEnvironment:1;
  /* offset=0x079c flags=0x0018001000000005 */ uint8 bCollideWithAttachedChildren:1;
  /* offset=0x079c flags=0x0018001000000005 */ uint8 bLocalSpaceSimulation:1;
  /* offset=0x079c flags=0x0018001000000001 */ uint8 bClothMorphTarget:1;
  /* offset=0x079c flags=0x0018001000000005 */ uint8 bResetAfterTeleport:1;
  /* offset=0x07a0 flags=0x0018001040000205 */ float ClothBlendWeight;
  /* offset=0x07a8 flags=0x0018001040002000 */ struct FVector RootBoneTranslation;
  /* offset=0x07b4 flags=0x0018041000000015 */ uint8 bDeferMovementFromSceneQueries:1;
  /* offset=0x07b4 flags=0x0018041000000005 */ uint8 bNoSkeletonUpdate:1;
  /* offset=0x07b4 flags=0x0018041000000005 */ uint8 bPauseAnims:1;
  /* offset=0x07b5 flags=0x0018041040000201 */ bool bUseRefPoseOnInitAnim;
  /* offset=0x07b6 flags=0x0018041000000015 */ uint8 bEnablePerPolyCollision:1;
  /* offset=0x07b8 flags=0x0018001040002200 */ UBodySetup* BodySetup;
  /* offset=0x07bc flags=0x0018001040000200 */ bool bForceRefpose;
  /* offset=0x07bd flags=0x0018001000002000 */ uint8 bOnlyAllowAutonomousTickPose:1;
  /* offset=0x07bd flags=0x0018001000002000 */ uint8 bIsAutonomousTickPose:1;
  /* offset=0x07bd flags=0x0018001000000000 */ uint8 bOldForceRefPose:1;
  /* offset=0x07bd flags=0x0018001000000000 */ uint8 bShowPrePhysBones:1;
  /* offset=0x07bd flags=0x0018001000002000 */ uint8 bRequiredBonesUpToDate:1;
  /* offset=0x07bd flags=0x0018001000002000 */ uint8 bAnimTreeInitialised:1;
  /* offset=0x07bd flags=0x0018041000000015 */ uint8 bIncludeComponentLocationIntoBounds:1;
  /* offset=0x07bd flags=0x0018001000000000 */ uint8 bEnableLineCheckWithBounds:1;
  /* offset=0x07be flags=0x0018001040002200 */ uint16 CachedAnimCurveUidVersion;
  /* offset=0x07c0 flags=0x0018001040000000 */ struct FVector LineCheckBoundsScale;
  /* offset=0x07d0 flags=0x0010000010080200 */ FConstraintBrokenSignature OnConstraintBroken;
  /* offset=0x0898 flags=0x001c001040000201 */ UClass<UClothingSimulationFactory>* ClothingSimulationFactory;
  /* offset=0x089c flags=0x0048001040000205 */ float TeleportDistanceThreshold;
  /* offset=0x08a0 flags=0x0048001040000205 */ float TeleportRotationThreshold;
  /* offset=0x0990 flags=0x0010000010080200 */ FOnAnimInitialized OnAnimInitialized;
  /* offset=0x0a24 flags=0x0048001060000200 */ UAnimSequence* SequenceToPlay;
  /* offset=0x0a28 flags=0x0048001060000200 */ UAnimationAsset* AnimToPlay;
  /* offset=0x0a2c flags=0x0048001020000000 */ uint8 bDefaultLooping:1;
  /* offset=0x0a2c flags=0x0048001020000000 */ uint8 bDefaultPlaying:1;
  /* offset=0x0a30 flags=0x0048001060000200 */ float DefaultPosition;
  /* offset=0x0a34 flags=0x0048001060000200 */ float DefaultPlayRate;
  /* offset=0x0a38 flags=0x0048001040002200 */ uint32 LastPoseTickFrame;
  /* offset=0x0a3c flags=0x0018001040002200 */ float LastPoseTickTime;
  /* offset=0x0b20 flags=0x0048001040002200 */ bool bNeedsQueuedAnimEventsDispatched;

  void AccumulateAllBodiesBelowPhysicsBlendWeight(FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
  void AddForceToAllBodiesBelow(struct FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);
  void AddImpulseToAllBodiesBelow(struct FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);
  void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);
  void BindClothToMasterPoseComponent();
  void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, FName InBoneName);
  void ClearMorphTargets();
  FName FindConstraintBoneName(int32 ConstraintIndex);
  void ForceClothNextUpdateTeleport();
  void ForceClothNextUpdateTeleportAndReset();
  bool GetAllowedAnimCurveEvaluate();
  UAnimInstance* GetAnimInstance();
  uint8 GetAnimationMode();
  float GetBoneMass(FName BoneName, bool bScaleMass);
  float GetClothMaxDistanceScale();
  void GetCurrentJointAngles(FName InBoneName, float Swing1Angle, float TwistAngle, float Swing2Angle);
  bool GetDisableAnimCurves();
  float GetMorphTarget(FName MorphTargetName);
  float GetPlayRate();
  float GetPosition();
  UAnimInstance* GetPostProcessInstance();
  struct FVector GetSkeletalCenterOfMass();
  float GetTeleportDistanceThreshold();
  float GetTeleportRotationThreshold();
  bool IsBodyGravityEnabled(FName BoneName);
  bool IsClothingSimulationSuspended();
  bool IsPlaying();
  bool K2_GetClosestPointOnPhysicsAsset(struct FVector WorldPosition, struct FVector ClosestWorldPosition, struct FVector Normal, FName BoneName, float Distance);
  void OverrideAnimationData(UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
  void Play(bool bLooping);
  void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping);
  void ResetAllBodiesSimulatePhysics();
  void ResetAllowedAnimCurveEvaluation();
  void ResetClothTeleportMode();
  void ResumeClothingSimulation();
  void SetAllBodiesBelowPhysicsBlendWeight(FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
  void SetAllBodiesBelowSimulatePhysics(FName InBoneName, bool bNewSimulate, bool bIncludeSelf);
  void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
  void SetAllBodiesSimulatePhysics(bool bNewSimulate);
  void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
  void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
  void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
  void SetAllowAnimCurveEvaluation(bool bInAllow);
  void SetAllowedAnimCurvesEvaluation(TArray<FName> List, bool bAllow);
  void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
  void SetAnimInstanceClass(UClass<UObject>* NewClass);
  void SetAnimation(UAnimationAsset* NewAnimToPlay);
  void SetAnimationMode(uint8 InAnimationMode);
  void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);
  void SetClothMaxDistanceScale(float Scale);
  void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);
  void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);
  void SetDisableAnimCurves(bool bInDisableAnimCurves);
  void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);
  void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);
  void SetEnablePhysicsBlending(bool bNewBlendPhysics);
  void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);
  void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);
  void SetPhysicsBlendWeight(float PhysicsBlendWeight);
  void SetPlayRate(float Rate);
  void SetPosition(float InPos, bool bFireNotifies);
  void SetTeleportDistanceThreshold(float Threshold);
  void SetTeleportRotationThreshold(float Threshold);
  void SetUpdateAnimationInEditor(bool NewUpdateState);
  void SnapshotPose(struct FPoseSnapshot Snapshot);
  void Stop();
  void SuspendClothingSimulation();
  void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
};

class USkeletalMeshReductionSettings: public UObject {
  /* offset=0x001c flags=0x0020080000044200 */ TArray<struct FSkeletalMeshLODGroupSettings> Settings;
};

class USkeletalMeshSocket: public UObject {
  /* offset=0x0020 flags=0x0018001040020215 */ FName SocketName;
  /* offset=0x0028 flags=0x0018001040020215 */ FName BoneName;
  /* offset=0x0030 flags=0x0018001040000015 */ struct FVector RelativeLocation;
  /* offset=0x003c flags=0x0010001040000015 */ struct FRotator RelativeRotation;
  /* offset=0x0048 flags=0x0018001040000015 */ struct FVector RelativeScale;
  /* offset=0x0054 flags=0x0018001040000215 */ bool bForceAlwaysAnimated;

  struct FVector GetSocketLocation(USkeletalMeshComponent* SkelComp);
  void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal);
};

class USkeleton: public UObject {
  /* offset=0x0020 flags=0x0020080000020201 */ TArray<struct FBoneNode> BoneTree;
  /* offset=0x002c flags=0x0020080020000200 */ TArray<struct FTransform> RefLocalPoses;
  /* offset=0x0108 flags=0x0028081040000000 */ struct FGuid VirtualBoneGuid;
  /* offset=0x0118 flags=0x0020080000000200 */ TArray<struct FVirtualBone> VirtualBones;
  /* offset=0x0124 flags=0x0010000000000200 */ TArray<USkeletalMeshSocket*> Sockets;
  /* offset=0x016c flags=0x0020080000000000 */ struct FSmartNameContainer SmartNames;
  /* offset=0x01b8 flags=0x0010008000000208 */ TArray<UBlendProfile*> BlendProfiles;
  /* offset=0x01c4 flags=0x0040000000000200 */ TArray<struct FAnimSlotGroup> SlotGroups;
  /* offset=0x02c8 flags=0x00200c8000000209 */ TArray<UAssetUserData*> AssetUserData;
};

class USkillUtils: public UObject {
  UMeshComponent* GetMeshCompFromCharacter(ASTExtraBaseCharacter* pChar, FName MeshTagName);
  void GetParticleComps(AActor* UserActor, FName ParticleTagName, TArray<UParticleSystemComponent*> OutParArr);
  ASTExtraPlayerController* GetPlayerController(APawn* OwnerPawn);
  bool IsCurUseGrenade(ASTExtraBaseCharacter* pChar);
};

class ASkill_AdrenalineSyringe_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Bandage_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_EnergyDrink_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_FirstAidKit_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_GasCan_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Grenade_Frag_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Grenade_Molotov_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Grenade_Smoke_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Grenade_Stun_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_MedKit_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Melee_Cowbar_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Melee_Machete_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Melee_Pan_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Melee_Sickle_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Painkiller_BP_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class ASkill_Punch_Fist_bp_C: public AUAESkill {
  /* offset=0x03b0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class USkinnedMeshComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0018001040000215 */ USkeletalMesh* SkeletalMesh;
  /* offset=0x05e0 flags=0x001c00104008021c */ USkinnedMeshComponent* MasterPoseComponent;
  /* offset=0x062c flags=0x0018041000000005 */ uint8 bUseBoundsFromMasterPoseComponent:1;
  /* offset=0x0648 flags=0x0018041040000215 */ UPhysicsAsset* PhysicsAssetOverride;
  /* offset=0x064c flags=0x0018041040000215 */ int32 ForcedLodModel;
  /* offset=0x0650 flags=0x0018041040000215 */ int32 MinLodModel;
  /* offset=0x0660 flags=0x0010000000002200 */ TArray<struct FSkelMeshComponentLODInfo> LODInfo;
  /* offset=0x066c flags=0x0018041040000205 */ float StreamingDistanceMultiplier;
  /* offset=0x0670 flags=0x0018041040000015 */ struct FColor WireframeColor;
  /* offset=0x0674 flags=0x0018001000000000 */ uint8 bForceWireframe:1;
  /* offset=0x0674 flags=0x0018001020000000 */ uint8 bDisplayBones:1;
  /* offset=0x0674 flags=0x0018041000000005 */ uint8 bDisableMorphTarget:1;
  /* offset=0x0674 flags=0x0018001000000000 */ uint8 bHideSkin:1;
  /* offset=0x0684 flags=0x0018041000000015 */ uint8 bPerBoneMotionBlur:1;
  /* offset=0x0684 flags=0x0018041000000005 */ uint8 bComponentUseFixedSkelBounds:1;
  /* offset=0x0684 flags=0x0018041000000005 */ uint8 bConsiderAllBodiesForBounds:1;
  /* offset=0x0685 flags=0x0018041040000205 */ uint8 MeshComponentUpdateFlag;
  /* offset=0x0686 flags=0x0018041040000205 */ bool NeedUpdateEveryFrame;
  /* offset=0x0687 flags=0x0048001000002000 */ uint8 bForceMeshObjectUpdate:1;
  /* offset=0x0687 flags=0x0018001000002000 */ uint8 bCanHighlightSelectedSections:1;
  /* offset=0x0687 flags=0x0018001000002000 */ uint8 bRecentlyRendered:1;
  /* offset=0x0688 flags=0x0018001040002200 */ uint8 CustomSortAlternateIndexMode;
  /* offset=0x0689 flags=0x0018041000000015 */ uint8 bCastCapsuleDirectShadow:1;
  /* offset=0x0689 flags=0x0018041000000015 */ uint8 bCastCapsuleIndirectShadow:1;
  /* offset=0x068c flags=0x0018041040000215 */ float CapsuleIndirectShadowMinVisibility;
  /* offset=0x0690 flags=0x0018001000002000 */ uint8 bCPUSkinning:1;
  /* offset=0x069c flags=0x0020081040002000 */ struct FBoxSphereBounds CachedLocalBounds;
  /* offset=0x06b8 flags=0x0028081040002200 */ bool bCachedLocalBoundsUpToDate;
  /* offset=0x06b9 flags=0x0018041040000205 */ bool bEnableUpdateRateOptimizations;
  /* offset=0x06ba flags=0x0018041040000205 */ bool bDisplayDebugUpdateRateOptimizations;

  bool BoneIsChildOf(FName BoneName, FName ParentBoneName);
  void ClearSkinWeightOverride(int32 LODIndex);
  void ClearVertexColorOverride(int32 LODIndex);
  FName FindClosestBone_K2(struct FVector TestLocation, struct FVector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);
  int32 GetBoneIndex(FName BoneName);
  FName GetBoneName(int32 BoneIndex);
  int32 GetNumBones();
  FName GetParentBone(FName BoneName);
  FName GetSocketBoneName(FName InSocketName);
  void HideBoneByName(FName BoneName, uint8 PhysBodyOption);
  bool IsBoneHiddenByName(FName BoneName);
  void SetCapsuleIndirectShadowMinVisibility(float NewValue);
  void SetCastCapsuleDirectShadow(bool bNewValue);
  void SetCastCapsuleIndirectShadow(bool bNewValue);
  void SetForcedLOD(int32 InNewForcedLOD);
  void SetMasterPoseComponent(USkinnedMeshComponent* NewMasterBoneComponent);
  void SetMinLOD(int32 InNewMinLOD);
  void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
  void SetSkeletalMesh(USkeletalMesh* NewMesh, bool bReinitPose);
  void SetSkinWeightOverride(int32 LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);
  void SetVertexColorOverride_LinearColor(int32 LODIndex, TArray<struct FLinearColor> VertexColors);
  void TransformFromBoneSpace(FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector OutPosition, struct FRotator OutRotation);
  void TransformToBoneSpace(FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector OutPosition, struct FRotator OutRotation);
  void UnHideBoneByName(FName BoneName);
};

class ASkyLight: public AInfo {
  /* offset=0x02a8 flags=0x00480010400a021d */ USkyLightComponent* LightComponent;
  /* offset=0x02ac flags=0x0018001100000020 */ uint8 bEnabled:1;

  void OnRep_bEnabled();
};

class USkyLightComponent: public ULightComponentBase {
  /* offset=0x0298 flags=0x0018001040000215 */ uint8 SourceType;
  /* offset=0x029c flags=0x0018001040000215 */ UTextureCube* Cubemap;
  /* offset=0x02a0 flags=0x0018001040000215 */ float SourceCubemapAngle;
  /* offset=0x02a4 flags=0x0018001040000215 */ int32 CubemapResolution;
  /* offset=0x02a8 flags=0x0018001040000215 */ float SkyDistanceThreshold;
  /* offset=0x02ac flags=0x0018041040000215 */ bool bCaptureEmissiveOnly;
  /* offset=0x02ad flags=0x0018041040000215 */ bool bLowerHemisphereIsBlack;
  /* offset=0x02b0 flags=0x0018041040000015 */ struct FLinearColor LowerHemisphereColor;
  /* offset=0x02c0 flags=0x0018001040000215 */ float OcclusionMaxDistance;
  /* offset=0x02c4 flags=0x0018001040000215 */ float Contrast;
  /* offset=0x02c8 flags=0x0018001040000215 */ float OcclusionExponent;
  /* offset=0x02cc flags=0x0018001040000215 */ float MinOcclusion;
  /* offset=0x02d0 flags=0x0018001040000015 */ struct FColor OcclusionTint;
  /* offset=0x02d4 flags=0x0018001040000215 */ uint8 OcclusionCombineMode;
  /* offset=0x0378 flags=0x0028081040002200 */ UTextureCube* BlendDestinationCubemap;

  void RecaptureSky();
  void SetCubemap(UTextureCube* NewCubemap);
  void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction);
  void SetIndirectLightingIntensity(float NewIntensity);
  void SetIntensity(float NewIntensity);
  void SetLightColor(struct FLinearColor NewLightColor);
  void SetMinOcclusion(float InMinOcclusion);
  void SetOcclusionContrast(float InOcclusionContrast);
  void SetOcclusionExponent(float InOcclusionExponent);
  void SetOcclusionTint(struct FColor InTint);
  void SetVolumetricScatteringIntensity(float NewIntensity);
};

class USlap_IMSDKNotice_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_poster_UIBP_C* Lobby_poster_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UImage* UrlImage;
  /* offset=0x023c flags=0x0008001040010205 */ UButton* UrlBtn;
  /* offset=0x0240 flags=0x0008001040010a05 */ Abp_notice_intl_C* Bp_Slap_IMSDKNotice;
  /* offset=0x0244 flags=0x0008000000010205 */ FString URL;
  /* offset=0x0250 flags=0x0008001040010205 */ UButton* CloseBtn;

  void ClickUrl();
  void Construct();
  void DownloadUrl(FString URL);
  void ExecuteUbergraph_Slap_IMSDKNotice_BP(int32 EntryPoint, UTexture2DDynamic* K2Node_CustomEvent_Texture2, FDownloadImageDelegate K2Node_CreateDelegate_OutputDelegate, UTexture2DDynamic* K2Node_CustomEvent_Texture, FDownloadImageDelegate K2Node_CreateDelegate_OutputDelegate2, UTexture2DDynamic* ___object_Variable, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_notice_intl_C* K2Node_DynamicCast_AsBp_Notice_Intl, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_Url, FString CallFunc_GetFormatUrl_returl, bool CallFunc_GetFormatUrl_ishttp, bool CallFunc_StartsWith_ReturnValue, UAsyncTaskDownloadImage* CallFunc_DownloadImage_ReturnValue, UTexture2D* CallFunc_GetTexture2DFromDiskFile_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void GetFormatUrl(FString URL, FString returl, bool ishttp, FString Prefix, FString formatUrl, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_StartsWith_ReturnValue2);
  void HideAndDone();
  void HideAndNext();
  void OnFail_E7C8AE3943C32078D80B4E913BD8F0DA(UTexture2DDynamic* Texture);
  void OnSuccess_E7C8AE3943C32078D80B4E913BD8F0DA(UTexture2DDynamic* Texture);
  void ShowSlapIMSDKNotice(UIMSDKNotice* CallFunc_GetInstance_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, TArray<struct FIMSDKNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void TryToShowSlapIMSDKNotice();
};

class USlap_Notice_BP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ ULobby_poster_UIBP_C* Lobby_poster_UIBP;
  /* offset=0x0238 flags=0x0008001040010205 */ UImage* UrlImage;
  /* offset=0x023c flags=0x0008001040010205 */ UButton* UrlBtn;
  /* offset=0x0240 flags=0x0008001040010a05 */ Abp_notice_C* Bp_Slap_Notice;
  /* offset=0x0244 flags=0x0008000000010205 */ FString URL;
  /* offset=0x0250 flags=0x0008001040010205 */ UButton* CloseBtn;

  void ClickUrl();
  void Construct();
  void DownloadUrl(FString URL);
  void ExecuteUbergraph_Slap_Notice_BP(int32 EntryPoint, UTexture2DDynamic* K2Node_CustomEvent_Texture2, FDownloadImageDelegate K2Node_CreateDelegate_OutputDelegate, UTexture2DDynamic* K2Node_CustomEvent_Texture, FDownloadImageDelegate K2Node_CreateDelegate_OutputDelegate2, UTexture2DDynamic* ___object_Variable, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate3, FOnButtonClickedEvent K2Node_CreateDelegate_OutputDelegate4, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, Abp_notice_C* K2Node_DynamicCast_AsBp_Notice, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_Url, FString CallFunc_GetFormatUrl_returl, bool CallFunc_GetFormatUrl_ishttp, bool CallFunc_StartsWith_ReturnValue, UAsyncTaskDownloadImage* CallFunc_DownloadImage_ReturnValue, UTexture2D* CallFunc_GetTexture2DFromDiskFile_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue);
  void GetFormatUrl(FString URL, FString returl, bool ishttp, FString Prefix, FString formatUrl, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_StartsWith_ReturnValue2);
  void HideAndDone();
  void HideAndNext();
  void OnFail_D5603E55462F917CFF9838972D32A943(UTexture2DDynamic* Texture);
  void OnSuccess_D5603E55462F917CFF9838972D32A943(UTexture2DDynamic* Texture);
  void ShowSlapNotice(int32 CallFunc_PostEventAtLocation_ReturnValue, UGCloudNotice* CallFunc_GetInstance_ReturnValue, TArray<struct FNoticeInfo> CallFunc_GetNotice_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
  void TryToShowSlapNotice();
};

class USlateBlueprintLibrary: public UBlueprintFunctionLibrary {
  struct FVector2D AbsoluteToLocal(struct FGeometry Geometry, struct FVector2D AbsoluteCoordinate);
  void AbsoluteToViewport(UObject* WorldContextObject, struct FVector2D AbsoluteDesktopCoordinate, struct FVector2D PixelPosition, struct FVector2D ViewportPosition);
  bool EqualEqual_SlateBrush(struct FSlateBrush A, struct FSlateBrush B);
  struct FVector2D GetAbsoluteSize(struct FGeometry Geometry);
  struct FVector2D GetLocalSize(struct FGeometry Geometry);
  bool IsUnderLocation(struct FGeometry Geometry, struct FVector2D AbsoluteCoordinate);
  struct FVector2D LocalToAbsolute(struct FGeometry Geometry, struct FVector2D LocalCoordinate);
  void LocalToViewport(UObject* WorldContextObject, struct FGeometry Geometry, struct FVector2D LocalCoordinate, struct FVector2D PixelPosition, struct FVector2D ViewportPosition);
  void ScreenToViewport(UObject* WorldContextObject, struct FVector2D ScreenPosition, struct FVector2D ViewportPosition);
  void ScreenToWidgetAbsolute(UObject* WorldContextObject, struct FVector2D ScreenPosition, struct FVector2D AbsoluteCoordinate);
  void ScreenToWidgetLocal(UObject* WorldContextObject, struct FGeometry Geometry, struct FVector2D ScreenPosition, struct FVector2D LocalCoordinate);
};

class USlateBrushAsset: public UObject {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FSlateBrush Brush;
};

class USlateDataSheet: public UObject {
  /* offset=0x001c flags=0x0028081040002200 */ UTexture2D* DataTexture;
};

class USlateSettings: public UObject {
  /* offset=0x001c flags=0x0018001040004201 */ bool bExplicitCanvasChildZOrder;
};

class USlateTextureAtlasInterface: public UInterface {
};

class USlateTypes: public UObject {
};

class USlateVectorArtData: public UObject {
  /* offset=0x001c flags=0x0040000000000200 */ TArray<struct FSlateMeshVertex> VertexData;
  /* offset=0x0028 flags=0x0040000000000200 */ TArray<uint32> IndexData;
  /* offset=0x0034 flags=0x0048001040000200 */ UMaterialInterface* Material;
  /* offset=0x0038 flags=0x0048001040000000 */ struct FVector2D ExtentMin;
  /* offset=0x0040 flags=0x0048001040000000 */ struct FVector2D ExtentMax;
};

class USlateWidgetStyleAsset: public UObject {
  /* offset=0x001c flags=0x001a001040080209 */ USlateWidgetStyleContainerBase* CustomStyle;
};

class USlateWidgetStyleContainerBase: public UObject {
};

class USlateWidgetStyleContainerInterface: public UInterface {
};

class USlider: public UWidget {
  /* offset=0x00c8 flags=0x0018001040000201 */ float Value;
  /* offset=0x00d0 flags=0x0010001000080200 */ FGetFloat ValueDelegate;
  /* offset=0x00e0 flags=0x0010000000000005 */ struct FSliderStyle WidgetStyle;
  /* offset=0x0290 flags=0x0018001040000215 */ uint8 Orientation;
  /* offset=0x0294 flags=0x0018001040000015 */ struct FLinearColor SliderBarColor;
  /* offset=0x02a4 flags=0x0018001040000015 */ struct FLinearColor SliderHandleColor;
  /* offset=0x02b4 flags=0x0018041040000215 */ bool IndentHandle;
  /* offset=0x02b5 flags=0x0018041040000215 */ bool Locked;
  /* offset=0x02b8 flags=0x0018001040000215 */ float StepSize;
  /* offset=0x02bc flags=0x0018001040000215 */ bool IsFocusable;
  /* offset=0x02c0 flags=0x0010000010080200 */ FOnMouseCaptureBeginEvent OnMouseCaptureBegin;
  /* offset=0x02cc flags=0x0010000010080200 */ FOnMouseCaptureEndEvent OnMouseCaptureEnd;
  /* offset=0x02d8 flags=0x0010000010080200 */ FOnControllerCaptureBeginEvent OnControllerCaptureBegin;
  /* offset=0x02e4 flags=0x0010000010080200 */ FOnControllerCaptureEndEvent OnControllerCaptureEnd;
  /* offset=0x02f0 flags=0x0010000010080200 */ FOnFloatValueChangedEvent OnValueChanged;

  float GetValue();
  void SetIndentHandle(bool InValue);
  void SetLocked(bool InValue);
  void SetSliderBarColor(struct FLinearColor InValue);
  void SetSliderHandleColor(struct FLinearColor InValue);
  void SetStepSize(float InValue);
  void SetValue(float InValue);
};

class USmokeTestCommandlet: public UCommandlet {
};

class USoftClassProperty: public USoftObjectProperty {
};

class USoftObjectProperty: public UObjectPropertyBase {
};

class USoundAttenuation: public UObject {
  /* offset=0x001c flags=0x0010000000000015 */ struct FSoundAttenuationSettings Attenuation;
};

class USoundBase: public UObject {
  /* offset=0x001c flags=0x0028091040000201 */ USoundClass* SoundClassObject;
  /* offset=0x0020 flags=0x0018001000000001 */ uint8 bDebug:1;
  /* offset=0x0020 flags=0x0018001000000005 */ uint8 bOverrideConcurrency:1;
  /* offset=0x0020 flags=0x0018001000000005 */ uint8 bOutputToBusOnly:1;
  /* offset=0x0020 flags=0x0018001020000000 */ uint8 bIgnoreFocus:1;
  /* offset=0x0024 flags=0x0018001040000205 */ USoundConcurrency* SoundConcurrencySettings;
  /* offset=0x0028 flags=0x0010001000000005 */ struct FSoundConcurrencySettings ConcurrencyOverrides;
  /* offset=0x0034 flags=0x0018001060000200 */ uint8 MaxConcurrentResolutionRule;
  /* offset=0x0038 flags=0x0018001060000200 */ int32 MaxConcurrentPlayCount;
  /* offset=0x003c flags=0x0018011040020215 */ float Duration;
  /* offset=0x0040 flags=0x0018001040000201 */ USoundAttenuation* AttenuationSettings;
  /* offset=0x0044 flags=0x0018001040000205 */ float Priority;
  /* offset=0x0048 flags=0x0018001040000205 */ USoundSubmix* SoundSubmixObject;
  /* offset=0x004c flags=0x0010000000000205 */ TArray<struct FSoundSubmixSendInfo> SoundSubmixSends;
  /* offset=0x0058 flags=0x0018001040000205 */ USoundEffectSourcePresetChain* SourceEffectChain;
  /* offset=0x005c flags=0x0010000000000205 */ TArray<struct FSoundSourceBusSendInfo> BusSends;
};

class USoundClass: public UObject {
  /* offset=0x001c flags=0x0010001000000001 */ struct FSoundClassProperties Properties;
  /* offset=0x0044 flags=0x0010000000000201 */ TArray<USoundClass*> ChildClasses;
  /* offset=0x0050 flags=0x0010000000000201 */ TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers;
  /* offset=0x005c flags=0x0018001040000200 */ USoundClass* ParentClass;
};

class USoundConcurrency: public UObject {
  /* offset=0x001c flags=0x0010001000000015 */ struct FSoundConcurrencySettings Concurrency;
};

class USoundCue: public USoundBase {
  /* offset=0x006c flags=0x0018001000000001 */ uint8 bOverrideAttenuation:1;
  /* offset=0x0070 flags=0x0018001040000200 */ USoundNode* FirstNode;
  /* offset=0x0074 flags=0x0018011040000201 */ float VolumeMultiplier;
  /* offset=0x0078 flags=0x0018011040000201 */ float PitchMultiplier;
  /* offset=0x007c flags=0x0010000000000001 */ struct FSoundAttenuationSettings AttenuationOverrides;
  /* offset=0x0290 flags=0x0028081040000201 */ float SubtitlePriority;
};

class USoundEffectPreset: public UObject {
};

class USoundEffectSourcePreset: public USoundEffectPreset {
};

class USoundEffectSourcePresetChain: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FSourceEffectChainEntry> Chain;
  /* offset=0x0028 flags=0x0018001000000001 */ uint8 bPlayEffectChainTails:1;
};

class USoundEffectSubmixPreset: public USoundEffectPreset {
};

class USoundGroups: public UObject {
  /* offset=0x001c flags=0x0040000000004200 */ TArray<struct FSoundGroup> SoundGroupProfiles;
};

class USoundMix: public UObject {
  /* offset=0x001c flags=0x0018011000000001 */ uint8 bApplyEQ:1;
  /* offset=0x0020 flags=0x0018001040000201 */ float EQPriority;
  /* offset=0x0028 flags=0x0010001000000001 */ struct FAudioEQEffect EQSettings;
  /* offset=0x0060 flags=0x0010000000000201 */ TArray<struct FSoundClassAdjuster> SoundClassEffects;
  /* offset=0x006c flags=0x0018001040000201 */ float InitialDelay;
  /* offset=0x0070 flags=0x0018001040000201 */ float FadeInTime;
  /* offset=0x0074 flags=0x0018001040000201 */ float Duration;
  /* offset=0x0078 flags=0x0018001040000201 */ float FadeOutTime;
};

class USoundNode: public UObject {
  /* offset=0x001c flags=0x0010000000000200 */ TArray<USoundNode*> ChildNodes;
};

class USoundNodeAssetReferencer: public USoundNode {
};

class USoundNodeAttenuation: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ USoundAttenuation* AttenuationSettings;
  /* offset=0x002c flags=0x0010000000000001 */ struct FSoundAttenuationSettings AttenuationOverrides;
  /* offset=0x0240 flags=0x0018001000000001 */ uint8 bOverrideAttenuation:1;
};

class USoundNodeBranch: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ FName BoolParameterName;
};

class USoundNodeConcatenator: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000241 */ TArray<float> InputVolume;
};

class USoundNodeDelay: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ float DelayMin;
  /* offset=0x002c flags=0x0018001040000201 */ float DelayMax;
};

class USoundNodeDialoguePlayer: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000001 */ struct FDialogueWaveParameter DialogueWaveParameter;
  /* offset=0x003c flags=0x0018001000000001 */ uint8 bLooping:1;
};

class USoundNodeDistanceCrossFade: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000249 */ TArray<struct FDistanceDatum> CrossFadeInput;
};

class USoundNodeDoppler: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ float DopplerIntensity;
};

class USoundNodeEnveloper: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ float LoopStart;
  /* offset=0x002c flags=0x0018001040000201 */ float LoopEnd;
  /* offset=0x0030 flags=0x0018001040000201 */ float DurationAfterLoop;
  /* offset=0x0034 flags=0x0018001040000201 */ int32 LoopCount;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bLoopIndefinitely:1;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bLoop:1;
  /* offset=0x003c flags=0x0018001060080208 */ UDistributionFloatConstantCurve* VolumeInterpCurve;
  /* offset=0x0040 flags=0x0018001060080208 */ UDistributionFloatConstantCurve* PitchInterpCurve;
  /* offset=0x0044 flags=0x0010000000000001 */ struct FRuntimeFloatCurve VolumeCurve;
  /* offset=0x009c flags=0x0010000000000001 */ struct FRuntimeFloatCurve PitchCurve;
  /* offset=0x00f4 flags=0x0018001040000201 */ float PitchMin;
  /* offset=0x00f8 flags=0x0018001040000201 */ float PitchMax;
  /* offset=0x00fc flags=0x0018001040000201 */ float VolumeMin;
  /* offset=0x0100 flags=0x0018001040000201 */ float VolumeMax;
};

class USoundNodeGroupControl: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000241 */ TArray<int32> GroupSizes;
};

class USoundNodeLooping: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ int32 LoopCount;
  /* offset=0x002c flags=0x0018001000000001 */ uint8 bLoopIndefinitely:1;
};

class USoundNodeMature: public USoundNode {
};

class USoundNodeMixer: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000249 */ TArray<float> InputVolume;
};

class USoundNodeModulator: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ float PitchMin;
  /* offset=0x002c flags=0x0018001040000201 */ float PitchMax;
  /* offset=0x0030 flags=0x0018001040000201 */ float VolumeMin;
  /* offset=0x0034 flags=0x0018001040000201 */ float VolumeMax;
};

class USoundNodeModulatorContinuous: public USoundNode {
  /* offset=0x0028 flags=0x0010001000000001 */ struct FModulatorContinuousParams PitchModulationParams;
  /* offset=0x0048 flags=0x0010001000000001 */ struct FModulatorContinuousParams VolumeModulationParams;
};

class USoundNodeOscillator: public USoundNode {
  /* offset=0x0028 flags=0x0018001000000001 */ uint8 bModulateVolume:1;
  /* offset=0x0028 flags=0x0018001000000001 */ uint8 bModulatePitch:1;
  /* offset=0x002c flags=0x0018001040000201 */ float AmplitudeMin;
  /* offset=0x0030 flags=0x0018001040000201 */ float AmplitudeMax;
  /* offset=0x0034 flags=0x0018001040000201 */ float FrequencyMin;
  /* offset=0x0038 flags=0x0018001040000201 */ float FrequencyMax;
  /* offset=0x003c flags=0x0018001040000201 */ float OffsetMin;
  /* offset=0x0040 flags=0x0018001040000201 */ float OffsetMax;
  /* offset=0x0044 flags=0x0018001040000201 */ float CenterMin;
  /* offset=0x0048 flags=0x0018001040000201 */ float CenterMax;
};

class USoundNodeParamCrossFade: public USoundNodeDistanceCrossFade {
  /* offset=0x0038 flags=0x0018001040000201 */ FName ParamName;
};

class USoundNodeQualityLevel: public USoundNode {
};

class USoundNodeRandom: public USoundNode {
  /* offset=0x0028 flags=0x0010000000000241 */ TArray<float> Weights;
  /* offset=0x0034 flags=0x0018001040000201 */ int32 PreselectAtLevelLoad;
  /* offset=0x0038 flags=0x0018001000000001 */ uint8 bRandomizeWithoutReplacement:1;
  /* offset=0x003c flags=0x0010000000002200 */ TArray<bool> HasBeenUsed;
  /* offset=0x0048 flags=0x0018001040002200 */ int32 NumRandomUsed;
};

class USoundNodeSoundClass: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ USoundClass* SoundClassOverride;
};

class USoundNodeSwitch: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ FName IntParameterName;
};

class USoundNodeWaveParam: public USoundNode {
  /* offset=0x0028 flags=0x0018001040000201 */ FName WaveParameterName;
};

class USoundNodeWavePlayer: public USoundNodeAssetReferencer {
  /* offset=0x0028 flags=0x004c000000000001 */ USoundWave* SoundWaveAssetPtr;
  /* offset=0x0050 flags=0x0048001040002200 */ USoundWave* SoundWave;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bLooping:1;
};

class USoundSourceBus: public USoundWave {
  /* offset=0x01cc flags=0x0018001040000201 */ enum ESourceBusChannels SourceBusChannels;
  /* offset=0x01d0 flags=0x0018001040000201 */ float SourceBusDuration;
  /* offset=0x01d4 flags=0x0018001000000001 */ uint8 bAutoDeactivateWhenSilent:1;
};

class USoundSubmix: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<USoundSubmix*> ChildSubmixes;
  /* offset=0x0028 flags=0x0018001040000200 */ USoundSubmix* ParentSubmix;
  /* offset=0x002c flags=0x0010000000000201 */ TArray<USoundEffectSubmixPreset*> SubmixEffectChain;
};

class USoundWave: public USoundBase {
  /* offset=0x006c flags=0x0018011040000201 */ int32 CompressionQuality;
  /* offset=0x0070 flags=0x0018011000000001 */ uint8 bLooping:1;
  /* offset=0x0070 flags=0x0018001000000001 */ uint8 bStreaming:1;
  /* offset=0x0074 flags=0x0018001040000201 */ int32 StreamingPriority;
  /* offset=0x0078 flags=0x0018011000000001 */ uint8 bMature:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 bManualWordWrap:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 bSingleLine:1;
  /* offset=0x0078 flags=0x0018001000000001 */ uint8 bVirtualizeWhenSilent:1;
  /* offset=0x007a flags=0x0018001040000201 */ uint8 SoundGroup;
  /* offset=0x007c flags=0x0018000000000201 */ FString SpokenText;
  /* offset=0x0088 flags=0x0018001040000201 */ float SubtitlePriority;
  /* offset=0x008c flags=0x0018001040000201 */ float Volume;
  /* offset=0x0090 flags=0x0018001040000201 */ float Pitch;
  /* offset=0x0094 flags=0x0018011040020201 */ int32 NumChannels;
  /* offset=0x0098 flags=0x0018011040020201 */ int32 SampleRate;
  /* offset=0x009c flags=0x0018001040000200 */ int32 RawPCMDataSize;
  /* offset=0x00a0 flags=0x0010000000000201 */ TArray<struct FSubtitleCue> Subtitles;
  /* offset=0x00ac flags=0x0010000000000200 */ TArray<struct FLocalizedSubtitle> LocalizedSubtitles;
  /* offset=0x00b8 flags=0x0018041040000201 */ UCurveTable* Curves;
  /* offset=0x00bc flags=0x0018001040000200 */ UCurveTable* InternalCurves;
};

class USoundWaveProcedural: public USoundWave {
};

class USpacer: public UWidget {
  /* offset=0x00c8 flags=0x0018001040000015 */ struct FVector2D Size;

  void SetSize(struct FVector2D InSize);
};

class USpatializationPluginSourceSettingsBase: public UObject {
};

class ASpectatorPawn: public ADefaultPawn {
};

class USpectatorPawnMovement: public UFloatingPawnMovement {
  /* offset=0x0125 flags=0x0018001000000000 */ uint8 bIgnoreTimeDilation:1;
};

class USphereComponent: public UShapeComponent {
  /* offset=0x05d0 flags=0x002808104000021d */ float SphereRadius;

  float GetScaledSphereRadius();
  float GetShapeScale();
  float GetUnscaledSphereRadius();
  void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
};

class ASphereReflectionCapture: public AReflectionCapture {
  /* offset=0x02ac flags=0x0048001040080208 */ UDrawSphereComponent* DrawCaptureRadius;
};

class USphereReflectionCaptureComponent: public UReflectionCaptureComponent {
  /* offset=0x02cc flags=0x0018001040000205 */ float InfluenceRadius;
  /* offset=0x02d0 flags=0x0018001040000200 */ float CaptureDistanceScale;
  /* offset=0x02d4 flags=0x0018001040080208 */ UDrawSphereComponent* PreviewInfluenceRadius;
};

class USpinBox: public UWidget {
  /* offset=0x00c8 flags=0x0018001040000201 */ float Value;
  /* offset=0x00d0 flags=0x0010001000080200 */ FGetFloat ValueDelegate;
  /* offset=0x00e0 flags=0x0010000000000005 */ struct FSpinBoxStyle WidgetStyle;
  /* offset=0x0320 flags=0x0018001060000200 */ USlateWidgetStyleAsset* Style;
  /* offset=0x0324 flags=0x0018001040000215 */ float Delta;
  /* offset=0x0328 flags=0x0018001040000215 */ float SliderExponent;
  /* offset=0x0330 flags=0x0018000000000015 */ struct FSlateFontInfo Font;
  /* offset=0x0370 flags=0x0018001040000215 */ uint8 Justification;
  /* offset=0x0374 flags=0x0018041040000215 */ float MinDesiredWidth;
  /* offset=0x0378 flags=0x0018041040000215 */ bool ClearKeyboardFocusOnCommit;
  /* offset=0x0379 flags=0x0018041040000215 */ bool SelectAllTextOnCommit;
  /* offset=0x037c flags=0x0010000000000015 */ struct FSlateColor ForegroundColor;
  /* offset=0x0398 flags=0x0010000010080200 */ FOnSpinBoxValueChangedEvent OnValueChanged;
  /* offset=0x03a4 flags=0x0010000010080200 */ FOnSpinBoxValueCommittedEvent OnValueCommitted;
  /* offset=0x03b0 flags=0x0010000010080200 */ FOnSpinBoxBeginSliderMovement OnBeginSliderMovement;
  /* offset=0x03bc flags=0x0010000010080200 */ FOnSpinBoxValueChangedEvent OnEndSliderMovement;
  /* offset=0x03c8 flags=0x0028081000000001 */ uint8 bOverride_MinValue:1;
  /* offset=0x03c8 flags=0x0028081000000001 */ uint8 bOverride_MaxValue:1;
  /* offset=0x03c8 flags=0x0028081000000001 */ uint8 bOverride_MinSliderValue:1;
  /* offset=0x03c8 flags=0x0028081000000001 */ uint8 bOverride_MaxSliderValue:1;
  /* offset=0x03cc flags=0x0028081040000201 */ float MinValue;
  /* offset=0x03d0 flags=0x0028081040000201 */ float MaxValue;
  /* offset=0x03d4 flags=0x0028081040000201 */ float MinSliderValue;
  /* offset=0x03d8 flags=0x0028081040000201 */ float MaxSliderValue;

  void ClearMaxSliderValue();
  void ClearMaxValue();
  void ClearMinSliderValue();
  void ClearMinValue();
  float GetMaxSliderValue();
  float GetMaxValue();
  float GetMinSliderValue();
  float GetMinValue();
  float GetValue();
  void OnSpinBoxBeginSliderMovement__DelegateSignature();
  void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
  void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, uint8 CommitMethod);
  void SetForegroundColor(struct FSlateColor InForegroundColor);
  void SetMaxSliderValue(float NewValue);
  void SetMaxValue(float NewValue);
  void SetMinSliderValue(float NewValue);
  void SetMinValue(float NewValue);
  void SetValue(float NewValue);
};

class USpinBoxWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FSpinBoxStyle SpinBoxStyle;
};

class USplineComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0010000000000001 */ struct FSplineCurves SplineCurves;
  /* offset=0x0610 flags=0x0018000020000000 */ struct FInterpCurveVector SplineInfo;
  /* offset=0x0624 flags=0x0018000020000000 */ struct FInterpCurveQuat SplineRotInfo;
  /* offset=0x0638 flags=0x0018000020000000 */ struct FInterpCurveVector SplineScaleInfo;
  /* offset=0x064c flags=0x0018000020000000 */ struct FInterpCurveFloat SplineReparamTable;
  /* offset=0x0660 flags=0x0018001060000200 */ bool bAllowSplineEditingPerInstance;
  /* offset=0x0664 flags=0x0018041040000201 */ int32 ReparamStepsPerSegment;
  /* offset=0x0668 flags=0x0018001040000205 */ float Duration;
  /* offset=0x066c flags=0x0018041040000205 */ bool bStationaryEndpoints;
  /* offset=0x066d flags=0x0018001040000201 */ bool bSplineHasBeenEdited;
  /* offset=0x066e flags=0x0018001040000200 */ bool bModifiedByConstructionScript;
  /* offset=0x066f flags=0x0018001040000205 */ bool bInputSplinePointsToConstructionScript;
  /* offset=0x0670 flags=0x0018001040000205 */ bool bDrawDebug;
  /* offset=0x0671 flags=0x0048001040000201 */ bool bClosedLoop;
  /* offset=0x0672 flags=0x0048001040000201 */ bool bLoopPositionOverride;
  /* offset=0x0674 flags=0x0048001040000201 */ float LoopPosition;
  /* offset=0x0678 flags=0x0018001040000005 */ struct FVector DefaultUpVector;

  void AddPoint(struct FSplinePoint Point, bool bUpdateSpline);
  void AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline);
  void AddSplineLocalPoint(struct FVector Position);
  void AddSplinePoint(struct FVector Position, uint8 CoordinateSpace, bool bUpdateSpline);
  void AddSplinePointAtIndex(struct FVector Position, int32 Index, uint8 CoordinateSpace, bool bUpdateSpline);
  void AddSplineWorldPoint(struct FVector Position);
  void ClearSplinePoints(bool bUpdateSpline);
  struct FVector FindDirectionClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  float FindInputKeyClosestToWorldLocation(struct FVector WorldLocation);
  struct FVector FindLocationClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  struct FVector FindRightVectorClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  float FindRollClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  struct FRotator FindRotationClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  struct FVector FindScaleClosestToWorldLocation(struct FVector WorldLocation);
  struct FVector FindTangentClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  struct FTransform FindTransformClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace, bool bUseScale);
  struct FVector FindUpVectorClosestToWorldLocation(struct FVector WorldLocation, uint8 CoordinateSpace);
  struct FVector GetArriveTangentAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetDefaultUpVector(uint8 CoordinateSpace);
  struct FVector GetDirectionAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FVector GetDirectionAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetDirectionAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  float GetDistanceAlongSplineAtSplinePoint(int32 PointIndex);
  float GetInputKeyAtDistanceAlongSpline(float Distance);
  struct FVector GetLeaveTangentAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  void GetLocalLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector LocalLocation, struct FVector LocalTangent);
  void GetLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector Location, struct FVector Tangent, uint8 CoordinateSpace);
  struct FVector GetLocationAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FVector GetLocationAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetLocationAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  int32 GetNumberOfSplinePoints();
  struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FVector GetRightVectorAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetRightVectorAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  float GetRollAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  float GetRollAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  float GetRollAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  struct FRotator GetRotationAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FRotator GetRotationAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FRotator GetRotationAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  struct FVector GetScaleAtDistanceAlongSpline(float Distance);
  struct FVector GetScaleAtSplinePoint(int32 PointIndex);
  struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
  float GetSplineLength();
  uint8 GetSplinePointType(int32 PointIndex);
  struct FVector GetTangentAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FVector GetTangentAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetTangentAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  struct FTransform GetTransformAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace, bool bUseScale);
  struct FTransform GetTransformAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace, bool bUseScale);
  struct FTransform GetTransformAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
  struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, uint8 CoordinateSpace);
  struct FVector GetUpVectorAtSplinePoint(int32 PointIndex, uint8 CoordinateSpace);
  struct FVector GetUpVectorAtTime(float Time, uint8 CoordinateSpace, bool bUseConstantVelocity);
  struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
  struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
  struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
  struct FVector GetWorldLocationAtSplinePoint(int32 PointIndex);
  struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
  struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
  struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
  struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
  bool IsClosedLoop();
  void RemoveSplinePoint(int32 Index, bool bUpdateSpline);
  void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
  void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
  void SetDefaultUpVector(struct FVector UpVector, uint8 CoordinateSpace);
  void SetDrawDebug(bool bShow);
  void SetLocationAtSplinePoint(int32 PointIndex, struct FVector InLocation, uint8 CoordinateSpace, bool bUpdateSpline);
  void SetSelectedSplineSegmentColor(struct FLinearColor SegmentColor);
  void SetSplineLocalPoints(TArray<struct FVector> Points);
  void SetSplinePointType(int32 PointIndex, uint8 Type, bool bUpdateSpline);
  void SetSplinePoints(TArray<struct FVector> Points, uint8 CoordinateSpace, bool bUpdateSpline);
  void SetSplineWorldPoints(TArray<struct FVector> Points);
  void SetTangentAtSplinePoint(int32 PointIndex, struct FVector InTangent, uint8 CoordinateSpace, bool bUpdateSpline);
  void SetTangentsAtSplinePoint(int32 PointIndex, struct FVector InArriveTangent, struct FVector InLeaveTangent, uint8 CoordinateSpace, bool bUpdateSpline);
  void SetUnselectedSplineSegmentColor(struct FLinearColor SegmentColor);
  void SetUpVectorAtSplinePoint(int32 PointIndex, struct FVector InUpVector, uint8 CoordinateSpace, bool bUpdateSpline);
  void SetWorldLocationAtSplinePoint(int32 PointIndex, struct FVector InLocation);
  void UpdateSpline();
};

class ASplineMeshActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ USplineMeshComponent* SplineMeshComponent;
};

class USplineMeshComponent: public UStaticMeshComponent {
  /* offset=0x062c flags=0x0010001000000001 */ struct FSplineMeshParams SplineParams;
  /* offset=0x0684 flags=0x0018001040000001 */ struct FVector SplineUpDir;
  /* offset=0x0690 flags=0x0018001000010001 */ uint8 bAllowSplineEditingPerInstance:1;
  /* offset=0x0690 flags=0x0018041000000001 */ uint8 bSmoothInterpRollScale:1;
  /* offset=0x0691 flags=0x0018001040000201 */ uint8 ForwardAxis;
  /* offset=0x0694 flags=0x0018041040000201 */ float SplineBoundaryMin;
  /* offset=0x0698 flags=0x0018041040000201 */ float SplineBoundaryMax;
  /* offset=0x069c flags=0x0018001040000200 */ UBodySetup* BodySetup;
  /* offset=0x06a0 flags=0x0018001040000000 */ struct FGuid CachedMeshBodySetupGuid;
  /* offset=0x06b0 flags=0x0018001000002000 */ uint8 bMeshDirty:1;

  float GetBoundaryMax();
  float GetBoundaryMin();
  struct FVector2D GetEndOffset();
  struct FVector GetEndPosition();
  float GetEndRoll();
  struct FVector2D GetEndScale();
  struct FVector GetEndTangent();
  uint8 GetForwardAxis();
  struct FVector GetSplineUpDir();
  struct FVector2D GetStartOffset();
  struct FVector GetStartPosition();
  float GetStartRoll();
  struct FVector2D GetStartScale();
  struct FVector GetStartTangent();
  void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
  void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
  void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh);
  void SetEndPosition(struct FVector EndPos, bool bUpdateMesh);
  void SetEndRoll(float EndRoll, bool bUpdateMesh);
  void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh);
  void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh);
  void SetForwardAxis(uint8 InForwardAxis, bool bUpdateMesh);
  void SetSplineUpDir(struct FVector InSplineUpDir, bool bUpdateMesh);
  void SetStartAndEnd(struct FVector startPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh);
  void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh);
  void SetStartPosition(struct FVector startPos, bool bUpdateMesh);
  void SetStartRoll(float StartRoll, bool bUpdateMesh);
  void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh);
  void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh);
  void UpdateMesh();
};

class USpotGeneratorStruct: public UObject {
};

class ASpotLight: public ALight {
  /* offset=0x02b0 flags=0x001800104008021c */ USpotLightComponent* SpotLightComponent;

  void SetInnerConeAngle(float NewInnerConeAngle);
  void SetOuterConeAngle(float NewOuterConeAngle);
};

class USpotLightComponent: public UPointLightComponent {
  /* offset=0x0388 flags=0x0018001040000215 */ float InnerConeAngle;
  /* offset=0x038c flags=0x0018001040000215 */ float OuterConeAngle;
  /* offset=0x0390 flags=0x0018001040000200 */ float LightShaftConeAngle;

  void SetInnerConeAngle(float NewInnerConeAngle);
  void SetOuterConeAngle(float NewOuterConeAngle);
};

class USpotSceneComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ uint8 SpotType;
  /* offset=0x0274 flags=0x0018001040000200 */ int32 WorldCompositionID;
  /* offset=0x0278 flags=0x0028081040000200 */ bool bIsSpotValid;
  /* offset=0x027c flags=0x0028081040000201 */ float LineOffsetZ;

  AActor* GenerateActor(UClass<UObject>* ActorClass, struct FVector ActorLocation, struct FRotator ActorRotator, enum ESpawnActorCollisionHandlingMethod SpawnActorCollisionHandlingMethod);
  void GenerateSpot();
  FString GetRandomCategory(TArray<struct FSpotWeight> SpotWeights);
  bool IsSpotValid();
  bool LineTraceSingle(UObject* WorldContextObject, struct FVector Start, struct FVector End, bool bTraceComplex, TArray<AActor*> ActorsToIgnore, struct FHitResult OutHit, bool bIgnoreSelf);
  void SetSpotValid(bool Valid);
};

class USpringArmComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001040000205 */ float TargetArmLength;
  /* offset=0x0274 flags=0x0018001040000005 */ struct FVector SocketOffset;
  /* offset=0x0280 flags=0x0018001040000005 */ struct FVector TargetOffset;
  /* offset=0x028c flags=0x0018001040000205 */ float ProbeSize;
  /* offset=0x0290 flags=0x0018001040000205 */ uint8 ProbeChannel;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bDoCollisionTest:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bUsePawnControlRotation:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bInheritPitch:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bInheritYaw:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bInheritRoll:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bEnableCameraLag:1;
  /* offset=0x0291 flags=0x0018001000000005 */ uint8 bEnableCameraRotationLag:1;
  /* offset=0x0291 flags=0x0018041000000005 */ uint8 bUseCameraLagSubstepping:1;
  /* offset=0x0292 flags=0x0018001000000005 */ uint8 bDrawDebugLagMarkers:1;
  /* offset=0x0294 flags=0x0018001040000205 */ float CameraLagSpeed;
  /* offset=0x0298 flags=0x0018001040000205 */ float CameraRotationLagSpeed;
  /* offset=0x029c flags=0x0018041040000205 */ float CameraLagMaxTimeStep;
  /* offset=0x02a0 flags=0x0018001040000205 */ float CameraLagMaxDistance;

  struct FRotator GetTargetRotation();
};

class USpring_FukubukuroUIBP_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x000a0010c008021c */ UWidgetAnimation* DX_RedEnvelope;
  /* offset=0x0234 flags=0x000a0010c008020c */ UButton* Button_CloseUI;
  /* offset=0x0238 flags=0x000a0010c008020c */ UImage* FX_Light01;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* FX_Light02;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* FX_Light03;
  /* offset=0x0244 flags=0x000a0010c008020c */ UImage* FX_Light04;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x025c flags=0x000a0010c008020c */ UButton* QQBut_Share;
  /* offset=0x0260 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0264 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock_Money;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* TextBlock_QQTime;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WXTime;
  /* offset=0x0278 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_BG;
  /* offset=0x027c flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_Btn;
  /* offset=0x0280 flags=0x000a0010c008020c */ UButton* WXBut_Share;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* wxdaoju;
  /* offset=0x0288 flags=0x000a0010c008020c */ UImage* WXjinbi;

  void ShowEffects(bool Is show, enum ESlateVisibility Type);
};

class UStatManager: public UObject {
  UStatManager* GetInstance();
  void ReportEventWithNoParam(enum StatEventType EventType, bool isRealTime);
  void ReportEventWithParam(enum StatEventType EventType, TMap<FString, FString> _params, bool isRealTime);
  void ReportEventWithString(enum StatEventType EventType, FString _eventBody, bool isRealTime);
};

class UStaticMesh: public UObject {
  /* offset=0x0028 flags=0x0018001040000200 */ int32 MinLOD;
  /* offset=0x002c flags=0x0010000020000200 */ TArray<UMaterialInterface*> Materials;
  /* offset=0x0038 flags=0x0010000000000200 */ TArray<struct FStaticMaterial> StaticMaterials;
  /* offset=0x0044 flags=0x0018001040000200 */ float LightmapUVDensity;
  /* offset=0x0048 flags=0x0018001040000201 */ int32 LightMapResolution;
  /* offset=0x004c flags=0x0018041040000201 */ int32 LightMapCoordinateIndex;
  /* offset=0x0050 flags=0x0018041040000201 */ float DistanceFieldSelfShadowBias;
  /* offset=0x0054 flags=0x0018001000000001 */ uint8 bGenerateMeshDistanceField:1;
  /* offset=0x0058 flags=0x001a001040282209 */ UBodySetup* BodySetup;
  /* offset=0x005c flags=0x0018001040000201 */ int32 LODForCollision;
  /* offset=0x0060 flags=0x0018001040000215 */ float CullingScreenSize;
  /* offset=0x0064 flags=0x0018001040000215 */ bool bIsGrass;
  /* offset=0x0065 flags=0x0018001020000000 */ uint8 bStripComplexCollisionForConsole:1;
  /* offset=0x0065 flags=0x0018041000000001 */ uint8 bHasNavigationData:1;
  /* offset=0x0065 flags=0x0018041000000001 */ uint8 bSupportUniformlyDistributedSampling:1;
  /* offset=0x0068 flags=0x0018001040000215 */ float LpvBiasMultiplier;
  /* offset=0x006c flags=0x0018041040000201 */ bool bAllowCPUAccess;
  /* offset=0x0094 flags=0x0010000000000200 */ TArray<UStaticMeshSocket*> Sockets;
  /* offset=0x00a8 flags=0x0018041040010001 */ struct FVector PositiveBoundsExtension;
  /* offset=0x00b4 flags=0x0018041040010001 */ struct FVector NegativeBoundsExtension;
  /* offset=0x00c0 flags=0x0010001040000000 */ struct FBoxSphereBounds ExtendedBounds;
  /* offset=0x00dc flags=0x0010000000000200 */ TArray<struct FVector4> OcclusionCullingVertex;
  /* offset=0x00e8 flags=0x0028081040000200 */ int32 ElementToIgnoreForTexFactor;
  /* offset=0x00ec flags=0x00200c8000000209 */ TArray<UAssetUserData*> AssetUserData;
  /* offset=0x00f8 flags=0x001a0010402a2209 */ UNavCollision* NavCollision;

  struct FBox GetBoundingBox();
  struct FBoxSphereBounds GetBounds();
  UMaterialInterface* GetMaterial(int32 MaterialIndex);
  int32 GetMaterialIndex(FName MaterialSlotName);
  int32 GetNumLODs();
  int32 GetNumSections(int32 InLOD);
};

class AStaticMeshActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UStaticMeshComponent* StaticMeshComponent;
  /* offset=0x02ac flags=0x0018041040000201 */ bool bStaticMeshReplicateMovement;
  /* offset=0x02ad flags=0x0018041040000201 */ enum ENavDataGatheringMode NavigationGeometryGatheringMode;
};

class AStaticMeshActorFM: public AActor {
  /* offset=0x02a8 flags=0x00180010400a021d */ UHierarchicalInstancedStaticMeshComponent* InstancedMeshComponent;
};

class UStaticMeshComponent: public UMeshComponent {
  /* offset=0x05dc flags=0x0018041040000215 */ int32 ForcedLodModel;
  /* offset=0x05e0 flags=0x0018001040000200 */ int32 PreviousLODLevel;
  /* offset=0x05e4 flags=0x0018041040000215 */ int32 MinLOD;
  /* offset=0x05e8 flags=0x0048001140000235 */ UStaticMesh* StaticMesh;
  /* offset=0x05ec flags=0x0018001000000015 */ uint8 bOverrideWireframeColor:1;
  /* offset=0x05ec flags=0x0018041000000015 */ uint8 bOverrideMinLOD:1;
  /* offset=0x05ec flags=0x0018001000002000 */ uint8 bOverrideNavigationExport:1;
  /* offset=0x05ec flags=0x0018001000002000 */ uint8 bForceNavigationObstacle:1;
  /* offset=0x05ec flags=0x0018041000000005 */ uint8 bDisallowMeshPaintPerInstance:1;
  /* offset=0x05ec flags=0x0018041000000005 */ uint8 bIgnoreInstanceForTextureStreaming:1;
  /* offset=0x05ec flags=0x0018001000000015 */ uint8 bOverrideLightMapRes:1;
  /* offset=0x05ec flags=0x0018001000000001 */ uint8 bOverrideCullingScreenSize:1;
  /* offset=0x05ed flags=0x0018041000000015 */ uint8 bCastDistanceFieldIndirectShadow:1;
  /* offset=0x05ed flags=0x0018041000000015 */ uint8 bOverrideDistanceFieldSelfShadowBias:1;
  /* offset=0x05ed flags=0x0018001000000000 */ uint8 bUseSubDivisions:1;
  /* offset=0x05ed flags=0x0018001000000001 */ uint8 bUseDefaultCollision:1;
  /* offset=0x05f0 flags=0x0018001040000215 */ int32 OverriddenLightMapRes;
  /* offset=0x05f4 flags=0x0018041040000205 */ float StreamingDistanceMultiplier;
  /* offset=0x05f8 flags=0x0010000000002200 */ TArray<struct FStaticMeshComponentLODInfo> LODData;
  /* offset=0x0604 flags=0x0010000400000200 */ TArray<struct FStreamingTextureBuildInfo> StreamingTextureData;
  /* offset=0x0610 flags=0x0010001000000001 */ struct FLightmassPrimitiveSettings LightmassSettings;

  void GetLocalBounds(struct FVector Min, struct FVector Max);
  void OnRep_StaticMesh(UStaticMesh* OldStaticMesh);
  void SetDirty();
  void SetDistanceFieldSelfShadowBias(float NewValue);
  void SetForcedLodModel(int32 NewForcedLodModel);
  bool SetStaticMesh(UStaticMesh* NewMesh);
};

class UStaticMeshSocket: public UObject {
  /* offset=0x0020 flags=0x0018001040000214 */ FName SocketName;
  /* offset=0x0028 flags=0x0018001040000005 */ struct FVector RelativeLocation;
  /* offset=0x0034 flags=0x0010001040000005 */ struct FRotator RelativeRotation;
  /* offset=0x0040 flags=0x0018001040000005 */ struct FVector RelativeScale;
  /* offset=0x004c flags=0x0018000000000205 */ FString Tag;
};

class UStereoLayerComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bLiveTexture:1;
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bSupportsDepth:1;
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bNoAlphaChannel:1;
  /* offset=0x0274 flags=0x0028081040000215 */ UTexture* Texture;
  /* offset=0x0278 flags=0x0028081040000215 */ UTexture* LeftTexture;
  /* offset=0x027c flags=0x0018001000000005 */ uint8 bQuadPreserveTextureRatio:1;
  /* offset=0x0280 flags=0x002808104000001d */ struct FVector2D QuadSize;
  /* offset=0x0288 flags=0x002008100000001d */ struct FBox2D UVRect;
  /* offset=0x029c flags=0x002808104000021d */ float CylinderRadius;
  /* offset=0x02a0 flags=0x002808104000021d */ float CylinderOverlayArc;
  /* offset=0x02a4 flags=0x002808104000021d */ int32 CylinderHeight;
  /* offset=0x02a8 flags=0x002808104000021d */ uint8 StereoLayerType;
  /* offset=0x02a9 flags=0x002808104000021d */ uint8 StereoLayerShape;
  /* offset=0x02ac flags=0x002808104000021d */ int32 Priority;

  int32 GetPriority();
  struct FVector2D GetQuadSize();
  UTexture* GetTexture();
  struct FBox2D GetUVRect();
  void MarkTextureForUpdate();
  void SetPriority(int32 InPriority);
  void SetQuadSize(struct FVector2D InQuadSize);
  void SetTexture(UTexture* InTexture);
  void SetUVRect(struct FBox2D InUVRect);
};

class UStereoLayerFunctionLibrary: public UBlueprintFunctionLibrary {
  void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
  void HideSplashScreen();
  void SetSplashScreen(UTexture* Texture, struct FVector2D Scale, struct FVector2D Offset, bool bShowLoadingMovie, bool bShowOnSet);
  void ShowSplashScreen();
};

class UStrProperty: public UProperty {
};

class UStreamMediaSource: public UBaseMediaSource {
  /* offset=0x0028 flags=0x0018010000000205 */ FString StreamUrl;
};

class UStreamingSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0028081000004001 */ uint8 AsyncLoadingThreadEnabled:1;
  /* offset=0x0030 flags=0x00280c1000004001 */ uint8 WarnIfTimeLimitExceeded:1;
  /* offset=0x0034 flags=0x00280c1040004201 */ float TimeLimitExceededMultiplier;
  /* offset=0x0038 flags=0x00280c1040004201 */ float TimeLimitExceededMinTime;
  /* offset=0x003c flags=0x00280c1040004201 */ int32 MinBulkDataSizeForAsyncLoading;
  /* offset=0x0040 flags=0x0028081000004001 */ uint8 UseBackgroundLevelStreaming:1;
  /* offset=0x0040 flags=0x00280c1000004001 */ uint8 AsyncLoadingUseFullTimeLimit:1;
  /* offset=0x0044 flags=0x00280c1040004201 */ float AsyncLoadingTimeLimit;
  /* offset=0x0048 flags=0x00280c1040004201 */ float PriorityAsyncLoadingExtraTime;
  /* offset=0x004c flags=0x00280c1040004201 */ float LevelStreamingActorsUpdateTimeLimit;
  /* offset=0x0050 flags=0x00280c1040004201 */ int32 LevelStreamingComponentsRegistrationGranularity;
  /* offset=0x0054 flags=0x00280c1040004201 */ float LevelStreamingUnregisterComponentsTimeLimit;
  /* offset=0x0058 flags=0x00280c1040004201 */ int32 LevelStreamingComponentsUnregistrationGranularity;
  /* offset=0x005c flags=0x0028081000004001 */ uint8 EventDrivenLoaderEnabled:1;
};

class UStringTable: public UObject {
};

class UStruct: public UField {
};

class UStructProperty: public UProperty {
};

class USubUVAnimation: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ UTexture2D* SubUVTexture;
  /* offset=0x0020 flags=0x0018001040000201 */ int32 SubImages_Horizontal;
  /* offset=0x0024 flags=0x0018001040000201 */ int32 SubImages_Vertical;
  /* offset=0x0028 flags=0x0018001040000201 */ uint8 BoundingMode;
  /* offset=0x0029 flags=0x0018001040000201 */ uint8 OpacitySourceMode;
  /* offset=0x002c flags=0x0018001040000201 */ float AlphaThreshold;
};

class USubWeaponSlot_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* highLight;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x01bc flags=0x0008001040000205 */ uint8 SlotType;
  /* offset=0x01c0 flags=0x0008000000010205 */ FString WeaponName;
  /* offset=0x01cc flags=0x0000001040010205 */ bool SlotIsFilled;

  void Construct();
  void ExecuteUbergraph_SubWeaponSlot(int32 EntryPoint);
  void SetWeaponName(FString WeaponName);
  void UpdateData(int32 ID, bool ShowImg);
};

class USubmixEffectDynamicsProcessorPreset: public USoundEffectSubmixPreset {
  /* offset=0x0058 flags=0x0010001000000005 */ struct FSubmixEffectDynamicsProcessorSettings Settings;

  void SetSettings(struct FSubmixEffectDynamicsProcessorSettings InSettings);
};

class USubmixEffectReverbPreset: public USoundEffectSubmixPreset {
  /* offset=0x0060 flags=0x0010001000000005 */ struct FSubmixEffectReverbSettings Settings;

  void SetSettings(struct FSubmixEffectReverbSettings InSettings);
  void SetSettingsWithReverbEffect(UReverbEffect* InReverbEffect, float WetLevel);
};

class USubmixEffectSubmixEQPreset: public USoundEffectSubmixPreset {
  /* offset=0x003c flags=0x0010000000000005 */ struct FSubmixEffectSubmixEQSettings Settings;

  void SetSettings(struct FSubmixEffectSubmixEQSettings InSettings);
};

class USubsurfaceProfile: public UObject {
  /* offset=0x001c flags=0x0010001000000001 */ struct FSubsurfaceProfileStruct Settings;
};

class ASurviveHUD: public AHUD {
  /* offset=0x034c flags=0x0018001000000005 */ uint8 bIsWorldMapVisible:1;
  /* offset=0x0350 flags=0x0018001040000014 */ struct FVector MarkerPosition;
  /* offset=0x035c flags=0x0018001040000214 */ bool bShowCrosshair;
  /* offset=0x0360 flags=0x0048001040000200 */ UTexture2D* HUDMainTexture;
  /* offset=0x0364 flags=0x0048001040000200 */ UTexture2D* HUDPlayerTexture;
  /* offset=0x0368 flags=0x0040001000000000 */ struct FCanvasIcon Crosshair;
  /* offset=0x03cc flags=0x0040001000000000 */ struct FCanvasIcon ProgreesBar;
  /* offset=0x03e0 flags=0x0040001000000000 */ struct FCanvasIcon BKProgreesBar;
  /* offset=0x03f4 flags=0x0040001000000000 */ struct FCanvasIcon ProgressBarPlayer;
  /* offset=0x041c flags=0x0040001000000000 */ struct FCanvasIcon Marker;
  /* offset=0x0430 flags=0x0048001040000200 */ UTexture2D* HUDWorldMapTexture;
  /* offset=0x0434 flags=0x0040001000000000 */ struct FCanvasIcon WORLDMAP;
  /* offset=0x0448 flags=0x0048001040000200 */ UTexture2D* AimCrosshairTextrue;

  void EnableCrosshair(bool bEnable);
};

class USurviveInfoPanel_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UTextBlock* SlainCountText;
  /* offset=0x0238 flags=0x000a0010c008020c */ UTextBlock* SurviveCountText;
  /* offset=0x023c flags=0x0008000000010205 */ FString SurviveCount;
  /* offset=0x0248 flags=0x0008001040010a05 */ ASTExtraGameStateBase* STExtraGameState;
  /* offset=0x024c flags=0x0008000000010205 */ FString SlainCount;
  /* offset=0x0258 flags=0x0008001040010a05 */ ASTExtraPlayerState* STExtraPlayerState;

  void BindEvents();
  void Construct();
  void ExecuteUbergraph_SurviveInfoPanel(int32 EntryPoint, FOnPlayerKillsChangeDelegate K2Node_CreateDelegate_OutputDelegate, FOnBeKilledNumChangeDelegate K2Node_CreateDelegate_OutputDelegate2, AGameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, FOnPlayerNumChangeDelegate K2Node_CreateDelegate_OutputDelegate3, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, ASTExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess3);
  void ForceUpdate_KillNums();
  void ForceUpdate_SurviveNums();
  void PlayerBeKilledChange();
  void PlayerKillsChange();
  void PlayerNumChange();
  void RebindEvents();
  void ReceivedInitWidget();
  void RefreshKillNum(ASTExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);
};

class USurviveLoadingSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0010000000004201 */ TArray<struct FSoftObjectPath> Images;
  /* offset=0x003c flags=0x0010000000004201 */ TArray<struct FSoftObjectPath> Videos;
};

class USurvivePickUpComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FOnPickUpDelegate OnPickUp;
  /* offset=0x00b8 flags=0x0010000010080200 */ FOnPutDownDelegate OnPutDown;
  /* offset=0x00c4 flags=0x0010000010080200 */ FOnBackpackDelegate OnBackpack;
  /* offset=0x00d0 flags=0x0010000010080200 */ FOnUnbackpackDelegate OnUnbackpack;
  /* offset=0x00dc flags=0x0010000010080200 */ FOnEquipDelegate OnEquip;
  /* offset=0x00e8 flags=0x0010000010080200 */ FOnUnequipDelegate OnUnequip;
  /* offset=0x00f4 flags=0x0018001040010215 */ bool bCanPickUp;
  /* offset=0x00f5 flags=0x0018001040010215 */ uint8 PickUpCategory;
  /* offset=0x00f6 flags=0x0018001040010215 */ uint8 PickUpType;
  /* offset=0x00f7 flags=0x0018001040010215 */ uint8 WeaponPropSlot;
  /* offset=0x00f8 flags=0x0018001040010215 */ uint8 WeaponComponentType;
  /* offset=0x0100 flags=0x0010000000010015 */ struct FSlateBrush ProfileImage;
  /* offset=0x0168 flags=0x0010000000010015 */ struct FSlateBrush EntireImage;
  /* offset=0x01d0 flags=0x0018000000010215 */ FString PickUpItemName;
  /* offset=0x01dc flags=0x0018000000010215 */ FString PickUpItemDescription;
  /* offset=0x01e8 flags=0x0018001040010215 */ float HiddenTimeAfterPutDown;
  /* offset=0x01ec flags=0x0018001040010215 */ float ItemGeneratorSpawnZOffset;
  /* offset=0x01f0 flags=0x0018001040000234 */ bool bHasBeenPickedUp;
  /* offset=0x01f4 flags=0x0018001040000234 */ ASTExtraBaseCharacter* OwnerPlayer;

  void OnBackpackDelegate__DelegateSignature();
  void OnEquipDelegate__DelegateSignature();
  void OnPickUpDelegate__DelegateSignature();
  void OnPutDownDelegate__DelegateSignature();
  void OnUnbackpackDelegate__DelegateSignature();
  void OnUnequipDelegate__DelegateSignature();
  void ShowUp();
};

class USwitchWeaponSlot_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UBorder* Border_WeaponIcon;
  /* offset=0x0238 flags=0x000a0010c008020c */ UBorder* Border_WeaponSlot;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* Image_ShootingMode;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentNumberOfBullets;
  /* offset=0x0254 flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxNumberOfBullets;
  /* offset=0x0258 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ShootingMode;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* TextBlock_WeaponName;
  /* offset=0x0260 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_SlotBtnSelected;
  /* offset=0x0264 flags=0x0008001040000205 */ uint8 ActionType;
  /* offset=0x0268 flags=0x0000100010010205 */ FClickOnSwitchWeapon ClickOnSwitchWeapon;
  /* offset=0x0274 flags=0x0008001040010a05 */ ASTExtraShootWeapon* CurWeapon;
  /* offset=0x0278 flags=0x0000100010010205 */ FClickOnChangeWeaponFireMode ClickOnChangeWeaponFireMode;

  void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_39_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_2_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();
  void CanShowFireModeSwitchBtn(ASTExtraShootWeapon* Weapon, bool CanSwitch, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int32 CallFunc_Conv_BoolToInt_ReturnValue, int32 CallFunc_Conv_BoolToInt_ReturnValue2, int32 CallFunc_Conv_BoolToInt_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);
  void ChangeWeaponImage(UObject* NewParam, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);
  void ClickOnChangeWeaponFireMode__DelegateSignature();
  void ClickOnSwitchWeapon__DelegateSignature();
  void Construct();
  void ExecuteUbergraph_SwitchWeaponSlot(int32 EntryPoint, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, ACharacter* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, uint8 CallFunc_GetNextFireMode_FireMode);
  void GetNextFireMode(ASTExtraShootWeapon* InputPin, uint8 FireMode, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, uint8 CallFunc_GetShootTypeFromEntity_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  void ReceivedInitWidget();
  void SetFireModeText(bool CallFunc_IsValid_ReturnValue, uint8 CallFunc_GetShootTypeFromEntity_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void Show/HideFireMode(bool bIsShow, ASTExtraShootWeapon* shootWeapon, bool CallFunc_CanShowFireModeSwitchBtn_CanSwitch, bool CallFunc_BooleanAND_ReturnValue);
  void StopToSwitchIfSprint();
  void UpdateImage(struct FSlateBrush Brush, enum ESlateVisibility visible);
};

class USwitchWeaponSlot_Mode2_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_GetItem;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* BulletChangeAnim;
  /* offset=0x023c flags=0x000a0010c008020c */ UImage* BG;
  /* offset=0x0240 flags=0x000a0010c008020c */ UBorder* Border_WeaponIcon;
  /* offset=0x0244 flags=0x000a0010c008020c */ UBorder* Border_WeaponSlot;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x024c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0250 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* FX_LightBox;
  /* offset=0x0258 flags=0x000a0010c008020c */ UGridPanel* GridPanel_FireMode;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image_ShootingMode;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Item;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x026c flags=0x000a0010c008020c */ UTextBlock* TextBlock_CurrentNumberOfBullets;
  /* offset=0x0270 flags=0x000a0010c008020c */ UTextBlock* TextBlock_MaxNumberOfBullets;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* TextBlock_ShootingMode;
  /* offset=0x0278 flags=0x000a0010c008020c */ UTextBlock* TextBlock_WeaponName;
  /* offset=0x027c flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_SlotBtnSelected;
  /* offset=0x0280 flags=0x0008001040000205 */ uint8 ActionType;
  /* offset=0x0284 flags=0x0000100010010205 */ FClickOnSwitchWeapon ClickOnSwitchWeapon;
  /* offset=0x0290 flags=0x0008001040010a05 */ ASTExtraShootWeapon* CurWeapon;
  /* offset=0x0294 flags=0x0000100010010205 */ FClickOnChangeWeaponFireMode ClickOnChangeWeaponFireMode;
  /* offset=0x02a0 flags=0x0000000000010005 */ struct FSlateBrush FireMode_Single;
  /* offset=0x0308 flags=0x0000000000010005 */ struct FSlateBrush FireMode_Burst;
  /* offset=0x0370 flags=0x0000000000010005 */ struct FSlateBrush FireMode_Auto;
  /* offset=0x03d8 flags=0x0000000000010005 */ struct FSlateBrush BlankBrush;
  /* offset=0x0440 flags=0x0008001040010005 */ struct FLinearColor OutOfAmmoRed;
  /* offset=0x0450 flags=0x0008001040010005 */ struct FLinearColor NormalAmmoWhite;
  /* offset=0x0460 flags=0x0008001040010005 */ struct FLinearColor NormalAmmoGrey;
  /* offset=0x0470 flags=0x0008001000010005 */ struct FItemDefineID CurBulletType;
  /* offset=0x0488 flags=0x0000000000010205 */ TArray<UTexture2D*> AnimationQueue;
  /* offset=0x0494 flags=0x0000000000010205 */ TMap<int32, FString> AttachmentImagePath;

  void AddAttachmentAnimationToQuere(struct FItemDefineID ID, UTexture2D* Texture, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetAttachmentImage_ImagePath, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);
  void AddAttachmentAnimationToQuereAsync(UObject* Icon, UTexture2D* Texture, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Add_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_28_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_39_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_2_K2Node_ComponentBoundEvent_15_OnButtonPressedEvent__DelegateSignature();
  void CanShowFireModeSwitchBtn(ASTExtraShootWeapon* Weapon, bool CanSwitch, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int32 CallFunc_Conv_BoolToInt_ReturnValue, int32 CallFunc_Conv_BoolToInt_ReturnValue2, int32 CallFunc_Conv_BoolToInt_ReturnValue3, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);
  void ChangeImageAndTextColor(bool IsGunRunOutOfAmmo, struct FSlateColor K2Node_MakeStruct_SlateColor, struct FSlateColor K2Node_MakeStruct_SlateColor2, struct FSlateColor K2Node_MakeStruct_SlateColor3, struct FSlateColor K2Node_MakeStruct_SlateColor4, struct FSlateColor K2Node_MakeStruct_SlateColor5, struct FSlateColor K2Node_MakeStruct_SlateColor6);
  void ChangeWeaponImage(FString IconPath, struct FSoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FAssetLoadSuccessDelegate K2Node_CreateDelegate_OutputDelegate);
  void ClearWeaponSlotData();
  void ClickOnChangeWeaponFireMode__DelegateSignature();
  void ClickOnSwitchWeapon__DelegateSignature();
  void ExecuteUbergraph_SwitchWeaponSlot_Mode2(int32 EntryPoint, TArray<FName> CallFunc_GetDataTableRowNames_OutRowNames, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 ___int_Array_Index_Variable, FName CallFunc_Array_Get_Item, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ACharacter* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, uint8 CallFunc_GetNextFireMode_FireMode, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue4, FOnWidgetAnimationPlaybackStatusChanged K2Node_CreateDelegate_OutputDelegate);
  void GetAttachmentImage(struct FItemDefineID DefineID, FString imagePath, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
  void GetItemAnimFinished();
  void GetNextFireMode(ASTExtraShootWeapon* InputPin, uint8 FireMode, bool CallFunc_IsValid_ReturnValue, UShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, uint8 CallFunc_GetShootTypeFromEntity_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  void PlayAnimationInQueue(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, UTexture2D* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue);
  void ReceivedInitWidget();
  void RefreshWeaponImage(UObject* Image, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, UTexture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2);
  void Selected/UnSelected(bool IsSelected);
  void SetBorderOpacity(float Opacity, struct FLinearColor K2Node_MakeStruct_LinearColor, struct FLinearColor K2Node_MakeStruct_LinearColor2);
  void SetFireModeText(uint8 CallFunc_GetShootTypeFromEntity_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);
  void Show/HideFireMode(bool bIsShow, ASTExtraShootWeapon* shootWeapon, UShootWeaponEntity* K2Node_DynamicCast_AsShoot_Weapon_Entity, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CanShowFireModeSwitchBtn_CanSwitch, bool CallFunc_BooleanAND_ReturnValue);
  void StopToSwitchIfSprint();
  void UpdateBulletCounts(int32 BulletInWeapon, int32 BulletInBackpack, int32 BulletInBackPackNum, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_GetItemCountByDefineID_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_GetText_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FText CallFunc_GetText_ReturnValue3, bool CallFunc_NotEqual_TextText_ReturnValue);
  void UpdateImage(struct FSlateBrush Brush, enum ESlateVisibility visible);
};

class USynthComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001000000000 */ uint8 bAutoDestroy:1;
  /* offset=0x0270 flags=0x0018001000000000 */ uint8 bStopWhenOwnerDestroyed:1;
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bAllowSpatialization:1;
  /* offset=0x0270 flags=0x0018001000000005 */ uint8 bOverrideAttenuation:1;
  /* offset=0x0274 flags=0x0018001040000205 */ USoundAttenuation* AttenuationSettings;
  /* offset=0x0278 flags=0x0010000000000005 */ struct FSoundAttenuationSettings AttenuationOverrides;
  /* offset=0x048c flags=0x0018001040000205 */ USoundConcurrency* ConcurrencySettings;
  /* offset=0x0490 flags=0x0018001040000201 */ USoundClass* SoundClass;
  /* offset=0x0494 flags=0x0018001040000201 */ USoundEffectSourcePresetChain* SourceEffectChain;
  /* offset=0x0498 flags=0x0018001040000201 */ USoundSubmix* SoundSubmix;
  /* offset=0x049c flags=0x0010000000000205 */ TArray<struct FSoundSubmixSendInfo> SoundSubmixSends;
  /* offset=0x04a8 flags=0x0018001000000005 */ uint8 bIsUISound:1;
  /* offset=0x04b0 flags=0x0048001040002200 */ USynthSound* Synth;
  /* offset=0x04b4 flags=0x0048001040082208 */ UAudioComponent* AudioComponent;

  bool IsPlaying();
  void SetSubmixSend(USoundSubmix* Submix, float SendLevel);
  void Start();
  void Stop();
};

class USynthSound: public USoundWaveProcedural {
};

class UTApmHelper: public UBlueprintFunctionLibrary {
  void AddTag(FString TagName);
  void EnableDebugMode();
  void EndTag();
  int32 GetDeviceLevel();
  int32 GetDeviceLevelByQcc(FString configName, FString gpuFamily);
  void MarkAppFinishLaunch();
  void MarkLevelFin();
  void MarkLevelLoad(FString SceneName, int32 quality);
  void MarkLevelLoadCompleted();
  void PostEvent(int32 Key, FString Info);
  void PostLagStatus(float Distance);
  void PostNTL(int32 latency);
  void PutKVD(FString Key, float Value);
  void PutKVI(FString Key, int32 Value);
  void PutKVS(FString Key, FString Value);
  void RegisterRomCallBackMeta(FString OpenID, FString ZoneID);
  void SetLocale(FString Locale);
  void SetQuality(int32 quality);
  void SetTragetFrameRate(int32 Target);
  void SetUserId(FString userId);
  void UpdateGameStatusToVmp(int32 Key, FString Value);
  void cancelAffinityForThread(int32 tid);
  void requestResourceGuarantee(int32 Condition, int32 loadType, int32 applyType);
  void setAffinityForThread(int32 tid);
};

class UTableFunctionLibrary_C: public UBlueprintFunctionLibrary {
  void GetItemTableRow(int32 ID, UObject* __WorldContext, struct FBP_STRUCT_Item_type Item, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, struct FBP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);
};

class UTableViewBase: public UWidget {
};

class ATargetPoint: public AActor {
};

class UTeammatePositionItem_BP_C: public UTeammatePositionWidget {
  /* offset=0x02a0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_DistanceInfo;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02ac flags=0x000a0010c008020c */ UImage* Image_Arrow;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* Image_InAirCraftState;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UImage* Image_InAirCraftStateBG;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* Image_LandingTeammate;
  /* offset=0x02bc flags=0x000a0010c008020c */ UImage* Image_No1;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* Image_No2;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UImage* Image_No3;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UImage* Image_No4;
  /* offset=0x02cc flags=0x000a0010c008020c */ UImage* Image_Parachuting;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UImage* Image_ParachutingBG;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UImage* Image_PlayerDead;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UImage* Image_PlayerDeadBG;
  /* offset=0x02dc flags=0x000a0010c008020c */ UImage* Image_PlayerFallToTheGround;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UImage* Image_PlayerFallToTheGroundBG;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UImage* Image_PlayerOffOnline;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UImage* Image_PlayerOffOnlineBG;
  /* offset=0x02ec flags=0x000a0010c008020c */ UTextBlock* TextBlock_Distance;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Teammate_Name;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_TeammateState;
  /* offset=0x02f8 flags=0x0000000000010205 */ TArray<UImage*> imageList;
  /* offset=0x0304 flags=0x0008001040010205 */ int32 HideImageNum;

  void Construct();
  void ExecuteUbergraph_TeammatePositionItem_BP(int32 EntryPoint, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, TArray<UImage*> K2Node_MakeArray_Array);
  void HideAll();
  void SetColor(struct FLinearColor NewParam);
  void SetPlayerName(FString Name, int32 Index, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue);
  void SetState(enum ExtraPlayerLiveState State, bool K2Node_SwitchEnum_CmpSuccess);
  void ShowImage(bool isShow, enum ESlateVisibility IsVisibility, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, UImage* CallFunc_Array_Get_Item, UImage* CallFunc_Array_Get_Item2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum ESlateVisibility CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
};

class UTeammatePositionWidget: public UUAEUserWidget {
  /* offset=0x0230 flags=0x002808104008020d */ UCanvasPanelSlot* CanvasPanel;
  /* offset=0x0234 flags=0x002808104008020d */ UImage* ArrowImage;
  /* offset=0x0238 flags=0x002808104008020d */ UCanvasPanel* TeammateDistPanel;
  /* offset=0x023c flags=0x002808104008020d */ UTextBlock* TeammateDistText;
  /* offset=0x0240 flags=0x002808104008020d */ UGridPanel* TeammateGridPanel;
  /* offset=0x0244 flags=0x0028081040000205 */ bool InAir;
  /* offset=0x0248 flags=0x0028081040000205 */ ASTExtraPlayerState* SavedPlayerState;
  /* offset=0x0250 flags=0x0028081040000001 */ struct FVector4 Limit;
  /* offset=0x0260 flags=0x0028081040000001 */ struct FVector2D UIOffset;
  /* offset=0x0268 flags=0x0028081040000001 */ struct FVector LocOffset;
  /* offset=0x0274 flags=0x0028081040000001 */ struct FVector2D OnPlaneUIOffset;
  /* offset=0x0294 flags=0x0048001040000200 */ ASTExtraPlayerController* STExtraPlayerController;
};

class ATestAIController: public ABaseAIController {
  /* offset=0x0368 flags=0x001c001040000201 */ UClass<APickUpWrapperActor>* EquipedWeaponClass;
  /* offset=0x036c flags=0x001c001040000201 */ UClass<ASTExtraBaseCharacter>* CharacterClass;
};

class ATestAttrModifyActor: public AActor {
  /* offset=0x02ac flags=0x002808104008021d */ UAttrModifyComponent* AttrModifyComp;
  /* offset=0x02b4 flags=0x0048001040000220 */ float FloatAttr;

  void GetAttrValue(int32 I, float F);
  void SetModify(bool Enable);
  bool TestGetVariable();
};

class ATestBeaconClient: public AOnlineBeaconClient {
  /* CL  */ void ClientPing();
  /* SRV */ void ServerPong();
};

class ATestBeaconHost: public AOnlineBeaconHostObject {
};

class ATestHUD: public AActor {
  float Function_BP();
  float Function_BP_CPP();
  float Function_BP_Call();
  float Function_BP_Call_CPP();
  float Function_BP_Call_CPlus();
  float Function_BP_Call_LUA();
  float Function_CPlus();
  float Function_CPlus_Call();
  float Function_LUA_Call();
  float Function_Lua();
  float TestFunctionBP();
  float TestFunctionBP_LUA();
  void TestFunctionNOParam();
};

class UTextBinding: public UPropertyBinding {
  FString GetStringValue();
  FText GetTextValue();
};

class UTextBlock: public UTextLayoutWidget {
  /* offset=0x00ec flags=0x0010000000000001 */ FText Text;
  /* offset=0x00f8 flags=0x0010001000080200 */ FGetText TextDelegate;
  /* offset=0x0108 flags=0x0010000000000015 */ struct FSlateColor ColorAndOpacity;
  /* offset=0x0128 flags=0x0010001000080200 */ FGetSlateColor ColorAndOpacityDelegate;
  /* offset=0x0138 flags=0x0018000000000015 */ struct FSlateFontInfo Font;
  /* offset=0x0178 flags=0x0018001040000015 */ struct FVector2D ShadowOffset;
  /* offset=0x0180 flags=0x0018001040000015 */ struct FLinearColor ShadowColorAndOpacity;
  /* offset=0x0190 flags=0x0010001000080200 */ FGetLinearColor ShadowColorAndOpacityDelegate;
  /* offset=0x01a0 flags=0x0018001040000215 */ float MinDesiredWidth;
  /* offset=0x01a4 flags=0x0018041040000215 */ bool bWrapWithInvalidationPanel;

  FText GetText();
  void SetColorAndOpacity(struct FSlateColor InColorAndOpacity);
  void SetFont(struct FSlateFontInfo InFontInfo);
  void SetJustification(uint8 InJustification);
  void SetMinDesiredWidth(float InMinDesiredWidth);
  void SetOpacity(float InOpacity);
  void SetShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity);
  void SetShadowOffset(struct FVector2D InShadowOffset);
  void SetText(FText InText);
  void SetVerticalJustification(uint8 InJustification);
};

class UTextBlockWidgetStyle: public USlateWidgetStyleContainerBase {
  /* offset=0x0020 flags=0x0010000000000001 */ struct FTextBlockStyle TextBlockStyle;
};

class UTextBuffer: public UObject {
};

class UTextLayoutWidget: public UWidget {
  /* offset=0x00c8 flags=0x00200c1000000015 */ struct FShapedTextOptions ShapedTextOptions;
  /* offset=0x00cc flags=0x0028081040000205 */ uint8 Justification;
  /* offset=0x00cd flags=0x0028081040000205 */ uint8 VerticalJustification;
  /* offset=0x00ce flags=0x0028081040000215 */ bool AutoWrapText;
  /* offset=0x00d0 flags=0x0028081040000215 */ float WrapTextAt;
  /* offset=0x00d4 flags=0x00280c1040000215 */ enum ETextWrappingPolicy WrappingPolicy;
  /* offset=0x00d8 flags=0x00200c1000000015 */ struct FMargin Margin;
  /* offset=0x00e8 flags=0x00280c1040000215 */ float LineHeightPercentage;
};

class UTextProperty: public UProperty {
};

class UTextPropertyTestObject: public UObject {
  /* offset=0x001c flags=0x0010000000000000 */ FText DefaultedText;
  /* offset=0x0028 flags=0x0010000000000000 */ FText UndefaultedText;
  /* offset=0x0034 flags=0x0010000000000000 */ FText TransientText;
};

class ATextRenderActor: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UTextRenderComponent* TextRender;
};

class UTextRenderComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0010000000000015 */ FText Text;
  /* offset=0x05cc flags=0x0018001040000215 */ UMaterialInterface* TextMaterial;
  /* offset=0x05d0 flags=0x0018001040000215 */ UFont* Font;
  /* offset=0x05d4 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x05d5 flags=0x0018001040000215 */ uint8 VerticalAlignment;
  /* offset=0x05d8 flags=0x0018001040000015 */ struct FColor TextRenderColor;
  /* offset=0x05dc flags=0x0018001040000215 */ float XScale;
  /* offset=0x05e0 flags=0x0018001040000215 */ float YScale;
  /* offset=0x05e4 flags=0x0018001040000215 */ float WorldSize;
  /* offset=0x05e8 flags=0x0018001040000200 */ float InvDefaultSize;
  /* offset=0x05ec flags=0x0018041040000215 */ float HorizSpacingAdjust;
  /* offset=0x05f0 flags=0x0018041040000215 */ float VertSpacingAdjust;
  /* offset=0x05f4 flags=0x0018041000000015 */ uint8 bAlwaysRenderAsText:1;

  struct FVector GetTextLocalSize();
  struct FVector GetTextWorldSize();
  void K2_SetText(FText Value);
  void SetFont(UFont* Value);
  void SetHorizSpacingAdjust(float Value);
  void SetHorizontalAlignment(uint8 Value);
  void SetText(FString Value);
  void SetTextMaterial(UMaterialInterface* Material);
  void SetTextRenderColor(struct FColor Value);
  void SetVertSpacingAdjust(float Value);
  void SetVerticalAlignment(uint8 Value);
  void SetWorldSize(float Value);
  void SetXScale(float Value);
  void SetYScale(float Value);
};

class UTexture: public UObject {
  /* offset=0x0020 flags=0x0048001040000000 */ struct FGuid LightingGuid;
  /* offset=0x0030 flags=0x0018011040000205 */ int32 LODBias;
  /* offset=0x0034 flags=0x0018041040000205 */ int32 NumCinematicMipLevels;
  /* offset=0x0038 flags=0x0018011000000005 */ uint8 SRGB:1;
  /* offset=0x0038 flags=0x0018041000000005 */ uint8 bNotUsedInHighQuality:1;
  /* offset=0x0038 flags=0x0018041000000005 */ uint8 bNotUsedInMediumQuality:1;
  /* offset=0x0038 flags=0x0018041000000005 */ uint8 bNotUsedInLowQuality:1;
  /* offset=0x0038 flags=0x0018051000000005 */ uint8 NeverStream:1;
  /* offset=0x0038 flags=0x0018001000000000 */ uint8 bNoTiling:1;
  /* offset=0x0038 flags=0x0018001000002000 */ uint8 bUseCinematicMipLevels:1;
  /* offset=0x003c flags=0x00200c8000000209 */ TArray<UAssetUserData*> AssetUserData;
  /* offset=0x0048 flags=0x0048001040002200 */ int32 CachedCombinedLODBias;
  /* offset=0x004c flags=0x0048001000002000 */ uint8 bAsyncResourceReleaseHasBeenStarted:1;
  /* offset=0x004d flags=0x0018011040000205 */ uint8 CompressionSettings;
  /* offset=0x004e flags=0x0018051040000205 */ uint8 Filter;
  /* offset=0x004f flags=0x0018011040000205 */ uint8 LODGroup;
};

class UTexture2D: public UTexture {
  /* offset=0x008c flags=0x0048001440202200 */ int32 StreamingIndex;
  /* offset=0x0090 flags=0x0018001440202200 */ int32 LevelIndex;
  /* offset=0x0094 flags=0x0018001040000200 */ int32 FirstResourceMemMip;
  /* offset=0x0098 flags=0x0048001040000000 */ struct FIntPoint ImportedSize;
  /* offset=0x00a0 flags=0x0048001040002200 */ double ForceMipLevelsToBeResidentTimestamp;
  /* offset=0x00a8 flags=0x0048001040002200 */ bool bTemporarilyDisableStreaming;
  /* offset=0x00a9 flags=0x0018001440002200 */ bool bIsStreamable;
  /* offset=0x00aa flags=0x0018001400002000 */ uint8 bHasStreamingUpdatePending:1;
  /* offset=0x00aa flags=0x0018001000002000 */ uint8 bForceMiplevelsToBeResident:1;
  /* offset=0x00aa flags=0x0018001000002000 */ uint8 bIgnoreStreamingMipBias:1;
  /* offset=0x00aa flags=0x0018041000000015 */ uint8 bGlobalForceMipLevelsToBeResident:1;
  /* offset=0x00ab flags=0x0018051040000205 */ uint8 AddressX;
  /* offset=0x00ac flags=0x0018051040000205 */ uint8 AddressY;

  int32 Blueprint_GetSizeX();
  int32 Blueprint_GetSizeY();
};

class UTexture2DDynamic: public UTexture {
  /* offset=0x0094 flags=0x0018001040002200 */ uint8 Format;
};

class UTextureCube: public UTexture {
};

class UTextureLODSettings: public UObject {
  /* offset=0x001c flags=0x0010000000004201 */ TArray<struct FTextureLODGroup> TextureLODGroups;
};

class UTextureLightProfile: public UTexture2D {
  /* offset=0x00c0 flags=0x0018011040000201 */ float Brightness;
  /* offset=0x00c4 flags=0x0018001040020201 */ float TextureMultiplier;
};

class UTextureRenderTarget: public UTexture {
  /* offset=0x008c flags=0x0018001040000205 */ float TargetGamma;
};

class UTextureRenderTarget2D: public UTextureRenderTarget {
  /* offset=0x0094 flags=0x0018011040000215 */ int32 SizeX;
  /* offset=0x0098 flags=0x0018011040000215 */ int32 SizeY;
  /* offset=0x009c flags=0x0018001040000000 */ struct FLinearColor ClearColor;
  /* offset=0x00ac flags=0x0018011040000205 */ uint8 AddressX;
  /* offset=0x00ad flags=0x0018011040000205 */ uint8 AddressY;
  /* offset=0x00ae flags=0x0018001000000000 */ uint8 bForceLinearGamma:1;
  /* offset=0x00ae flags=0x0018001020000000 */ uint8 bHDR:1;
  /* offset=0x00af flags=0x0018011040000215 */ uint8 RenderTargetFormat;
  /* offset=0x00b0 flags=0x0018051000000015 */ uint8 bGPUSharedFlag:1;
  /* offset=0x00b0 flags=0x0018011000000015 */ uint8 bAutoGenerateMips:1;
  /* offset=0x00b1 flags=0x0018001040000200 */ uint8 OverrideFormat;
};

class UTextureRenderTargetCube: public UTextureRenderTarget {
  /* offset=0x0094 flags=0x0018011040000205 */ int32 SizeX;
  /* offset=0x0098 flags=0x0018001040000000 */ struct FLinearColor ClearColor;
  /* offset=0x00a8 flags=0x0018001040000200 */ uint8 OverrideFormat;
  /* offset=0x00a9 flags=0x0018011000000015 */ uint8 bHDR:1;
  /* offset=0x00a9 flags=0x0018001000000000 */ uint8 bForceLinearGamma:1;
};

class UThrobber: public UWidget {
  /* offset=0x00c8 flags=0x0018001040000215 */ int32 NumberOfPieces;
  /* offset=0x00cc flags=0x0018001040000215 */ bool bAnimateHorizontally;
  /* offset=0x00cd flags=0x0018001040000215 */ bool bAnimateVertically;
  /* offset=0x00ce flags=0x0018001040000215 */ bool bAnimateOpacity;
  /* offset=0x00d0 flags=0x0018001060000200 */ USlateBrushAsset* PieceImage;
  /* offset=0x00d8 flags=0x0010000000000015 */ struct FSlateBrush Image;

  void SetAnimateHorizontally(bool bInAnimateHorizontally);
  void SetAnimateOpacity(bool bInAnimateOpacity);
  void SetAnimateVertically(bool bInAnimateVertically);
  void SetNumberOfPieces(int32 InNumberOfPieces);
};

class UThumbnailInfo: public UObject {
};

class UTileMapBlueprintLibrary: public UBlueprintFunctionLibrary {
  void BreakTile(struct FPaperTileInfo Tile, int32 TileIndex, UPaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);
  struct FTransform GetTileTransform(struct FPaperTileInfo Tile);
  FName GetTileUserData(struct FPaperTileInfo Tile);
  struct FPaperTileInfo MakeTile(int32 TileIndex, UPaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);
};

class UTileView: public UTableViewBase {
  /* offset=0x00c8 flags=0x0018001040000201 */ float ItemWidth;
  /* offset=0x00cc flags=0x0018001040000201 */ float ItemHeight;
  /* offset=0x00d0 flags=0x0010000000000205 */ TArray<UObject*> Items;
  /* offset=0x00dc flags=0x0018001040000201 */ uint8 SelectionMode;
  /* offset=0x00e0 flags=0x0010001000080201 */ FOnGenerateRowUObject OnGenerateTileEvent;

  void RequestListRefresh();
  void SetItemHeight(float Height);
  void SetItemWidth(float Width);
};

class ATimeManager: public AActor {
  /* offset=0x02a8 flags=0x0010001000000014 */ struct FTimeDate CurrentLocalTime;
  /* offset=0x02c4 flags=0x0018001040000205 */ float Latitude;
  /* offset=0x02c8 flags=0x0018001040000205 */ float Longitude;
  /* offset=0x02cc flags=0x0018001040000205 */ int32 OffsetUTC;
  /* offset=0x02d0 flags=0x0018001040000214 */ int32 OffsetDST;
  /* offset=0x02d4 flags=0x0018001040000205 */ bool bAllowDaylightSavings;
  /* offset=0x02d5 flags=0x0018001040000214 */ bool bDaylightSavingsActive;
  /* offset=0x02d8 flags=0x0018001040000205 */ float TimeScaleMultiplier;
  /* offset=0x02dc flags=0x0018001040000214 */ float SolarTime;
  /* offset=0x02e0 flags=0x0018001040000214 */ float LocalClockTime;
  /* offset=0x02e4 flags=0x0018001040000214 */ float TimeCorrection;
  /* offset=0x02e8 flags=0x0018001040000214 */ int32 LSTM;
  /* offset=0x02ec flags=0x0018001040000214 */ int32 DayOfYear;
  /* offset=0x02f0 flags=0x0018001040000214 */ float EoT;
  /* offset=0x02f4 flags=0x0018001040000214 */ float SolarAltAngle;
  /* offset=0x02f8 flags=0x0018001040000214 */ float SolarDeclination;
  /* offset=0x02fc flags=0x0018001040000214 */ float SolarAzimuth;
  /* offset=0x0300 flags=0x0018001040000214 */ float SolarHRA;
  /* offset=0x0304 flags=0x0018001040000214 */ float SiderealTime;
  /* offset=0x0308 flags=0x0018001040000214 */ float LunarAltAngle;
  /* offset=0x030c flags=0x0018001040000214 */ float LunarHRA;
  /* offset=0x0310 flags=0x0018001040000214 */ float LunarDeclination;
  /* offset=0x0314 flags=0x0018001040000214 */ float LunarAzimuth;
  /* offset=0x0318 flags=0x0018001040000214 */ float LunarRightAsc;
  /* offset=0x031c flags=0x0018001040000214 */ float LunarElapsedDays;
  /* offset=0x0320 flags=0x0018001040000214 */ float EcLongitude;
  /* offset=0x0324 flags=0x0018001040000214 */ float EcLatitude;
  /* offset=0x0328 flags=0x0018001040000214 */ float EcDistance;
  /* offset=0x032c flags=0x0018001040000214 */ float PartL;
  /* offset=0x0330 flags=0x0018001040000214 */ float PartM;
  /* offset=0x0334 flags=0x0018001040000214 */ float PartF;

  struct FRotator CalculateMoonAngle();
  float CalculateMoonPhase();
  struct FRotator CalculateSunAngle();
  int32 GetDayOfYear(struct FTimeDate Time);
  float GetDayPhase();
  int32 GetDaysInMonth(int32 Year, int32 Month);
  int32 GetDaysInYear(int32 Year);
  float GetElapsedDayInMinutes();
  float GetYearPhase();
  void IncrementTime(float DeltaSeconds);
  void InitializeCalendar(struct FTimeDate Time);
  bool IsLeapYear(int32 Year);
  void SetCurrentLocalTime(float Time);
};

class UTimelineComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x0040008100000020 */ struct FTimeline TheTimeline;
  /* offset=0x0180 flags=0x0048001000000000 */ uint8 bIgnoreTimeDilation:1;

  bool GetIgnoreTimeDilation();
  float GetPlayRate();
  float GetPlaybackPosition();
  float GetTimelineLength();
  bool IsLooping();
  bool IsPlaying();
  bool IsReversing();
  void OnRep_Timeline();
  void Play();
  void PlayFromStart();
  void Reverse();
  void ReverseFromEnd();
  void SetFloatCurve(UCurveFloat* NewFloatCurve, FName FloatTrackName);
  void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
  void SetLinearColorCurve(UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);
  void SetLooping(bool bNewLooping);
  void SetNewTime(float NewTime);
  void SetPlayRate(float NewRate);
  void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
  void SetTimelineLength(float NewLength);
  void SetTimelineLengthMode(uint8 NewLengthMode);
  void SetVectorCurve(UCurveVector* NewVectorCurve, FName VectorTrackName);
  void Stop();
};

class UTimelineTemplate: public UObject {
  /* offset=0x001c flags=0x0018001040000201 */ float TimelineLength;
  /* offset=0x0020 flags=0x0018001040000201 */ uint8 LengthMode;
  /* offset=0x0021 flags=0x0018001000000001 */ uint8 bAutoPlay:1;
  /* offset=0x0021 flags=0x0018001000000001 */ uint8 bLoop:1;
  /* offset=0x0021 flags=0x0018001000000005 */ uint8 bReplicated:1;
  /* offset=0x0021 flags=0x0018001000000000 */ uint8 bValidatedAsWired:1;
  /* offset=0x0021 flags=0x0018001000000001 */ uint8 bIgnoreTimeDilation:1;
  /* offset=0x0024 flags=0x0010000000000200 */ TArray<struct FTTEventTrack> EventTracks;
  /* offset=0x0030 flags=0x0010000000000200 */ TArray<struct FTTFloatTrack> FloatTracks;
  /* offset=0x003c flags=0x0010000000000200 */ TArray<struct FTTVectorTrack> VectorTracks;
  /* offset=0x0048 flags=0x0010000000000200 */ TArray<struct FTTLinearColorTrack> LinearColorTracks;
  /* offset=0x0054 flags=0x0010000000000201 */ TArray<struct FBPVariableMetaDataEntry> MetaDataArray;
  /* offset=0x0060 flags=0x0018001040200000 */ struct FGuid TimelineGuid;
};

class UTimerRegistComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040010205 */ bool bEnable;
  /* offset=0x00b0 flags=0x0020080000000200 */ TArray<struct FRegisterTimer> TimerRegister;
  /* offset=0x00bc flags=0x0028080000000200 */ FString TimerName;
};

class UTireConfig: public UDataAsset {
  /* offset=0x0020 flags=0x0048001040000201 */ float FrictionScale;
  /* offset=0x0024 flags=0x0040000000000201 */ TArray<struct FTireConfigMaterialFriction> TireFrictionScales;
};

class UTireType: public UDataAsset {
  /* offset=0x0020 flags=0x0018001040020201 */ float FrictionScale;
};

class UTouchInterface: public UObject {
  /* offset=0x001c flags=0x0010000000000201 */ TArray<struct FTouchInputControl> Controls;
  /* offset=0x0028 flags=0x0018001040000201 */ float ActiveOpacity;
  /* offset=0x002c flags=0x0018001040000201 */ float InactiveOpacity;
  /* offset=0x0030 flags=0x0018001040000201 */ float TimeUntilDeactive;
  /* offset=0x0034 flags=0x0018001040000201 */ float TimeUntilReset;
  /* offset=0x0038 flags=0x0018001040000201 */ float ActivationDelay;
  /* offset=0x003c flags=0x0018001040000201 */ bool bPreventRecenter;
  /* offset=0x0040 flags=0x0018001040000201 */ float StartupDelay;
};

class UTranslator: public UObject {
  /* offset=0x001c flags=0x0048000000004200 */ FString SubscriptionKey;

  void OnDetect(bool Success, FString Data);
  void OnGetAccessToken(bool Success, FString Data);
  void OnTranslate(bool Success, FString Data);
  void Translate(int32 Channel, int32 ID, FString Text);
};

class ATriggerBase: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UShapeComponent* CollisionComponent;
};

class ATriggerBox: public ATriggerBase {
};

class ATriggerCapsule: public ATriggerBase {
};

class ATriggerSphere: public ATriggerBase {
};

class ATriggerVolume: public AVolume {
};

class UTssManager: public UObject {
  int32 OnRecvData_LuaState();
  int32 SendSkdData_LuaState();
};

class UTurnBasedBlueprintLibrary: public UBlueprintFunctionLibrary {
  void GetIsMyTurn(UObject* WorldContextObject, APlayerController* PlayerController, FString MatchID, bool bIsMyTurn);
  void GetMyPlayerIndex(UObject* WorldContextObject, APlayerController* PlayerController, FString MatchID, int32 PlayerIndex);
  void GetPlayerDisplayName(UObject* WorldContextObject, APlayerController* PlayerController, FString MatchID, int32 PlayerIndex, FString PlayerDisplayName);
  void RegisterTurnBasedMatchInterfaceObject(UObject* WorldContextObject, APlayerController* PlayerController, UObject* Object);
};

class UTurnBasedMatchInterface: public UInterface {
  void OnMatchEnded(FString Match);
  void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);
};

class UTwitterIntegrationBase: public UPlatformInterfaceBase {
  bool AuthorizeAccounts();
  bool CanShowTweetUI();
  FString GetAccountName(int32 AccountIndex);
  int32 GetNumAccounts();
  void Init();
  bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);
  bool TwitterRequest(FString URL, TArray<FString> ParamKeysAndValues, uint8 RequestMethod, int32 AccountIndex);
};

class UUAEAnimListComponentBase: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000002200 */ TMap<int32, struct FAnimListMapValueData> AnimListMap;
};

class UUAEChaVehAnimListComponent: public UUAECharAnimListCompBase {
  /* offset=0x00e8 flags=0x0010000000010205 */ TArray<struct FVehCharAnimData> VehCharAnimDataList;
};

class UUAECharAnimListCompBase: public UUAEAnimListComponentBase {
};

class AUAECharacter: public ACharacter {
  /* offset=0x05a4 flags=0x0018000000000220 */ FString PlayerName;
  /* offset=0x05b0 flags=0x0018001040000220 */ uint32 PlayerKey;
  /* offset=0x05b4 flags=0x0018001140000220 */ int32 TeamID;
  /* offset=0x05b8 flags=0x0018001040000220 */ enum ECharacterGender DefaultCharacterGender;
  /* offset=0x05bc flags=0x0010000000000200 */ TArray<struct FGameModePlayerItem> InitialItemList;
  /* offset=0x05c8 flags=0x0018001040000234 */ bool bIsAI;

  /* CL  */ void ClientAcknowledgeReconnection(uint32 Token);
  TArray<UActorComponent*> GetNonDedicatedComponents();
  TArray<UActorComponent*> GetNonSimulatedComponents();
  TArray<UActorComponent*> GetNonSimulatedComponents_NonTeammates();
  FString GetPlayerKey();
  void OnRep_TeamID();
};

class UUAECharacterAnimListComponent: public UUAECharAnimListCompBase {
  /* offset=0x00e8 flags=0x0010000000010205 */ TArray<struct FCharacterMovementAnimData> CharacterMovementAnimEditList;
  /* offset=0x00f4 flags=0x0010000000010205 */ TArray<struct FCharacterJumpAnimData> CharacterJumpEditList;

  UAnimationAsset* GetCharacterAnim(uint8 AnimType, uint8 PoseType);
  TArray<struct FPlayerAnimData> GetCharacterJumpAnim(uint8 JumpType);
};

class AUAEClientGameMode: public AGameMode {
};

class UUAEDataTable: public UDataTable {
};

class UUAEGameEngine: public UGameEngine {
  /* offset=0x0c3c flags=0x0048001040000200 */ UBackendHUD* AssociatedBackendHUD;
};

class UUAEGameInstance: public UGameInstance {
  /* offset=0x01d8 flags=0x0010000000000000 */ struct FClientBaseInfo ClientBaseInfo;
  /* offset=0x0278 flags=0x0048001040000200 */ UFrontendHUD* AssociatedFrontendHUD;

  UFrontendHUD* GetAssociatedFrontendHUD();
  int32 GetDeviceLevel();
};

class AUAEGameMode: public AGameMode {
  /* offset=0x0330 flags=0x0018001040010215 */ float GridCheckSize;
  /* offset=0x0334 flags=0x0018001040010215 */ float DeepCheckSize;
  /* offset=0x0338 flags=0x0018001040000214 */ bool bEnableClimbing;
  /* offset=0x033c flags=0x0018001040010205 */ int32 MaxAllowReplicatedCharacterCount;
  /* offset=0x0340 flags=0x0018001040010205 */ int32 AINoRepTimeInReady;

  AUAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey);
  AUAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey);
  TArray<AUAEPlayerController*> GetPlayerControllerListWithTeamID(int32 TeamID);
  TArray<AUAEPlayerState*> GetPlayerStateListWithTeamID(int32 TeamID);
  void OnMsg(FString msg);
  void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot);
  APawn* SpawnUAEPawnFor(AController* NewPlayer, struct FTransform Trans);
};

class AUAEGameState: public AGameState {
};

class AUAEHouseActor: public AActor {
  /* offset=0x02a8 flags=0x0018001040000205 */ UTexture2D* AOTexture;
  /* offset=0x02b0 flags=0x0018001040000205 */ FName AOParamName;
  /* offset=0x02b8 flags=0x0010000000000200 */ TArray<UMaterialInstanceDynamic*> pAOMatList;
  /* offset=0x02c4 flags=0x0010008000000208 */ TArray<UMeshComponent*> MeshList;

  void FixAOParam();
};

class UUAELoadedClassManager: public UObject {
  /* offset=0x001c flags=0x0040000000000200 */ TArray<UClass<UObject>*> m_CachClass;
  /* offset=0x0028 flags=0x0040000000000200 */ TMap<uint32, UClass<UObject>*> m_CookClass;
  /* offset=0x006c flags=0x0010000000010205 */ TMap<int32, struct FUAEResList> m_ResTableData;
  /* offset=0x00a8 flags=0x0020080000000214 */ TMap<FString, UBPTable*> BPTableMap;
  /* offset=0x00e4 flags=0x0048000000004200 */ FString LoadedClassManagerClassName;

  void ClearAllData();
  UBPTable* CreateAndAddBPTable(FString BPTableName);
  UUAELoadedClassManager* Get();
  UClass<UObject>* GetClass(FString BPTableName, int32 ID);
  FString GetPath(FString BPTableName, int32 ID);
  void Init();
  void InitBPTableMap();
  void InitTableData();
};

class AUAELobbyGameMode: public AUAEClientGameMode {
};

class AUAELobbyGamePawnMode_C: public AUAELobbyGameMode {
  /* offset=0x0330 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class AUAELobbyPlayerController: public APlayerController {
};

class UUAEMeshComponent: public USkeletalMeshComponent {
};

class AUAENetActor: public AActor {
};

class UUAENetConnection: public UIpConnection {
  /* offset=0x296e4 flags=0x0048001040004200 */ float MinRegionActorTickDelta;
  /* offset=0x296e8 flags=0x0048001040004200 */ float MaxRegionActorTickDelta;
  /* offset=0x29714 flags=0x0048001040004200 */ int32 ActorChannelProcessBunchErrorNumThreshold_Server_Global;
  /* offset=0x29718 flags=0x0048001040004200 */ int32 ActorChannelProcessBunchErrorNumThreshold_Client_Global;
  /* offset=0x2971c flags=0x0048001040004200 */ int32 ActorChannelProcessBunchErrorNumThreshold_Client_PerActor;
};

class UUAENetDriver: public UIpNetDriver {
};

class AUAEPlayerController: public APlayerController {
  /* offset=0x054c flags=0x0018000000000220 */ FString PlayerName;
  /* offset=0x0558 flags=0x0018001040000220 */ uint32 PlayerKey;
  /* offset=0x055c flags=0x0018001040000220 */ int32 TeamID;
  /* offset=0x0560 flags=0x0018001040000020 */ struct FVector CharacterLocation;
  /* offset=0x0578 flags=0x0018001040000234 */ bool bIsGM;
  /* offset=0x0579 flags=0x0018001040010235 */ enum ECharacterGender DefaultCharacterGender;
  /* offset=0x057c flags=0x0010000000000200 */ TArray<struct FGameModePlayerItem> InitialItemList;
  /* offset=0x058b flags=0x0018001040000220 */ bool bReconnected;
  /* offset=0x058e flags=0x0018001040000220 */ bool bIsSpectating;
  /* offset=0x0590 flags=0x0010000010080214 */ FPlayerControllerLostDelegate PlayerControllerLostDelegate;
  /* offset=0x059c flags=0x0010000010080214 */ FPlayerControllerRecoveredDelegate PlayerControllerRecoveredDelegate;
  /* offset=0x05a8 flags=0x0010000010080214 */ FPlayerControllerAboutToReconnectDelegate PlayerControllerAboutToReconnectDelegate;
  /* offset=0x05b4 flags=0x0010000010080214 */ FPlayerControllerReconnectedDelegate PlayerControllerReconnectedDelegate;
  /* offset=0x05c0 flags=0x0010000010080214 */ FPlayerControllerAboutToExitDelegate PlayerControllerAboutToExitDelegate;

  void ActorReports(FString InFileName);
  void CastUIMsg(FString strMsg, FString module);
  bool CheckAcknowledgedPawn(APawn* InPawn);
  /* CL  */ void ClientAcknowledgeReconnection(uint32 Token);
  /* CL  */ void ClientBroadcastReconnectionSuccessful();
  void DisableInGameUI();
  void DoCrash();
  void DumpAllActors();
  void DumpAllObjects();
  void DumpAllUI();
  void DumpNetActors();
  void EnableInGameUI();
  void ExcuteIntCounterRecord(FString Key, int32 Count);
  void ExcuteIntRecord(FString Key, int32 Count);
  void ExitGame();
  int32 GotoSpectating(int32 PlayerId);
  void InitInGameUI();
  void InitWithPlayerParams(struct FGameModePlayerParams Params);
  void KickSelf();
  void ObjectCountReport(FString InFileName);
  void ObjectPathReport(FString InFileName);
  void ObjectReports(FString InFileName);
  void PrintStatistics();
  void ReleaseInGameUI();
  /* SRV */ void ServerAcknowledgeReconnection(uint32 Token);
  /* SRV */ void ServerExitGame();
  /* SRV */ void ServerGotoSpectating();
  /* SRV */ void ServerKickSelf();
  /* SRV */ void ServerSetVoiceId(int32 VoiceID);
  void SetPanels(TArray<UUAEUserWidget*> panels);
};

class AUAEPlayerState: public APlayerState {
  /* offset=0x0310 flags=0x0018001040000214 */ float surviveTime;
  /* offset=0x0314 flags=0x0018001040000214 */ float Pronetime;
  /* offset=0x0318 flags=0x0018001040000214 */ float marchDistance;
  /* offset=0x031c flags=0x0018001040000214 */ float travelDistance;
  /* offset=0x0320 flags=0x0018001040000214 */ float driveDistance;
  /* offset=0x0324 flags=0x0018001040000214 */ int32 destroyVehicleNum;
  /* offset=0x0328 flags=0x0018001040000214 */ int32 rescueTimes;
  /* offset=0x032c flags=0x0018001040000220 */ int32 GVMemberID;
  /* offset=0x0330 flags=0x0018001040000220 */ uint32 PlayerKey;
  /* offset=0x0334 flags=0x0018001040000234 */ int32 TeamID;
  /* offset=0x0338 flags=0x0018001140000234 */ int32 Kills;
  /* offset=0x033c flags=0x0018001040000224 */ int32 Assists;
  /* offset=0x0340 flags=0x0018001040000200 */ uint32 Killer;
  /* offset=0x0344 flags=0x0018001040000214 */ int32 ShootWeaponShotNum;
  /* offset=0x0348 flags=0x0018001040000214 */ int32 ShootWeaponShotAndHitPlayerNum;
  /* offset=0x034c flags=0x0018001040000214 */ int32 HeadShotNum;
  /* offset=0x0350 flags=0x0018001040000214 */ int32 HealTimes;
  /* offset=0x0354 flags=0x0018001040000214 */ float DamageAmount;
  /* offset=0x0358 flags=0x0018001040000214 */ float HealAmount;
  /* offset=0x035c flags=0x0010000000000214 */ TArray<FString> KillFlow;
  /* offset=0x0368 flags=0x0010000000000214 */ TArray<struct FTLog_PickUpItemFlow> TLog_PickUpItemFlowData;
  /* offset=0x0374 flags=0x0010000000000214 */ TArray<struct FTLog_PropEquipUnequipFlow> TLog_PropEquipUnequipFlowData;
  /* offset=0x0380 flags=0x0018001040000014 */ struct FVector LandLocation;
  /* offset=0x038c flags=0x0018001040000014 */ struct FVector DeadLocation;
  /* offset=0x0398 flags=0x0018000000000214 */ FString DeadDamangeType;
  /* offset=0x03a4 flags=0x0018000000000214 */ FString DeadTimeStr;
  /* offset=0x03b0 flags=0x0018001040000214 */ int32 MemberIdInVoiceRoom;

  struct FGameModePlayerBattleResultData GetPlayerBattleResultData();
  struct FGameModeTeammateBattleResultData GetTeammateBattleResultData();
  uint32 GetUserIDByMemberID(int32 memberID);
  void OnRep_PlayerKillsChange();
  void SetGVMemberID(int32 memberID);
  /* SRV */ void SetGVMemberIDServerCall(int32 memberID);
};

class AUAEProjectile: public AActor {
};

class AUAERecastNavMesh: public ARecastNavMesh {
  /* offset=0x04e8 flags=0x0018000000000201 */ FString NavDataPath;
  /* offset=0x04f4 flags=0x0018001040000201 */ bool LoadInPIE;
  /* offset=0x04f5 flags=0x0018001040000201 */ bool LoadInDS;
  /* offset=0x04f6 flags=0x0018001040000201 */ bool LoadInClient;
  /* offset=0x04f7 flags=0x0018001040000201 */ bool LoadInEditor;
};

class AUAESimpleSceneActor: public AActor {
};

class AUAESkill: public AUTSkill {
  /* offset=0x0380 flags=0x0010000010080200 */ FSkillCustomEvent OnSkillCustomEvent;
  /* offset=0x038c flags=0x0018001040000205 */ bool TriggerFromServer;
  /* offset=0x038d flags=0x0018001040000205 */ enum EPawnState PawnState;
  /* offset=0x038e flags=0x0018001040000205 */ bool AutoEnterState;
};

class UUAESkillAction: public UUTSkillAction {
};

class UUAESkillAction_AddRecoveryPrompt: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString ShowDataKey;
  /* offset=0x00f8 flags=0x0018001040000201 */ float Value;
};

class UUAESkillAction_AddRemoveBuff: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ bool IsAddBuff;
  /* offset=0x00f0 flags=0x0018001040000205 */ FName BuffName;
  /* offset=0x00f8 flags=0x0018001040000205 */ int32 AddLayerCount;
  /* offset=0x00fc flags=0x001800104008020d */ UUAESkillPicker* TargetPicker;
};

class UUAESkillAction_AttachActor: public UUAESkillAction {
  /* offset=0x00f0 flags=0x0010001000000001 */ struct FSkillAction_AttachActorCreateData AttachActorData;
  /* offset=0x0120 flags=0x0018001040000200 */ AActor* AttachedActor;
};

class UUAESkillAction_ConsumeHandleItem: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ int32 ItemID;
  /* offset=0x00f0 flags=0x0018001040000201 */ int32 Type;
  /* offset=0x00f4 flags=0x0018001040000201 */ int32 Count;
  /* offset=0x00f8 flags=0x0018001040000201 */ bool IsGrenade;
};

class UUAESkillAction_CustomEvent: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ uint8 CustomEvent;
};

class UUAESkillAction_GasCan: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ bool RunOnServer;
  /* offset=0x00f0 flags=0x0018001040000201 */ float GasValue;
};

class UUAESkillAction_GrenadeSwitchBackToWeapon: public UUAESkillAction {
};

class UUAESkillAction_JumpPhase: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ int32 NewPhaseID;
  /* offset=0x00f0 flags=0x001800104008020d */ UUAESkillCondition* JumpCondtion;
};

class UUAESkillAction_JumpToRandomPhase: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ int32 StartIndex;
  /* offset=0x00f0 flags=0x0018001040000205 */ int32 EndIndex;
  /* offset=0x00f4 flags=0x0018001040000205 */ bool IsCanBeCurIndex;
  /* offset=0x00f8 flags=0x001800104008020d */ UUAESkillCondition* JumpCondtion;
};

class UUAESkillAction_LockItem: public UUAESkillAction {
};

class UUAESkillAction_Log: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString LogString;
};

class UUAESkillAction_PauseAnims: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ float Duration;

  void ResetAnimationFrame();
};

class UUAESkillAction_PlayMontage: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ UAnimMontage* AnimMontage;
};

class UUAESkillAction_PlayMontage_Jump: public UUAESkillAction_PlayMontage_Pose {
  /* offset=0x0104 flags=0x0048001040000201 */ UAnimMontage* AnimMontage_Jump;
};

class UUAESkillAction_PlayMontage_Pose: public UUAESkillAction_PlayMontage {
  /* offset=0x00f4 flags=0x0010001000000001 */ struct FSkillPoseMontageData PoseMontageData;
};

class UUAESkillAction_RandomAction: public UUAESkillAction {
  /* offset=0x00ec flags=0x0010008000000201 */ TArray<struct FRandomActionGroup> SkillCandidates;
  /* offset=0x00f8 flags=0x0018001040000200 */ int32 RandomeIndex;
};

class UUAESkillAction_Recovery: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString PropertyName;
  /* offset=0x00f8 flags=0x0018001040000201 */ uint8 RecoveryType;
  /* offset=0x00fc flags=0x0018001040000201 */ float RecoveryValue;
  /* offset=0x0100 flags=0x0018001040000201 */ float RecoveryLimit;
  /* offset=0x0104 flags=0x0018001040000201 */ bool RunOnServer;
  /* offset=0x0105 flags=0x0018001040000201 */ uint8 ReasonType;
};

class UUAESkillAction_ReplaceCharAnim: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ uint8 CharacterAnimType;
  /* offset=0x00f0 flags=0x0010000000000201 */ TArray<UAnimationAsset*> PoseAnimList;
};

class UUAESkillAction_SetPlayerState: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ enum EPawnState PawnState;
  /* offset=0x00ed flags=0x0018001040000205 */ bool SetEnter;
};

class UUAESkillAction_SetRecoveryPrompt: public UUAESkillAction {
  /* offset=0x00ec flags=0x0010000000000001 */ struct FHealthPredictShowData ShowData;
  /* offset=0x0104 flags=0x0018000000000201 */ FString RemovePrePromptKey;
  /* offset=0x0110 flags=0x0018001040000201 */ bool RemoveByAddBuff;
};

class UUAESkillAction_ShowSkillPrompt: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ float LastTime;
  /* offset=0x00f0 flags=0x0018000000000201 */ FString PromptText;
};

class UUAESkillAction_ShowWeapon: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ bool bShowWeapon;
  /* offset=0x00ed flags=0x0018001040000201 */ bool bUndoClear;
  /* offset=0x00ee flags=0x0018001040000201 */ bool bPhaseFinishClear;
  /* offset=0x00f0 flags=0x0018001040000201 */ FName WeaponName;
};

class UUAESkillAction_SpawnActor: public UUAESkillAction {
  /* offset=0x00f0 flags=0x0010009000000001 */ struct FSkillAction_SpawnActorCreateData SpawnActorData;
  /* offset=0x0138 flags=0x0018001040000200 */ AActor* SpawnedActor;
};

class UUAESkillAction_SpawnProjectile: public UUAESkillAction {
  /* offset=0x00ec flags=0x0010001000000001 */ struct FSkillAction_SpawnProjectileCreateData SpawnProjectileData;
};

class UUAESkillAction_StopSkill: public UUAESkillAction {
};

class UUAESkillAction_SwitchWeapon: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000201 */ uint8 WeaponSlot;
  /* offset=0x00ed flags=0x0018001040000201 */ bool SwitchBackWhenFinish;
};

class UUAESkillAction_SwitchWeaponToGrenade: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018000000000201 */ FString WeaponSlotName;
  /* offset=0x00f8 flags=0x0018001000000001 */ struct FItemDefineID ItemDefineID;
};

class UUAESkillAction_TakeDamage: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ float DamageAmount;
  /* offset=0x00f0 flags=0x0018001040000205 */ float DamageAmountHeadshot;
  /* offset=0x00f4 flags=0x0018001040000201 */ int32 SpecificItemID;
  /* offset=0x00f8 flags=0x0018001040000201 */ int32 ItemType;
  /* offset=0x00fc flags=0x001800104008020d */ UUAESkillPicker* DamagePicker;
};

class UUAESkillCondition: public UUTSkillCondition {
  /* offset=0x00cc flags=0x001c001040002200 */ APawn* OwnerPawn;
};

class UUAESkillConditionAction: public UUAESkillAction {
  /* offset=0x00ec flags=0x001800104008020d */ UUAESkillCondition* Condition;
  /* offset=0x00f0 flags=0x001800104008020d */ UUAESkillAction* Action;
};

class UUAESkillCondition_FallingMode: public UUAESkillCondition {
};

class UUAESkillCondition_GrenadeMode: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018001040000205 */ uint8 GrenadeMode;
};

class UUAESkillCondition_HandleItemLimit: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018001040000205 */ uint8 OperatorType;
  /* offset=0x00d8 flags=0x0018001040000205 */ int32 NeedItemNum;
  /* offset=0x00dc flags=0x0018001040000205 */ int32 ItemID;
  /* offset=0x00e0 flags=0x0018001040000205 */ int32 Type;
  /* offset=0x00e4 flags=0x0018001040000205 */ bool bCheckBothSide;
};

class UUAESkillCondition_KeyEvent: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018001040000201 */ uint8 KeyEvent;
};

class UUAESkillCondition_MoveDist: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018001040000205 */ uint8 OperatorType;
  /* offset=0x00d8 flags=0x0018001040000205 */ float DistValue;
};

class UUAESkillCondition_Not: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x001800104008020d */ UUAESkillCondition* Condition;
};

class UUAESkillCondition_PlayerState: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018001040000214 */ uint8 OperatorType;
  /* offset=0x00d8 flags=0x0010000000000205 */ TArray<enum EPawnState> ArrPlayerState;
};

class UUAESkillCondition_PropertyLimit: public UUAESkillCondition {
  /* offset=0x00d4 flags=0x0018000000000205 */ FString PropertyName;
  /* offset=0x00e0 flags=0x0018001040000205 */ uint8 OperatorType;
  /* offset=0x00e1 flags=0x0018001040000205 */ uint8 ValueType;
  /* offset=0x00e4 flags=0x0018001040000205 */ float PropertyValue;
  /* offset=0x00e8 flags=0x0018001040000205 */ bool ShowPrompt;
  /* offset=0x00ec flags=0x0018001040000205 */ int32 PromptID;
};

class UUAESkillEventEffectMapForEditor: public UUTSkillEventEffectMapForEditor {
  /* offset=0x00e4 flags=0x0018001040000205 */ uint8 UAESkillEventType;
};

class UUAESkillInterface: public UUTSkillInterface {
  void InitFromSkill(AUAESkill* SkillOwner);
  void TriggerCustomEvent(uint8 EventType);
  void TriggerEntryEvent(enum EUTSkillEntry EntryEvent);
};

class UUAESkillManagerComponent: public UUTSkillManagerComponent {
  /* offset=0x014c flags=0x0010000000010215 */ TArray<struct FUTSkillEntryConfig> SkillEntryConfigs;

  AUTSkill* GetSkillByEntry(enum EUTSkillEntry Entry);
  void InsertGrenadeIDInOrder(int32 GrenadeID);
  void InsertGrenadeIDToName(int32 GrenadeID, FName Name);
  /* SRV */ void ServerTriggerCurSkillEvent(uint8 UAEEvent);
  void SetSkillOwner(APawn* Pawn);
  bool ShouldDropBagItem(struct FItemDefineID SkillItemID);
  void TouchCancelSkillLock();
  void TriggerCurSkillEvent(uint8 UAEEvent);
  void TriggerEvent(int32 SkillID, uint8 EventType);
};

class UUAESkillPhase: public UUTSkillPhase {
};

class UUAESkillPicker: public UUTSkillPicker {
};

class UUAESkillPicker_Fan: public UUAESkillPicker {
  /* offset=0x0100 flags=0x0010001000000001 */ struct FUTSkillPicker_FanCreateData FanData;
};

class UUAESkillPicker_SkillOwner: public UUAESkillPicker {
};

class UUAETableManager: public UObject {
  /* offset=0x001c flags=0x0048000000004200 */ FString TableRelativeDir;
  /* offset=0x0028 flags=0x0040000000004200 */ TArray<FString> InitalizedTables;
  /* offset=0x0034 flags=0x0040000000000200 */ TArray<UUAEDataTable*> TableObjList;
  /* offset=0x0040 flags=0x0044000000000200 */ TMap<FName, UUAEDataTable*> TableObjMap;

  UUAEDataTable* GetTablePtr(FName TableName);
  void ReleaseTable(FName TableName);
};

class UUAEUserWidget: public UUserWidget {
  /* offset=0x01ac flags=0x0048001040002200 */ UFrontendHUD* OwningFrontendHUD;
  /* offset=0x01b0 flags=0x0048001040002200 */ ULogicManagerBase* OwningLogicManager;
  /* offset=0x01b4 flags=0x0048001040082208 */ UUAEWidgetContainer* OwningWidgetContainer;
  /* offset=0x01b8 flags=0x0048001040082208 */ UUAEUserWidget* ParentWidget;
  /* offset=0x01c0 flags=0x0010008000000001 */ struct FUserWidgetState DefaultUserWidgetState;
  /* offset=0x01e0 flags=0x0020088000000004 */ struct FUserWidgetState CurrentUserWidgetState;
  /* offset=0x0200 flags=0x0018001040004201 */ float TickRate;
  /* offset=0x0204 flags=0x0018001040000201 */ bool bReceiveOnClickedEvent;
  /* offset=0x0205 flags=0x0018001040000201 */ bool bReceiveOnRightClickedEvent;
  /* offset=0x0206 flags=0x0018001040000201 */ bool bReceiveOnDoubleClickedEvent;
  /* offset=0x0207 flags=0x0018001040000201 */ bool bAutoSetScreenPosOnMouseEnter;
  /* offset=0x0208 flags=0x0018001040000014 */ struct FVector2D ScreenPos;
  /* offset=0x0210 flags=0x0018001040000014 */ struct FVector2D LastMouseEventScreenPos;
  /* offset=0x021c flags=0x0028081040000204 */ enum EUserWidgetFadingStatus FadingStatus;
  /* offset=0x0220 flags=0x0028081040000204 */ float CurrentOpacity;
  /* offset=0x0224 flags=0x0028081040010201 */ float FadingInTime;
  /* offset=0x0228 flags=0x0028081040010201 */ float FadingOutTime;
  /* offset=0x022c flags=0x0028081040010201 */ bool bNoFadeIn;
  /* offset=0x022d flags=0x0028081040010201 */ bool bNoFadeOut;
  /* offset=0x022e flags=0x0028081040010201 */ bool bShouldCollapse;

  void ClearOpenedUIStack();
  FString GetOpenedUIStackTop();
  UFrontendHUD* GetOwningFrontendHUD();
  ULogicManagerBase* GetOwningLogicManager();
  APlayerController* GetOwningPlayer();
  UUAEUserWidget* GetParentWidget();
  void HandleUIMessage(FString UIMessage);
  void Hide();
  void OnClicked(struct FVector2D TempScreenPos);
  void OnDoubleClicked(struct FVector2D TempScreenPos);
  void OnFadeInFinished();
  void OnFadeOutFinished();
  void OnRightClicked(struct FVector2D TempScreenPos);
  void PopOpenedUIStack(FString curOpen);
  void PushOpenedUIStack(FString Name);
  void ReceiveHide();
  void ReceiveShow();
  void ReceivedInitWidget();
  void Register(ULogicManagerBase* LogicManager, bool bAddToViewport);
  void SetParentWidget(UUAEUserWidget* InParentWidget);
  void Show();
  void SynchronizeBlueprintProperties();
};

class UUAEWidgetContainer: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0020088000000208 */ TArray<UUAEUserWidget*> WidgetList;

  void AddWidget(UUAEUserWidget* Widget);
  void AddWidgetInternal(UUAEUserWidget* Widget);
  void RemoveWidget(UUAEUserWidget* Widget);
  void RemoveWidgetInternal(UUAEUserWidget* Widget);
};

class UUDPPingCollector: public UObject {
  /* offset=0x0040 flags=0x0040000000000200 */ TMap<FString, struct FPingServerInfo> mUDPPingInfoMap;

  void ChoosingZone(int32 ZoneID, FString AddrIP);
  int32 GetMinDealyAddress();
  float GetZoneServerDelay(FString ServerAddress);
  void Init(float pingintervalTime, float pingTimeoutSecond);
  bool IsChooingZoneAccess();
  void TickUDPPing(float DeltaTime);
  void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int32 ZoneID);
};

class UUIBindAccount_Intl_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* btnBindFB;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* btnBindGPGC;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01dc flags=0x000a0010c008020c */ UImage* imgGameCenter;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UImage* imgGooglePlay;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UHorizontalBox* lblFBbind;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UHorizontalBox* lblFBunbind;
  /* offset=0x01ec flags=0x000a0010c008020c */ UTextBlock* lblFBUserName;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UHorizontalBox* lblGPbind;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UTextBlock* lblGPGC;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UTextBlock* lblGPGCUserName;
  /* offset=0x01fc flags=0x000a0010c008020c */ UHorizontalBox* lblGPunbind;
  /* offset=0x0200 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x023c flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict;
  /* offset=0x0278 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x02b4 flags=0x0008001040010205 */ uint8 SelectType;
  /* offset=0x02b8 flags=0x0008001040010205 */ UWidget* SelectWidget;
  /* offset=0x02bc flags=0x0000001040010205 */ bool IsSelectItemMoving;
  /* offset=0x02c0 flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;
  /* offset=0x02c4 flags=0x0000000000010005 */ FText textGooglePlay;
  /* offset=0x02d0 flags=0x0000000000010005 */ FText textGameCenter;
  /* offset=0x02dc flags=0x0000000000010005 */ FText textFacebook;
  /* offset=0x02e8 flags=0x0000000000010005 */ FText textBindSuccess;
  /* offset=0x02f4 flags=0x0000000000010005 */ FText textBindFailed;
  /* offset=0x0300 flags=0x0008001040010a05 */ Abp_bind_main_intl_C* bp_bind_main;
  /* offset=0x0304 flags=0x0000000000010005 */ FText textBindMsgTitle;
  /* offset=0x0310 flags=0x0000000000010005 */ FText textBindErrorOtherBind;
  /* offset=0x031c flags=0x0000000000010005 */ FText textInvalidGoogleService;
  /* offset=0x0328 flags=0x0000000000010005 */ FText textUserCancelGCLogin;

  void AddWidgetToDict(bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData);
  void ApplyWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_7_K2Node_ComponentBoundEvent_31_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_close_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Close();
  void Construct();
  void Destruct();
  void ExecuteUbergraph_UIBindAccount_Intl(int32 EntryPoint, UIMSDKHelper* CallFunc_GetInstance_ReturnValue);
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  void Get_ProgressBar_Opacity_Percent();
  void Get_ProgressBar_Scale_Percent();
  void Hide();
  void InitBPBindMain(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_bind_main_intl_C* K2Node_DynamicCast_AsBp_Bind_Main_Intl, bool K2Node_DynamicCast_bSuccess3);
  void InitSettingPanelData();
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void MoveWidget(struct FVector2D MoveDelta, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnIMSDKBindFBCallBack(FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_getBindCallBackMsg_bindCallBackMsg);
  void OnIMSDKBindGPGCCallBack(FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_getBindCallBackMsg_bindCallBackMsg);
  void OnIMSDKRefreshedBindInfo();
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_SelectTouchItem_IsSelect, uint8 CallFunc_SelectTouchItem_ItemType, UWidget* CallFunc_SelectTouchItem_ItemWidget);
  void RefreshBindButtons(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2);
  void RefreshBindTag();
  void RefreshBindUI();
  void RefreshGPGCIcon(enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void RefreshGPGCLabel(enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
  void RefreshlblUserName(FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  void SelectTouchItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 SelectItemType, UWidget* SelectItemWidget, bool IsItemSelect, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void Show();
  void ShowMsgBox(FString Title, FString msg);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
  void getBindCallBackMsg(bool isFacebook, FString bindCallBackMsg, FString CallFunc_getBindGPGCCallBackMsg_msg, FString CallFunc_getBindFBCallBackMsg_msg);
  void getBindFBCallBackMsg(FString msg, FString CallFunc_getBindFBFailMsg_msg, FString CallFunc_getBindFBSuccessMsg_msg, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void getBindFBFailMsg(FString msg, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_isBindOthers_result);
  void getBindFBSuccessMsg(FString msg, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);
  void getBindGPGCCallBackMsg(FString msg, FString CallFunc_getBindGPGCFailMsg_msg, FString CallFunc_getBindGPGCSuccessMsg_msg, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void getBindGPGCFailMsg(FString msg, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_isBindOthers_result, FString CallFunc_Conv_TextToString_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue4, FString CallFunc_Conv_TextToString_ReturnValue5);
  void getBindGPGCSuccessMsg(FString msg, enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool K2Node_SwitchEnum_CmpSuccess, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_Conv_TextToString_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2);
  void isBindOthers(bool isFacebook, bool Result, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2);
};

class UUIBindMain_Intl_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008020c */ UImage* BG;
  /* offset=0x0238 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x023c flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0240 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0244 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x0248 flags=0x000a0010c008020c */ UButton* Button_Help;
  /* offset=0x024c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x0250 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x025c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0268 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* lblID;
  /* offset=0x0278 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x02b4 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict;
  /* offset=0x02f0 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x032c flags=0x0008001040010205 */ uint8 SelectType;
  /* offset=0x0330 flags=0x0008001040010205 */ UWidget* SelectWidget;
  /* offset=0x0334 flags=0x0000001040010205 */ bool IsSelectItemMoving;
  /* offset=0x0338 flags=0x0008001040010205 */ UUISwitchAccount_Intl_C* panelSwitchAccount;
  /* offset=0x033c flags=0x0008001040010205 */ UUIBindAccount_Intl_C* panelBindAccount;
  /* offset=0x0340 flags=0x0008001040010205 */ UUIGenTransferCode_Intl_C* panelGenTransferCode;
  /* offset=0x0344 flags=0x0008001040010a05 */ Abp_bind_main_intl_C* bp_bind_main;
  /* offset=0x0348 flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;
  /* offset=0x034c flags=0x0000000000010005 */ FText textStartNewGameFail;
  /* offset=0x0358 flags=0x0000000000010005 */ FText textStartNewGameTitle;
  /* offset=0x0364 flags=0x0000000000010005 */ FText textID;
  /* offset=0x0370 flags=0x0000000000010005 */ FText textAskStartNewGame;
  /* offset=0x037c flags=0x0000000000010005 */ FText textSwitchAccountTitle;
  /* offset=0x0388 flags=0x0000000000010005 */ FText textSwitchAccountSuccess;

  void AddWidgetToDict(bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData);
  void ApplyWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void BindIMSDKEvent();
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_57_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_24_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_3_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_4_K2Node_ComponentBoundEvent_88_OnButtonClickedEvent__DelegateSignature();
  void CloseBIndAccount();
  void CloseGenTransferCode();
  void CloseInputTransferCode();
  void CloseSwitchAccount();
  void Construct();
  void ExecuteUbergraph_UIBindMain_Intl(int32 EntryPoint, ALuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, UIMSDKHelper* CallFunc_GetInstance_ReturnValue, Abp_bind_main_intl_C* K2Node_DynamicCast_AsBp_Bind_Main_Intl, bool K2Node_DynamicCast_bSuccess, bool CallFunc_isBindFBOrGPGC_ReturnValue);
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  void HideSwitchAccountPanel(bool CallFunc_IsValid_ReturnValue);
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void MoveWidget(struct FVector2D MoveDelta, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnIMSDKBindFBCallBack(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKBindGPGCCallBack(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKDeleteAccountCallBack(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void OnIMSDKGenerateTransferCodeCallBack(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKRefreshedBindInfo(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKSwitchAccountFBCallBack(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKSwitchAccountGPGCCallBack(bool CallFunc_IsValid_ReturnValue);
  void OnIMSDKTransferCallBack(bool CallFunc_IsValid_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  void ProcessIMSDKQuietGCSwitchAccountWithoutInnerPanel(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);
  void ProcessIMSDKSwitchAccountWithoutInnerPanel();
  void RefreshOpenID(FString CallFunc_getOpenID_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);
  void SelectTouchItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 SelectItemType, UWidget* SelectItemWidget, bool IsItemSelect, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void ShowAskStartNewGameMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void ShowBindAccountPanel(bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUIBindAccount_Intl_C* CallFunc_Create_ReturnValue);
  void ShowGetTransferCodePanel(bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUIGenTransferCode_Intl_C* CallFunc_Create_ReturnValue);
  void ShowMsgBox(FString Title, FString msg);
  void ShowSwitchAccountPanel(bool CallFunc_IsValid_ReturnValue, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUISwitchAccount_Intl_C* CallFunc_Create_ReturnValue);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void StartNewGame(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKAskStartNewGame();
  void TipMsgButtonOKAskSwitchAccountFB(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKAskSwitchAccountGPGC(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKAskUseTransferCode(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKSwitchAccountSuccess(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKTransferSuccess(bool CallFunc_IsValid_ReturnValue);
  void UIHide();
  void UIShow();
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UUICommonFunctionLibrary_C: public UBlueprintFunctionLibrary {
  void FormatSecondsToString(int32 Seconds, UObject* __WorldContext, FText ret, FText SecondText, FText MiniteText, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array, int32 CallFunc_Divide_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Format_ReturnValue, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array2, bool CallFunc_Greater_IntInt_ReturnValue2, struct FBP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FText CallFunc_Format_ReturnValue2, struct FFormatArgumentData K2Node_MakeStruct_FormatArgumentData4, TArray<struct FFormatArgumentData> K2Node_MakeArray_Array3, FText CallFunc_Format_ReturnValue3);
  void SetAdaptation(UWidget* Widget, UObject* __WorldContext, FString CallFunc_GetDeviceName_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetDeviceName_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue2, struct FMargin K2Node_MakeStruct_Margin, struct FMargin K2Node_MakeStruct_Margin2, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, struct FMargin K2Node_MakeStruct_Margin3);
  void SetAdaptation_Lobby(UWidget* Widget, UObject* __WorldContext, FString CallFunc_GetDeviceName_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetDeviceName_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue2, struct FMargin K2Node_MakeStruct_Margin, struct FMargin K2Node_MakeStruct_Margin2, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, struct FMargin K2Node_MakeStruct_Margin3);
  void SetSquareFixedScslr(UWidget* Widget, UObject* __WorldContext, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetViewportSize_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void SetTabStyle(bool isCheck, UTextBlock* Text, UImage* Icon, struct FColor onColor, struct FColor offColor, UObject* __WorldContext, struct FLinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, struct FLinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue2, struct FSlateColor K2Node_MakeStruct_SlateColor, struct FSlateColor K2Node_MakeStruct_SlateColor2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
};

class UUIDataProcessingFunctionLibrary: public UBlueprintFunctionLibrary {
  float GetCharacterEnergyValue(APawn* CharaterPawn);
  int32 GetCurPlatformType();
  float GetServerWorldSecond(UObject* WorldContextObject);
  uint8 GrenadeSpecificSlotNameToENumAdapter(FName GrenadeSpecificSlotName);
  void HandleCharacterAttrChange(FString AttrName, ASTExtraBaseCharacter* Character);
  bool IsPlayerCanDoSprintOperation(ASTExtraPlayerCharacter* Player);
  void SetInGameUIUserWidget(UUAEUserWidget* UserWidget);
  void SetUnitPosAndOpacityAndSize(UPanelWidget* GPanel, UBorder* BBorder, struct FVector2D Scale, float Opacity, struct FVector2D OffsetVector);
  TArray<struct FCompatableComsumableItemType> SortConsumableItemArray(TArray<struct FCompatableComsumableItemType> ConsumableArray, bool IgnoreFirst, uint8 FirstItemType);
  TArray<struct FComparableGrenadeItemType> SortGrenadeItemArray(TArray<struct FComparableGrenadeItemType> GrenadeArray, ASTExtraBaseCharacter* PlayerCharacter, uint8 CurListFirstType);
  UUIDataProcessingFunctionLibrary* UILibraryInstance();
  void UpdatePlayerBreathAmmount(ASTExtraPlayerController* PC);
  void UpdatePlayerDyingHealth(ASTExtraPlayerController* PC);
  void UpdatePlayerEnergyUI(ASTExtraPlayerController* PC);
  void UpdatePlayerHealthUI(ASTExtraPlayerController* PC);
  void UpdatePlayerPredictHealthUI(ASTExtraPlayerController* PC);
};

class UUIElemLayout_BP_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UGridPanel* AimControlGrid;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UBorder* Border;
  /* offset=0x01bc flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem1;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem2;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem3;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem4;
  /* offset=0x01cc flags=0x000a0010c008020c */ UBorder* Border_ConsumeItem5;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UBorder* Border_CurFirstItem;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UBorder* Border_CurrentUseGrenade;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot1;
  /* offset=0x01dc flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot2;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UBorder* Border_GrenadeSlot3;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UBorder* Border_InteractivePanel;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UBorder* Border_Tip;
  /* offset=0x01ec flags=0x000a0010c008020c */ UButton* Button_CancelSave;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UButton* Button_Exist;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UButton* Button_MoveDown;
  /* offset=0x01f8 flags=0x000a0010c008020c */ UButton* Button_MoveLeft;
  /* offset=0x01fc flags=0x000a0010c008020c */ UButton* Button_MoveRight;
  /* offset=0x0200 flags=0x000a0010c008020c */ UButton* Button_MoveUp;
  /* offset=0x0204 flags=0x000a0010c008020c */ UButton* Button_Quit;
  /* offset=0x0208 flags=0x000a0010c008020c */ UButton* Button_Reset;
  /* offset=0x020c flags=0x000a0010c008020c */ UButton* Button_Save;
  /* offset=0x0210 flags=0x000a0010c008020c */ UButton* Button_SaveQuit;
  /* offset=0x0214 flags=0x000a0010c008020c */ UButton* Button_SwitchWithSave;
  /* offset=0x0218 flags=0x000a0010c008020c */ UButton* Button_SwithNoSave;
  /* offset=0x021c flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_PortableBorder;
  /* offset=0x0220 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_QuitMsgBox;
  /* offset=0x0224 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_SwitchModeMsgBox;
  /* offset=0x0228 flags=0x000a0010c008020c */ UCheckBox* CheckBox_Mode1;
  /* offset=0x022c flags=0x000a0010c008020c */ UCheckBox* CheckBox_Mode2;
  /* offset=0x0230 flags=0x000a0010c008020c */ UCheckBox* CheckBox_Mode3;
  /* offset=0x0234 flags=0x000a0010c008020c */ UCommon_UIPanelBG_C* Common_UIPanelBG;
  /* offset=0x0238 flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG_C;
  /* offset=0x023c flags=0x000a0010c008020c */ UCommon_UIPopupBG_C* Common_UIPopupBG_C;
  /* offset=0x0240 flags=0x000a0010c008020c */ UImage* ConsumeItem1_BG;
  /* offset=0x0244 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem1_CountText;
  /* offset=0x0248 flags=0x000a0010c008020c */ UImage* ConsumeItem1_Image;
  /* offset=0x024c flags=0x000a0010c008020c */ UImage* ConsumeItem2_BG;
  /* offset=0x0250 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem2_CountText;
  /* offset=0x0254 flags=0x000a0010c008020c */ UImage* ConsumeItem2_Image;
  /* offset=0x0258 flags=0x000a0010c008020c */ UImage* ConsumeItem3_BG;
  /* offset=0x025c flags=0x000a0010c008020c */ UTextBlock* ConsumeItem3_CountText;
  /* offset=0x0260 flags=0x000a0010c008020c */ UImage* ConsumeItem3_Image;
  /* offset=0x0264 flags=0x000a0010c008020c */ UImage* ConsumeItem4_BG;
  /* offset=0x0268 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem4_CountText;
  /* offset=0x026c flags=0x000a0010c008020c */ UImage* ConsumeItem4_Image;
  /* offset=0x0270 flags=0x000a0010c008020c */ UImage* ConsumeItem5_BG;
  /* offset=0x0274 flags=0x000a0010c008020c */ UTextBlock* ConsumeItem5_CountText;
  /* offset=0x0278 flags=0x000a0010c008020c */ UImage* ConsumeItem5_Image;
  /* offset=0x027c flags=0x000a0010c008020c */ UGridPanel* CurFirstItem;
  /* offset=0x0280 flags=0x000a0010c008020c */ UGridPanel* CurrentUseGrenade;
  /* offset=0x0284 flags=0x000a0010c008020c */ UImage* CurUseBG;
  /* offset=0x0288 flags=0x000a0010c008020c */ UTextBlock* CurUseFirstItemCountText;
  /* offset=0x028c flags=0x000a0010c008020c */ UImage* CurUseFirstItemImage;
  /* offset=0x0290 flags=0x000a0010c008020c */ UTextBlock* CurUseGrenadeCountText;
  /* offset=0x0294 flags=0x000a0010c008020c */ UImage* CurUseGrenadeImage;
  /* offset=0x0298 flags=0x000a0010c008020c */ UCanvasPanel* ELean_Rside;
  /* offset=0x029c flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot1;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UImage* GrenadeSlot1BG;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot1CountText;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UImage* GrenadeSlot1Image;
  /* offset=0x02ac flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot2;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UImage* GrenadeSlot2BG;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot2CountText;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UImage* GrenadeSlot2Image;
  /* offset=0x02bc flags=0x000a0010c008020c */ UGridPanel* GrenadeSlot3;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UImage* GrenadeSlot3BG;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UTextBlock* GrenadeSlot3CountText;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UImage* GrenadeSlot3Image;
  /* offset=0x02cc flags=0x000a0010c008020c */ UGridPanel* GrenadeSlotPanel;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02dc flags=0x000a0010c008020c */ UGridPanel* GridPanel;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem1;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem2;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem3;
  /* offset=0x02ec flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem4;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItem5;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UGridPanel* GridPanel_ConsumeItemFolder;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UGridPanel* GridPanel_LeftChildPanel;
  /* offset=0x02fc flags=0x000a0010c008020c */ UGridPanel* GridPanel_StandCrouchGrovelPanel;
  /* offset=0x0300 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0304 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0308 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x030c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0310 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0314 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0318 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x031c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0320 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0324 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0328 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x032c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0330 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0334 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0338 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x033c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0340 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0344 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0348 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x034c flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0350 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0354 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x0358 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x035c flags=0x000a0010c008020c */ UImage* InteractiveBG;
  /* offset=0x0360 flags=0x000a0010c008020c */ UImage* InteractiveTriangleToDown;
  /* offset=0x0364 flags=0x000a0010c008020c */ UGridPanel* MeleeExtraSlot;
  /* offset=0x0368 flags=0x000a0010c008020c */ UCanvasPanel* MultiLayer_LeanCanvas;
  /* offset=0x036c flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Opacity;
  /* offset=0x0370 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_Scale;
  /* offset=0x0374 flags=0x000a0010c008020c */ UScrollBox* ScrollBox;
  /* offset=0x0378 flags=0x000a0010c008020c */ UScrollBox* ScrollBox;
  /* offset=0x037c flags=0x000a0010c008020c */ USlider* Slider_Opacity;
  /* offset=0x0380 flags=0x000a0010c008020c */ USlider* Slider_Scale;
  /* offset=0x0384 flags=0x000a0010c008020c */ UImage* Slot4BG;
  /* offset=0x0388 flags=0x000a0010c008020c */ UBorder* Slot4Border;
  /* offset=0x038c flags=0x000a0010c008020c */ UGridPanel* Slot4Grid;
  /* offset=0x0390 flags=0x000a0010c008020c */ UImage* Slot4Image;
  /* offset=0x0394 flags=0x000a0010c008020c */ UTextBlock* Text_cancel;
  /* offset=0x0398 flags=0x000a0010c008020c */ UUTRichTextBlock* Text_Content;
  /* offset=0x039c flags=0x000a0010c008020c */ UTextBlock* Text_ok;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03ac flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03b8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03bc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03c8 flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03cc flags=0x000a0010c008020c */ UTextBlock* TextBlock;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Tip;
  /* offset=0x03d4 flags=0x000a0010c008020c */ UTextBlock* TextBlock_Title;
  /* offset=0x03d8 flags=0x000a0010c008020c */ UUTRichTextBlock* UTRichTextBlock;
  /* offset=0x03dc flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher;
  /* offset=0x03e0 flags=0x000a0010c008020c */ UWidgetSwitcher* WidgetSwitcher_CurBG;
  /* offset=0x03e4 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x0420 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x045c flags=0x0008001040010205 */ uint8 SelectItemType;
  /* offset=0x0460 flags=0x0008001040010205 */ UWidget* SelectItemWidget;
  /* offset=0x0464 flags=0x0000001040010205 */ bool IsDragDetected;
  /* offset=0x0465 flags=0x0000001040010205 */ bool IsTouchSelectItem;
  /* offset=0x0468 flags=0x0008001040010215 */ float MicroMoveDelta;
  /* offset=0x046c flags=0x0008001040010205 */ uint8 DefaultSelectItemType;
  /* offset=0x046d flags=0x0000001040010205 */ bool HasInited;
  /* offset=0x0470 flags=0x0008001040010005 */ struct FVector2D SelectItemWidgetMinPos;
  /* offset=0x0478 flags=0x0008001040010005 */ struct FVector2D SelectItemWidgetMaxPos;
  /* offset=0x0480 flags=0x0008001040010205 */ USettingConfig_C* SettingSaveData;
  /* offset=0x0484 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemSelectedImageDict;
  /* offset=0x04c0 flags=0x0000001040010205 */ bool IsMultipleTouch;
  /* offset=0x04c4 flags=0x0000000000010205 */ TMap<int32, struct FVector2D> touchPos;
  /* offset=0x0500 flags=0x0008001040010215 */ float ScaleFactor;
  /* offset=0x0504 flags=0x0008001040010205 */ float TouchDelta;
  /* offset=0x0508 flags=0x0008001040010005 */ struct FVector2D TestData;
  /* offset=0x0510 flags=0x0000001040010205 */ bool IsNeedSaved;
  /* offset=0x0514 flags=0x0008001040010205 */ int32 CrtModeType;
  /* offset=0x0518 flags=0x0008001040010205 */ UBP_SAVEGAME_UIElemLayout_C* UIElemSaveData;
  /* offset=0x051c flags=0x0008001040010205 */ int32 ModeWanted;
  /* offset=0x0520 flags=0x0000100010010205 */ FOnUIElemHide OnUIElemHide;

  void AddAllWidgetToDefaultDict(UWidget* TheImage, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool ___bool_Variable2, bool CallFunc_Not_PreBool_ReturnValue2, int32 ___int_Variable2, UWidget* CallFunc_GetChildAt_ReturnValue, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetDisplayName_ReturnValue, UWidget* CallFunc_GetContent_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, UPanelWidget* K2Node_DynamicCast_AsPanel_Widget, bool K2Node_DynamicCast_bSuccess2, int32 CallFunc_Conv_StringToInt_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue2, int32 CallFunc_Subtract_IntInt_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);
  void ApplyMode(int32 FireMode);
  void ApplyWidgetData(uint8 WidgetType, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, float CallFunc_GetViewportScale_ReturnValue, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, struct FVector2D CallFunc_GetViewportSize_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void ApplyWidgetSaveDataByMode(bool K2Node_SwitchInteger_CmpSuccess);
  void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_249_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Exist_K2Node_ComponentBoundEvent_99_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_MoveDown_K2Node_ComponentBoundEvent_452_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_MoveLeft_K2Node_ComponentBoundEvent_383_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_MoveRight_K2Node_ComponentBoundEvent_405_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_MoveUp_K2Node_ComponentBoundEvent_428_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_OK_K2Node_ComponentBoundEvent_232_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Quit_K2Node_ComponentBoundEvent_353_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Reset_K2Node_ComponentBoundEvent_79_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Save_K2Node_ComponentBoundEvent_60_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SwitchWithSave_K2Node_ComponentBoundEvent_1164_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_SwithNoSave_K2Node_ComponentBoundEvent_1133_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__CheckBox_Mode1_K2Node_ComponentBoundEvent_299_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
  void BndEvt__CheckBox_Mode2_K2Node_ComponentBoundEvent_358_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
  void BndEvt__CheckBox_Mode3_K2Node_ComponentBoundEvent_359_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
  void BndEvt__Slider_Opacity_K2Node_ComponentBoundEvent_126_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void BndEvt__Slider_Scale_K2Node_ComponentBoundEvent_109_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void BndEvt__Slider_Scale_K2Node_ComponentBoundEvent_70_OnMouseCaptureEndEvent__DelegateSignature();
  void CalcLimitPos(float CallFunc_GetViewportScale_ReturnValue, float CallFunc_GetViewportScale_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, struct FVector2D CallFunc_GetLocalSize_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_GetAlignment_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue2, struct FVector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue2, struct FVector2D CallFunc_GetViewportSize_ReturnValue, struct FVector2D CallFunc_GetViewportSize_ReturnValue2, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue2, struct FVector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue3, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue2, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue3, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue3, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue4);
  void ChangeScaleSlideValue(float Delta, float CallFunc_GetValue_ReturnValue, struct FVector2D CallFunc_SliderToWidget_Scale_WidgetScale, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetValue_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);
  void CheckTouchedItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 ItemTouched_Type, UWidget* ItemTouched_Widget, bool IsItemTouched, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void Close();
  void Construct();
  void ExecuteUbergraph_UIElemLayout_BP(int32 EntryPoint, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, float K2Node_CustomEvent_DelaySec, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float K2Node_ComponentBoundEvent_Value2, float K2Node_ComponentBoundEvent_Value, struct FVector2D CallFunc_SliderToWidget_Scale_WidgetScale, float CallFunc_SliderToWidget_Opacity_WidgetOpacity, struct FLinearColor CallFunc_MakeColor_ReturnValue, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess2, UBorder* K2Node_DynamicCast_AsBorder2, bool K2Node_DynamicCast_bSuccess3, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue2, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue3, struct FVector2D CallFunc_Multiply_Vector2DFloat_ReturnValue4, bool K2Node_ComponentBoundEvent_bIsChecked3, bool K2Node_ComponentBoundEvent_bIsChecked2, bool K2Node_ComponentBoundEvent_bIsChecked, bool CallFunc_NotEqual_IntInt_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue, int32 CallFunc_PostEventAtLocation_ReturnValue2, int32 CallFunc_PostEventAtLocation_ReturnValue3, int32 CallFunc_PostEventAtLocation_ReturnValue4, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2);
  float GetTouchDelta(TArray<struct FVector2D> CallFunc_Map_Values_Values, struct FVector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue);
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, struct FVector2D RelativePos, UUIElemLayout_BP_C* UIElemLayoutData, float CallFunc_GetViewportScale_ReturnValue, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FVector2D CallFunc_GetViewportSize_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail, struct FVector2D CallFunc_Divide_Vector2DVector2D_ReturnValue);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  float Get_ProgressBar_Opacity_Percent(float CallFunc_GetValue_ReturnValue);
  float Get_ProgressBar_Scale_Percent(float CallFunc_GetValue_ReturnValue);
  void HideSelf();
  void InitElem(struct FBP_STRUCT_UIElemLayoutDetail JoystickDetail, uint8 ___byte_Variable, uint8 ___byte_Variable2, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> CallFunc_GetWidgetsDataDict_OutDataDict);
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void LoadSaveData(UBP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSG_UIElemSaveGame, bool CallFunc_IsValid_ReturnValue, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, UWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);
  void MoveWidget(struct FVector2D MoveDelta, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue2, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void OnDelayQuit(float DelaySec);
  void OnSaveDataPostEvent();
  void OnShowTipEvent();
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, bool CallFunc_Map_Remove_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply K2Node_MakeStruct_EventReply, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_GetTouchDelta_ReturnValue, struct FVector2D CallFunc_Divide_Vector2DFloat_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply2);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_CheckTouchedItem_IsSelect, uint8 CallFunc_CheckTouchedItem_ItemType, UWidget* CallFunc_CheckTouchedItem_ItemWidget, int32 CallFunc_PointerEvent_GetPointerIndex_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue2, float CallFunc_GetTouchDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, int32 CallFunc_Map_Length_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Map_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue);
  void OnUIElemHide__DelegateSignature();
  void RefreshSettingPanelData(UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, float CallFunc_WidgetToSlider_SliderScale, float CallFunc_WidgetToSlider_SliderOpacity);
  void SaveData(bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_SaveUIElemLayoutSG_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> CallFunc_GetWidgetsDataDict_OutDataDict);
  void SelectItem(uint8 ItemType, UWidget* ItemWidget, UWidget* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2);
  void SetModePanel(int32 FireMode, bool K2Node_SwitchInteger_CmpSuccess);
  void ShowSelf();
  void ShowTip(FText FireMode);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UUIGenTransferCode_Intl_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* btnCopyTransferCode;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UTextBlock* lblTransferCode;
  /* offset=0x01d8 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x0214 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict;
  /* offset=0x0250 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x028c flags=0x0008001040010205 */ uint8 SelectType;
  /* offset=0x0290 flags=0x0008001040010205 */ UWidget* SelectWidget;
  /* offset=0x0294 flags=0x0000001040010205 */ bool IsSelectItemMoving;
  /* offset=0x0298 flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;
  /* offset=0x029c flags=0x0008001040010a05 */ Abp_bind_main_intl_C* bp_bind_main;
  /* offset=0x02a0 flags=0x0000000000010005 */ FText textGenTransferCodeFail;
  /* offset=0x02ac flags=0x0000000000010005 */ FText textGenTransferCodeTitle;
  /* offset=0x02b8 flags=0x0000000000010005 */ FText textCopyTransferCode;

  void AddWidgetToDict(bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData);
  void ApplyWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_3_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__btnCopyTransferCode_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();
  void Close();
  void Construct();
  void ExecuteUbergraph_UIGenTransferCode_Intl(int32 EntryPoint, UIMSDKHelper* CallFunc_GetInstance_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void GenerateTransferCode();
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  void Get_ProgressBar_Opacity_Percent();
  void Get_ProgressBar_Scale_Percent();
  void Hide();
  void InitBPBindMain(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_bind_main_intl_C* K2Node_DynamicCast_AsBp_Bind_Main_Intl, bool K2Node_DynamicCast_bSuccess3);
  void InitSettingPanelData();
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void MoveWidget(struct FVector2D MoveDelta, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnIMSDKGenerateTransferCodeCallBack(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_SelectTouchItem_IsSelect, uint8 CallFunc_SelectTouchItem_ItemType, UWidget* CallFunc_SelectTouchItem_ItemWidget);
  void RefreshTransferCodeWhenShow(bool CallFunc_EqualEqual_BoolBool_ReturnValue);
  void SelectTouchItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 SelectItemType, UWidget* SelectItemWidget, bool IsItemSelect, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void Show();
  void ShowMsgBox(FString Title, FString msg);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UUIInputTransferCode_Intl_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button_shengcheng;
  /* offset=0x01bc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UEditableTextBox* inputTransferCode;
  /* offset=0x01cc flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x0208 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict;
  /* offset=0x0244 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x0280 flags=0x0008001040010205 */ uint8 SelectType;
  /* offset=0x0284 flags=0x0008001040010205 */ UWidget* SelectWidget;
  /* offset=0x0288 flags=0x0000001040010205 */ bool IsSelectItemMoving;
  /* offset=0x028c flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;
  /* offset=0x0290 flags=0x0008001040010a05 */ Abp_bind_main_intl_C* bp_bind_main;
  /* offset=0x0294 flags=0x0008001040010a05 */ Abp_bind_main_intl_C* NewVar;
  /* offset=0x0298 flags=0x0000000000010005 */ FText textTransferTitle;
  /* offset=0x02a4 flags=0x0000000000010005 */ FText textEmptyTransCodeTip;
  /* offset=0x02b0 flags=0x0000000000010005 */ FText textTransferSuccess;
  /* offset=0x02bc flags=0x0000000000010005 */ FText textTransferFail;
  /* offset=0x02c8 flags=0x0000000000010005 */ FText textAskUseTransferCode;

  void AddWidgetToDict(bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData);
  void ApplyWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_shengcheng_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();
  void Close();
  void Construct();
  void ExecuteUbergraph_UIInputTransferCode_Intl(int32 EntryPoint, UIMSDKHelper* CallFunc_GetInstance_ReturnValue);
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  void Get_ProgressBar_Opacity_Percent();
  void Get_ProgressBar_Scale_Percent();
  void Hide();
  void InitBPBindMain(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_bind_main_intl_C* K2Node_DynamicCast_AsBp_Bind_Main_Intl, bool K2Node_DynamicCast_bSuccess3);
  void InitSettingPanelData();
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void MoveWidget(struct FVector2D MoveDelta, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnIMSDKTransferCallBack(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void OnTipMsgButtonOKTransferSuccess();
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_SelectTouchItem_IsSelect, uint8 CallFunc_SelectTouchItem_ItemType, UWidget* CallFunc_SelectTouchItem_ItemWidget);
  void SelectTouchItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 SelectItemType, UWidget* SelectItemWidget, bool IsItemSelect, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void Show();
  void ShowAskUseTransferCodeMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void ShowMsgBox(FString Title, FString msg);
  void ShowTransferSuccessMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void TipMsgButtonOKAskUseTransferCode(FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);
  void Transfer(bool CallFunc_isBindFBOrGPGC_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, int32 CallFunc_Len_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UUISwitchAccount_Intl_C: public UUserWidget {
  /* offset=0x01b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01b8 flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01bc flags=0x000a0010c008020c */ UButton* Button;
  /* offset=0x01c0 flags=0x000a0010c008020c */ UButton* Button_Close;
  /* offset=0x01c4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel;
  /* offset=0x01c8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01cc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01d8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01dc flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e0 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e4 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01e8 flags=0x000a0010c008020c */ UImage* Image;
  /* offset=0x01ec flags=0x000a0010c008020c */ UImage* imgGameCenter;
  /* offset=0x01f0 flags=0x000a0010c008020c */ UImage* imgGooglePlay;
  /* offset=0x01f4 flags=0x000a0010c008020c */ UTextBlock* lblGPGC;
  /* offset=0x01f8 flags=0x0000000000010205 */ TMap<uint8, UWidget*> UIElemWidgetDict;
  /* offset=0x0234 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict;
  /* offset=0x0270 flags=0x0000000000010205 */ TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> UIElemDataDict_Default;
  /* offset=0x02ac flags=0x0008001040010205 */ uint8 SelectType;
  /* offset=0x02b0 flags=0x0008001040010205 */ UWidget* SelectWidget;
  /* offset=0x02b4 flags=0x0000001040010205 */ bool IsSelectItemMoving;
  /* offset=0x02b8 flags=0x0008001040010205 */ UUIInputTransferCode_Intl_C* panelInputTransferCode;
  /* offset=0x02bc flags=0x0008001040010205 */ UIMSDKHelper* IMSDKHelper;
  /* offset=0x02c0 flags=0x0008001040010a05 */ Abp_bind_main_intl_C* bp_bind_main;
  /* offset=0x02c4 flags=0x0000000000010005 */ FText textSwitchAccountFail;
  /* offset=0x02d0 flags=0x0000000000010005 */ FText textSwitchAccountTitle;
  /* offset=0x02dc flags=0x0000000000010005 */ FText textGameCenter;
  /* offset=0x02e8 flags=0x0000000000010005 */ FText textGooglePlay;
  /* offset=0x02f4 flags=0x0000000000010005 */ FText textSwitchAccountSuccess;
  /* offset=0x0300 flags=0x0000000000010005 */ FText textAskSwitchAccount;
  /* offset=0x030c flags=0x0000000000010005 */ FText textInvalidGooglePlay;
  /* offset=0x0318 flags=0x0000000000010005 */ FText textUserCancelGCLogin;
  /* offset=0x0324 flags=0x0000000000010005 */ FText textNoneAccount;

  void AddWidgetToDict(bool ___bool_Variable, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue2, uint8 CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_MatchesWildcard_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData);
  void ApplyWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail DetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, struct FLinearColor CallFunc_MakeColor_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);
  void ApplyWidgetDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, UUIElemLayout_BP_C* UIElemLayoutData, TArray<uint8> CallFunc_Map_Keys_Keys, int32 ___int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, uint8 CallFunc_Array_Get_Item, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 ___int_Loop_Counter_Variable, UWidget* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void BndEvt__Button_0_K2Node_ComponentBoundEvent_57_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_1_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_3_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_close_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
  void Close();
  void CloseInputTransferCode();
  void Construct();
  void ExecuteUbergraph_UISwitchAccount_Intl(int32 EntryPoint, APlayerController* CallFunc_GetPlayerController_ReturnValue, UUIInputTransferCode_Intl_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, UIMSDKHelper* CallFunc_GetInstance_ReturnValue, bool CallFunc_isBindFBOrGPGC_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_isBindFBOrGPGC_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2);
  void GetSwitchAccountFailMsg(bool isFB, FString strFailMsg, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2);
  void GetWidgetData(uint8 Type, UWidget* Widget, struct FBP_STRUCT_UIElemLayoutDetail LayoutDetailData, UUIElemLayout_BP_C* UIElemLayoutData, UBorder* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FAnchors CallFunc_GetAnchors_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail K2Node_MakeStruct_BP_STRUCT_UIElemLayoutDetail);
  void GetWidgetsDataDict(TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> OutDataDict, TMap<uint8, struct FBP_STRUCT_UIElemLayoutDetail> DataDict, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, struct FBP_STRUCT_UIElemLayoutDetail CallFunc_GetWidgetData_LayoutDetailData, bool CallFunc_Less_IntInt_ReturnValue);
  void Get_ProgressBar_Opacity_Percent();
  void Get_ProgressBar_Scale_Percent();
  void Hide();
  void InitBPBindMain(UGameInstance* CallFunc_GetGameInstance_ReturnValue, UUAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, UFrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, ULogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UGameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, ALuaClassObj* CallFunc_GetLuaObject_ReturnValue, Abp_bind_main_intl_C* K2Node_DynamicCast_AsBp_Bind_Main_Intl, bool K2Node_DynamicCast_bSuccess3);
  void InitSettingPanelData();
  void IsPositionInBorder(struct FVector2D Pos, UWidget* Widget, bool IsIn, struct FGeometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);
  void MoveWidget(struct FVector2D MoveDelta, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnIMSDKSwitchAccountFBCallBack(FString CallFunc_GetSwitchAccountFailMsg_strFailMsg, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);
  void OnIMSDKSwitchAccountGPGCCallBack(FString CallFunc_GetSwitchAccountFailMsg_strFailMsg, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue5, enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_NotEqual_ByteByte_ReturnValue);
  void OnIMSDKTransferCallBack(bool CallFunc_IsValid_ReturnValue);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FVector2D CallFunc_PointerEvent_GetCursorDelta_ReturnValue, struct FEventReply K2Node_MakeStruct_EventReply, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, struct FVector2D CallFunc_GetPosition_ReturnValue, struct FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_DetectDragIfPressed_ReturnValue, struct FVector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_SelectTouchItem_IsSelect, uint8 CallFunc_SelectTouchItem_ItemType, UWidget* CallFunc_SelectTouchItem_ItemWidget);
  void RefreshlblGPGC(enum EIMSDKPlatformType CallFunc_GetPlatformType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
  void SelectTouchItem(struct FVector2D Coordinate, bool IsSelect, uint8 ItemType, UWidget* ItemWidget, uint8 SelectItemType, UWidget* SelectItemWidget, bool IsItemSelect, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<UWidget*> CallFunc_Map_Values_Values, TArray<uint8> CallFunc_Map_Keys_Keys, UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsPositionInBorder_IsIn, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void Show();
  void ShowAskSwitchAccountFBMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void ShowAskSwitchAccountGPGCMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void ShowMsgBox(FString Title, FString msg);
  void ShowSwitchAccountSuccessMsgBox(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2);
  void SliderToWidget_Opacity(float SliderOpacity, float WidgetOpacity, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
  void SliderToWidget_Scale(float SliderScale, struct FVector2D WidgetScale, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void SwitchAccountFB();
  void SwitchAccountGPGC();
  void TipMsgButtonOKAskSwitchAccountFB();
  void TipMsgButtonOKAskSwitchAccountGPGC();
  void TipMsgButtonOKAskUseTransferCode(bool CallFunc_IsValid_ReturnValue);
  void TipMsgButtonOKSwitchAccountSuccess();
  void TipMsgButtonOKTransferSuccess(bool CallFunc_IsValid_ReturnValue);
  void WidgetToSlider(struct FVector2D WidgetScale, float WidgetOpacity, float SliderScale, float SliderOpacity, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
};

class UUIVoiceCheckObject_C: public UVoiceCheckObject {
  void Bindfunction(FOnCharacterVehicleCheckVoiceTriggerDelegate K2Node_CreateDelegate_OutputDelegate, FOnCharacterShotCheckVoiceTriggerDelegate K2Node_CreateDelegate_OutputDelegate2, FOnCharacterMoveCheckVoiceTriggerDelegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_IsValid_ReturnValue);
  void CreateImage(UCanvasPanel* Panel, UImage* Image, int32 Index, UImage* Result, float Length, int32 nowIndex, UImage* NowImage, struct FVector2D CallFunc_MakeVector2D_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UImage* CallFunc_SpawnObject_ReturnValue, struct FAnchors K2Node_MakeStruct_Anchors, UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
  void InitImageList(UCanvasPanel* Panel, UImage* moveImage, UImage* weaponImage, UImage* SlienceImage, UImage* VehicleImage, int32 nowIndex, UImage* NowVehicleImage, UImage* NowSlienceImage, UImage* NowWeaponImage, UImage* nowMoveImage, UCanvasPanel* nowPanel, int32 ___int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, UImage* CallFunc_CreateImage_result, UImage* CallFunc_CreateImage_result2, UImage* CallFunc_CreateImage_result3, UImage* CallFunc_CreateImage_result4, struct FVoiceCheckObjectNode K2Node_MakeStruct_VoiceCheckObjectNode, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Array_Add_ReturnValue);
};

class UUInt16Property: public UNumericProperty {
};

class UUInt32Property: public UNumericProperty {
};

class UUInt64Property: public UNumericProperty {
};

class UUMGSequencePlayer: public UObject {
  /* offset=0x02e0 flags=0x0048001040080208 */ UWidgetAnimation* Animation;
};

class UUTRichTextBlock: public UWidget {
  /* offset=0x00c8 flags=0x0028080000000201 */ FString ContentText;
  /* offset=0x00e0 flags=0x0028080000000015 */ struct FSlateFontInfo Font;
  /* offset=0x0120 flags=0x0028081040000215 */ bool bSupportHyLink;
  /* offset=0x0121 flags=0x0028081040000215 */ bool bSupportImage;
  /* offset=0x0124 flags=0x0028081040000015 */ struct FLinearColor TextColor;
  /* offset=0x0134 flags=0x0028081040000215 */ uint8 Justification;
  /* offset=0x0135 flags=0x0028081040000215 */ bool AutoWrapText;
  /* offset=0x0138 flags=0x0020080000010015 */ struct FScrollBarStyle ScrollBarStyle;
  /* offset=0x04e8 flags=0x0020081000010015 */ struct FMargin HScrollBarPadding;
  /* offset=0x04f8 flags=0x0020081000010015 */ struct FMargin VScrollBarPadding;
  /* offset=0x0508 flags=0x00280c1040000215 */ float WrapTextAt;
  /* offset=0x050c flags=0x00200c1000000015 */ struct FMargin Margin;
  /* offset=0x051c flags=0x00280c1040000215 */ float LineHeightPercentage;
  /* offset=0x0520 flags=0x00280c0000000215 */ FString HyperlinkDecoratorTag;
  /* offset=0x052c flags=0x00280c0000000215 */ FString HyperlinkCallBackFunctionName;
  /* offset=0x0538 flags=0x00280c0000000215 */ FString HyperlinkCallBackTableName;
  /* offset=0x0710 flags=0x0028081040000200 */ UGameFrontendHUD* GameFrontendHUD;

  FText GetText();
  void SetGameFrontendHUD(UGameFrontendHUD* InHUD);
  void SetText(FText InText);
};

class AUTSkill: public AActor {
  /* offset=0x02a8 flags=0x0018000000000205 */ FString SkillName;
  /* offset=0x02b4 flags=0x0018000000000205 */ FString SkillDescription;
  /* offset=0x02c0 flags=0x0018000000000205 */ FString SkillDetailDes;
  /* offset=0x02cc flags=0x0018001040000205 */ bool bMeleeSkill;
  /* offset=0x02cd flags=0x0018001040000205 */ bool bNeedAutonomousClientSimulate;
  /* offset=0x02ce flags=0x0018001040000205 */ bool bClearInputCache;
  /* offset=0x02d0 flags=0x0010008000000005 */ struct FUTSkillCreateData BaseData;
  /* offset=0x02f8 flags=0x0018001040000205 */ UTexture2D* SkillIcon;
  /* offset=0x02fc flags=0x0018001040000205 */ UTexture2D* SkillVehicleIcon;
  /* offset=0x0300 flags=0x0018000000000205 */ FString SkillVehicleName;
  /* offset=0x030c flags=0x0018001040000205 */ bool NegativeSkill;
  /* offset=0x030d flags=0x0018001040000205 */ bool ShouldShowTargetPrompt;
  /* offset=0x030e flags=0x0018001040000205 */ bool ChangePawnStatus;
  /* offset=0x0310 flags=0x001c001040002200 */ APawn* OwnerPawn;
  /* offset=0x0318 flags=0x001c001040082208 */ UUTSkillManagerComponent* OwnerSkillManager;
  /* offset=0x0320 flags=0x001c001040002200 */ AActor* LastSpawnedActor;
  /* offset=0x0328 flags=0x001c001040002200 */ APawn* LastSpawnedPawn;
  /* offset=0x0358 flags=0x0018001040002200 */ float PhasePercentage;
  /* offset=0x035c flags=0x0010000000000200 */ TArray<FString> ParentFolderPath;
  /* offset=0x0368 flags=0x0018001040000200 */ int64 LastEditBluePrintTime;
  /* offset=0x0370 flags=0x0018001040000200 */ int32 CurComponentNameIndex;
  /* offset=0x0374 flags=0x0018001040000200 */ bool IsSkillEnabled;

  bool CanBePlayed(bool bShowErrorMsg);
  void DoSkillCoolDown();
  UUTSkillPhase* GetSkillPhase(int32 PhaseIndex);
  float GetSkillPhasePercentage();
  bool OnEvent(uint8 TheEventType);
  void SetSkillPhasePercentage(float Percentage);
};

class UUTSkillAction: public UUTSkillEffect {
  /* offset=0x00d4 flags=0x0010001000000001 */ struct FUTSkillActionCreateData BaseData;

  bool DoAction();
  bool JudgeNeedPhaseWait();
  bool RealDoAction();
  void Reset();
  void UndoAction();
  void UpdateAction(float DeltaSeconds);
};

class UUTSkillAppearance_AddParticle: public UUAESkillAction {
  /* offset=0x00ec flags=0x0018001040000205 */ UParticleSystem* TemplateParticle_Effect;
  /* offset=0x00f0 flags=0x001c001040080208 */ UParticleSystemComponent* ParticleInstance;
  /* offset=0x00f8 flags=0x0018001040000205 */ FName HangMeshTagName;
  /* offset=0x0100 flags=0x0018001040000205 */ FName ParticleCompTagName;
  /* offset=0x0108 flags=0x0018001040000005 */ struct FVector LocationPosition;
  /* offset=0x0114 flags=0x0010001040000005 */ struct FRotator LocationRotation;
  /* offset=0x0120 flags=0x0018001040000005 */ struct FVector LocationScale;
  /* offset=0x012c flags=0x0018001040000205 */ bool bPhaseFinishRemove;
  /* offset=0x012d flags=0x0018001040000205 */ bool bUndoRemove;

  void OnParticleSystemFinished(UParticleSystemComponent* PSC);
  void Reset();
  void UndoAction();
};

class UUTSkillAppearance_ParticleSystem: public UUTSkillAction {
  /* offset=0x00f0 flags=0x0010009000000005 */ struct FUTSkillAppearance_ParticleSystem_Item Item;
  /* offset=0x0158 flags=0x001c001040080208 */ UParticleSystemComponent* AppearanceInstance;

  void OnAppearanceParticleSystemFinished(UParticleSystemComponent* PSC);
  void OnHurtAppearanceParticleSystemFinished(UParticleSystemComponent* PSC);
};

class UUTSkillAppearance_RomoveParticle: public UUAESkillAction {
  /* offset=0x00f0 flags=0x0018001040000205 */ FName ParticleCompTagName;
  /* offset=0x00f8 flags=0x0018001040000205 */ bool bPhaseFinishRemove;
  /* offset=0x00f9 flags=0x0018001040000205 */ bool bUndoRemove;

  bool RealDoAction();
  void Reset();
  void UndoAction();
};

class UUTSkillAppearance_SoundCue: public UUTSkillAction {
  /* offset=0x00ec flags=0x0010001000000005 */ struct FUTSkillAppearance_SoundCue_Item Item;
};

class UUTSkillBaseWidget: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000200 */ bool bWidgetEnabled;
  /* offset=0x00b0 flags=0x0018000000000200 */ FString WidgetDescription;
  /* offset=0x00bc flags=0x0018001040002200 */ APawn* BuffOwnerPawn;
  /* offset=0x00c0 flags=0x0018001040002200 */ AActor* BuffTargetActor;
};

class UUTSkillCondition: public UUTSkillBaseWidget {
  /* offset=0x00c4 flags=0x001c001040002200 */ AUTSkill* OwnerSkill;

  bool IsOK();
  bool IsTargetOK(APawn* Target);
};

class UUTSkillEffect: public UUTSkillBaseWidget {
  /* offset=0x00c4 flags=0x0018001040000205 */ float fADScale;
  /* offset=0x00c8 flags=0x0018001040000205 */ float fAPScale;
  /* offset=0x00cc flags=0x001c001040002200 */ AUTSkill* OwnerSkill;

  bool DoAction();
  void DoHurtAppearance(APawn* Victim);
  void UndoAction();
  void UpdateAction(float DeltaSeconds);
};

class UUTSkillEvent: public UObject {
  /* offset=0x001c flags=0x0018001040000205 */ uint8 SkillEventType;
};

class UUTSkillEventEffectMapForEditor: public UUTSkillBaseWidget {
  /* offset=0x00c4 flags=0x0018001040000205 */ uint8 SkillEventType;
  /* offset=0x00c8 flags=0x001a00104008020d */ UUTSkillEffect* SkillEffect;
  /* offset=0x00cc flags=0x0010008000000205 */ TArray<struct FSkillConditionWarpper> Conditions;
  /* offset=0x00d8 flags=0x0010008000000205 */ TArray<struct FSkillConditionWarpper> TargetConditions;
};

class UUTSkillInterface: public UInterface {
  void HandleSkillEnd(int32 SkillID, enum UTSkillStopReason Reason);
  void HandleSkillStart(int32 SkillID);
  void TriggerEvent(int32 SkillID, uint8 EventType);
};

class UUTSkillLocationPicker: public UObject {
};

class UUTSkillManagerComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000200 */ APawn* OwnerPawn;
  /* offset=0x00b0 flags=0x0014000000000205 */ TArray<UClass<AUTSkill>*> SkillArchetypes;
  /* offset=0x00bc flags=0x0010000000002200 */ TArray<AUTSkill*> Skills;
  /* offset=0x00c8 flags=0x0018001040000214 */ AActor* Target;
  /* offset=0x00cc flags=0x0010000000000220 */ TArray<APawn*> RepTargets;
  /* offset=0x00d8 flags=0x0010001100000024 */ struct FUTSkillSynData SkillSynData;
  /* offset=0x00e0 flags=0x0010000010080200 */ FSkillHitSignature OnSkillHit;
  /* offset=0x00ec flags=0x0010000010080200 */ FSkillCastEvent OnSkillCast;
  /* offset=0x0114 flags=0x0048000000000200 */ FString LastESkillTargetDesc;
  /* offset=0x0120 flags=0x0040000100000020 */ struct FUTSkillHitInfo SkillHitInfo;
  /* offset=0x013c flags=0x0048001040000200 */ int32 SkillSynRandomSeed;
  /* offset=0x0140 flags=0x0040001000000000 */ struct FRandomStream SkillSynRandStream;
  /* offset=0x0148 flags=0x0048001040000200 */ int32 SkillSynRandomSeedExpireCount;

  void CheckAutoSkill();
  bool CheckNewSkill(int32 SkillID);
  void ClearSkill();
  AUTSkill* GetCurSkill();
  UUTSkillPhase* GetCurSkillPhase();
  AUTSkill* GetSkill(int32 SkillID);
  AUTSkill* GetSkillByName(FString SkillName);
  void InitSkillSystem();
  bool IsCastingSkill();
  bool IsReadyToCastSkill(int32 SkillID);
  void OnRep_SkillHitInfo();
  bool OnSameTeam(AActor* A, AActor* B);
  void PlayHurtSkillEffect(struct FUTSkillHitInfo TheSkillHitInfo);
  bool PreCheckNewSkill(int32 SkillID);
  int32 RandRangeSyn(int32 StartIndex, int32 EndIndex);
  void RepSkillHitInfo();
  void RepSkillSynData();
  /* SRV */ void ServerNotifyRandomSeed(int32 Seed);
  bool ServerStartSkill(int32 SkillID, bool bAutoCast);
  /* SRV */ void ServerTriggerEvent(int32 SkillID, uint8 EventType);
  void SetCurSkill(int32 SkillIndex);
  bool ShouldTriggerEvent(int32 SkillID, uint8 EventType);
  void StopSkill(int32 SkillID, enum UTSkillStopReason StopReason);
  void SwitchSkill(int32 SkillID, uint8 EventType);
  bool TraceTarget(struct FVector StartTrace, struct FVector EndTrace, enum UTPickerTargetType TargetType, float Radius, APawn* TargetActor);
};

class UUTSkillPhase: public UActorComponent {
  /* offset=0x00ac flags=0x0018000000000205 */ FString PhaseName;
  /* offset=0x00b8 flags=0x0018000000000205 */ FString PhaseDescription;
  /* offset=0x00c4 flags=0x0018001040000204 */ bool bPhaseEnabled;
  /* offset=0x00c8 flags=0x001c001040002200 */ AUTSkill* OwnerSkill;
  /* offset=0x00f0 flags=0x0010008000000001 */ struct FUTSkillPhaseCreateData BaseData;
  /* offset=0x0158 flags=0x0018001040080208 */ UUTSkillPicker* InEffectPickerOnAction;

  bool ClearAttachments();
  bool ForceStopPhase();
  float GetChargePhaseRate();
  bool OnCustomEvent(uint8 TheEventType);
  bool OnEvent(uint8 TheEventType);
  void PickTargets();
  bool PlaySkillHurtAppearances(APawn* Victim);
  bool PlaySkillHurtEffect(APawn* Victim);
  void RepeatPhase();
  void StartPhase();
  void StopPhase();
  bool TryJumpToPhase(int32 PhaseID);
};

class UUTSkillPicker: public UUTSkillBaseWidget {
  /* offset=0x00c4 flags=0x0010001000000001 */ struct FUTSkillPickerCreateData BaseData;
  /* offset=0x00d0 flags=0x001c001040002200 */ AUTSkill* OwnerSkill;
  /* offset=0x00e4 flags=0x0010000000002200 */ TArray<struct FUTSkillPickedTarget> PickedResultTargets;
  /* offset=0x00f0 flags=0x0014000000002200 */ TArray<AActor*> IgnoreTargets;
};

class UUniformGridPanel: public UPanelWidget {
  /* offset=0x00d8 flags=0x0010001000000015 */ struct FMargin SlotPadding;
  /* offset=0x00e8 flags=0x0018001040000215 */ float MinDesiredSlotWidth;
  /* offset=0x00ec flags=0x0018001040000215 */ float MinDesiredSlotHeight;

  UUniformGridSlot* AddChildToUniformGrid(UWidget* content);
  void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);
  void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);
  void SetSlotPadding(struct FMargin InSlotPadding);
};

class UUniformGridSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0025 flags=0x0018001040000215 */ uint8 VerticalAlignment;
  /* offset=0x0028 flags=0x0018001040000215 */ int32 Row;
  /* offset=0x002c flags=0x0018001040000215 */ int32 Column;

  void SetColumn(int32 InColumn);
  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetRow(int32 InRow);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UUpdatePlayerStateInterface_C: public UInterface {
  void InitPlayerState();
  void UpdatePlayerState(enum ExtraPlayerLiveState State, ACharacter* OwnerCharacter);
};

class UUserDefinedEnum: public UEnum {
  /* offset=0x0040 flags=0x0010000000000200 */ TMap<FName, FText> DisplayNameMap;
};

class UUserDefinedStruct: public UScriptStruct {
  /* offset=0x0064 flags=0x0018001040000000 */ struct FGuid Guid;
};

class UUserInputCache: public UObject {
  void CacheReportComplaintName(FString ReportName, bool IsReport);
  bool CheckIsNameReport(FString ReportName);
  void ResetReportComplaintNames();
};

class UUserInterfaceSettings: public UDeveloperSettings {
  /* offset=0x0030 flags=0x0018001040004201 */ enum ERenderFocusRule RenderFocusRule;
  /* offset=0x0034 flags=0x0010000000004201 */ TMap<uint8, struct FHardwareCursorReference> HardwareCursors;
  /* offset=0x0070 flags=0x0010000000004201 */ TMap<uint8, struct FSoftClassPath> SoftwareCursors;
  /* offset=0x00b0 flags=0x0010000020004000 */ struct FSoftClassPath DefaultCursor;
  /* offset=0x00c8 flags=0x0010000020004000 */ struct FSoftClassPath TextEditBeamCursor;
  /* offset=0x00e0 flags=0x0010000020004000 */ struct FSoftClassPath CrosshairsCursor;
  /* offset=0x00f8 flags=0x0010000020004000 */ struct FSoftClassPath HandCursor;
  /* offset=0x0110 flags=0x0010000020004000 */ struct FSoftClassPath GrabHandCursor;
  /* offset=0x0128 flags=0x0010000020004000 */ struct FSoftClassPath GrabHandClosedCursor;
  /* offset=0x0140 flags=0x0010000020004000 */ struct FSoftClassPath SlashedCircleCursor;
  /* offset=0x0158 flags=0x0018001040004201 */ float ApplicationScale;
  /* offset=0x015c flags=0x0018001040004201 */ enum EUIScalingRule UIScaleRule;
  /* offset=0x0160 flags=0x0010000000004001 */ struct FSoftClassPath CustomScalingRuleClass;
  /* offset=0x0178 flags=0x0010000000004001 */ struct FRuntimeFloatCurve UIScaleCurve;
  /* offset=0x01d0 flags=0x0018001040004201 */ bool bLoadWidgetsOnDedicatedServer;
  /* offset=0x01d4 flags=0x0040000000002200 */ TArray<UObject*> CursorClasses;
  /* offset=0x01e0 flags=0x0048001040002200 */ UClass<UObject>* CustomScalingRuleClassInstance;
  /* offset=0x01e4 flags=0x0048001040002200 */ UDPICustomScalingRule* CustomScalingRule;
};

class UUserWidget: public UWidget {
  /* offset=0x00cc flags=0x0018001040000015 */ struct FLinearColor ColorAndOpacity;
  /* offset=0x00e0 flags=0x0010001000080200 */ FGetLinearColor ColorAndOpacityDelegate;
  /* offset=0x00f0 flags=0x0010000000000015 */ struct FSlateColor ForegroundColor;
  /* offset=0x0110 flags=0x0010001000080200 */ FGetSlateColor ForegroundColorDelegate;
  /* offset=0x0120 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0130 flags=0x0010000000002200 */ TArray<UUMGSequencePlayer*> ActiveSequencePlayers;
  /* offset=0x013c flags=0x0010000000002200 */ TArray<UUMGSequencePlayer*> StoppedSequencePlayers;
  /* offset=0x0148 flags=0x0040008000000200 */ TArray<struct FNamedSlotBinding> NamedSlotBindings;
  /* offset=0x0154 flags=0x001a001040080208 */ UWidgetTree* WidgetTree;
  /* offset=0x0158 flags=0x0018001040000215 */ int32 Priority;
  /* offset=0x015c flags=0x0018001020000000 */ uint8 bSupportsKeyboardFocus:1;
  /* offset=0x015c flags=0x0018001000000005 */ uint8 bIsFocusable:1;
  /* offset=0x015c flags=0x0018001000000005 */ uint8 bStopAction:1;
  /* offset=0x015c flags=0x0018001000000000 */ uint8 bCanEverTick:1;
  /* offset=0x015c flags=0x0018001000000000 */ uint8 bCanEverPaint:1;
  /* offset=0x015c flags=0x0018001000000000 */ uint8 bCookedWidgetTree:1;
  /* offset=0x0160 flags=0x0028081040282208 */ UInputComponent* InputComponent;

  bool AddToPlayerScreen(int32 ZOrder);
  void AddToViewport(int32 ZOrder);
  void Construct();
  void Destruct();
  struct FVector2D GetAlignmentInViewport();
  struct FAnchors GetAnchorsInViewport();
  float GetAnimationCurrentTime(UWidgetAnimation* InAnimation);
  bool GetIsVisible();
  ULocalPlayer* GetOwningLocalPlayer();
  APlayerController* GetOwningPlayer();
  APawn* GetOwningPlayerPawn();
  bool IsAnimationPlaying(UWidgetAnimation* InAnimation);
  bool IsAnimationPlayingForward(UWidgetAnimation* InAnimation);
  bool IsAnyAnimationPlaying();
  bool IsInViewport();
  bool IsInteractable();
  bool IsListeningForInputAction(FName ActionName);
  bool IsPlayingAnimation();
  void ListenForInputAction(FName ActionName, uint8 EventType, bool bConsume, FOnInputAction Callback);
  void OnAddedToFocusPath(struct FFocusEvent InFocusEvent);
  struct FEventReply OnAnalogValueChanged(struct FGeometry MyGeometry, struct FAnalogInputEvent InAnalogInputEvent);
  void OnAnimationFinished(UWidgetAnimation* Animation);
  void OnAnimationStarted(UWidgetAnimation* Animation);
  void OnDragCancelled(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragDetected(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragEnter(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnDragLeave(struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDragOver(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  void OnFocusLost(struct FFocusEvent InFocusEvent);
  struct FEventReply OnFocusReceived(struct FGeometry MyGeometry, struct FFocusEvent InFocusEvent);
  struct FEventReply OnKeyChar(struct FGeometry MyGeometry, struct FCharacterEvent InCharacterEvent);
  struct FEventReply OnKeyDown(struct FGeometry MyGeometry, struct FKeyEvent InKeyEvent);
  struct FEventReply OnKeyUp(struct FGeometry MyGeometry, struct FKeyEvent InKeyEvent);
  struct FEventReply OnMotionDetected(struct FGeometry MyGeometry, struct FMotionEvent InMotionEvent);
  struct FEventReply OnMouseButtonDoubleClick(struct FGeometry InMyGeometry, struct FPointerEvent InMouseEvent);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  struct FEventReply OnMouseButtonUp(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  void OnMouseCaptureLost();
  void OnMouseEnter(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  void OnMouseLeave(struct FPointerEvent MouseEvent);
  struct FEventReply OnMouseMove(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  struct FEventReply OnMouseWheel(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  void OnPaint(struct FPaintContext Context);
  struct FEventReply OnPreviewKeyDown(struct FGeometry MyGeometry, struct FKeyEvent InKeyEvent);
  struct FEventReply OnPreviewMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  void OnRemovedFromFocusPath(struct FFocusEvent InFocusEvent);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  struct FEventReply OnTouchGesture(struct FGeometry MyGeometry, struct FPointerEvent GestureEvent);
  struct FEventReply OnTouchMoved(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  struct FEventReply OnTouchStarted(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent);
  float PauseAnimation(UWidgetAnimation* InAnimation);
  void PlayAnimation(UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, uint8 PlayMode, float PlaybackSpeed);
  void PlayAnimationTo(UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32 NumLoopsToPlay, uint8 PlayMode, float PlaybackSpeed);
  void PlaySound(USoundBase* SoundToPlay);
  void PreConstruct(bool IsDesignTime);
  void RegisterInputComponent();
  void RemoveFromViewport();
  void ReverseAnimation(UWidgetAnimation* InAnimation);
  void SetAlignmentInViewport(struct FVector2D Alignment);
  void SetAnchorsInViewport(struct FAnchors Anchors);
  void SetColorAndOpacity(struct FLinearColor InColorAndOpacity);
  void SetDesiredSizeInViewport(struct FVector2D Size);
  void SetForegroundColor(struct FSlateColor InForegroundColor);
  void SetInputActionBlocking(bool bShouldBlock);
  void SetInputActionPriority(int32 NewPriority);
  void SetNumLoopsToPlay(UWidgetAnimation* InAnimation, int32 NumLoopsToPlay);
  void SetOwningLocalPlayer(ULocalPlayer* LocalPlayer);
  void SetOwningPlayer(APlayerController* LocalPlayerController);
  void SetPadding(struct FMargin InPadding);
  void SetPlaybackSpeed(UWidgetAnimation* InAnimation, float PlaybackSpeed);
  void SetPositionInViewport(struct FVector2D Position, bool bRemoveDPIScale);
  void StopAnimation(UWidgetAnimation* InAnimation);
  void StopListeningForAllInputActions();
  void StopListeningForInputAction(FName ActionName, uint8 EventType);
  void Tick(struct FGeometry MyGeometry, float InDeltaTime);
  void UnregisterInputComponent();
};

class UVRNotificationsComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FVRNotificationsDelegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;
  /* offset=0x00b8 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDTrackingInitializedDelegate;
  /* offset=0x00c4 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDRecenteredDelegate;
  /* offset=0x00d0 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDLostDelegate;
  /* offset=0x00dc flags=0x0010000010080200 */ FVRNotificationsDelegate HMDReconnectedDelegate;
  /* offset=0x00e8 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDConnectCanceledDelegate;
  /* offset=0x00f4 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDPutOnHeadDelegate;
  /* offset=0x0100 flags=0x0010000010080200 */ FVRNotificationsDelegate HMDRemovedFromHeadDelegate;
  /* offset=0x010c flags=0x0010000010080200 */ FVRNotificationsDelegate VRControllerRecenteredDelegate;
};

class UVault_Controller_C: public UActorComponent {
  /* offset=0x00b0 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x00b4 flags=0x0008001040010a05 */ ABP_PlayerPawn_C* PlayerPawn;
  /* offset=0x00b8 flags=0x0008001040010205 */ float DeltaTime;
  /* offset=0x00bc flags=0x0008001040010205 */ float NowBlockDis;
  /* offset=0x00c0 flags=0x0008001040010205 */ float NowBlockHeight;
  /* offset=0x00c4 flags=0x0008001040010205 */ float NowAfterBlockMaxFallingHeight;
  /* offset=0x00c8 flags=0x0008001040010205 */ float NowCrossBlockMaxDis;
  /* offset=0x00cc flags=0x0008001040010205 */ float NowBlockLength;
  /* offset=0x00d0 flags=0x0008001040010205 */ float MaxCheckDis;
  /* offset=0x00d4 flags=0x0008001040010205 */ float MaxCheckOppSiteDis;
  /* offset=0x00d8 flags=0x0008001040010205 */ float UnActiveMaxAngle;
  /* offset=0x00dc flags=0x0008001040010205 */ float MaxCheckHeight;
  /* offset=0x00e0 flags=0x0008001040010a05 */ AActor* checkActor;
  /* offset=0x00e4 flags=0x0008001040010005 */ struct FVector PlayerStartPostion;
  /* offset=0x00f0 flags=0x0000001040010005 */ struct FRotator PlayerRotation;
  /* offset=0x00fc flags=0x0008001040010005 */ struct FVector hitpoint;
  /* offset=0x0108 flags=0x0008001040010205 */ UPrimitiveComponent* HitComponent;
  /* offset=0x010c flags=0x0008001040010205 */ float CapsuleRadius;
  /* offset=0x0110 flags=0x0008001040010205 */ float CapsuleHalfHeight;
  /* offset=0x0114 flags=0x0008001040010005 */ struct FVector blockDir;
  /* offset=0x0120 flags=0x0008000000010005 */ struct FVaultData NowVaultData;
  /* offset=0x0154 flags=0x0008001040010205 */ float MaxJumpLength;
  /* offset=0x0158 flags=0x0000001040010205 */ bool IsJump;
  /* offset=0x015c flags=0x0008001040010205 */ float CountTime;
  /* offset=0x0160 flags=0x0000001040010205 */ bool IsVaulting;
  /* offset=0x0161 flags=0x0008001040010205 */ uint8 NowDrawDebugType;
  /* offset=0x0164 flags=0x0008000000010205 */ FString nowVaultKey;
  /* offset=0x0170 flags=0x0000000000010205 */ TMap<FString, struct FVaultData> vaultDataallMap;
  /* offset=0x01ac flags=0x0008001040010005 */ struct FVector DataStartpos;
  /* offset=0x01b8 flags=0x0008001040010205 */ float realStartTime;
  /* offset=0x01bc flags=0x0000001040010205 */ bool IsEnd;
  /* offset=0x01c0 flags=0x0008001040010205 */ float nowMaxX;
  /* offset=0x01c4 flags=0x0008001040010205 */ float nowMinFallingY;
  /* offset=0x01c8 flags=0x0008001040010205 */ float realStartZ;
  /* offset=0x01cc flags=0x0008001040010a05 */ AActor* WindowActor;
  /* offset=0x01d0 flags=0x0008001040010205 */ float offsetSpeed;
  /* offset=0x01d4 flags=0x0008001040010205 */ uint8 gunSlot;
  /* offset=0x01d5 flags=0x0000001040010205 */ bool isShowReson;
  /* offset=0x01d8 flags=0x0008001040010005 */ struct FVector NewVar;
  /* offset=0x01e4 flags=0x0008001040010005 */ struct FVector oppsiteHitPoint;
  /* offset=0x01f0 flags=0x0008001040010005 */ struct FVector uphitPoint;
  /* offset=0x01fc flags=0x0000001040010205 */ bool IsPreUseMedicine;
  /* offset=0x0200 flags=0x0008001040010205 */ float heightoffsetcheck;
  /* offset=0x0204 flags=0x0008001040010205 */ float HeightFowardCheck;
  /* offset=0x0208 flags=0x0008001040010205 */ float minVaultHeight;
  /* offset=0x020c flags=0x0008001040010205 */ float nowAnimSpeed;
  /* offset=0x0210 flags=0x0008001040010205 */ float animSpeedChangeTime;
  /* offset=0x0214 flags=0x0008001040010205 */ float animChangegSpeedRate;
  /* offset=0x0218 flags=0x0000001040010205 */ bool ischangeMontageSpeed;

  void CacultLimitData(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3);
  void CheckCanVault(bool IsActive, float nowHeightTestHeight, struct FVector nowHeightHitPoint, bool nowResult, TArray<AActor*> ___object_Variable, int32 ___int_Array_Index_Variable, TArray<uint8> CallFunc_GetTestObjectChannels_channels, TArray<uint8> CallFunc_GetTestObjectChannels_channels2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, TArray<AActor*> K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, TArray<struct FHitResult> CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive, struct FVector CallFunc_CheckHeight_point, bool CallFunc_CheckForward_isActive, bool CallFunc_CheckHeight_isActive2, struct FVector CallFunc_CheckHeight_point2, float CallFunc_GetJumpLengthByHeight_length, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, bool CallFunc_IsInEditor_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GetCrossMaxBlockDisForward_result, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GetNowData_IsGet, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int32 ___int_Loop_Counter_Variable, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, struct FVector CallFunc_Add_VectorVector_ReturnValue2, int32 CallFunc_Add_IntInt_ReturnValue, TArray<struct FHitResult> CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, struct FHitResult CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, struct FVector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_HasState_ReturnValue);
  void CheckForward(bool IsActive, struct FVector CallFunc_GetForwardVector_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array, TArray<uint8> CallFunc_GetTestObjectChannels_channels, struct FVector CallFunc_GetForwardVector_ReturnValue3, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Normal_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FHitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, bool CallFunc_ForwardTestObjectType_result, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue2, struct FVector CallFunc_Normal_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);
  void CheckHeight(float Height, bool IsActive, struct FVector Point, float testCapsuleRadius, struct FVector nowHitPoint, float nowCheckHeight, float nowHeightTestHeight, TArray<AActor*> ___object_Variable, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, TArray<uint8> CallFunc_GetTestObjectChannels_channels, TArray<uint8> CallFunc_GetTestObjectChannels_channels2, TArray<uint8> CallFunc_GetTestObjectChannels_channels3, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array, struct FVector CallFunc_MakeVector_ReturnValue2, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue3, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FHitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, struct FVector CallFunc_MakeVector_ReturnValue3, int32 ___int_Loop_Counter_Variable, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue4, struct FVector CallFunc_Add_VectorVector_ReturnValue2, struct FVector CallFunc_Add_VectorVector_ReturnValue3, TArray<struct FHitResult> CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FHitResult CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_ComponentHasTag_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, float CallFunc_Subtract_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue3, TArray<struct FHitResult> CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, bool CallFunc_TestHasFourteenwindowTag_result);
  void CheckUpLengthBlock(bool Result, float nowHeightTestHeight, TArray<uint8> CallFunc_GetTestObjectChannels_channels, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, TArray<AActor*> K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, TArray<struct FHitResult> CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue);
  void ExecuteUbergraph_Vault_Controller(int32 EntryPoint, FString CallFunc_MakeLiteralString_ReturnValue, FName K2Node_CustomEvent_NotifyName5, FName K2Node_CustomEvent_NotifyName4, FOnMontagePlayDelegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName3, FOnMontagePlayDelegate K2Node_CreateDelegate_OutputDelegate2, FName K2Node_CustomEvent_NotifyName2, FOnMontagePlayDelegate K2Node_CreateDelegate_OutputDelegate3, FName K2Node_CustomEvent_NotifyName, FOnMontagePlayDelegate K2Node_CreateDelegate_OutputDelegate4, FName ___name_Variable, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_AllowState_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, FOnMontagePlayDelegate K2Node_CreateDelegate_OutputDelegate5, UAnimInstance* CallFunc_GetAnimInstance_ReturnValue, UCH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, struct FVaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_HasAuthority_ReturnValue3, bool CallFunc_EnterState_ReturnValue, bool CallFunc_HasState_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, UPlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_CheckCanVault_isActive, bool CallFunc_IsLocallyControlled_ReturnValue2, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, struct FVector K2Node_CustomEvent_StartPos2, AActor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, struct FVector K2Node_CustomEvent_hitpoint2, AActor* K2Node_CustomEvent_WindowActor, bool CallFunc_ServerCheckBlockDis_Result, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, struct FVector K2Node_CustomEvent_StartPos, AActor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, struct FVector K2Node_CustomEvent_hitpoint, AActor* CallFunc_GetOwner_ReturnValue, AGameModeBase* CallFunc_GetGameMode_ReturnValue, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, AUAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess3, float CallFunc_ApplyDamage_ReturnValue, bool CallFunc_IsValid_ReturnValue2, AController* CallFunc_GetController_ReturnValue, AUAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess4, FString K2Node_CustomEvent_Reason, bool CallFunc_CheckAcknowledgedPawn_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, FString CallFunc_MakeLiteralString_ReturnValue2);
  void ForwardTestObjectType(AActor* Actor, bool Result, AActor* NewLocalVar, ALandscape* K2Node_DynamicCast_AsLandscape, bool K2Node_DynamicCast_bSuccess, APawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess2);
  void GetCrossBlockMaxFallingHeight(float capsuleTestLefHeight, TArray<AActor*> ___object_Variable, TArray<uint8> CallFunc_GetTestObjectChannels_channels, float CallFunc_GetPlayerStartZ_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, struct FHitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue2);
  void GetCrossMaxBlockDisForward(bool Result, float nowTestHalfHeight, bool CallFunc_LessEqual_FloatFloat_ReturnValue, TArray<uint8> CallFunc_GetTestObjectChannels_channels, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, AActor* CallFunc_GetOwner_ReturnValue, AActor* CallFunc_GetParentActor_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue2, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, struct FVector CallFunc_MakeVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue3, struct FVector CallFunc_Add_VectorVector_ReturnValue2, struct FVector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, struct FVector CallFunc_MakeVector_ReturnValue2, struct FHitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, struct FVector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue);
  void GetCrossMaxBlockDisOffsset(bool Result, float TestCrossBlockMaxDis, float nowTestHalfHeight, TArray<AActor*> ___object_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, TArray<uint8> CallFunc_GetTestObjectChannels_channels, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MakeVector_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue3, struct FVector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, struct FVector CallFunc_MakeVector_ReturnValue3, struct FHitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, struct FVector CallFunc_MakeVector_ReturnValue4, float CallFunc_VSize_ReturnValue);
  void GetJumpLengthByHeight(float Height, float Length, float TestHeight, float nowheight, FString nowkey, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FVaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, TArray<FString> CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, struct FVaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);
  void GetNowData(bool IsGet, float TestHeight, bool IsGetData, bool ___bool_True_if_break_was_hit_Variable, int32 ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, struct FVaultData K2Node_MakeStruct_VaultData, TArray<FString> CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, struct FVaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);
  void GetNowOppSideDis(float Result, float totalLength, struct FVaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);
  void GetPlayerStartZ(float Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);
  void GetTestObjectChannels(TArray<uint8> Channels, TArray<uint8> K2Node_MakeArray_Array);
  void JumpVault();
  void OnBlendOut_7D71C17943B655B8C686998CBCABB171(FName NotifyName);
  void OnCompleted_7D71C17943B655B8C686998CBCABB171(FName NotifyName);
  void OnInterrupted_7D71C17943B655B8C686998CBCABB171(FName NotifyName);
  void OnNotifyBegin_7D71C17943B655B8C686998CBCABB171(FName NotifyName);
  void OnNotifyEnd_7D71C17943B655B8C686998CBCABB171(FName NotifyName);
  void PrintEnable(APlayerController* CallFunc_GetPlayerController_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_BoolToText_ReturnValue);
  void ReceiveBeginPlay();
  void ReceiveTick(float DeltaSeconds);
  void ServerCheckBlockDis(struct FVector hitpoint, FString Key, bool Result, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, struct FVector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);
  void SetEnd(UAnimInstance* CallFunc_GetAnimInstance_ReturnValue, UCH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
  void SetLimitPostion(float XValue, float ZVaule, struct FVector realPos, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MakeVector_ReturnValue, struct FHitResult CallFunc_K2_SetWorldLocation_SweepHitResult);
  void SetVaultData(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossmaxFalling, float crossmaxDis, struct FVector hitpoint, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FRotator CallFunc_K2_GetComponentRotation_ReturnValue);
  void StartVault();
  void TestHasFourteenwindowTag(TArray<struct FHitResult> acorList, bool Result, int32 CallFunc_Array_Length_ReturnValue, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, struct FHitResult CallFunc_Array_Get_Item, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, struct FVector CallFunc_BreakHitResult_Location, struct FVector CallFunc_BreakHitResult_ImpactPoint, struct FVector CallFunc_BreakHitResult_Normal, struct FVector CallFunc_BreakHitResult_ImpactNormal, UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, AActor* CallFunc_BreakHitResult_HitActor, UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_FaceIndex, struct FVector CallFunc_BreakHitResult_TraceStart, struct FVector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue);
  void UpdateMontageSpeed(bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, UAnimInstance* CallFunc_GetAnimInstance_ReturnValue);
  void UpdatePostion2(float testhalfHeight, float ZOffset, struct FVector nowmoveOffset, float preTime, bool isUping, float shouldheight, float nowheight, float shoulddis, float nowdis, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, TArray<AActor*> K2Node_MakeArray_Array, TArray<uint8> K2Node_MakeArray_Array2, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue, struct FVector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue4, struct FVector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, struct FVector CallFunc_MakeVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, struct FVector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue, struct FVector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetFloatValue_ReturnValue, TArray<AActor*> CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_GetFloatValue_ReturnValue2, float CallFunc_GetFloatValue_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, struct FHitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, struct FVector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue7, struct FVector CallFunc_MakeVector_ReturnValue2, float CallFunc_VSize_ReturnValue);
  void VaultFail(FString Reason);
  void VaultServer(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, struct FVector hitpoint, AActor* WindowActor);
  void jumpfromUI();
  void printReason(FString Result);
  void vaultAll(float dis, float Height, float Length, FString VaultKey, struct FVector startPos, AActor* checkActor, float crossmaxFalling, float crossmaxDis, struct FVector hitpoint);
};

class UVectorField: public UObject {
  /* offset=0x001c flags=0x0010001040000001 */ struct FBox Bounds;
  /* offset=0x0038 flags=0x0018001040000201 */ float Intensity;
};

class UVectorFieldAnimated: public UVectorField {
  /* offset=0x003c flags=0x0018001040000201 */ UTexture2D* Texture;
  /* offset=0x0040 flags=0x0018001040000201 */ uint8 ConstructionOp;
  /* offset=0x0044 flags=0x0018001040000201 */ int32 VolumeSizeX;
  /* offset=0x0048 flags=0x0018001040000201 */ int32 VolumeSizeY;
  /* offset=0x004c flags=0x0018001040000201 */ int32 VolumeSizeZ;
  /* offset=0x0050 flags=0x0018001040000201 */ int32 SubImagesX;
  /* offset=0x0054 flags=0x0018001040000201 */ int32 SubImagesY;
  /* offset=0x0058 flags=0x0018001040000201 */ int32 FrameCount;
  /* offset=0x005c flags=0x0018001040000201 */ float FramesPerSecond;
  /* offset=0x0060 flags=0x0018001000000001 */ uint8 bLoop:1;
  /* offset=0x0064 flags=0x0018001040000201 */ UVectorFieldStatic* NoiseField;
  /* offset=0x0068 flags=0x0018001040000201 */ float NoiseScale;
  /* offset=0x006c flags=0x0018001040000201 */ float NoiseMax;
};

class UVectorFieldComponent: public UPrimitiveComponent {
  /* offset=0x05c0 flags=0x0018001040000205 */ UVectorField* VectorField;
  /* offset=0x05c4 flags=0x0018001240000205 */ float Intensity;
  /* offset=0x05c8 flags=0x0018001040000205 */ float Tightness;
  /* offset=0x05cc flags=0x0018001000002000 */ uint8 bPreviewVectorField:1;

  void SetIntensity(float NewIntensity);
};

class UVectorFieldStatic: public UVectorField {
  /* offset=0x003c flags=0x0018001040020201 */ int32 SizeX;
  /* offset=0x0040 flags=0x0018001040020201 */ int32 SizeY;
  /* offset=0x0044 flags=0x0018001040020201 */ int32 SizeZ;
};

class AVectorFieldVolume: public AActor {
  /* offset=0x02a8 flags=0x00480010400a021d */ UVectorFieldComponent* VectorFieldComponent;
};

class UVehicleAnimInstance: public UAnimInstance {
  /* offset=0x06f0 flags=0x0048001040082208 */ UWheeledVehicleMovementComponent* WheeledVehicleMovementComponent;

  AWheeledVehicle* GetVehicle();
};

class UVehicleCommonComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FVehicleHPChangedDelegate VehicleHPChangedDelegate;
  /* offset=0x00b8 flags=0x0010000010080200 */ FVehicleFuelChangedDelegate VehicleFuelChangedDelegate;
  /* offset=0x00c4 flags=0x0010000010080200 */ FVehicleWheelsHPChangedDelegate VehicleWheelsHPChangedDelegate;
  /* offset=0x00d0 flags=0x0028081040000205 */ float HPMax;
  /* offset=0x00d4 flags=0x0028081140000234 */ float HP;
  /* offset=0x00d8 flags=0x0020080100000234 */ TArray<float> WheelsCurrentHP;
  /* offset=0x00e4 flags=0x0028081040000205 */ float FuelMax;
  /* offset=0x00e8 flags=0x0028081140000234 */ float Fuel;
  /* offset=0x00ec flags=0x0028081040000205 */ float FuelConsumeFactor;
  /* offset=0x00f0 flags=0x0010000000000205 */ TArray<struct FSTExtraVehicleWheelHP> WheelsHP;

  float GetFuel();
  float GetFuelConsumeFactor();
  float GetFuelMax();
  float GetVehicleHP();
  float GetVehicleHPMax();
  float GetWheelHP(int32 WheelIdx);
  float GetWheelHPMax(int32 WheelIdx);
  int32 GetWheelsHPNum();
  bool IsDestroyed();
  bool NoFuel();
  void OnRep_Fuel();
  void OnRep_HP();
  void OnRep_WheelsCurrentHP();
  void TakeDamageByBoneName(float Damage, FName BoneName, bool IgnoreWheels, AController* Instigator);
  void TakeDamageByHitPart(float Damage, uint8 HitPart, bool IgnoreWheels, AController* Instigator);
  void VehicleTakeDamage(float Damage, AController* Instigator);
};

class UVehicleConfigActorComponent: public UActorComponent {
  UClass<UObject>* LoadActorClass(FString Path);
};

class UVehicleDamageComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ UCurveFloat* VehicleHitCharacterDamageCurve;
  /* offset=0x00b0 flags=0x0018001040000205 */ float LaunchVelocityFactorOnHitCharacter;
  /* offset=0x00b4 flags=0x0018001040000205 */ float ImpactModifier;
  /* offset=0x00b8 flags=0x0018001040000205 */ float ImpactAbsorption;
  /* offset=0x00bc flags=0x0018001040000205 */ float ImpactAbsorptionPassenger;
  /* offset=0x00c0 flags=0x0018001040000205 */ float ImpactModifierUpsideDown;
  /* offset=0x00c4 flags=0x0018001040000205 */ float ImpactAbsorptionUpsideDown;
  /* offset=0x00c8 flags=0x0018001040000205 */ float ImpactAbsorptionPassengerUpsideDown;
  /* offset=0x00cc flags=0x0018001040000205 */ float HitIgnoreImpulseThreshold;
  /* offset=0x00d0 flags=0x0018001040000205 */ float DamageCharacterCD;
  /* offset=0x00d8 flags=0x0018001040000205 */ float DamageSelfCD;
  /* offset=0x00e0 flags=0x0018001040000205 */ float ExplosionBaseDamage;
  /* offset=0x00e4 flags=0x0018001040000205 */ float ExplosionMinimumDamage;
  /* offset=0x00e8 flags=0x0018001040000205 */ float ExplosionRadiusInner;
  /* offset=0x00ec flags=0x0018001040000205 */ float ExplosionRadiusOuter;
  /* offset=0x00f0 flags=0x0018001040000205 */ float ExplosionDamageFalloff;
  /* offset=0x00f4 flags=0x0018001040000205 */ float ExplosionBaseMomentumMag;
  /* offset=0x00f8 flags=0x001c001040000205 */ UClass<UDamageType>* ExplosionDamageType;

  void HandleOnVehicleHit(AActor* SelfActor, AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit);
};

class UVehicleGeneratorComponent: public UBaseGeneratorComponent {
  /* offset=0x00f8 flags=0x0020080000000205 */ TArray<struct FVehicleSpotProperty> VehicleSpotPropertys;
  /* offset=0x0104 flags=0x0028081040000205 */ bool bStatisticsValid;
  /* offset=0x0105 flags=0x0028081040000200 */ bool bIsRandomVehicle;
  /* offset=0x0108 flags=0x0020088000000200 */ TMap<uint8, struct FVehicleSpotComponentArray> AllVehicleSpots;
  /* offset=0x0144 flags=0x0020080000000200 */ TMap<FString, struct FVehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;
  /* offset=0x0180 flags=0x0020080000000000 */ struct FVehicleGenerateStatisticsData VehicleStatisticsData;

  void AddVehicleClassCount(FString Path, bool IsValid, int32 Count);
  void AddVehicleSpotCount(uint8 SpotType, FString Path, float LocationX, float LocationY, float LocationZ);
  void DeleteGroups();
  void GenerateSpotOnTick();
  struct FVehicleGenerateSpawnData GetRandomVehicleClass(FString Category);
  void LoadVehicleGenerateTable();
  void RandomGroups();
  void RandomSingleSpots(TArray<UVehicleSpotSceneComponent*> AllSpots, struct FVehicleSpotProperty Property);
  void RandomSpotsByType(struct FVehicleSpotProperty Property, struct FVehicleSpotComponentArray Spots);
  void RegisterGroupSpotComponent(UGroupSpotSceneComponent* GroupSpotComponent);
  void RegisterVehicleGenerateSpawnData(struct FVehicleGenerateSpawnData Data);
  void WriteAllVehicleStatisticsDatas();
  void WriteVehicleClassStatisticsDatas();
  void WriteVehicleSpotStatisticsDatas();
};

class UVehicleGroupSpotSceneComponent: public UGroupSpotSceneComponent {
};

class UVehicleMotorbikeComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ UCurveFloat* Curve_Roll;
  /* offset=0x00b0 flags=0x0018001040000205 */ UCurveFloat* Curve_ReturnClamp;
  /* offset=0x00b4 flags=0x0018001040000205 */ UCurveFloat* Curve_Steer;
  /* offset=0x00b8 flags=0x0018001040000205 */ UCurveFloat* Curve_Yaw;
  /* offset=0x00bc flags=0x0018001040000205 */ UCurveFloat* Curve_TorqueStab;
  /* offset=0x00c0 flags=0x0018001040000205 */ UCurveFloat* Curve_Roll_Cart;
  /* offset=0x00c4 flags=0x0018001040000205 */ UCurveFloat* Curve_ReturnClamp_Cart;
  /* offset=0x00c8 flags=0x0018001040000205 */ UCurveFloat* Curve_Steer_Cart;
  /* offset=0x00cc flags=0x0018001040000205 */ UCurveFloat* Curve_Yaw_Cart;
  /* offset=0x00d0 flags=0x0018001040000205 */ UCurveFloat* Curve_TorqueStab_Cart;
  /* offset=0x00d4 flags=0x0018001040000205 */ bool bHasSidecart;
  /* offset=0x00d8 flags=0x0018001040000205 */ FName LowStabBoneName;
  /* offset=0x00e0 flags=0x0018001040000205 */ FName HighStabBoneName;
  /* offset=0x00e8 flags=0x0018001040000005 */ struct FVector SideCartHighStabCOM;
  /* offset=0x00f4 flags=0x0018001040000205 */ float ScaleTorque;
  /* offset=0x00f8 flags=0x0018001040000205 */ float ScaleCenterOfMass;
  /* offset=0x00fc flags=0x0018001040000014 */ struct FVector CurrentTorque;
  /* offset=0x0108 flags=0x0018001040000014 */ struct FVector CurrentCenterOfMass;
  /* offset=0x0114 flags=0x0018001040000205 */ bool bKickstandStabilizeEnabled;
  /* offset=0x0118 flags=0x0018001040000205 */ float KickstandAngularDamping;
  /* offset=0x011c flags=0x0018001040000205 */ float KickstandMaxAngVelocity;
  /* offset=0x0120 flags=0x0018001040000205 */ float KickstandEnableMaxSpeed;
  /* offset=0x0130 flags=0x0028081040000214 */ float COMOffsetSteer;

  void HandleOnVehicleHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit);
};

class UVehicleSeatComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000000205 */ TArray<struct FSTExtraVehicleSeat> Seats;
  /* offset=0x00b8 flags=0x0010000100000234 */ TArray<ASTExtraPlayerCharacter*> SeatOccupiers;
  /* offset=0x00c4 flags=0x0010000000000201 */ TArray<FName> AlternativeLeaveVehicleSockets;
  /* offset=0x00d4 flags=0x0020080000000204 */ TArray<uint8> SeatGUITypes;
  /* offset=0x00e0 flags=0x0010000010080200 */ FSeatAttachDelegate OnSeatAttached;
  /* offset=0x00ec flags=0x0010000010080200 */ FSeatDetachDelegate OnSeatDetached;
  /* offset=0x00f8 flags=0x0010000010080200 */ FSeatChangeDelegate OnSeatChanged;
  /* offset=0x0104 flags=0x0010000010080200 */ FUpdateSeatGUIDelegate OnUpdateSeatGUI;

  /* CL  */ void ClientSetLeaveVehicleLocation(ASTExtraPlayerCharacter* Character, struct FVector LeaveLocation);
  ASTExtraPlayerCharacter* GetDriver();
  bool IsSeatAvailable(enum ESTExtraVehicleSeatType SeatType);
  void OnRep_Occupiers();
};

class UVehicleSpotSceneComponent: public USpotSceneComponent {
  /* offset=0x0280 flags=0x0018001040000200 */ uint8 SpotGroupType;
  /* offset=0x0281 flags=0x0028081040000205 */ bool bRandomRotation;
  /* offset=0x0284 flags=0x0028081040000205 */ float RandomRotationMin;
  /* offset=0x0288 flags=0x0028081040000205 */ float RandomRotationMax;
  /* offset=0x028c flags=0x0028081040080208 */ UVehicleGeneratorComponent* VehicleGenerator;
  /* offset=0x0290 flags=0x0020080000000000 */ struct FVehicleSpotProperty SpotProperty;

  void GenerateSpot();
  void GenerateVehicles(struct FVehicleGenerateSpawnData Data);
  void SetSpotProperty(struct FVehicleSpotProperty Property, UVehicleGeneratorComponent* Generator);
};

class UVehicleSpringArmComponent: public USpringArmComponent {
  /* offset=0x0328 flags=0x0018001040000205 */ float MinForwardSpeedToRotationKMH;
  /* offset=0x032c flags=0x0018001040000205 */ float ForwardSpeedToRotSpeed;
  /* offset=0x0330 flags=0x0018001040000205 */ float StayTimeBeforeReturning;
  /* offset=0x0334 flags=0x0010001040000000 */ struct FRotator RelativeToOwnerRotator;
  /* offset=0x0354 flags=0x0018001040010201 */ bool bDrawDebugLineAndShap;
  /* offset=0x0358 flags=0x0018001040010201 */ float MinPitch;
  /* offset=0x035c flags=0x0018001040010201 */ float MaxPitch;

  void DelayRotationLagEnabled(bool bEnabled, float Time, struct FRotator _RelativeRotator);
  void DelayRotationLagEnabledEnd();
};

class UVehicleSyncComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000010080200 */ FActorHitSignature OnActorHit;
  /* offset=0x00b8 flags=0x0018001040000201 */ float MinCorrectionInterval;
  /* offset=0x00bc flags=0x0018001040000201 */ float MinSendingStateChangedIntervalAtClient;
  /* offset=0x00c0 flags=0x0018001040000201 */ float MinDeltaTimeSinceLastPhysicStateAtClient;
  /* offset=0x00c4 flags=0x0018001040000201 */ float MaxDeltaTimeSinceLastPhysicStateAtClient;
  /* offset=0x00c8 flags=0x0018001040000201 */ float SendingToServerIntervalAtClient;
  /* offset=0x00cc flags=0x0018001040000201 */ float SendingReliableHitToServerInterval;
  /* offset=0x00d0 flags=0x0018001040000201 */ float AllowMaxDiatanceSqAtServer;
  /* offset=0x00d4 flags=0x0018001040000201 */ float StationaryCorrectIntervalAtClient;
  /* offset=0x00d8 flags=0x0018001040000201 */ float StationaryCorrectSpeedThresholdSq;
  /* offset=0x00dc flags=0x0018001040000201 */ float StationaryCorrectThresholdDistanceSq;
  /* offset=0x00e0 flags=0x0018001040000201 */ float MinCorrectionDistanceSqAtClient;
  /* offset=0x00e4 flags=0x0018001040000201 */ float MinCorrectionVelocitySqAtClient;
  /* offset=0x00e8 flags=0x0018001040000201 */ float MinCorrectionAngleVelocitySqAtClient;

  bool AdjustFloorPosition(struct FVector ClientLocation, TArray<ASTExtraBaseCharacter*> Riders, struct FVector OutLocation);
  void ApplyRigidBodyState(struct FRigidBodyState NewState);
  bool CheckAndLoadLandscape(float DeltaTime);
  void ClientHitActor(AActor* OtherActor, struct FVector_NetQuantize100 NormalImpulse, struct FHitResult Hit);
  void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);
  void DragUnderGround();
  bool GetFloorPosition(struct FVector Location, struct FVector OutFloorLocation);
  float GetLanscapeHeight(struct FVector ClientLocation);
  TArray<ASTExtraBaseCharacter*> GetRiders();
  void HandleOnSeatAttached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void HandleOnSeatChanged(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType LastSeatType, int32 LastSeatIdx, enum ESTExtraVehicleSeatType NewSeatType, int32 NewSeatIdx);
  void HandleOnSeatDetached(ASTExtraPlayerCharacter* Character, enum ESTExtraVehicleSeatType SeatType, int32 SeatIdx);
  void OnDriverRide();
  void OnHitAtClient(AActor* SelfActor, AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit);
  void OnHitAtServer(AActor* SelfActor, AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit);
  /* SRV */ void SendClientHitToServerReliably(int32 InCorrectionId, float TimeStamp, struct FVector_NetQuantize100 ClientLocation, struct FVector_NetQuantize100 ClientLinearVelocity, struct FVector_NetQuantizeNormal ClientRotator, struct FVector_NetQuantize100 ClientAngularVelocity, AActor* OtherActor, struct FVector_NetQuantize100 NormalImpulse, struct FHitResult Hit);
  /* SRV */ void SendClientHitToServerUnreliably(int32 InCorrectionId, float TimeStamp, struct FVector_NetQuantize100 ClientLocation, struct FVector_NetQuantize100 ClientLinearVelocity, struct FVector_NetQuantizeNormal ClientRotator, struct FVector_NetQuantize100 ClientAngularVelocity, AActor* OtherActor, struct FVector_NetQuantize100 NormalImpulse, struct FHitResult Hit);
  int32 SendClientMoveToServerInternal(int32 InCorrectionId, float TimeStamp, struct FVector_NetQuantize100 ClientLocation, struct FVector_NetQuantize100 ClientLinearVelocity, struct FVector_NetQuantizeNormal ClientRotator, struct FVector_NetQuantize100 ClientAngularVelocity);
  /* SRV */ void SendClientMoveToServerReliably(int32 InCorrectionId, float TimeStamp, struct FVector_NetQuantize100 ClientLocation, struct FVector_NetQuantize100 ClientLinearVelocity, struct FVector_NetQuantizeNormal ClientRotator, struct FVector_NetQuantize100 ClientAngularVelocity);
  /* SRV */ void SendClientMoveToServerUnreliably(int32 InCorrectionId, float TimeStamp, struct FVector_NetQuantize100 ClientLocation, struct FVector_NetQuantize100 ClientLinearVelocity, struct FVector_NetQuantizeNormal ClientRotator, struct FVector_NetQuantize100 ClientAngularVelocity);
  /* CL* */ void SendServerMoveToClient(int32 InCorrectionId, struct FVector_NetQuantize100 ServerLocation, struct FVector_NetQuantize100 ServerLinearVelocity, struct FVector_NetQuantizeNormal ServerRotator, struct FVector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);
  bool VerifyClientTimeStamp(float TimeStamp);
};

class UVehicleUserComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040000214 */ ASTExtraVehicleBase* Vehicle;
  /* offset=0x00b0 flags=0x0028081040000214 */ ASTExtraPlayerCharacter* Character;
  /* offset=0x00b4 flags=0x0028081040000214 */ enum ESTExtraVehicleUserState VehicleUserState;
  /* offset=0x00b8 flags=0x0028081040000205 */ float UpdateVehicleSpeedGUIInterval;
  /* offset=0x00c0 flags=0x0028081040000205 */ float UpdateClosestVehicleInterval;
  /* offset=0x00c8 flags=0x0020080000000200 */ TArray<ASTExtraVehicleBase*> OverlappingVehicles;
  /* offset=0x00d4 flags=0x0028081040000214 */ ASTExtraVehicleBase* CurrentClosestVehicle;
  /* offset=0x00e8 flags=0x0028081040004200 */ bool EnableVehicleShoot;
  /* offset=0x00ec flags=0x0020081100000020 */ struct FVehicleUserReconnRepData ReconnRepData;

  void AddVehicleFuel(float Amount);
  bool CanUseVehicleHorn();
  bool CanVehicleShoot(ASTExtraPlayerCharacter* PlayerCharacter);
  enum ESTExtraVehicleUserState GetVehicleUserState();
  void MoveVehicleForward(float Rate);
  void MoveVehicleRight(float Rate);
  void OnChangeVehicleSeatCompleted(enum ESTExtraVehicleSeatType SeatType);
  void OnCurrrentClosestVehicleChanged();
  void OnEnterVehicleCompleted(enum ESTExtraVehicleSeatType SeatType);
  void OnExitVehicleCompleted();
  void OnRep_VehicleUserReconnRepData();
  void OnServerAboutToReconnect();
  void OnUpdateVehicleSpeedGUI(float RawSpeed);
  void ProcessReconnectionData();
  /* SRV */ void ReqChangeVehicleSeat();
  /* SRV */ void ReqEnterVehicle(ASTExtraVehicleBase* InVehicle, enum ESTExtraVehicleSeatType SeatType);
  /* SRV */ void ReqExitVehicle();
  /* SRV */ void ReqLeanOut(bool IsLeanOut);
  /* CL  */ void RspChangeVehicleSeat(bool bSuccess, enum ESTExtraVehicleSeatType SeatType);
  /* CL  */ void RspEnterVehicle(ASTExtraVehicleBase* InVehicle, bool bSuccess, enum ESTExtraVehicleSeatType SeatType);
  /* CL  */ void RspExitVehicle(bool bSuccess);
  /* CL  */ void RspLeanOut(bool bOut);
  /* SRV */ void ServerUseHorn(bool bUse);
  void SetBrake(float Rate);
  void TryChangeVehicleSeat();
  void TryEnterVehicle(ASTExtraVehicleBase* InVehicle, enum ESTExtraVehicleSeatType SeatType);
  void TryExitVehicle();
  void TryLeanOutOrIn(bool bAutoLeanOut);
  void TryUseHorn(bool bUse);
  void TurnVehicle(float Rate);
};

class UVehicleWheel: public UObject {
  /* offset=0x001c flags=0x0018001040010201 */ UStaticMesh* CollisionMesh;
  /* offset=0x0020 flags=0x0018001040010201 */ bool bDontCreateShape;
  /* offset=0x0021 flags=0x0018001040000201 */ bool bAutoAdjustCollisionSize;
  /* offset=0x0024 flags=0x0018001040000001 */ struct FVector Offset;
  /* offset=0x0030 flags=0x0018001040000201 */ float ShapeRadius;
  /* offset=0x0034 flags=0x0018001040000201 */ float ShapeWidth;
  /* offset=0x0038 flags=0x0018001040000201 */ float Mass;
  /* offset=0x003c flags=0x0018001040000201 */ float DampingRate;
  /* offset=0x0040 flags=0x0018001040000201 */ float SteerAngle;
  /* offset=0x0044 flags=0x0018001040000201 */ bool bAffectedByHandbrake;
  /* offset=0x0048 flags=0x0018001040000200 */ UTireType* TireType;
  /* offset=0x004c flags=0x0018001040000201 */ UTireConfig* TireConfig;
  /* offset=0x0050 flags=0x0018001040000201 */ float LatStiffMaxLoad;
  /* offset=0x0054 flags=0x0018001040000201 */ float LatStiffValue;
  /* offset=0x0058 flags=0x0018001040000201 */ float LongStiffValue;
  /* offset=0x005c flags=0x0018001040000201 */ float SuspensionForceOffset;
  /* offset=0x0060 flags=0x0018001040000201 */ float SuspensionMaxRaise;
  /* offset=0x0064 flags=0x0018001040000201 */ float SuspensionMaxDrop;
  /* offset=0x0068 flags=0x0018001040000201 */ float SuspensionNaturalFrequency;
  /* offset=0x006c flags=0x0018001040000201 */ float SuspensionDampingRatio;
  /* offset=0x0070 flags=0x0018001040000201 */ uint8 SweepType;
  /* offset=0x0074 flags=0x0018001040000201 */ float MaxBrakeTorque;
  /* offset=0x0078 flags=0x0018001040000201 */ float MaxHandBrakeTorque;
  /* offset=0x007c flags=0x0018001040082208 */ UWheeledVehicleMovementComponent* VehicleSim;
  /* offset=0x0080 flags=0x0018001040002200 */ int32 WheelIndex;
  /* offset=0x0084 flags=0x0018001040002200 */ float DebugLongSlip;
  /* offset=0x0088 flags=0x0018001040002200 */ float DebugLatSlip;
  /* offset=0x008c flags=0x0018001040002200 */ float DebugNormalizedTireLoad;
  /* offset=0x0094 flags=0x0018001040002200 */ float DebugWheelTorque;
  /* offset=0x0098 flags=0x0018001040002200 */ float DebugLongForce;
  /* offset=0x009c flags=0x0018001040002200 */ float DebugLatForce;
  /* offset=0x00a0 flags=0x0018001040002000 */ struct FVector Location;
  /* offset=0x00ac flags=0x0018001040002000 */ struct FVector OldLocation;
  /* offset=0x00b8 flags=0x0018001040002000 */ struct FVector Velocity;

  float GetRotationAngle();
  float GetSteerAngle();
  float GetSuspensionOffset();
  bool IsInAir();
};

class UVehileControlPanel_C: public UUAEUserWidget {
  /* offset=0x0230 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x0234 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Sw_Braking_Locked_Mod_L;
  /* offset=0x0238 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_CarSpeaker_Locked_Mode;
  /* offset=0x023c flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_Braking_Locked_Mod_R;
  /* offset=0x0240 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_Down_Locked_Mode;
  /* offset=0x0244 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_UP_Locked_Mode;
  /* offset=0x0248 flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_Down_Locked_Mode;
  /* offset=0x024c flags=0x000a0010c008021c */ UWidgetAnimation* DX_SW_UP_Locked_Mode;
  /* offset=0x0250 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Right_Locked_Mode;
  /* offset=0x0254 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Left_Locked_Mode;
  /* offset=0x0258 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Down_Locked_Mode;
  /* offset=0x025c flags=0x000a0010c008021c */ UWidgetAnimation* DX_UP_Locked_Mode;
  /* offset=0x0260 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Right_Locked_Mode;
  /* offset=0x0264 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Left_Locked_Mode;
  /* offset=0x0268 flags=0x000a0010c008021c */ UWidgetAnimation* DX_Down_Locked_Mode;
  /* offset=0x026c flags=0x000a0010c008021c */ UWidgetAnimation* DX_UP_Locked_Mode;
  /* offset=0x0270 flags=0x000a0010c008020c */ UBorder* Border_ButtonsOnly;
  /* offset=0x0274 flags=0x000a0010c008020c */ UButton* BtnChangeDriveGUIType;
  /* offset=0x0278 flags=0x000a0010c008020c */ UButton* BtnChangeSeat;
  /* offset=0x027c flags=0x000a0010c008020c */ UButton* BtnDriverEnter;
  /* offset=0x0280 flags=0x000a0010c008020c */ UButton* BtnLeaveVehicle;
  /* offset=0x0284 flags=0x000a0010c008020c */ UButton* BtnPassengerEnter;
  /* offset=0x0288 flags=0x000a0010c008020c */ UButton* Button_Left_Braking;
  /* offset=0x028c flags=0x000a0010c008020c */ UButton* Button_Right_Braking;
  /* offset=0x0290 flags=0x000a0010c008020c */ UButton* Button_Seat01;
  /* offset=0x0294 flags=0x000a0010c008020c */ UButton* Button_Seat02;
  /* offset=0x0298 flags=0x000a0010c008020c */ UButton* Button_Seat03;
  /* offset=0x029c flags=0x000a0010c008020c */ UButton* Button_Seat04;
  /* offset=0x02a0 flags=0x000a0010c008020c */ UButton* Button_ShootingOnTheVehile;
  /* offset=0x02a4 flags=0x000a0010c008020c */ UButton* Button_SWMode_Left_Down;
  /* offset=0x02a8 flags=0x000a0010c008020c */ UButton* Button_SWMode_Left_Up;
  /* offset=0x02ac flags=0x000a0010c008020c */ UButton* Button_SWMode_Right_Down;
  /* offset=0x02b0 flags=0x000a0010c008020c */ UButton* Button_SWMode_Right_Up;
  /* offset=0x02b4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_CarSpeaker;
  /* offset=0x02b8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_FuelGroup;
  /* offset=0x02bc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Mode1;
  /* offset=0x02c0 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Mode2;
  /* offset=0x02c4 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_Mode3;
  /* offset=0x02c8 flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_SeatList;
  /* offset=0x02cc flags=0x000a0010c008020c */ UCanvasPanel* CanvasPanel_ShootingOnTheVehile;
  /* offset=0x02d0 flags=0x000a0010c008020c */ UButton* DriveDown;
  /* offset=0x02d4 flags=0x000a0010c008020c */ UButton* DriveLeft;
  /* offset=0x02d8 flags=0x000a0010c008020c */ UButton* DriveRight;
  /* offset=0x02dc flags=0x000a0010c008020c */ UButton* DriveUp;
  /* offset=0x02e0 flags=0x000a0010c008020c */ UImage* FuelPointerImage;
  /* offset=0x02e4 flags=0x000a0010c008020c */ UImage* FXLight_Braking_01;
  /* offset=0x02e8 flags=0x000a0010c008020c */ UImage* FXLight_Braking_02;
  /* offset=0x02ec flags=0x000a0010c008020c */ UImage* FXLight_Down_01;
  /* offset=0x02f0 flags=0x000a0010c008020c */ UImage* FXLight_Down_03;
  /* offset=0x02f4 flags=0x000a0010c008020c */ UImage* FXLight_Left_01;
  /* offset=0x02f8 flags=0x000a0010c008020c */ UImage* FXLight_Left_03;
  /* offset=0x02fc flags=0x000a0010c008020c */ UImage* FXLight_Right_01;
  /* offset=0x0300 flags=0x000a0010c008020c */ UImage* FXLight_Right_03;
  /* offset=0x0304 flags=0x000a0010c008020c */ UImage* FXLight_SWmode_Left_Down;
  /* offset=0x0308 flags=0x000a0010c008020c */ UImage* FXLight_SWmode_Left_UP;
  /* offset=0x030c flags=0x000a0010c008020c */ UImage* FXLight_SWmode_Right_Down;
  /* offset=0x0310 flags=0x000a0010c008020c */ UImage* FXLight_SWmode_Right_UP;
  /* offset=0x0314 flags=0x000a0010c008020c */ UImage* FXLight_UP_01;
  /* offset=0x0318 flags=0x000a0010c008020c */ UImage* FXLight_Up_03;
  /* offset=0x031c flags=0x000a0010c008020c */ UImage* FXLightCarSpeaker_01;
  /* offset=0x0320 flags=0x000a0010c008020c */ UBorder* GameAssistantBorder;
  /* offset=0x0324 flags=0x000a0010c008020c */ UImage* Image_DriverTips;
  /* offset=0x0328 flags=0x000a0010c008020c */ UImage* Image_Mode1_L1;
  /* offset=0x032c flags=0x000a0010c008020c */ UImage* Image_Mode1_L2;
  /* offset=0x0330 flags=0x000a0010c008020c */ UImage* Image_Mode1_R1;
  /* offset=0x0334 flags=0x000a0010c008020c */ UImage* Image_Mode1_R2;
  /* offset=0x0338 flags=0x000a0010c008020c */ UImage* Image_Mode2_L1;
  /* offset=0x033c flags=0x000a0010c008020c */ UImage* Image_Mode2_L2;
  /* offset=0x0340 flags=0x000a0010c008020c */ UImage* Image_Mode2_R1;
  /* offset=0x0344 flags=0x000a0010c008020c */ UImage* Image_Mode2_R2;
  /* offset=0x0348 flags=0x000a0010c008020c */ UImage* Image_Mode3_L1;
  /* offset=0x034c flags=0x000a0010c008020c */ UImage* Image_Mode3_L2;
  /* offset=0x0350 flags=0x000a0010c008020c */ UImage* Image_Mode3_R1;
  /* offset=0x0354 flags=0x000a0010c008020c */ UImage* Image_Mode3_R2;
  /* offset=0x0358 flags=0x000a0010c008020c */ UImage* Image_Other01;
  /* offset=0x035c flags=0x000a0010c008020c */ UImage* Image_Other02;
  /* offset=0x0360 flags=0x000a0010c008020c */ UImage* Image_Other03;
  /* offset=0x0364 flags=0x000a0010c008020c */ UImage* Image_Other04;
  /* offset=0x0368 flags=0x000a0010c008020c */ UImage* Image_Seat01Status;
  /* offset=0x036c flags=0x000a0010c008020c */ UImage* Image_Seat02Status;
  /* offset=0x0370 flags=0x000a0010c008020c */ UImage* Image_Seat03Status;
  /* offset=0x0374 flags=0x000a0010c008020c */ UImage* Image_Seat04Status;
  /* offset=0x0378 flags=0x000a0010c008020c */ UImage* Image_SelfBG01;
  /* offset=0x037c flags=0x000a0010c008020c */ UImage* Image_SelfBG02;
  /* offset=0x0380 flags=0x000a0010c008020c */ UImage* Image_SelfBG03;
  /* offset=0x0384 flags=0x000a0010c008020c */ UImage* Image_SelfBG04;
  /* offset=0x0388 flags=0x000a0010c008020c */ UImage* Image_ShootingOnTheVehile_On;
  /* offset=0x038c flags=0x000a0010c008020c */ UImage* Image_VehileIcon;
  /* offset=0x0390 flags=0x000a0010c008020c */ USlider* Lside_SliderThrottle;
  /* offset=0x0394 flags=0x000a0010c008020c */ UImage* Lside_SteeringWeel;
  /* offset=0x0398 flags=0x000a0010c008020c */ UButton* LsideDriveLeft;
  /* offset=0x039c flags=0x000a0010c008020c */ UButton* LsideDriveRight;
  /* offset=0x03a0 flags=0x000a0010c008020c */ UWidgetSwitcher* PanelButtonsOnlyMode;
  /* offset=0x03a4 flags=0x000a0010c008020c */ UGridPanel* PanelEnterVehicle;
  /* offset=0x03a8 flags=0x000a0010c008020c */ UWidgetSwitcher* PanelSteeringWheelMode;
  /* offset=0x03ac flags=0x000a0010c008020c */ UCanvasPanel* PanelVehicleCommonGUI2;
  /* offset=0x03b0 flags=0x000a0010c008020c */ UProgressBar* ProgressBar_FuelBar;
  /* offset=0x03b4 flags=0x000a0010c008020c */ UButton* RightCarSpeaker;
  /* offset=0x03b8 flags=0x000a0010c008020c */ USlider* Rside_SliderThrottle;
  /* offset=0x03bc flags=0x000a0010c008020c */ UImage* Rside_SteeringWeel;
  /* offset=0x03c0 flags=0x000a0010c008020c */ UButton* RsideDriveDown;
  /* offset=0x03c4 flags=0x000a0010c008020c */ UButton* RsideDriveUp;
  /* offset=0x03c8 flags=0x000a0010c008020c */ USlider* Slider_FuelPointer;
  /* offset=0x03cc flags=0x000a0010c008020c */ UTextBlock* SpeedValues;
  /* offset=0x03d0 flags=0x000a0010c008020c */ UProgressBar* VehicleHP;
  /* offset=0x03d4 flags=0x0008000000010205 */ FString StrVehicleSpeed;
  /* offset=0x03e0 flags=0x0008000000010205 */ FString StrVehicleFuel;
  /* offset=0x03ec flags=0x0008000000010205 */ FString StrVehicleHP;
  /* offset=0x03f8 flags=0x0008001040010205 */ float VehicleHealthPercent;
  /* offset=0x03fc flags=0x0008001040010205 */ int32 DriveGUIType;
  /* offset=0x0400 flags=0x0000001040010205 */ bool JoystickLRReverted;
  /* offset=0x0401 flags=0x0000001040010205 */ bool ButtonLRReverted;
  /* offset=0x0402 flags=0x0000001040010205 */ bool IsDriving;
  /* offset=0x0403 flags=0x0000001040010205 */ bool IsVehicleControlGUIVisible;
  /* offset=0x0404 flags=0x0000000000010205 */ TArray<UImage*> Seats;

  void BndEvt__BtnChangeSeat_K2Node_ComponentBoundEvent_335_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BtnDriverEnter_K2Node_ComponentBoundEvent_476_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BtnLeaveVehicle_K2Node_ComponentBoundEvent_445_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__BtnPassengerEnter_K2Node_ComponentBoundEvent_428_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__Button_Left_Braking_K2Node_ComponentBoundEvent_142_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_Left_Braking_K2Node_ComponentBoundEvent_89_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_Right_Braking_K2Node_ComponentBoundEvent_130_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_Right_Braking_K2Node_ComponentBoundEvent_77_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Left_Down_K2Node_ComponentBoundEvent_1006_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Left_Down_K2Node_ComponentBoundEvent_961_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Left_Up_K2Node_ComponentBoundEvent_874_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Left_Up_K2Node_ComponentBoundEvent_917_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Right_Down_K2Node_ComponentBoundEvent_747_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Right_Down_K2Node_ComponentBoundEvent_832_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Right_Up_K2Node_ComponentBoundEvent_677_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__Button_SWMode_Right_Up_K2Node_ComponentBoundEvent_791_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Button_ShootingOnTheVehile_K2Node_ComponentBoundEvent_110_OnButtonClickedEvent__DelegateSignature();
  void BndEvt__DriveDown_K2Node_ComponentBoundEvent_477_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__DriveDown_K2Node_ComponentBoundEvent_495_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__DriveLeft_K2Node_ComponentBoundEvent_514_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__DriveLeft_K2Node_ComponentBoundEvent_534_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__DriveRight_K2Node_ComponentBoundEvent_555_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__DriveRight_K2Node_ComponentBoundEvent_577_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__DriveUp_K2Node_ComponentBoundEvent_447_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__DriveUp_K2Node_ComponentBoundEvent_460_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__LsideDriveLeft_K2Node_ComponentBoundEvent_444_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__LsideDriveLeft_K2Node_ComponentBoundEvent_479_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__LsideDriveRight_K2Node_ComponentBoundEvent_515_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__LsideDriveRight_K2Node_ComponentBoundEvent_552_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Lside_SliderThrottle_K2Node_ComponentBoundEvent_137_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void BndEvt__Lside_SliderThrottle_K2Node_ComponentBoundEvent_147_OnMouseCaptureEndEvent__DelegateSignature();
  void BndEvt__RightCarSpeaker_K2Node_ComponentBoundEvent_55_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__RightCarSpeaker_K2Node_ComponentBoundEvent_68_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__RsideDriveDown_K2Node_ComponentBoundEvent_378_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__RsideDriveDown_K2Node_ComponentBoundEvent_410_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__RsideDriveUp_K2Node_ComponentBoundEvent_334_OnButtonPressedEvent__DelegateSignature();
  void BndEvt__RsideDriveUp_K2Node_ComponentBoundEvent_347_OnButtonReleasedEvent__DelegateSignature();
  void BndEvt__Rside_SliderThrottle_K2Node_ComponentBoundEvent_100_OnMouseCaptureEndEvent__DelegateSignature();
  void BndEvt__Rside_SliderThrottle_K2Node_ComponentBoundEvent_43_OnFloatValueChangedEvent__DelegateSignature(float Value);
  void ButtonLRChanged(bool BoolValue);
  void ChangeCurrentUsingWeaponDelegate_Event(uint8 TargetChangeSlot);
  void CheckVehicleShootingState(UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam1, ULogicManagerBase* CallFunc_GetOwningLogicManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_CanVehicleShoot_ReturnValue);
  void Construct();
  void Destruct();
  void DriveTypeChanged(int32 IntValue);
  void ExecuteUbergraph_VehileControlPanel(int32 EntryPoint, FOnVehicleHPChangeDelegate K2Node_CreateDelegate_OutputDelegate, FChangeCurrentUsingWeaponDelegate K2Node_CreateDelegate_OutputDelegate2, FOnVehicleHPChangeDelegate K2Node_CreateDelegate_OutputDelegate3, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam1, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam12, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam13, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam14, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam15, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam16, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam17, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam18, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam19, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam110, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam111, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam112, USTExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam113, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam114, UGameBackendHUD* CallFunc_GetInstance_ReturnValue, int32 K2Node_CustomEvent_IntValue, UGameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, USaveGame* CallFunc_GetUserSettings_ReturnValue, USettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_BoolValue2, int32 CallFunc_Subtract_IntInt_ReturnValue2, bool K2Node_CustomEvent_BoolValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam115, float K2Node_ComponentBoundEvent_Value2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam116, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam117, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam118, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam119, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam120, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam121, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam122, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam123, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam124, float K2Node_ComponentBoundEvent_Value, float CallFunc_Subtract_FloatFloat_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam125, float CallFunc_Multiply_FloatFloat_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam126, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam127, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam128, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam129, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam130, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam131, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam132, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam133, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam134, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam135, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, FUserSettingsDelegate_Int K2Node_CreateDelegate_OutputDelegate4, bool CallFunc_IsValid_ReturnValue2, UWeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, uint8 K2Node_CustomEvent_TargetChangeSlot, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate5, FUserSettingsDelegate_Bool K2Node_CreateDelegate_OutputDelegate6, UBP_SAVEGAME_UIElemLayout_C* K2Node_Event_SaveGame, int32 K2Node_Event_LayoutIndex, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam136, bool K2Node_SwitchEnum_CmpSuccess, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue2, int32 CallFunc_Array_Add_ReturnValue3, int32 CallFunc_Array_Add_ReturnValue4, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam137, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam138, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam139, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam140);
  void GetVehicleUser(UBP_VehicleUser_C* NewParam1, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, UBP_VehicleUser_C* CallFunc_GetComponentByClass_ReturnValue);
  void HideEnterVehiclePanel();
  void HideVehicleControlGUI(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2);
  void InitWheelsInfo(UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam1, bool K2Node_SwitchEnum_CmpSuccess);
  void JoystickLRChanged(bool BoolValue);
  void LeanOutVehicleChanged(ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_HasState_ReturnValue);
  void OnVehicleChange();
  void OnVehicleHPChange(float Health, float RatioHealth, AController* Controller, float red, float pink, float CallFunc_FClamp_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);
  void PlayBtnAnim(UWidgetAnimation* AnimToPlay, UWidgetAnimation* AnimToStop, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);
  void ReceivedInitWidget();
  void Reconnect_ResetUIByPlayerControllerState(APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ASTExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue, ASTExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool K2Node_SwitchEnum_CmpSuccess);
  void RefreshWheelsInfo(struct FColor WheelColor, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, bool K2Node_SwitchInteger_CmpSuccess, int32 CallFunc_Add_IntInt_ReturnValue, struct FColor K2Node_MakeStruct_Color, struct FLinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, struct FColor K2Node_MakeStruct_Color2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam1, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);
  void SetCustomizeUIInfo(UBP_SAVEGAME_UIElemLayout_C* SaveGame, int32 LayoutIndex);
  void SetSettingControlUI();
  void SetSliderPercent(float percent);
  void SetSteeringValue(float Value, float CallFunc_Multiply_FloatFloat_ReturnValue);
  void SetThrottleValue(float Value, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
  void ShowEnterVehiclePanel(bool CanDrive, bool CanRide);
  void ShowVehicleControlGUI(bool IsDriving, ASTExtraPlayerCharacter* CallFunc_GetOwningPlayerPawnOrVehicleDriver_ReturnValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam1, bool CallFunc_IsValid_ReturnValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam12, bool CallFunc_IsValid_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam13, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CanUseVehicleHorn_ReturnValue, bool CallFunc_CanVehicleShoot_ReturnValue, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam14, APlayerController* CallFunc_GetOwningPlayer_ReturnValue, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, APlayerController* CallFunc_GetOwningPlayer_ReturnValue2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam15, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam16, UBP_VehicleUser_C* CallFunc_GetVehicleUser_NewParam17, APlayerController* CallFunc_GetOwningPlayer_ReturnValue3, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, APlayerController* CallFunc_GetOwningPlayer_ReturnValue4, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4, APlayerController* CallFunc_GetOwningPlayer_ReturnValue5, ABP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess5);
  void UpdateGUIFuel(float Fuel, float FuelMax, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FVector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, struct FVector2D CallFunc_MakeVector2D_ReturnValue);
  void UpdateGUIHP(float HP, float HPMax, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
  void UpdateGUISeats(TArray<uint8> SeatGUITypes, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, uint8 CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, UImage* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue);
  void UpdateGUISpeed(float RawSpeed, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, int32 CallFunc_Round_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue);
};

class UVerticalBox: public UPanelWidget {
  UVerticalBoxSlot* AddChildToVerticalBox(UWidget* content);
};

class UVerticalBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0010001000000015 */ struct FSlateChildSize Size;
  /* offset=0x003c flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x003d flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetSize(struct FSlateChildSize InSize);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UVideoCaptureSettings: public UFrameGrabberProtocolSettings {
  /* offset=0x0024 flags=0x0018001040004201 */ bool bUseCompression;
  /* offset=0x0028 flags=0x0018001040004201 */ float CompressionQuality;
  /* offset=0x002c flags=0x0018040000004201 */ FString VideoCodec;
};

class UViewport: public UContentWidget {
  /* offset=0x00d8 flags=0x0018001040000001 */ struct FLinearColor BackgroundColor;

  struct FVector GetViewLocation();
  struct FRotator GetViewRotation();
  UWorld* GetViewportWorld();
  void SetViewLocation(struct FVector Location);
  void SetViewRotation(struct FRotator Rotation);
  AActor* Spawn(UClass<AActor>* ActorClass);
};

class UVisibilityBinding: public UPropertyBinding {
  enum ESlateVisibility GetValue();
};

class UVisual: public UObject {
};

class UVisualLoggerAutomationTests: public UObject {
};

class UVisualLoggerDebugSnapshotInterface: public UInterface {
};

class UVisualLoggerExtension: public UObject {
};

class UVisualLoggerKismetLibrary: public UBlueprintFunctionLibrary {
  void LogBox(UObject* WorldContextObject, struct FBox BoxShape, FString Text, struct FLinearColor ObjectColor, FName LogCategory);
  void LogLocation(UObject* WorldContextObject, struct FVector Location, FString Text, struct FLinearColor ObjectColor, float Radius, FName LogCategory);
  void LogText(UObject* WorldContextObject, FString Text, FName LogCategory);
};

class UVoiceChannel: public UChannel {
};

class UVoiceCheckObject: public UObject {
  /* offset=0x001c flags=0x0018001040010215 */ int32 MaxCount;
  /* offset=0x0020 flags=0x0018001040010201 */ int32 maxShowCount;
  /* offset=0x0024 flags=0x0018001040010201 */ float maxShowAlpha;
  /* offset=0x0028 flags=0x0018001040010201 */ float nowViewDis;
  /* offset=0x002c flags=0x0018001040010201 */ float MoveMaxShowDis;
  /* offset=0x0030 flags=0x0018001040010201 */ float WeaponMaxShowDis;
  /* offset=0x0034 flags=0x0018001040010201 */ float VehicleMaxShowDis;
  /* offset=0x0038 flags=0x0010008000000204 */ TArray<struct FVoiceCheckObjectNode> imageList;
  /* offset=0x0044 flags=0x0018001040000204 */ ASTExtraPlayerController* PlayerController;

  void AddCharacterMoveVoice(ASTExtraBaseCharacter* Character, struct FVector posVector, float showTime);
  void AddVehicleVoice(ASTExtraVehicleBase* Vehicle, struct FVector posVector, float showTime);
  void AddWeaponShotVoice(ASTExtraShootWeapon* Weapon, struct FVector posVector, float showTime, bool isslience);
  void VoiceTick(float DeltaTime);
};

class AVolume: public ABrush {
};

class UWaterHeightmapComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0018001040000205 */ float DesiredCellSize;
  /* offset=0x00b0 flags=0x0018001040000205 */ bool bOnlyCollidingComponents;
  /* offset=0x00b4 flags=0x0018001040000205 */ float GridSizeMultiplier;
  /* offset=0x00b8 flags=0x0018001040000205 */ bool bDrawUsedTriangles;
  /* offset=0x00b9 flags=0x0018001040000205 */ bool bDrawHeightmap;
  /* offset=0x010c flags=0x0048001040000200 */ AOceanManager* OceanManager;
};

class AWaterSwimObject_C: public AActor {
  /* offset=0x02a8 flags=0x0000000000202000 */ struct FPointerToUberGraphFrame UberGraphFrame;
  /* offset=0x02ac flags=0x0008001440000204 */ UGameEventListener* GameEventListener;
  /* offset=0x02b0 flags=0x0008001440000204 */ UParticleSystemComponent* P_Water_down_01;
  /* offset=0x02b4 flags=0x0008001440000204 */ UAkComponent* Ak;
  /* offset=0x02b8 flags=0x0008001440000204 */ UPostProcessComponent* PostProcess;
  /* offset=0x02bc flags=0x0008001440000204 */ UBoxComponent* PostSceneBox;
  /* offset=0x02c0 flags=0x0008001440000204 */ UStaticMeshComponent* watermesh;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;
  /* offset=0x02c8 flags=0x0008001040010205 */ float Gamma;
  /* offset=0x02d0 flags=0x0000000000010005 */ struct FPostProcessSettings NewVar;
  /* offset=0x07a0 flags=0x0000000000010a05 */ TArray<ASTExtraBaseCharacter*> PlayerList;
  /* offset=0x07ac flags=0x0008001040010205 */ uint8 NewVar;
  /* offset=0x07b0 flags=0x0008001040010205 */ float FogDensity;
  /* offset=0x07b4 flags=0x0008001040010a05 */ AExponentialHeightFog* heightfog;

  void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
  void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void CustomEvent(uint8 gamePawnEvent);
  void ExecuteUbergraph_WaterSwimObject(int32 EntryPoint, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, AActor* K2Node_ComponentBoundEvent_OtherActor2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int32 K2Node_ComponentBoundEvent_OtherBodyIndex2, UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, AActor* K2Node_ComponentBoundEvent_OtherActor, UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult K2Node_ComponentBoundEvent_SweepResult, USceneComponent* CallFunc_GetAttachParent_ReturnValue, USceneComponent* CallFunc_GetAttachParent_ReturnValue2, UCameraComponent* K2Node_DynamicCast_AsCamera_Component, bool K2Node_DynamicCast_bSuccess, UCameraComponent* K2Node_DynamicCast_AsCamera_Component2, bool K2Node_DynamicCast_bSuccess2, USceneComponent* CallFunc_GetAttachParent_ReturnValue3, bool CallFunc_ComponentHasTag_ReturnValue, UCameraComponent* K2Node_DynamicCast_AsCamera_Component3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_ComponentHasTag_ReturnValue2, bool CallFunc_IsCapsult_returnvalue, USceneComponent* CallFunc_GetAttachParent_ReturnValue4, bool CallFunc_ComponentHasTag_ReturnValue3, UCameraComponent* K2Node_DynamicCast_AsCamera_Component4, bool K2Node_DynamicCast_bSuccess4, ABP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base, bool K2Node_DynamicCast_bSuccess5, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess7, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess8, bool CallFunc_IsLocalControlOrView_ret, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, USceneComponent* CallFunc_GetAttachParent_ReturnValue5, bool CallFunc_ComponentHasTag_ReturnValue4, UCameraComponent* K2Node_DynamicCast_AsCamera_Component5, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_ComponentHasTag_ReturnValue5, bool CallFunc_IsCapsult_returnvalue2, USceneComponent* CallFunc_GetAttachParent_ReturnValue6, bool CallFunc_ComponentHasTag_ReturnValue6, UCameraComponent* K2Node_DynamicCast_AsCamera_Component6, bool K2Node_DynamicCast_bSuccess10, ABP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base2, bool K2Node_DynamicCast_bSuccess11, ABP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsLocallyControlled_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue4, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess13, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess14, bool CallFunc_IsLocalControlOrView_ret2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, FGamePawnEventDelegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsDedicatedServer_ReturnValue, uint8 K2Node_CustomEvent_gamePawnEvent, bool K2Node_SwitchEnum_CmpSuccess);
  void HideUnderWaterEffect(UStaticMeshComponent* WaterPlane, UExponentialHeightFogComponent* CamFog, int32 CallFunc_PostAkEvent_ReturnValue);
  void InitWaterMaterial(AGameStateBase* CallFunc_GetGameState_ReturnValue, ASTExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);
  bool IsCapsult(UObject* PlayerPawn, UActorComponent* comp, ABP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
  void ReceiveBeginPlay();
  void SetWateMaterial(bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, UGameInstance* CallFunc_GetGameInstance_ReturnValue, USTExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsOpenLDR_ReturnValue, int32 CallFunc_GetUserHDRSetting_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2);
  void ShowUnderWaterEffect(UStaticMeshComponent* WaterPlane, UExponentialHeightFogComponent* CamFog, int32 ___int_Array_Index_Variable, int32 ___int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<AExponentialHeightFog*> CallFunc_GetAllActorsOfClass_OutActors, AExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_PostAkEvent_ReturnValue);
  void UserConstructionScript();
};

class UWeakObjectProperty: public UObjectPropertyBase {
};

class UWeakRefImage: public UImage {
  void LoadTextureResource(bool bAsync);
  void UnloadTextureResource();
};

class UWeaponAnimList_Grenade_C: public UUAECharacterAnimListComponent {
};

class UWeaponAntiCheatComp: public UWeaponLogicBaseComponent {
  /* offset=0x00dc flags=0x0028081040004200 */ float ShootRateCheckInterval;
  /* offset=0x00e0 flags=0x0028081040004200 */ int32 MaxShootInOneFrame;
  /* offset=0x00e4 flags=0x0028081040004200 */ float ShootRateMulCoff;
  /* offset=0x00e8 flags=0x0028081040004200 */ bool ShootRateCheckTag;

  void OnWeaponReloaded();
  void OnWeaponShootHit(struct FShootWeaponDamageEvent DamageDetail, struct FBulletHitInfoUploadData HitData, struct FLocalShootHitData LocalHitData);
  void OnWeaponStartFire();
  void OnWeaponStopFire();
};

class UWeaponAutoAimingComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0020080000000200 */ TArray<struct FEnemyInfo> enemyList;
  /* offset=0x027c flags=0x0028081040000000 */ struct FVector2D screenCenter;
  /* offset=0x0284 flags=0x0020081000000000 */ struct FCDInfo CDInfo;
  /* offset=0x0290 flags=0x0020081000000000 */ struct FEnemyInfo SelectInfo;
  /* offset=0x02b8 flags=0x0020081000000000 */ struct FEnemyInfo LastSelectInfo;
  /* offset=0x02e0 flags=0x0028081040000205 */ APlayerController* PlayerController;
  /* offset=0x02e4 flags=0x0028081040000205 */ ASTExtraBaseCharacter* PlayerPawn;
  /* offset=0x02f4 flags=0x0018001040010215 */ float AIM_CD_WHEN_OPERATE_CAMERA;
  /* offset=0x02f8 flags=0x0018001040010215 */ float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;
  /* offset=0x02fc flags=0x0018001040010215 */ float AIM_CD_SCOPE_OPEN;
  /* offset=0x0300 flags=0x0018001040010215 */ float AIM_CD_WHEN_OPEN_FIRE;
  /* offset=0x0304 flags=0x0018001040010215 */ float AIM_HOLD_WHEN_OPEN_FIRE;
  /* offset=0x0308 flags=0x0018001040010215 */ float AIM_CD_TIME_LIMIT;
  /* offset=0x030c flags=0x0018001040010215 */ float DEFAULT_CD_TIME;
  /* offset=0x0310 flags=0x0010000000010215 */ TArray<FName> Bones;
  /* offset=0x031c flags=0x0018001040000204 */ bool bShowDebug;
  /* offset=0x031d flags=0x0018001040000204 */ bool bEquipWeapon;
  /* offset=0x031e flags=0x0018001040000200 */ bool bInit;

  bool CanEnemeyRaycastReach(struct FVector startPoint, ASTExtraPlayerCharacter* Pawn);
  void ClearCD();
  void HandleShoot(ASTExtraWeapon* Weapon);
  void Init(AController* Controller);
  void OnEquipWeapon();
  void OnUnEquipWeapon();
  ASTExtraPlayerCharacter* SelectAimTarget(float DeltaTime);
  void SetCD(float CDTime);
  void TryDoAiming(float DeltaTime);
};

class UWeaponAvatarComponent: public UAvatarComponent {
  /* offset=0x04f0 flags=0x0010000000000214 */ TMap<struct FMiniItem, struct FWeaponAttachmentConfig> attachmentRef;

  bool ApplySkeletalMeshByID(int32 Slot, USkeletalMesh* Mesh, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  bool ApplyStaticMeshByID(int32 Slot, UStaticMesh* pSM, UMaterialInstance* Mat, UBattleItemHandleBase* Handle);
  void ClearMeshByItemHandle(UBattleItemHandleBase* ItemHandle);
  void ClearMeshBySlot(int32 Slot, bool putDefault);
  UMeshComponent* GetAttachmentSocketTransform(int32 slotID);
  FName GetSocketName(int32 slotID, int32 subSlotID);
  void InitDefaultMesh(UBattleItemHandleBase* Handle);
  void InitialAvatarParam(int32 AGender);
  void NetSyncData(int32 Slot, enum ESyncOperation Type, UBattleItemHandleBase* Handle);
  void OnAttachItemLoaded(struct FItemDefineID DefineID, UBattleItemHandleBase* ItemHandle);
  void OnItemHandleLoaded(struct FItemDefineID DefineID, UBattleItemHandleBase* ItemHandle);
  bool PutOnEquipmentByItemHandle(UBattleItemHandleBase* ItemHandle, USkeletalMesh* skMesh, UStaticMesh* stMesh);
  void SwapAttachment(enum EWeaponAttachmentSocketType slotID, bool isExchange);
};

class UWeaponEffectComponent: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0010000000010201 */ TMap<uint8, UAkAudioEvent*> SoundDataMap;
  /* offset=0x00ec flags=0x0018001040010201 */ UAkAudioEvent* ShellDropSound;
  /* offset=0x00f0 flags=0x0018001040010201 */ UAkAudioEvent* SilencerShootSound;

  void HandleWeaponAction(uint8 Action);
};

class UWeaponEntity: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0018001040010201 */ uint8 WeaponType;
  /* offset=0x00b1 flags=0x0018001040010201 */ uint8 WeaponHoldType;
  /* offset=0x00b8 flags=0x0018001040010201 */ FName WeaponAttachSocket;
  /* offset=0x00c0 flags=0x0018001040010201 */ bool bUseCustomWeaponBackpackAttachSocket;
  /* offset=0x00c8 flags=0x0018001040010201 */ FName CustomWeaponBackpackAttachSocket;
  /* offset=0x00d0 flags=0x0010000000010201 */ TMap<uint8, bool> PlugComponentSlotMap;
  /* offset=0x010c flags=0x0010000000000214 */ TMap<uint8, struct FWeaponComponentItemData> PlugComponentSlotDataMap;
  /* offset=0x0148 flags=0x0018001040010215 */ float SwitchFromIdleToBackpackTime;
  /* offset=0x014c flags=0x0018001040010215 */ float SwitchFromBackpackToIdleTime;
};

class UWeaponEquipmentSlot_C: public UUserWidget {
  /* offset=0x01b0 flags=0x000a0010c008020c */ UImage* HighLightFrame;
  /* offset=0x01b4 flags=0x000a0010c008020c */ UImage* ProfileImg;
  /* offset=0x01b8 flags=0x0000000000000005 */ struct FSlateBrush DefaultImg;
  /* offset=0x0220 flags=0x0008001040000205 */ uint8 ComponentType;
  /* offset=0x0221 flags=0x0008001040010205 */ enum ESlateVisibility HightLight;
  /* offset=0x0224 flags=0x0008001040010205 */ int32 TargetItemID;
  /* offset=0x0228 flags=0x0008001040010205 */ uint8 WeaponSlotID;
  /* offset=0x0229 flags=0x0008001040010205 */ uint8 WeaponSlotType;
  /* offset=0x022a flags=0x0000001040010205 */ bool IsFilled;

  bool OnDrop(struct FGeometry MyGeometry, struct FPointerEvent PointerEvent, UDragDropOperation* Operation);
  struct FEventReply OnMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent, struct FEventReply K2Node_MakeStruct_EventReply);
  struct FEventReply OnTouchEnded(struct FGeometry MyGeometry, struct FPointerEvent InTouchEvent, struct FEventReply CallFunc_Handled_ReturnValue);
  void UpdateData(ASTExtraShootWeapon* Weapon, bool CallFunc_IsValid_ReturnValue, bool CallFunc_JudgeHasEquipedComponentSlot_ReturnValue, struct FWeaponComponentItemData CallFunc_GetComponentSlotTarget_ReturnValue);
};

class UWeaponLogicBaseComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0028081040000200 */ ASTExtraWeapon* OwnerWeapon;
};

class UWeaponManagerComponent: public UActorComponent {
  /* offset=0x00ac flags=0x0010000000010215 */ TMap<FName, FName> LogicSocketToWeaponAttachSocketMap;
  /* offset=0x00e8 flags=0x0010000000010215 */ TMap<FName, uint8> LogicSocketToPropSlotMap;
  /* offset=0x0124 flags=0x0014000000010215 */ TMap<FName, UClass<ASTExtraWeapon>*> GrenadeLogicSocketToWeaponClassMap;
  /* offset=0x0160 flags=0x0018001040000214 */ FName CurUseWeaponLogicSocket;
  /* offset=0x0168 flags=0x0018001040000214 */ bool bIsSwitching;
  /* offset=0x0170 flags=0x0018001040000214 */ FName LastUseNoneGrenadeLogicSlot;
  /* offset=0x0178 flags=0x0018001040000214 */ FName LastUseLogicSlot;
  /* offset=0x0180 flags=0x0018001040000204 */ bool bUIHasBoundDelegate;
  /* offset=0x0181 flags=0x0018001040000214 */ bool bClientHasFinishedHandleSpawnWeapon;
  /* offset=0x0184 flags=0x0010000010080200 */ FLocalBackpackCurerrentWeaponFinishDelegate LocalBackpackCurerrentWeaponFinishDelegate;
  /* offset=0x0190 flags=0x0010000010080200 */ FChangeCurrentUsingWeaponDelegate ChangeCurrentUsingWeaponDelegate;
  /* offset=0x019c flags=0x0010000010080200 */ FChangeInventoryDataDelegate ChangeInventoryDataDelegate;
  /* offset=0x01a8 flags=0x0010000010080200 */ FLocalEquipWeaponFromBackpackFinishedDelegate LocalEquipWeaponFromBackpackFinishedDelegate;
  /* offset=0x01b4 flags=0x0020080000000200 */ TMap<FName, ASTExtraWeapon*> InventoryData;
  /* offset=0x01f0 flags=0x0020080000000200 */ TMap<FName, struct FItemDefineID> GrenadeLogicSlotAndDefineIDData;
  /* offset=0x022c flags=0x0020080000000200 */ TArray<ASTExtraWeapon*> BackpackPistolList;
  /* offset=0x0240 flags=0x0020081100000024 */ struct FSpawnAndBackpackWeaponReplicatedData SpawnAndBackpackWeaponReplicatedData;
  /* offset=0x0278 flags=0x0020081100000024 */ struct FWeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;
  /* offset=0x02b0 flags=0x0020081100000024 */ struct FWeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;
  /* offset=0x02e8 flags=0x0020081100000024 */ struct FWeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;
  /* offset=0x0320 flags=0x0028081140000234 */ ASTExtraWeapon* CurrentWeaponReplicated;
  /* offset=0x0324 flags=0x0028081040000214 */ ASTExtraWeapon* CurrentWeaponSimulate;

  void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, struct FItemDefineID ID);
  void ChangeCurrentUsingWeaponDelegate__DelegateSignature(uint8 TargetChangeSlot);
  void ChangeInventoryDataDelegate__DelegateSignature(uint8 TargetChangeSlot);
  void DebugDisconnetToServerOnClient();
  void DebugReconnectToClientOnServer();
  void DeleteGrenadeSlotAndDefindID(FName LogicSlot);
  void EnableAllBroadcast(bool bEnable);
  void ForceBroadcastChangeAllInventoryDataEvent();
  TArray<ASTExtraWeapon*> GetAllInventoryWeaponList();
  FName GetCurrentUsingLogicSocket();
  FName GetCurrentUsingLogicSocketOnServer();
  uint8 GetCurrentUsingPropSlot();
  ASTExtraWeapon* GetCurrentUsingWeapon();
  struct FItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);
  FName GetGrenadeSpecificSlotNameByWeapon(ASTExtraWeapon* Weapon);
  ASTExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);
  ASTExtraWeapon* GetInventoryWeaponByPropSlot(uint8 Slot);
  FName GetLogicSocketBySlot(uint8 Slot);
  uint8 GetPropSlotByLogicSocket(FName LogicSocket);
  void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();
  void LocalBackpackCurerrentWeaponFinishedCallback();
  void LocalEquipWeaponFromBackpackFinishedCallback();
  void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();
  void LocalForceFinishSwitchWeapon();
  void LogInventoryDataInfo();
  void OnReconnectOnClient();
  void OnReconnectOnServer();
  void OnRep_CurrentWeaponReplicated();
  void OnRep_SpawnAndBackpackWeaponReplicatedData();
  void OnRep_WeaponSystemDataOnSimulateClientSlot1();
  void OnRep_WeaponSystemDataOnSimulateClientSlot2();
  void OnRep_WeaponSystemDataOnSimulateMeleeSlot();
  void SwitchWeaponByLogicSocket_IdleToBackpackFinished();
  void SwitchWeaponBySlot(uint8 Slot, bool bUseAnimation);
};

class UWeaponOwnerProxy: public UObject {
  /* offset=0x0028 flags=0x0028081040000200 */ AActor* OwnerActor;
  /* offset=0x002c flags=0x0028081040000200 */ APawn* OwnerPawn;
  /* offset=0x0030 flags=0x0028081040000200 */ AController* OwnerController;
  /* offset=0x0034 flags=0x0028081040000200 */ ASTExtraWeapon* BindedWeapon;

  AActor* GetOwnerActor();
  AController* GetOwnerController();
  APawn* GetOwnerPawn();
  APlayerController* GetOwnerPlayerController();
  ASTExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();
  ASTExtraPlayerController* GetOwnerSTExtraPlayerController();
  void HandlePlayerChangePose(uint8 LastPose, uint8 NewPose);
  void HandlePlayerSwitchCameraMode(uint8 Mode);
  void OnWeaponStopFireDelegate__DelegateSignature();
};

class UWeaponOwnerProxyFactory: public UInterface {
  UWeaponOwnerProxy* GetWeaponOwnerProxy();
};

class UWeaponPreFireState: public UWeaponStateBase {
  /* offset=0x00f0 flags=0x0028081040000200 */ ASTExtraShootWeapon* OwnerShootWeapon;
};

class UWeaponSpecificHandler: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0018001000000014 */ struct FItemDefineID ItemDefineID;
  /* offset=0x00c8 flags=0x0018001040000214 */ FName LogicSocket;
  /* offset=0x00d0 flags=0x0018001040000214 */ FName AttachSocket;
  /* offset=0x00d8 flags=0x0018001040000214 */ uint8 SurviveWeaponPropSlot;

  UItemHandleBase* GetBackpackItemHandle();
};

class UWeaponStateBase: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0018001040000201 */ bool bNeedConditionGateCheck;
  /* offset=0x00b1 flags=0x0018001040000214 */ uint8 FreshWeaponStateType;
};

class UWeaponStateDefault: public UWeaponStateBase {
};

class UWeaponStateManager: public UWeaponLogicBaseComponent {
  /* offset=0x00b0 flags=0x0028081040080208 */ UWeaponStateBase* CurrentState;
  /* offset=0x00b4 flags=0x0028081040080208 */ UWeaponStateBase* DefaultState;

  uint8 GetCurrentFreshWeaponStateType();
  UWeaponStateBase* GetCurrentState();
};

class UWeatherConfigComponent: public UActorComponent {
  /* offset=0x00b0 flags=0x0020080000000215 */ TArray<struct FWeatherLevelInfo> WeatherLevelInfo;
  /* offset=0x00bc flags=0x0028081040000234 */ uint8 WeatherType;
  /* offset=0x00c0 flags=0x0028080000000234 */ FString WeatherLevelName;
  /* offset=0x00cc flags=0x0028081140000234 */ int32 WeatherSyncCount;
  /* offset=0x00d0 flags=0x0028080000000214 */ FString LastLoadedWeahterLevelName;
  /* offset=0x00dc flags=0x0028081040000200 */ bool bHasRandomWeatherLevel;
  /* offset=0x00dd flags=0x0028081040000204 */ bool bLoadWeatherLevel;

  void BlueprintLoadStreamLevel();
  void BlueprintUnloadStreamLevel();
  struct FWeatherLevelInfo GetWeatherLevelInfo(uint8 WeatherType);
  void Init();
  void LoadStreamLevel(FString LevelName);
  void LoadWeatherConfig();
  void OnRep_WeatherSyncCount();
  void RandomWeatherLevel();
  void SyncWeatherLevelInfo();
  void UnloadStreamLevel(FString LevelName);
};

class AWheeledVehicle: public APawn {
  /* offset=0x02ec flags=0x00480010400b021d */ USkeletalMeshComponent* Mesh;
  /* offset=0x02f0 flags=0x00480010400b021d */ UWheeledVehicleMovementComponent* VehicleMovement;
};

class UWheeledVehicleMovementComponent: public UPawnMovementComponent {
  /* offset=0x0118 flags=0x0018001000000001 */ uint8 bDeprecatedSpringOffsetMode:1;
  /* offset=0x011c flags=0x0010000000000201 */ TArray<struct FWheelSetup> WheelSetups;
  /* offset=0x0128 flags=0x0018001040000201 */ float Mass;
  /* offset=0x012c flags=0x0018001040000201 */ float DragCoefficient;
  /* offset=0x0130 flags=0x0018001040000201 */ float ChassisWidth;
  /* offset=0x0134 flags=0x0018001040000201 */ float ChassisHeight;
  /* offset=0x0138 flags=0x0018001040000201 */ bool bReverseAsBrake;
  /* offset=0x013c flags=0x0018001040002200 */ float DragArea;
  /* offset=0x0140 flags=0x0018001040002200 */ float EstimatedMaxEngineSpeed;
  /* offset=0x0144 flags=0x0018001040002200 */ float MaxEngineRPM;
  /* offset=0x0148 flags=0x0018001040002200 */ float DebugDragMagnitude;
  /* offset=0x014c flags=0x0018041040000001 */ struct FVector InertiaTensorScale;
  /* offset=0x0158 flags=0x0018041040000201 */ float MinNormalizedTireLoad;
  /* offset=0x015c flags=0x0018041040000201 */ float MinNormalizedTireLoadFiltered;
  /* offset=0x0160 flags=0x0018041040000201 */ float MaxNormalizedTireLoad;
  /* offset=0x0164 flags=0x0018041040000201 */ float MaxNormalizedTireLoadFiltered;
  /* offset=0x0168 flags=0x0018041040000201 */ float ThresholdLongitudinalSpeed;
  /* offset=0x016c flags=0x0018041040000201 */ int32 LowForwardSpeedSubStepCount;
  /* offset=0x0170 flags=0x0018041040000201 */ int32 HighForwardSpeedSubStepCount;
  /* offset=0x0174 flags=0x0010000000202214 */ TArray<UVehicleWheel*> Wheels;
  /* offset=0x018c flags=0x0018001000000005 */ uint8 bUseRVOAvoidance:1;
  /* offset=0x0190 flags=0x0018001040000205 */ float RVOAvoidanceRadius;
  /* offset=0x0194 flags=0x0018001040000205 */ float RVOAvoidanceHeight;
  /* offset=0x0198 flags=0x0018001040000205 */ float AvoidanceConsiderationRadius;
  /* offset=0x019c flags=0x0018001040000205 */ float RVOSteeringStep;
  /* offset=0x01a0 flags=0x0018001040000205 */ float RVOThrottleStep;
  /* offset=0x01a4 flags=0x0018041040020215 */ int32 AvoidanceUID;
  /* offset=0x01a8 flags=0x0010041040000015 */ struct FNavAvoidanceMask AvoidanceGroup;
  /* offset=0x01ac flags=0x0010041040000015 */ struct FNavAvoidanceMask GroupsToAvoid;
  /* offset=0x01b0 flags=0x0010041040000015 */ struct FNavAvoidanceMask GroupsToIgnore;
  /* offset=0x01b4 flags=0x0018001040000215 */ float AvoidanceWeight;
  /* offset=0x01b8 flags=0x0018001040000000 */ struct FVector PendingLaunchVelocity;
  /* offset=0x01c4 flags=0x0020081040002020 */ struct FReplicatedVehicleState ReplicatedState;
  /* offset=0x01dc flags=0x0028081040002200 */ float RawSteeringInput;
  /* offset=0x01e0 flags=0x0028081040002200 */ float RawThrottleInput;
  /* offset=0x01e4 flags=0x0028081040002200 */ float RawBrakeInput;
  /* offset=0x01e8 flags=0x0028081000002000 */ uint8 bRawHandbrakeInput:1;
  /* offset=0x01e8 flags=0x0028081000002000 */ uint8 bRawGearUpInput:1;
  /* offset=0x01e8 flags=0x0028081000002000 */ uint8 bRawGearDownInput:1;
  /* offset=0x01ec flags=0x0028081040002200 */ float SteeringInput;
  /* offset=0x01f0 flags=0x0028081040002200 */ float ThrottleInput;
  /* offset=0x01f4 flags=0x0028081040002200 */ float BrakeInput;
  /* offset=0x01f8 flags=0x0028081040002200 */ float HandbrakeInput;
  /* offset=0x01fc flags=0x0028081040000201 */ float IdleBrakeInput;
  /* offset=0x0200 flags=0x0028081040000201 */ float StopThreshold;
  /* offset=0x0204 flags=0x0028081040000201 */ float WrongDirectionThreshold;
  /* offset=0x0208 flags=0x00200c1000000001 */ struct FVehicleInputRate ThrottleInputRate;
  /* offset=0x0210 flags=0x00200c1000000001 */ struct FVehicleInputRate BrakeInputRate;
  /* offset=0x0218 flags=0x00200c1000000001 */ struct FVehicleInputRate HandbrakeInputRate;
  /* offset=0x0220 flags=0x00200c1000000001 */ struct FVehicleInputRate SteeringInputRate;
  /* offset=0x0228 flags=0x0028081000002000 */ uint8 bWasAvoidanceUpdated:1;

  int32 GetCurrentGear();
  float GetEngineMaxRotationSpeed();
  float GetEngineRotationSpeed();
  float GetForwardSpeed();
  int32 GetTargetGear();
  bool GetUseAutoGears();
  /* SRV */ void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int32 CurrentGear);
  void SetAvoidanceEnabled(bool bEnable);
  void SetAvoidanceGroup(int32 GroupFlags);
  void SetAvoidanceGroupMask(struct FNavAvoidanceMask GroupMask);
  void SetBrakeInput(float Brake);
  void SetGearDown(bool bNewGearDown);
  void SetGearUp(bool bNewGearUp);
  void SetGroupsToAvoid(int32 GroupFlags);
  void SetGroupsToAvoidMask(struct FNavAvoidanceMask GroupMask);
  void SetGroupsToIgnore(int32 GroupFlags);
  void SetGroupsToIgnoreMask(struct FNavAvoidanceMask GroupMask);
  void SetHandbrakeInput(bool bNewHandbrake);
  void SetPhysActive(bool bActive);
  void SetSteeringInput(float Steering);
  void SetTargetGear(int32 GearNum, bool bImmediate);
  void SetThrottleInput(float Throttle);
  void SetUseAutoGears(bool bUseAuto);
};

class UWheeledVehicleMovementComponent4W: public UWheeledVehicleMovementComponent {
  /* offset=0x0250 flags=0x0010000000000001 */ struct FVehicleEngineData EngineSetup;
  /* offset=0x02bc flags=0x0010001000000001 */ struct FVehicleDifferential4WData DifferentialSetup;
  /* offset=0x02d8 flags=0x0010000000000001 */ struct FVehicleTransmissionData TransmissionSetup;
  /* offset=0x0300 flags=0x0010000000000001 */ struct FRuntimeFloatCurve SteeringCurve;
  /* offset=0x0358 flags=0x0018041040000201 */ float AckermannAccuracy;
};

class UWidget: public UVisual {
  /* offset=0x001c flags=0x001a00104008021d */ UPanelSlot* Slot;
  /* offset=0x0020 flags=0x0010001000080200 */ FGetBool bIsEnabledDelegate;
  /* offset=0x0030 flags=0x0010000000000015 */ FText ToolTipText;
  /* offset=0x0040 flags=0x0010001000080200 */ FGetText ToolTipTextDelegate;
  /* offset=0x0050 flags=0x001804104008021d */ UWidget* ToolTipWidget;
  /* offset=0x0058 flags=0x0010001000080200 */ FGetWidget ToolTipWidgetDelegate;
  /* offset=0x0068 flags=0x0010001000080200 */ FGetSlateVisibility VisibilityDelegate;
  /* offset=0x0078 flags=0x0010001000000015 */ struct FWidgetTransform RenderTransform;
  /* offset=0x0094 flags=0x0018001040000015 */ struct FVector2D RenderTransformPivot;
  /* offset=0x009c flags=0x0018001000000000 */ uint8 bIsVariable:1;
  /* offset=0x009c flags=0x0018001000002000 */ uint8 bCreatedByConstructionScript:1;
  /* offset=0x009c flags=0x0018001000000015 */ uint8 bIsEnabled:1;
  /* offset=0x009c flags=0x0018001000000001 */ uint8 bOverride_Cursor:1;
  /* offset=0x009c flags=0x0028081000000015 */ uint8 bIsVolatile:1;
  /* offset=0x009c flags=0x0028081000000015 */ uint8 bWriteSceneZBuffer:1;
  /* offset=0x009d flags=0x0018041040000215 */ uint8 Cursor;
  /* offset=0x009e flags=0x0018001040000201 */ enum EWidgetClipping Clipping;
  /* offset=0x009f flags=0x0018001040000201 */ enum ESlateVisibility Visibility;
  /* offset=0x00a0 flags=0x001a00104008021d */ UWidgetNavigation* Navigation;
  /* offset=0x00bc flags=0x0020080000002200 */ TArray<UPropertyBinding*> NativeBindings;

  void ForceLayoutPrepass();
  void ForceVolatile(bool bForce);
  UWidget* GenerateWidgetForObject__DelegateSignature(UObject* Item);
  UWidget* GenerateWidgetForString__DelegateSignature(FString Item);
  bool GetBool__DelegateSignature();
  struct FGeometry GetCachedGeometry();
  enum ECheckBoxState GetCheckBoxState__DelegateSignature();
  enum EWidgetClipping GetClipping();
  struct FVector2D GetDesiredSize();
  float GetFloat__DelegateSignature();
  int32 GetInt32__DelegateSignature();
  bool GetIsEnabled();
  struct FLinearColor GetLinearColor__DelegateSignature();
  uint8 GetMouseCursor__DelegateSignature();
  APlayerController* GetOwningPlayer();
  UPanelWidget* GetParent();
  struct FSlateBrush GetSlateBrush__DelegateSignature();
  struct FSlateColor GetSlateColor__DelegateSignature();
  enum ESlateVisibility GetSlateVisibility__DelegateSignature();
  FText GetText__DelegateSignature();
  enum ESlateVisibility GetVisibility();
  UWidget* GetWidget__DelegateSignature();
  bool HasAnyUserFocus();
  bool HasFocusedDescendants();
  bool HasKeyboardFocus();
  bool HasMouseCapture();
  bool HasUserFocus(APlayerController* PlayerController);
  bool HasUserFocusedDescendants(APlayerController* PlayerController);
  void InvalidateLayoutAndVolatility();
  bool IsHovered();
  bool IsVisible();
  struct FEventReply OnPointerEvent__DelegateSignature(struct FGeometry MyGeometry, struct FPointerEvent MouseEvent);
  struct FEventReply OnReply__DelegateSignature();
  void RemoveFromParent();
  void ResetCursor();
  void SetAllNavigationRules(enum EUINavigationRule Rule, FName WidgetToFocus);
  void SetClipping(enum EWidgetClipping InClipping);
  void SetCursor(uint8 InCursor);
  void SetIsEnabled(bool bInIsEnabled);
  void SetKeyboardFocus();
  void SetNavigationRule(enum EUINavigation Direction, enum EUINavigationRule Rule, FName WidgetToFocus);
  void SetRenderAngle(float Angle);
  void SetRenderScale(struct FVector2D Scale);
  void SetRenderShear(struct FVector2D Shear);
  void SetRenderTransform(struct FWidgetTransform InTransform);
  void SetRenderTransformPivot(struct FVector2D Pivot);
  void SetRenderTranslation(struct FVector2D Translation);
  void SetToolTip(UWidget* Widget);
  void SetToolTipText(FText InToolTipText);
  void SetUserFocus(APlayerController* PlayerController);
  void SetVisibility(enum ESlateVisibility InVisibility);
};

class UWidgetAnimation: public UMovieSceneSequence {
  /* offset=0x0278 flags=0x0010000010080200 */ FOnWidgetAnimationPlaybackStatusChanged OnAnimationStarted;
  /* offset=0x0284 flags=0x0010000010080200 */ FOnWidgetAnimationPlaybackStatusChanged OnAnimationFinished;
  /* offset=0x0290 flags=0x0018001040080208 */ UMovieScene* MovieScene;
  /* offset=0x0294 flags=0x0010000000000200 */ TArray<struct FWidgetAnimationBinding> AnimationBindings;

  float GetEndTime();
  float GetStartTime();
};

class UWidgetBinding: public UPropertyBinding {
  UWidget* GetValue();
};

class UWidgetBlueprintGeneratedClass: public UBlueprintGeneratedClass {
  /* offset=0x01d4 flags=0x0018001040000200 */ UWidgetTree* WidgetTree;
  /* offset=0x01d8 flags=0x0018001000000000 */ uint8 bAllowTemplate:1;
  /* offset=0x01d8 flags=0x0048001000000000 */ uint8 bValidTemplate:1;
  /* offset=0x01d8 flags=0x0048001000002000 */ uint8 bTemplateInitialized:1;
  /* offset=0x01d8 flags=0x0048001000002000 */ uint8 bCookedTemplate:1;
  /* offset=0x01dc flags=0x0010000000000200 */ TArray<struct FDelegateRuntimeBinding> Bindings;
  /* offset=0x01e8 flags=0x0010008000000208 */ TArray<UWidgetAnimation*> Animations;
  /* offset=0x01f4 flags=0x0010000000000200 */ TArray<FName> NamedSlots;
  /* offset=0x0200 flags=0x004c000000080008 */ UUserWidget* TemplateAsset;
  /* offset=0x0228 flags=0x0048001040082208 */ UUserWidget* Template;
};

class UWidgetBlueprintLibrary: public UBlueprintFunctionLibrary {
  void CancelDragDrop();
  struct FEventReply CaptureJoystick(struct FEventReply Reply, UWidget* CapturingWidget, bool bInAllJoysticks);
  struct FEventReply CaptureMouse(struct FEventReply Reply, UWidget* CapturingWidget);
  struct FEventReply ClearUserFocus(struct FEventReply Reply, bool bInAllUsers);
  UUserWidget* Create(UObject* WorldContextObject, UClass<UUserWidget>* WidgetType, APlayerController* OwningPlayer);
  UDragDropOperation* CreateDragDropOperation(UClass<UDragDropOperation>* OperationClass);
  struct FEventReply DetectDrag(struct FEventReply Reply, UWidget* WidgetDetectingDrag, struct FKey DragKey);
  struct FEventReply DetectDragIfPressed(struct FPointerEvent PointerEvent, UWidget* WidgetDetectingDrag, struct FKey DragKey);
  void DismissAllMenus();
  void DrawBox(struct FPaintContext Context, struct FVector2D Position, struct FVector2D Size, USlateBrushAsset* Brush, struct FLinearColor Tint);
  void DrawLine(struct FPaintContext Context, struct FVector2D PositionA, struct FVector2D PositionB, struct FLinearColor Tint, bool bAntiAlias);
  void DrawLines(struct FPaintContext Context, TArray<struct FVector2D> Points, struct FLinearColor Tint, bool bAntiAlias);
  void DrawText(struct FPaintContext Context, FString inString, struct FVector2D Position, struct FLinearColor Tint);
  void DrawTextFormatted(struct FPaintContext Context, FText Text, struct FVector2D Position, UFont* Font, int32 FontSize, FName FontTypeFace, struct FLinearColor Tint);
  struct FEventReply EndDragDrop(struct FEventReply Reply);
  void GetAllWidgetsOfClass(UObject* WorldContextObject, TArray<UUserWidget*> FoundWidgets, UClass<UUserWidget>* WidgetClass, bool TopLevelOnly);
  void GetAllWidgetsWithInterface(UObject* WorldContextObject, UClass<UInterface>* Interface, TArray<UUserWidget*> FoundWidgets, bool TopLevelOnly);
  UObject* GetBrushResource(struct FSlateBrush Brush);
  UMaterialInterface* GetBrushResourceAsMaterial(struct FSlateBrush Brush);
  UTexture2D* GetBrushResourceAsTexture2D(struct FSlateBrush Brush);
  UDragDropOperation* GetDragDroppingContent();
  UMaterialInstanceDynamic* GetDynamicMaterial(struct FSlateBrush Brush);
  struct FInputEvent GetInputEventFromCharacterEvent(struct FCharacterEvent Event);
  struct FInputEvent GetInputEventFromKeyEvent(struct FKeyEvent Event);
  struct FInputEvent GetInputEventFromNavigationEvent(struct FNavigationEvent Event);
  struct FInputEvent GetInputEventFromPointerEvent(struct FPointerEvent Event);
  struct FKeyEvent GetKeyEventFromAnalogInputEvent(struct FAnalogInputEvent Event);
  void GetSafeZonePadding(UObject* WorldContextObject, struct FVector2D SafePadding, struct FVector2D SafePaddingScale, struct FVector2D SpillOverPadding);
  struct FEventReply Handled();
  bool IsDragDropping();
  struct FEventReply LockMouse(struct FEventReply Reply, UWidget* CapturingWidget);
  struct FSlateBrush MakeBrushFromAsset(USlateBrushAsset* BrushAsset);
  struct FSlateBrush MakeBrushFromMaterial(UMaterialInterface* Material, int32 Width, int32 Height);
  struct FSlateBrush MakeBrushFromTexture(UTexture2D* Texture, int32 Width, int32 Height);
  struct FSlateBrush NoResourceBrush();
  struct FEventReply ReleaseJoystickCapture(struct FEventReply Reply, bool bInAllJoysticks);
  struct FEventReply ReleaseMouseCapture(struct FEventReply Reply);
  void SetBrushResourceToMaterial(struct FSlateBrush Brush, UMaterialInterface* Material);
  void SetBrushResourceToTexture(struct FSlateBrush Brush, UTexture2D* Texture);
  void SetFocusToGameViewport();
  bool SetHardwareCursor(UObject* WorldContextObject, uint8 CursorShape, FName CursorName, struct FVector2D HotSpot);
  void SetInputMode_GameAndUI(APlayerController* Target, UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);
  void SetInputMode_GameAndUIEx(APlayerController* Target, UWidget* InWidgetToFocus, enum EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture);
  void SetInputMode_GameOnly(APlayerController* Target);
  void SetInputMode_UIOnly(APlayerController* Target, UWidget* InWidgetToFocus, bool bLockMouseToViewport);
  void SetInputMode_UIOnlyEx(APlayerController* Target, UWidget* InWidgetToFocus, enum EMouseLockMode InMouseLockMode);
  struct FEventReply SetMousePosition(struct FEventReply Reply, struct FVector2D NewMousePosition);
  struct FEventReply SetUserFocus(struct FEventReply Reply, UWidget* FocusWidget, bool bInAllUsers);
  struct FEventReply Unhandled();
  struct FEventReply UnlockMouse(struct FEventReply Reply);
};

class UWidgetComponent: public UMeshComponent {
  /* offset=0x05d9 flags=0x0028081040000201 */ enum EWidgetSpace Space;
  /* offset=0x05da flags=0x0028081040000201 */ enum EWidgetTimingPolicy TimingPolicy;
  /* offset=0x05dc flags=0x002c081040000201 */ UClass<UUserWidget>* WidgetClass;
  /* offset=0x05e0 flags=0x0028081040000001 */ struct FIntPoint DrawSize;
  /* offset=0x05e8 flags=0x0028081040000201 */ bool bManuallyRedraw;
  /* offset=0x05e9 flags=0x0028081040000200 */ bool bRedrawRequested;
  /* offset=0x05ec flags=0x0028081040000201 */ float RedrawTime;
  /* offset=0x05f8 flags=0x0028081040000000 */ struct FIntPoint CurrentDrawSize;
  /* offset=0x0600 flags=0x0028081040000201 */ bool bDrawAtDesiredSize;
  /* offset=0x0604 flags=0x0028081040000001 */ struct FVector2D Pivot;
  /* offset=0x060c flags=0x0028081040000201 */ bool bReceiveHardwareInput;
  /* offset=0x060d flags=0x0028081040000201 */ bool bWindowFocusable;
  /* offset=0x0610 flags=0x0028081040000200 */ ULocalPlayer* OwnerPlayer;
  /* offset=0x0614 flags=0x0028081040000001 */ struct FLinearColor BackgroundColor;
  /* offset=0x0624 flags=0x0028081040000001 */ struct FLinearColor TintColorAndOpacity;
  /* offset=0x0634 flags=0x0028081040000201 */ float OpacityFromTexture;
  /* offset=0x0638 flags=0x0028081040000201 */ enum EWidgetBlendMode BlendMode;
  /* offset=0x0639 flags=0x0028081040000201 */ bool bIsTwoSided;
  /* offset=0x063a flags=0x0028081040000201 */ bool TickWhenOffscreen;
  /* offset=0x063c flags=0x0028081040282208 */ UUserWidget* Widget;
  /* offset=0x0650 flags=0x0028081040202200 */ UBodySetup* BodySetup;
  /* offset=0x0654 flags=0x0028081040000200 */ UMaterialInterface* TranslucentMaterial;
  /* offset=0x0658 flags=0x0028081040000200 */ UMaterialInterface* TranslucentMaterial_OneSided;
  /* offset=0x065c flags=0x0028081040000200 */ UMaterialInterface* OpaqueMaterial;
  /* offset=0x0660 flags=0x0028081040000200 */ UMaterialInterface* OpaqueMaterial_OneSided;
  /* offset=0x0664 flags=0x0028081040000200 */ UMaterialInterface* MaskedMaterial;
  /* offset=0x0668 flags=0x0028081040000200 */ UMaterialInterface* MaskedMaterial_OneSided;
  /* offset=0x066c flags=0x0028081040202200 */ UTextureRenderTarget2D* RenderTarget;
  /* offset=0x0670 flags=0x0028081040202200 */ UMaterialInstanceDynamic* MaterialInstance;
  /* offset=0x0674 flags=0x0028081040202200 */ bool bAddedToScreen;
  /* offset=0x0675 flags=0x0028081040000200 */ bool bEditTimeUsable;
  /* offset=0x0678 flags=0x0028081040010201 */ FName SharedLayerName;
  /* offset=0x0680 flags=0x0028081040010201 */ int32 LayerZOrder;
  /* offset=0x0684 flags=0x0028081040000201 */ enum EWidgetGeometryMode GeometryMode;
  /* offset=0x0688 flags=0x0028081040000201 */ float CylinderArcAngle;

  struct FVector2D GetDrawSize();
  UMaterialInstanceDynamic* GetMaterialInstance();
  ULocalPlayer* GetOwnerPlayer();
  UTextureRenderTarget2D* GetRenderTarget();
  UUserWidget* GetUserWidgetObject();
  void RequestRedraw();
  void SetBackgroundColor(struct FLinearColor NewBackgroundColor);
  void SetDrawSize(struct FVector2D Size);
  void SetOwnerPlayer(ULocalPlayer* LocalPlayer);
  void SetTintColorAndOpacity(struct FLinearColor NewTintColorAndOpacity);
  void SetWidget(UUserWidget* Widget);
};

class UWidgetDarg_C: public UDragDropOperation {
  /* offset=0x0060 flags=0x0009001040000205 */ UUserWidget* WidgetReference ;
  /* offset=0x0064 flags=0x0009001040000205 */ uint8 DargOriginType;
  /* offset=0x0068 flags=0x0009001040000005 */ struct FVector2D DragOffset;
};

class UWidgetInteractionComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0010000010080200 */ FOnHoveredWidgetChanged OnHoveredWidgetChanged;
  /* offset=0x0284 flags=0x0019001040000205 */ int32 VirtualUserIndex;
  /* offset=0x0288 flags=0x0019001040000205 */ float PointerIndex;
  /* offset=0x028c flags=0x0018001040000205 */ uint8 TraceChannel;
  /* offset=0x0290 flags=0x0018001040000205 */ float InteractionDistance;
  /* offset=0x0294 flags=0x0018001040000205 */ enum EWidgetInteractionSource InteractionSource;
  /* offset=0x0295 flags=0x0018001040000205 */ bool bEnableHitTesting;
  /* offset=0x0296 flags=0x0018001040000205 */ bool bShowDebug;
  /* offset=0x0298 flags=0x0018001040000005 */ struct FLinearColor DebugColor;
  /* offset=0x0300 flags=0x0020089040002000 */ struct FHitResult CustomHitResult;
  /* offset=0x0388 flags=0x0028081040002000 */ struct FVector2D LocalHitLocation;
  /* offset=0x0390 flags=0x0028081040002000 */ struct FVector2D LastLocalHitLocation;
  /* offset=0x0398 flags=0x0028081040082208 */ UWidgetComponent* HoveredWidgetComponent;
  /* offset=0x03a0 flags=0x0020089040002000 */ struct FHitResult LastHitResult;
  /* offset=0x0428 flags=0x0028081040002200 */ bool bIsHoveredWidgetInteractable;
  /* offset=0x0429 flags=0x0028081040002200 */ bool bIsHoveredWidgetFocusable;
  /* offset=0x042a flags=0x0028081040002200 */ bool bIsHoveredWidgetHitTestVisible;

  struct FVector2D Get2DHitLocation();
  UWidgetComponent* GetHoveredWidgetComponent();
  struct FHitResult GetLastHitResult();
  bool IsOverFocusableWidget();
  bool IsOverHitTestVisibleWidget();
  bool IsOverInteractableWidget();
  bool PressAndReleaseKey(struct FKey Key);
  bool PressKey(struct FKey Key, bool bRepeat);
  void PressPointerKey(struct FKey Key);
  bool ReleaseKey(struct FKey Key);
  void ReleasePointerKey(struct FKey Key);
  void ScrollWheel(float ScrollDelta);
  bool SendKeyChar(FString Characters, bool bRepeat);
  void SetCustomHitResult(struct FHitResult HitResult);
};

class UWidgetLayoutLibrary: public UBlueprintFunctionLibrary {
  struct FVector2D GetMousePositionOnPlatform();
  struct FVector2D GetMousePositionOnViewport(UObject* WorldContextObject);
  bool GetMousePositionScaledByDPI(APlayerController* Player, float LocationX, float LocationY);
  struct FGeometry GetPlayerScreenWidgetGeometry(APlayerController* PlayerController);
  float GetViewportScale(UObject* WorldContextObject);
  struct FVector2D GetViewportSize(UObject* WorldContextObject);
  struct FGeometry GetViewportWidgetGeometry(UObject* WorldContextObject);
  bool ProjectWorldLocationToWidgetPosition(APlayerController* PlayerController, struct FVector WorldLocation, struct FVector2D ScreenPosition);
  void RemoveAllWidgets(UObject* WorldContextObject);
  UBorderSlot* SlotAsBorderSlot(UWidget* Widget);
  UCanvasPanelSlot* SlotAsCanvasSlot(UWidget* Widget);
  UGridSlot* SlotAsGridSlot(UWidget* Widget);
  UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(UWidget* Widget);
  UOverlaySlot* SlotAsOverlaySlot(UWidget* Widget);
  UUniformGridSlot* SlotAsUniformGridSlot(UWidget* Widget);
  UVerticalBoxSlot* SlotAsVerticalBoxSlot(UWidget* Widget);
};

class UWidgetNavigation: public UObject {
  /* offset=0x0020 flags=0x0010009000000015 */ struct FWidgetNavigationData Up;
  /* offset=0x0038 flags=0x0010009000000015 */ struct FWidgetNavigationData Down;
  /* offset=0x0050 flags=0x0010009000000015 */ struct FWidgetNavigationData Left;
  /* offset=0x0068 flags=0x0010009000000015 */ struct FWidgetNavigationData Right;
  /* offset=0x0080 flags=0x0010009000000015 */ struct FWidgetNavigationData Next;
  /* offset=0x0098 flags=0x0010009000000015 */ struct FWidgetNavigationData Previous;
};

class UWidgetSwitcher: public UPanelWidget {
  /* offset=0x00d8 flags=0x0018001040000215 */ int32 ActiveWidgetIndex;

  UWidget* GetActiveWidget();
  int32 GetActiveWidgetIndex();
  int32 GetNumWidgets();
  UWidget* GetWidgetAtIndex(int32 Index);
  void SetActiveWidget(UWidget* Widget);
  void SetActiveWidgetIndex(int32 Index);
};

class UWidgetSwitcherSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UWidgetTree: public UObject {
  /* offset=0x001c flags=0x001a001040080208 */ UWidget* RootWidget;
  /* offset=0x0020 flags=0x0020088000000208 */ TArray<UWidget*> AllWidgets;
};

class AWindDirectionalSource: public AInfo {
  /* offset=0x02a8 flags=0x00480010400a021d */ UWindDirectionalSourceComponent* Component;
};

class UWindDirectionalSourceComponent: public USceneComponent {
  /* offset=0x0270 flags=0x0018001240000205 */ float Strength;
  /* offset=0x0274 flags=0x0018001240000205 */ float Speed;
  /* offset=0x0278 flags=0x0018001240000215 */ float MinGustAmount;
  /* offset=0x027c flags=0x0018001240000215 */ float MaxGustAmount;
  /* offset=0x0280 flags=0x0018001240000205 */ float Radius;
  /* offset=0x0284 flags=0x0018001000000015 */ uint8 bPointWind:1;

  void SetMaximumGustAmount(float InNewMaxGust);
  void SetMinimumGustAmount(float InNewMinGust);
  void SetRadius(float InNewRadius);
  void SetSpeed(float InNewSpeed);
  void SetStrength(float InNewStrength);
  void SetWindType(enum EWindSourceType InNewType);
};

class UWindowTitleBarArea: public UContentWidget {
  /* offset=0x00d5 flags=0x0018001040000215 */ bool bDoubleClickTogglesFullscreen;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UWindowTitleBarAreaSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0020081000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0028081040000215 */ uint8 HorizontalAlignment;
  /* offset=0x0035 flags=0x0028081040000201 */ uint8 VerticalAlignment;

  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UWonderfulRecordingCut: public UObject {
  /* offset=0x001c flags=0x0010000000000214 */ TArray<struct FWonderfulCutOutputData> WonderfulCutOutputDataList;
  /* offset=0x004c flags=0x0028081040000214 */ bool bIsChickenDinner;
  /* offset=0x0050 flags=0x0028081040000214 */ float ChickenDinnerTimeSecs;
  /* offset=0x0054 flags=0x0028081040000214 */ bool bIsShowSmallCircle;
  /* offset=0x0058 flags=0x0028081040000214 */ float ShowSmallCircleTimeSecs;
  /* offset=0x005c flags=0x0020080000000214 */ TArray<struct FWonderfulCutShootDamageData> ShootDamageDataList;

  void BuildOutputData();
  void CaptureRecordCut(uint8 CaptureType, int32 DamagePlayerID, uint8 ShootDamageType, float ShootDistance);
  void SortShootDamageData(TArray<struct FWonderfulCutShootDamageSortData> LargeCircleDataList, TArray<struct FWonderfulCutShootDamageSortData> SmallCircleDataList);
  void StartRecord();
  void StopRecord(bool bRankFirst);
};

class UWorld: public UObject {
  /* offset=0x0020 flags=0x0018001040002200 */ ULevel* PersistentLevel;
  /* offset=0x0024 flags=0x0018001040002200 */ UNetDriver* NetDriver;
  /* offset=0x0028 flags=0x0018001040082208 */ ULineBatchComponent* LineBatcher;
  /* offset=0x002c flags=0x0018001040082208 */ ULineBatchComponent* PersistentLineBatcher;
  /* offset=0x0030 flags=0x0018001040082208 */ ULineBatchComponent* ForegroundLineBatcher;
  /* offset=0x0034 flags=0x0018001040002200 */ AGameNetworkManager* NetworkManager;
  /* offset=0x0038 flags=0x0018001040002200 */ UPhysicsCollisionHandler* PhysicsCollisionHandler;
  /* offset=0x003c flags=0x0010000000002200 */ TArray<UObject*> ExtraReferencedObjects;
  /* offset=0x0048 flags=0x0010000000002200 */ TArray<UObject*> PerModuleDataObjects;
  /* offset=0x0054 flags=0x0010000000002200 */ TArray<ULevelStreaming*> StreamingLevels;
  /* offset=0x0060 flags=0x0018000000000200 */ FString StreamingLevelsPrefix;
  /* offset=0x006c flags=0x0018001040002200 */ ULevel* CurrentLevelPendingVisibility;
  /* offset=0x0070 flags=0x0018001040002200 */ ULevel* CurrentLevelPendingInvisibility;
  /* offset=0x0074 flags=0x0018001040000200 */ UDemoNetDriver* DemoNetDriver;
  /* offset=0x0078 flags=0x0018001040000200 */ AParticleEventManager* MyParticleEventManager;
  /* offset=0x007c flags=0x0048001040000200 */ APhysicsVolume* DefaultPhysicsVolume;
  /* offset=0x0090 flags=0x0048001040002200 */ UNavigationSystem* NavigationSystem;
  /* offset=0x0094 flags=0x0048001040002200 */ AGameModeBase* AuthorityGameMode;
  /* offset=0x0098 flags=0x0048001040002200 */ AGameStateBase* GameState;
  /* offset=0x009c flags=0x0048001040002200 */ UAISystemBase* AISystem;
  /* offset=0x00a0 flags=0x0048001040002200 */ UAvoidanceManager* AvoidanceManager;
  /* offset=0x00a4 flags=0x0040000000002200 */ TArray<ULevel*> Levels;
  /* offset=0x00b0 flags=0x0040000400002200 */ TArray<struct FLevelCollection> LevelCollections;
  /* offset=0x00c0 flags=0x0048001040002200 */ ULevel* CurrentLevel;
  /* offset=0x00c4 flags=0x0048001040002200 */ UGameInstance* OwningGameInstance;
  /* offset=0x00c8 flags=0x0040000000002200 */ TArray<UMaterialParameterCollectionInstance*> ParameterCollectionInstances;
  /* offset=0x00d4 flags=0x0048001040002200 */ UCanvas* CanvasForRenderingToTarget;
  /* offset=0x00d8 flags=0x0048001040002200 */ UCanvas* CanvasForDrawMaterialToRenderTarget;
  /* offset=0x07bc flags=0x0018001040000200 */ UWorldComposition* WorldComposition;
  /* offset=0x0802 flags=0x0018001000002000 */ uint8 bAreConstraintsDirty:1;
};

class UWorldComposition: public UObject {
  /* offset=0x0058 flags=0x0010000000002200 */ TArray<ULevelStreaming*> TilesStreaming;
  /* offset=0x0068 flags=0x0018001040004200 */ double TilesStreamingTimeThreshold;
  /* offset=0x0070 flags=0x0018001040004200 */ bool bLoadAllTilesDuringCinematic;
  /* offset=0x0071 flags=0x0018001040004200 */ bool bRebaseOriginIn3DSpace;
  /* offset=0x0074 flags=0x0018001040004200 */ float RebaseOriginDistance;
};

class AWorldSettings: public AInfo {
  /* offset=0x02ac flags=0x0018001000000015 */ uint8 bEnableFOVDistanceCulling:1;
  /* offset=0x02b0 flags=0x0010000000000215 */ TArray<struct FVector2D> FOVCulling;
  /* offset=0x02bc flags=0x0018041000000015 */ uint8 bEnableWorldBoundsChecks:1;
  /* offset=0x02bc flags=0x0018041000004015 */ uint8 bEnableNavigationSystem:1;
  /* offset=0x02bc flags=0x0018041000004015 */ uint8 bEnableAISystem:1;
  /* offset=0x02bc flags=0x0018001000000015 */ uint8 bEnableWorldComposition:1;
  /* offset=0x02bc flags=0x0018001000000015 */ uint8 bUseClientSideLevelStreamingVolumes:1;
  /* offset=0x02bc flags=0x0018041000000015 */ uint8 bEnableWorldOriginRebasing:1;
  /* offset=0x02bc flags=0x0018001000002000 */ uint8 bWorldGravitySet:1;
  /* offset=0x02bc flags=0x0018001000000015 */ uint8 bGlobalGravitySet:1;
  /* offset=0x02c0 flags=0x0018001040000215 */ float KillZ;
  /* offset=0x02c4 flags=0x001c041040000215 */ UClass<UDamageType>* KillZDamageType;
  /* offset=0x02c8 flags=0x0018001140002220 */ float WorldGravityZ;
  /* offset=0x02cc flags=0x0018001040000215 */ float GlobalGravityZ;
  /* offset=0x02d0 flags=0x001c041042000215 */ UClass<ADefaultPhysicsVolume>* DefaultPhysicsVolumeClass;
  /* offset=0x02d4 flags=0x001c041040000215 */ UClass<UPhysicsCollisionHandler>* PhysicsCollisionHandlerClass;
  /* offset=0x02d8 flags=0x001c001040000215 */ UClass<AGameModeBase>* DefaultGameMode;
  /* offset=0x02dc flags=0x001c001040000200 */ UClass<AGameNetworkManager>* GameNetworkManagerClass;
  /* offset=0x02e0 flags=0x0018041040000201 */ int32 PackedLightAndShadowMapTextureSize;
  /* offset=0x02e4 flags=0x0018041000000001 */ uint8 bMinimizeBSPSections:1;
  /* offset=0x02e8 flags=0x0018041040000015 */ struct FVector DefaultColorScale;
  /* offset=0x02f4 flags=0x0018001040000201 */ float DefaultMaxDistanceFieldOcclusionDistance;
  /* offset=0x02f8 flags=0x0018001040000201 */ float GlobalDistanceFieldViewDistance;
  /* offset=0x02fc flags=0x0018001000000005 */ uint8 bEnableWorldComposition2DLoading:1;
  /* offset=0x0300 flags=0x0018001040004201 */ float DynamicIndirectShadowsSelfShadowingIntensity;
  /* offset=0x0304 flags=0x0018001000000001 */ uint8 bPrecomputeVisibility:1;
  /* offset=0x0304 flags=0x0018041000000001 */ uint8 bPlaceCellsOnlyAlongCameraTracks:1;
  /* offset=0x0308 flags=0x0018041040000201 */ int32 VisibilityCellSize;
  /* offset=0x030c flags=0x0018041040000201 */ uint8 VisibilityAggressiveness;
  /* offset=0x030d flags=0x0018041000000001 */ uint8 bForceNoPrecomputedLighting:1;
  /* offset=0x0310 flags=0x0010001000000001 */ struct FLightmassWorldInfoSettings LightmassSettings;
  /* offset=0x0360 flags=0x0010001000004001 */ struct FReverbSettings DefaultReverbSettings;
  /* offset=0x0370 flags=0x0010001000004001 */ struct FInteriorSettings DefaultAmbientZoneSettings;
  /* offset=0x0394 flags=0x0018001040000201 */ USoundMix* DefaultBaseSoundMix;
  /* offset=0x0398 flags=0x0018001040000215 */ float WorldToMeters;
  /* offset=0x039c flags=0x0018001040000215 */ float MonoCullingDistance;
  /* offset=0x03a0 flags=0x0018001040000200 */ UBookMark* BookMarks;
  /* offset=0x03c8 flags=0x0018001040002220 */ float TimeDilation;
  /* offset=0x03cc flags=0x0018001040002220 */ float MatineeTimeDilation;
  /* offset=0x03d0 flags=0x0018001040002200 */ float DemoPlayTimeDilation;
  /* offset=0x03d4 flags=0x0018041040004201 */ float MinGlobalTimeDilation;
  /* offset=0x03d8 flags=0x0018041040004201 */ float MaxGlobalTimeDilation;
  /* offset=0x03dc flags=0x0018041040004201 */ float MinUndilatedFrameTime;
  /* offset=0x03e0 flags=0x0018041040004201 */ float MaxUndilatedFrameTime;
  /* offset=0x03e4 flags=0x0018001040002220 */ APlayerState* Pauser;
  /* offset=0x03e8 flags=0x0018001000000020 */ uint8 bHighPriorityLoading:1;
  /* offset=0x03e8 flags=0x0018001000000000 */ uint8 bHighPriorityLoadingLocal:1;
  /* offset=0x03ec flags=0x0010000000000200 */ TArray<struct FNetViewer> ReplicationViewers;
  /* offset=0x03f8 flags=0x0020088000000208 */ TArray<UAssetUserData*> AssetUserData;
  /* offset=0x0404 flags=0x0010000000000200 */ TArray<float> LODRelativeDistances;
  /* offset=0x0410 flags=0x0018001040000200 */ bool bEnablestreamingLevelLOD;

  void OnRep_WorldGravityZ();
};

class UWrapBox: public UPanelWidget {
  /* offset=0x00d8 flags=0x0018001040000015 */ struct FVector2D InnerSlotPadding;
  /* offset=0x00e0 flags=0x0018001040000215 */ float WrapWidth;
  /* offset=0x00e4 flags=0x0018001040000215 */ bool bExplicitWrapWidth;

  UWrapBoxSlot* AddChildWrapBox(UWidget* content);
  void SetInnerSlotPadding(struct FVector2D InPadding);
};

class UWrapBoxSlot: public UPanelSlot {
  /* offset=0x0024 flags=0x0010001000000015 */ struct FMargin Padding;
  /* offset=0x0034 flags=0x0018001040000215 */ bool bFillEmptySpace;
  /* offset=0x0038 flags=0x0018001040000215 */ float FillSpanWhenLessThan;
  /* offset=0x003c flags=0x0018001040000215 */ uint8 HorizontalAlignment;
  /* offset=0x003d flags=0x0018001040000215 */ uint8 VerticalAlignment;

  void SetFillEmptySpace(bool InbFillEmptySpace);
  void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
  void SetHorizontalAlignment(uint8 InHorizontalAlignment);
  void SetPadding(struct FMargin InPadding);
  void SetVerticalAlignment(uint8 InVerticalAlignment);
};

class UWrapperOverlapManagerComponent: public UBoxComponent {
  /* offset=0x05dc flags=0x0018001040010201 */ uint16 ManagerLevel;
  /* offset=0x05e0 flags=0x0018001040010201 */ float OverlapCheckInterval;
  /* offset=0x05e4 flags=0x0018001040010201 */ bool bDrawSubLevelManageComp;
  /* offset=0x05e8 flags=0x0018001040010201 */ float DrawSubLevelManageCompTime;
  /* offset=0x05ec flags=0x0010000000020215 */ TArray<AActor*> OverlappedSubLevelActorArray;

  void HandleEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
  void HandleOnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult);
};

class Abp_MyTest_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_activity_group_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_CurrentAcitvityState;
  /* offset=0x02d0 flags=0x0000001040000205 */ bool BP_CurrentActivityRedPoint;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_CurrentOperateActivityID;
  /* offset=0x02d8 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ActivityGroupInfo> BP_ARRAY_ActivityInfoSortList;
  /* offset=0x02e4 flags=0x0008000000000205 */ FString BP_CurrentAcitvityTimeStr;
  /* offset=0x02f0 flags=0x0008000000000005 */ struct FBP_STRUCT_ActivityGroupInfo BP_STRUCT_ActivityGroupInfo;
  /* offset=0x033c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventActivityGroupGetItemData_Push();
  void EventActivityGroupGoTo_Push();
  void UserConstructionScript();
};

class Abp_activty_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_First_Act_ID;
  /* offset=0x02c8 flags=0x0008000000000005 */ struct FBP_STRUCT_ActButtonInfo BP_STRUCT_ActButtonInfo;
  /* offset=0x02ec flags=0x0008000000000005 */ struct FBP_STRUCT_ActivtyNoticeBtn_Select BP_STRUCT_ActivtyNoticeBtn_Select;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 BP_First_Notice_ID;
  /* offset=0x02fc flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyInfo> BP_ARRAY_SubActivtyList;
  /* offset=0x0308 flags=0x0008000000000005 */ struct FBP_STRUCT_NoticeButtonInfo BP_STRUCT_NoticeButtonInfo;
  /* offset=0x032c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_NoticeButtonInfo> BP_ARRAY_NoticeButtonInfo;
  /* offset=0x0338 flags=0x0008001040000205 */ int32 BP_CurrentActJumpID;
  /* offset=0x033c flags=0x0008000000000005 */ struct FBP_STRUCT_SubActivtyItemInfo BP_STRUCT_SubActivtyItemInfo;
  /* offset=0x0348 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyItemInfo> BP_ARRAY_SubActivtyCostList;
  /* offset=0x0354 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ActButtonInfo> BP_ARRAY_ActButtonInfo;
  /* offset=0x0360 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SubActivtyItemInfo> BP_ARRAY_SubActivtyDropList;
  /* offset=0x036c flags=0x0008000000000005 */ struct FBP_STRUCT_ActivtyInfo_Click BP_STRUCT_ActivtyInfo_Click;
  /* offset=0x037c flags=0x0008000000000005 */ struct FBP_STRUCT_SubActivtyInfo BP_STRUCT_SubActivtyInfo;
  /* offset=0x03c8 flags=0x0008000000000205 */ FString BP_CurrentNoticeJumpMode;
  /* offset=0x03d4 flags=0x0008001040000205 */ int32 BP_Duihuan_RedPoint_Num;
  /* offset=0x03d8 flags=0x0008000000000005 */ struct FBP_STRUCT_ActivtyInfo BP_STRUCT_ActivtyInfo;
  /* offset=0x044c flags=0x0008000000000005 */ struct FBP_STRUCT_NoticeInfo BP_STRUCT_NoticeInfo;
  /* offset=0x04c0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventActivtyClickOneBtn();
  void EventActivtyUIOnClickCheckExchange();
  void EventActivtyUIOnClickGetBtn();
  void EventActivtyUIOnClickJumpBtn();
  void EventActivtyUIOnNoticeJump();
  void EventActivtyUpdateLobbyRedPoint();
  void UserConstructionScript();
};

class Abp_alliance_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_Alliance_SelfJoinGroup;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_Alliance_SelectIconFrom;
  /* offset=0x02cc flags=0x0000001040000205 */ bool BP_Alliance_IsOpenMainPanel;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_Alliance_TeamName;
  /* offset=0x02dc flags=0x0008000000000005 */ struct FBP_STRUCT_AllianceInfo BP_STRUCT_AllianceInfo;
  /* offset=0x0340 flags=0x0008001040000205 */ int32 BP_Alliance_FROMCREATEPANEL;
  /* offset=0x0344 flags=0x0008000000000005 */ struct FBP_STRUCT_AllianceMemberProfile BP_STRUCT_AllianceMemberProfile;
  /* offset=0x0424 flags=0x0000001040000205 */ bool BP_Alliance_RecruitRedPointStatus;
  /* offset=0x0428 flags=0x0008000000000205 */ FString BP_Alliance_Notice;
  /* offset=0x0434 flags=0x0008000000000205 */ FString BP_Alliance_Selected_Member_Id;
  /* offset=0x0440 flags=0x0008000000000205 */ FString BP_Alliance_SelfUID;
  /* offset=0x044c flags=0x0008001040000205 */ int32 BP_Alliance_SelectIconId;
  /* offset=0x0450 flags=0x0008000000000205 */ FString BP_Alliance_Rules;
  /* offset=0x045c flags=0x0008001040000205 */ int32 BP_Alliance_FROMMAINPANEL;
  /* offset=0x0460 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_AllianceMemberProfile> BP_ARRAY_Alliance_Member_Profile_List;
  /* offset=0x046c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_AllianceInfo> BP_ARRAY_Alliance_Info_List;
  /* offset=0x0478 flags=0x0008000000000005 */ struct FBP_STRUCT_Selected_Member_Profile BP_STRUCT_Selected_Member_Profile;
  /* offset=0x0558 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAllianceChangeTeamIcon();
  void EventAllianceChangeTeamName();
  void EventAllianceChangeTeamNotice();
  void EventAllianceClickAddFriend();
  void EventAllianceClickAppointment();
  void EventAllianceClickBuildQQGroup();
  void EventAllianceClickBuildWxGroup();
  void EventAllianceClickChat();
  void EventAllianceClickExitTeam();
  void EventAllianceClickJoinQQGroup();
  void EventAllianceClickJoinWxGroup();
  void EventAllianceClickKickout();
  void EventAllianceClickOpenView();
  void EventAllianceClickRecruit();
  void EventAllianceClickUnbindQQGroup();
  void EventAllianceClickUnbindWxGroup();
  void EventAllianceFinishCreation();
  void EventClickAllianceCloseMainPanel();
  void EventClickAllianceCreateTeamBtn();
  void EventClickAllianceRandomNameBtn();
  void EventClickAllianceSelectIcon();
  void EventClickShowSelectIconMainPanel_FromCreatePanel();
  void EventClickShowSelectIconMainPanel_FromMainPanel();
  void EventFetchInfo();
  void EventSetInfo_Push();
  void UserConstructionScript();
};

class Abp_alliance_recruit_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_AllianceRecruit BP_STRUCT_AllianceRecruit;
  /* offset=0x0380 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_AllianceRecruit> BP_ARRAY_Alliance_ApplyList;
  /* offset=0x038c flags=0x0000001040000205 */ bool BP_AllianceRecruit_IsShow;
  /* offset=0x038d flags=0x0000001040000205 */ bool BP_AllianceRecruitLeader;
  /* offset=0x038e flags=0x0000001040000205 */ bool BP_AllianceRecruitReadPoint;
  /* offset=0x0390 flags=0x0008000000000205 */ FString BP_AllianceFriendNumStr;
  /* offset=0x039c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_AllianceRecruit> BP_ARRAY_Alliance_RecruitList;
  /* offset=0x03a8 flags=0x0008001040000205 */ int32 BP_Alliance_UpdateInnerIndex;
  /* offset=0x03ac flags=0x0008000000000205 */ FString BP_AllianceApply_Gid;
  /* offset=0x03b8 flags=0x0008001040000205 */ int32 BP_AllianceRecruit_CurType;
  /* offset=0x03bc flags=0x0008000000000205 */ FString BP_AllianceRecruit_InviterGid;
  /* offset=0x03c8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAllianceRecruitFetchInfo();
  void EventAllianceRecruit_Push();
  void EventClickApplyAgree();
  void EventClickApplyRefuse();
  void EventClickHeadApply();
  void EventClickHeadRecruit();
  void EventClickRecruit();
  void EventHideUI();
  void EventShowApplyList();
  void UserConstructionScript();
};

class Abp_authorization_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool HasShowDeviceLimit;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_AutoAuthLogin;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_DeviceLimit;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_TokenIsValid;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_LoginCheck;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 BP_WECHAT_INSTALL;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_DeviceNameBeforeAuthLogin;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_LoginCount;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_QQPasswd;
  /* offset=0x02f8 flags=0x0008000000000205 */ FString BP_GameVersion;
  /* offset=0x0304 flags=0x0008000000000205 */ FString BP_QQID;
  /* offset=0x0310 flags=0x0008001040000205 */ int32 BP_LoginTime;
  /* offset=0x0314 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAddLoginCount();
  void EventAuthHideButtons();
  void EventAuthShowButtons();
  void EventAutoAuthLogin();
  void EventBeforeAuthLogin();
  void EventCheckWeChatInstalled();
  void EventClearLoginLimit();
  void EventClickKefu();
  void EventDeleteSavedDir();
  void EventEnterLanguageSetting();
  void EventFetchInfo();
  void EventGameVersion();
  void EventGuestLogin();
  void EventLoginCheck();
  void EventLogout();
  void EventQQLogin();
  void EventRedoAutoAuthorization();
  void EventShowPrivacyAgreement();
  void EventShowRefuse();
  void EventShowService();
  void EventShowTouristNotice();
  void EventStartAuthorization();
  void EventUpdateLoginTime();
  void EventWXLogin();
  void UserConstructionScript();
};

class Abp_battleresult_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_mykill;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_mystate;
  /* offset=0x02d4 flags=0x0000001040000205 */ bool BP_IsShareAwardGold;
  /* offset=0x02d8 flags=0x0008000000000005 */ struct FBP_STRUCT_RecordingUpload BP_STRUCT_RecordingUpload;
  /* offset=0x0314 flags=0x0008000000000005 */ struct FBP_STRUCT_BTRating BP_STRUCT_BTRating;
  /* offset=0x032c flags=0x0008000000000005 */ struct FBP_STRUCT_MemBTResultData BP_STRUCT_MemBTResultData;
  /* offset=0x039c flags=0x0008001040000205 */ int32 BPRecordAddFriendIndex;
  /* offset=0x03a0 flags=0x0008000000000005 */ struct FBP_STRUCT_BattleResultData BP_STRUCT_BattleResultData;
  /* offset=0x041c flags=0x0000001040000205 */ bool BP_IsTodayShareDone;
  /* offset=0x041d flags=0x0000001040000205 */ bool BP_EnterSpectateMode;
  /* offset=0x0420 flags=0x0008001040000205 */ int32 BP_MyFinalLevel;
  /* offset=0x0424 flags=0x0008001040000205 */ int32 BP_LoginChannel;
  /* offset=0x0428 flags=0x0008001040000205 */ int32 BP_ServerTimeSecNow;
  /* offset=0x042c flags=0x0000001040000205 */ bool BP_IsReportComplaintShow;
  /* offset=0x0430 flags=0x0008000000000205 */ FString BP_myname;
  /* offset=0x043c flags=0x0000001040000205 */ bool Retry;
  /* offset=0x0440 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAddFriendRequest_Push();
  void EventBattleResult_BackToLobby();
  void EventClientExitGame();
  void EventCloseBattleResult();
  void EventDelayCall();
  void EventShowGameJoyRecordFailNotice();
  void UserConstructionScript();
};

class Abp_bind_main_intl_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_UIBindMainIntl_OpenWay;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_UIBindMainIntl_msg;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString BP_UIBindMainIntl_title;
  /* offset=0x02e0 flags=0x0000001040000205 */ bool BP_UIBindMainIntl_ClearTransferCodeWhenShow;
  /* offset=0x02e4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventHideMainUI();
  void EventHideSwitchAccountUI();
  void EventLogout();
  void EventRegistIMSDKEvents();
  void EventShowMainUI();
  void EventShowMsgAskStartNewGame();
  void EventShowMsgAskSwitchAccountFB();
  void EventShowMsgAskSwitchAccountGPGC();
  void EventShowMsgAskUseTransferCode();
  void EventShowSwitchAccountSuccessTipMsg();
  void EventShowSwitchAccountUI();
  void EventShowTipMsg();
  void EventShowTip_Push();
  void EventShowTransferSuccessTipMsg();
  void EventUnRegistIMSDKEvents();
  void UserConstructionScript();
};

class Abp_chat_emoji_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_ChatEmoji_ClickIndex;
  /* offset=0x02c8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickEmojiItem();
  void UserConstructionScript();
};

class Abp_chat_entrance_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_ChatEntranceValid;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_ChatEntranceNewSender;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString BP_ChatEntranceNewMsg;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_ChatEntranceNewChannel;
  /* offset=0x02e4 flags=0x0008001040000205 */ int32 BP_ChatFriendNewMsgCount;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_ChatEntranceChatroomNewMsgCount;
  /* offset=0x02ec flags=0x0000001040000205 */ bool BP_ChatEntranceTeamed;
  /* offset=0x02ed flags=0x0000001040000205 */ bool BP_ChatEntranceEnterRoom;
  /* offset=0x02f0 flags=0x0008000000000205 */ FString BP_ChatEntranceClearGID;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 BP_ChatEntranceQuickMsgId;
  /* offset=0x0300 flags=0x0000001040000205 */ bool BP_ChatEntranceTickBufferList;
  /* offset=0x0304 flags=0x0008000000000205 */ FString BP_ChatEntranceQuickMsgStr;
  /* offset=0x0310 flags=0x0008000000000205 */ FString BP_ChatEntranceVoiceRoomId;
  /* offset=0x031c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAchieveQuickMsgStr();
  void EventClickBtnRecruit();
  void EventFetchInfo();
  void EventOpenChatUI();
  void EventOpenChatWindow();
  void EventOpenFriendNewChat();
  void EventPopMessageBuffer();
  void EventSendTeamQuickMsg();
  void EventSetInfo_Push();
  void EventTestJoinGameRoom();
  void EventTestQuitRoom();
  void UserConstructionScript();
};

class Abp_chat_main_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_ChatVoiceOpenSpeaker;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_ChatProfileRspMaxSegment;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_ChatProfileRspGender;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_ChatMainClearGID;
  /* offset=0x02dc flags=0x0008000000000005 */ struct FBP_STRUCT_ChatUnreadMsgCount BP_STRUCT_ChatUnreadMsgCount;
  /* offset=0x02f8 flags=0x0008000000000205 */ FString BP_ChatVoiceDownloadOwnerGid;
  /* offset=0x0304 flags=0x0008000000000205 */ FString BP_ChatProfileReqGid;
  /* offset=0x0310 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatUnreadMsgCount> BP_ARRAY_ChatFriendUnreadList;
  /* offset=0x031c flags=0x0008000000000205 */ FString BP_ChatHoverContent;
  /* offset=0x0328 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatBriefFriendData> BP_ARRAY_ChatFriendList;
  /* offset=0x0334 flags=0x0008001040000205 */ int32 BP_WorldNewMessageCount;
  /* offset=0x0338 flags=0x0008000000000205 */ FString BP_SelectedFriendGID;
  /* offset=0x0344 flags=0x0008001040000205 */ int32 BP_ChatProfileRspLevel;
  /* offset=0x0348 flags=0x0008000000000205 */ FString BP_ChatContent;
  /* offset=0x0354 flags=0x0008000000000205 */ FString BP_ChatVoicePlayFileId;
  /* offset=0x0360 flags=0x0000001040000205 */ bool BP_ChatIsTeamUp;
  /* offset=0x0364 flags=0x0008000000000205 */ FString BP_ChannelTitleName;
  /* offset=0x0370 flags=0x0008001040000205 */ int32 BP_ChatVoiceTotalLimit;
  /* offset=0x0374 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatMessageSingleData> BP_ARRAY_WorldChatList;
  /* offset=0x0380 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatMessageSingleData> BP_ARRAY_ChatroomChatList;
  /* offset=0x038c flags=0x0008000000000205 */ FString BP_ChatProfileRspGid;
  /* offset=0x0398 flags=0x0008000000000205 */ FString BP_ReceiverGID;
  /* offset=0x03a4 flags=0x0008001040000205 */ int32 BP_ChatVoiceMode;
  /* offset=0x03a8 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatMessageSingleData> BP_ARRAY_FriendChatList;
  /* offset=0x03b4 flags=0x0008001040000205 */ int32 BP_TeamNewMessageCount;
  /* offset=0x03b8 flags=0x0008000000000205 */ FString BP_ChatShowHelpContent;
  /* offset=0x03c4 flags=0x0008000000000205 */ FString BP_ReceiverName;
  /* offset=0x03d0 flags=0x0008001040000205 */ int32 BP_ChatRoomNewMessageCount;
  /* offset=0x03d4 flags=0x0008000000000205 */ FString BP_ChatHoverName;
  /* offset=0x03e0 flags=0x0008000000000205 */ FString BP_ChatMainMyRoomId;
  /* offset=0x03ec flags=0x0000001040000205 */ bool BP_ChatMainValid;
  /* offset=0x03f0 flags=0x0008001040000205 */ int32 BP_ChatVoiceDownloadMsgLength;
  /* offset=0x03f4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatVoiceDownloadData> BP_ARRAY_ChatVoiceDownloadList;
  /* offset=0x0400 flags=0x0008001040000205 */ int32 BP_ChatTranslateID;
  /* offset=0x0404 flags=0x0008000000000205 */ FString BP_ChatInputContent;
  /* offset=0x0410 flags=0x0008000000000205 */ FString BP_ChatTranslateText;
  /* offset=0x041c flags=0x0008001040000205 */ int32 BP_ChatVoiceBan;
  /* offset=0x0420 flags=0x0008000000000205 */ FString BP_ChatProfileRspNickName;
  /* offset=0x042c flags=0x0000001040000205 */ bool BP_ChatMainFirstShow;
  /* offset=0x0430 flags=0x0008001040000205 */ int32 BP_ChatVoiceUploadTime;
  /* offset=0x0434 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatMessageSingleData> BP_ARRAY_NewChatList;
  /* offset=0x0440 flags=0x0008000000000205 */ FString BP_ChatRecruitJoinGid;
  /* offset=0x044c flags=0x0008001040000205 */ int32 BP_ChatTranslateChannel;
  /* offset=0x0450 flags=0x0008000000000205 */ FString BP_ChatTodayDate;
  /* offset=0x045c flags=0x0008000000000205 */ FString BP_ChatVoiceTeamRoom;
  /* offset=0x0468 flags=0x0000001040000205 */ bool BP_ChatVoiceOpenMic;
  /* offset=0x0469 flags=0x0000001040000205 */ bool BP_ChatTickBufferList;
  /* offset=0x046a flags=0x0000001040000205 */ bool BP_ChatHoverIsFriend;
  /* offset=0x046c flags=0x0008000000000205 */ FString BP_ChatMyGID;
  /* offset=0x0478 flags=0x0008000000000005 */ struct FBP_STRUCT_ChatBriefFriendData BP_STRUCT_ChatBriefFriendData;
  /* offset=0x0500 flags=0x0008000000000205 */ FString BP_ChatHoverGID;
  /* offset=0x050c flags=0x0008001040000205 */ int32 BP_ChatVoiceDownloadChannel;
  /* offset=0x0510 flags=0x0008000000000005 */ struct FBP_STRUCT_ChatVoiceDownloadData BP_STRUCT_ChatVoiceDownloadData;
  /* offset=0x0528 flags=0x0000001040000205 */ bool BP_ChatMainShown;
  /* offset=0x052c flags=0x0008000000000205 */ FString BP_ChatVoiceToTextContent;
  /* offset=0x0538 flags=0x0008000000000205 */ FString BP_ChatVoiceUploadMsgId;
  /* offset=0x0544 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatMessageSingleData> BP_ARRAY_TeamChatList;
  /* offset=0x0550 flags=0x0008001040000205 */ int32 BP_ChatTotalFriendCount;
  /* offset=0x0554 flags=0x0008000000000005 */ struct FBP_STRUCT_ChatMessageSingleData BP_STRUCT_ChatMessageSingleData;
  /* offset=0x05d8 flags=0x0008001040000205 */ int32 BP_ChatProfileRspAvatarBox;
  /* offset=0x05dc flags=0x0008000000000205 */ FString BP_ChatSelectedGID;
  /* offset=0x05e8 flags=0x0008001040000205 */ int32 BP_ChatEmojiClickItem;
  /* offset=0x05ec flags=0x0008000000000205 */ FString BP_ChatRecruitTeamID;
  /* offset=0x05f8 flags=0x0008001040000205 */ int32 BP_ChatVoiceDownloadMsgId;
  /* offset=0x05fc flags=0x0008000000000205 */ FString BP_ChatLanguageFrom;
  /* offset=0x0608 flags=0x0008001040000205 */ int32 BP_FriendNewMessageCount;
  /* offset=0x060c flags=0x0008000000000205 */ FString BP_ChatInputFilteredContent;
  /* offset=0x0618 flags=0x0008000000000205 */ FString BP_ChatVoiceDownloadFileId;
  /* offset=0x0624 flags=0x0000001040000205 */ bool BP_ChatHoverIsPullBlack;
  /* offset=0x0628 flags=0x0008000000000205 */ FString BP_ChatProfileRspUrl;
  /* offset=0x0634 flags=0x0008001040000205 */ int32 BP_ChannelType;
  /* offset=0x0638 flags=0x0008001040000205 */ int32 BP_ChatOnlineFriendCout;
  /* offset=0x063c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAchieveVoiceRoom();
  void EventChangeChannelType();
  void EventChangeVoiceChatMode();
  void EventChatVoiceBanInfo();
  void EventChatVoiceCheckBan();
  void EventCheckBlackList();
  void EventCheckFriendList();
  void EventCheckTodayDate();
  void EventClickFriendItem();
  void EventDownloadVoiceFile();
  void EventFetchFriendData();
  void EventFetchInfo();
  void EventGetProfile();
  void EventHideChatMainWnd();
  void EventHideEmoji();
  void EventHideHover();
  void EventHoverAddFriend();
  void EventHoverBlockTarget();
  void EventHoverInviteTeam();
  void EventHoverJoinTeam();
  void EventHoverReportTarget();
  void EventHoverShowFriendInfo();
  void EventInitJoinRoom();
  void EventInputChatMsg();
  void EventNotifyFriendChatRequireSelect();
  void EventNotifyNoText();
  void EventNotifyOutofTextRange();
  void EventNotifyVoiceChatFailToRecord();
  void EventNotifyVoiceRecordTooShort();
  void EventOnAfterHideWnd();
  void EventOnAfterShowWnd();
  void EventOpenRecruitPanel();
  void EventPopMessageBuffer();
  void EventRecruitMember();
  void EventRequireHoverTeamup();
  void EventSendChatMsg();
  void EventSendChatVoiceMsg();
  void EventShowEmoji();
  void EventShowHover();
  void EventSwitchToFriendChat();
  void EventSyncBp2Lua_Push();
  void EventTryCancelRecordVoice();
  void EventTryStartRecordVoice();
  void EventTryStopPlayRecordVoice();
  void EventTryStopRecordVoice();
  void UserConstructionScript();
};

class Abp_chat_room_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ChatRoom_MyRoomID;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_ChatRoom_ClickMenuPlayerID;
  /* offset=0x02dc flags=0x0000001040000205 */ bool BP_ChatRoom_ClickMenuPlayerIsPullBlack;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_ChatRoom_MyRoomPlayerCount;
  /* offset=0x02e4 flags=0x0000001040000205 */ bool BP_ChatRoom_MyRoomIsMarked;
  /* offset=0x02e8 flags=0x0008000000000005 */ struct FBP_STRUCT_ChatRoomPlayer BP_STRUCT_ChatRoomPlayer;
  /* offset=0x0344 flags=0x0008000000000205 */ FString BP_ChatRoom_CreateName;
  /* offset=0x0350 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatRoomPlayer> BP_ARRAY_ChatRoomPlayerList;
  /* offset=0x035c flags=0x0008000000000205 */ FString BP_ChatRoom_CreateWindowTitle;
  /* offset=0x0368 flags=0x0008000000000205 */ FString BP_ChatRoom_CreatePassword;
  /* offset=0x0374 flags=0x0000001040000205 */ bool BP_ChatRoom_ClickMenuPlayerInMyTeam;
  /* offset=0x0378 flags=0x0008000000000205 */ FString BP_ChatShowHelpContent;
  /* offset=0x0384 flags=0x0008000000000205 */ FString BP_ChatRoom_WillMarkRoomID;
  /* offset=0x0390 flags=0x0008000000000205 */ FString BP_ChatRoom_SearchRoomPassword;
  /* offset=0x039c flags=0x0008001040000205 */ int32 BP_ChatRoom_UpdateOnePlayerIndex;
  /* offset=0x03a0 flags=0x0008000000000205 */ FString BP_ChatRoom_SearchRoomID;
  /* offset=0x03ac flags=0x0008001040000205 */ int32 BP_ChatRoom_UpdateMemberIndex;
  /* offset=0x03b0 flags=0x0000001040000205 */ bool BP_ChatRoom_ClickMenuPlayerIsFriend;
  /* offset=0x03b4 flags=0x0008000000000205 */ FString BP_ChatRoom_DefaultCreateName;
  /* offset=0x03c0 flags=0x0008000000000205 */ FString BP_ChatRoom_MyRoomName;
  /* offset=0x03cc flags=0x0000001040000205 */ bool BP_ChatRoom_WillMarkRoomState;
  /* offset=0x03cd flags=0x0000001040000205 */ bool BP_ChatRoom_MyRoomNeedKey;
  /* offset=0x03d0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChatRoomInfo> BP_ARRAY_ChatRoomInfoList;
  /* offset=0x03dc flags=0x0008000000000005 */ struct FBP_STRUCT_ChatRoomInfo BP_STRUCT_ChatRoomInfo;
  /* offset=0x0408 flags=0x0008000000000205 */ FString BP_ChatRoom_MyChatRoomPassword;
  /* offset=0x0414 flags=0x0000001040000205 */ bool BP_ChatRoom_MyRoomIsSelfCreate;
  /* offset=0x0418 flags=0x0008000000000205 */ FString BP_ChatRoom_SetWindowTitle;
  /* offset=0x0424 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAlertNeedPassword();
  void EventAlertNeedRoomID();
  void EventAlertNeedRoomName();
  void EventChatRoomAddFriend();
  void EventChatRoomInviteTeam();
  void EventChatRoomJoinTeam();
  void EventChatRoomMenuOpen();
  void EventChatRoomOnMyRoom();
  void EventChatRoomOnShowList();
  void EventChatRoomPlayerInfo();
  void EventChatRoomPullBlack();
  void EventChatRoomUpdateClickMenuPlayer();
  void EventClickChatRoomPlayerInfo();
  void EventClickMarkState();
  void EventClickRemoveRoom();
  void EventClickSearchAndJoinRoom();
  void EventCreateChatRoom();
  void EventFetchInfo();
  void EventJoinChatRoom();
  void EventOpenChatRoomPassword();
  void EventOpenCreateChatRoomPanel();
  void EventOpenSetChatRoomPanel();
  void EventQuitChatRoom();
  void EventSaveChatRoom();
  void UserConstructionScript();
};

class Abp_chat_voice_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_GlobalChatvoiceCurrentStage;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_GlobalChatvoiceCurrentRole;
  /* offset=0x02dc flags=0x0000001040000205 */ bool BP_GlobalChatvoiceMicOpened;
  /* offset=0x02e0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_GlobalChatvoiceDownloadData> BP_ARRAY_GlobalChatvoiceDownloadList;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_GlobalChatvoiceCurrentPlayFile;
  /* offset=0x02f8 flags=0x0000001040000205 */ bool BP_GlobalChatvoiceRecordSuccess;
  /* offset=0x02fc flags=0x0008000000000205 */ FString BP_GlobalChatvoiceToTextContent;
  /* offset=0x0308 flags=0x0008000000000205 */ FString BP_GlobalChatvoiceUploadMsgId;
  /* offset=0x0314 flags=0x0008001040000205 */ int32 BP_GlobalChatvoiceUploadTime;
  /* offset=0x0318 flags=0x0008001040000205 */ int32 BP_GlobalChatvoiceCurrentMode;
  /* offset=0x031c flags=0x0000001040000205 */ bool BP_GlobalChatvoiceIsTeamup;
  /* offset=0x0320 flags=0x0008001040000205 */ int32 BP_GlobalChatvoiceTotalLimit;
  /* offset=0x0324 flags=0x0008000000000005 */ struct FBP_STRUCT_GlobalChatvoiceDownloadData BP_STRUCT_GlobalChatvoiceDownloadData;
  /* offset=0x0354 flags=0x0008000000000205 */ FString BP_GlobalChatvoiceCurrentRoom;
  /* offset=0x0360 flags=0x0000001040000205 */ bool BP_GlobalChatvoiceSpeakerOpened;
  /* offset=0x0364 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCancelGVoiceRecord();
  void EventChangeGVoiceMode();
  void EventChangeMicState();
  void EventChangeSpeakerState();
  void EventClearGVoiceProcedure();
  void EventFetchInfo();
  void EventNotifyDownloadFailed();
  void EventNotifyRecordTooShort();
  void EventNotifySystemMicOpen();
  void EventNotifySystemSpeakerOpen();
  void EventNotifySystemVoiceOpen();
  void EventNotifyVoiceChatFailToRecord();
  void EventNotifyVoiceOpenSpeaker();
  void EventNotifyVoiceProcedureFailed();
  void EventNotifyVoiceRecordTooShort();
  void EventSetInfo_Push();
  void EventStartGVoiceRecord();
  void EventStartPlayGVoiceRecord();
  void EventStopGVoiceRecord();
  void EventStopPlayGVoiceRecord();
  void EventTickVoiceRoom();
  void EventUploadGVoiceRecord();
  void UserConstructionScript();
};

class Abp_common_data_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_CommonItemData BP_STRUCT_CommonItemData;
  /* offset=0x0300 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_CommonItemData> BP_ARRAY_CommonItemData;
  /* offset=0x030c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_common_item_get_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_ItemGetPanel_ItemData BP_STRUCT_ItemGetPanel_ItemData;
  /* offset=0x02d4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ItemGetPanel_ItemData> BP_ARRAY_ItemGetPanel_ItemData;
  /* offset=0x02e0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCommonItemGetShowPanel_Push();
  void EventTryToShowGetPanel();
  void UserConstructionScript();
};

class Abp_common_itemtips_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_CommonItemTips_Pos BP_STRUCT_CommonItemTips_Pos;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_CommonItemTips_ItemID;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_CommonItemTips_OwningText;
  /* offset=0x02dc flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCommonItemTipsGetOwningText_Push();
  void UserConstructionScript();
};

class Abp_common_messagebox_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_CommonMessageBox_title;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_CommonMessageBox_OK;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_CommonMessageBox_Cancel;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_CommonMessageBox_style;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_CommonMessageBox_msg;
  /* offset=0x02f8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCommonMessageBoxAfterHide();
  void EventCommonMessageBoxClickCancel();
  void EventCommonMessageBoxClickOK();
  void EventCommonMessageBoxTimerInvoke();
  void EventFetchInfo();
  void UserConstructionScript();
};

class Abp_common_rightnotify_tips_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_CommonRightNotify_Msg;
  /* offset=0x02d0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventOnAfterHide();
  void EventOnAfterShow();
  void UserConstructionScript();
};

class Abp_common_treasurebox_popup_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_TitleName_String;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_DropItem BP_STRUCT_DropItem;
  /* offset=0x02dc flags=0x0008000000000005 */ struct FBP_STRUCT_ActiveAwardItem BP_STRUCT_ActiveAwardItem;
  /* offset=0x02f4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_complaint_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_NOSELECT;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_OTHER;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 COMPLAINT_REASON_CHEATED;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_USEBUG;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_NEGATIVE;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_HANGMACHINE;
  /* offset=0x02dc flags=0x0008000000000205 */ FString Complaint_BeComplaint_UserName;
  /* offset=0x02e8 flags=0x0008000000000205 */ FString Complaint_RoleID;
  /* offset=0x02f4 flags=0x0008000000000205 */ FString Complaint_StrOpenID;
  /* offset=0x0300 flags=0x0008001040000205 */ int32 Complaint_ReportCamp;
  /* offset=0x0304 flags=0x0008001040000205 */ int32 COMPLAINT_REASON_DIRTYWORD;
  /* offset=0x0308 flags=0x0008001040000205 */ int32 Complaint_Type2;
  /* offset=0x030c flags=0x0008000000000205 */ FString Complaint_Content;
  /* offset=0x0318 flags=0x0008001040000205 */ int32 Complaint_Type1;
  /* offset=0x031c flags=0x0008001040000205 */ int32 Complaint_PlayerNumber;
  /* offset=0x0320 flags=0x0008000000000005 */ struct FBP_STRUCT_ComplaintTeammateItem BP_STRUCT_ComplaintTeammateItem;
  /* offset=0x032c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ComplaintTeammateItem> BP_ARRAY_ComplaintTeammateList;
  /* offset=0x0338 flags=0x0000001040000205 */ bool Complaint_IsAI;
  /* offset=0x033c flags=0x0008001040000205 */ int32 Complaint_RankType;
  /* offset=0x0340 flags=0x0008001040000205 */ int32 Complaint_Type3;
  /* offset=0x0344 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventComplaintClickSubmit();
  void EventComplaintClose();
  void EventComplaintNumEmptyTips();
  void EventComplaintNumOverTips();
  void EventComplaintRefreshUI();
  void EventNameHadComplaintedTips();
  void UserConstructionScript();
};

class Abp_config_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventChangeAccount();
  void UserConstructionScript();
};

class Abp_connection_waiting_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_createrole_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_CreateRole_LobbyToAvatar;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_CreateRole_CardCount;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_CreateRole_HairID;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_CreateRole_ModeCost;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_CreateRole_HeadId;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 BP_CreateRole_Mode;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_CreateRole_Sex;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_CreateRole_HairType;
  /* offset=0x02e4 flags=0x0008001040000205 */ int32 BP_CreateRole_Race;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_CreateRole_HairColor;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_CreateRole_Name;
  /* offset=0x02f8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCancelAvatarReset();
  void EventCloseAvatarResetPanel();
  void EventCloseAvatarResetPanelInter();
  void EventCreateRoleHideItemTips();
  void EventCreateRolePanelLogOut();
  void EventCreateRoleShowItemTips();
  void EventEnterLanguageSetting();
  void EventEnterLobby();
  void EventFetchInfo();
  void EventFilterName();
  void EventGetCreateRoleHairID();
  void EventGetCreateRoleHeadID();
  void EventOpenAvatarResetPanel();
  void EventOpenAvatarResetPanelInter();
  void EventRandomName();
  void EventSelectFeMale();
  void EventSelectHairColor1();
  void EventSelectHairColor2();
  void EventSelectHairColor3();
  void EventSelectHairColor4();
  void EventSelectHairColor5();
  void EventSelectHairColor6();
  void EventSelectHairType1();
  void EventSelectHairType2();
  void EventSelectHairType3();
  void EventSelectHairType4();
  void EventSelectHairType5();
  void EventSelectHairType6();
  void EventSelectHairType7();
  void EventSelectHairType8();
  void EventSelectHairType9();
  void EventSelectMale();
  void EventSelectRace1();
  void EventSelectRace2();
  void EventSelectRace3();
  void EventSelectRace4();
  void EventSelectRace5();
  void EventSelectRace6();
  void EventShowAvatarResetBuyPanel();
  void EventUpdateCardCount();
  void UserConstructionScript();
};

class Abp_device_notice_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_eightday_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_Request_EightDay_day;
  /* offset=0x02c8 flags=0x0008000000000005 */ struct FBP_STRUCT_EightDayUI_Info BP_STRUCT_EightDayUI_Info;
  /* offset=0x02f8 flags=0x0008000000000205 */ FString BP_String_EightDay_ActiveTime;
  /* offset=0x0304 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_EightDayUI_Info> BP_ARRAY_EightDay_Items;
  /* offset=0x0310 flags=0x0008000000000005 */ struct FBP_STRUCT_BetterAwardInfo BP_STRUCT_BetterAwardInfo;
  /* offset=0x0340 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventEightDayHideUI();
  void EventEightDaySignUpReq();
  void EventEightDaySignUpReq_Push();
  void EventEightDayUpdateTime();
  void EventEightDayUpdateUI();
  void EventFetchInfo();
  void UserConstructionScript();
};

class Abp_exciting_party_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_Exciting_Party_Award_Info BP_STRUCT_Exciting_Party_Award_Info;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_ExcitingPart_Op_Item_Idx;
  /* offset=0x02d4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Exciting_Party_Award_Info> BP_ARRAY_Exciting_Party_Award_Infos;
  /* offset=0x02e0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Exciting_Party_Info> BP_ARRAY_Exciting_Party_Infos;
  /* offset=0x02ec flags=0x0008000000000005 */ struct FBP_STRUCT_Exciting_Party_Info BP_STRUCT_Exciting_Party_Info;
  /* offset=0x0360 flags=0x0008000000000205 */ FString BP_Exciting_Party_ACT_TIME;
  /* offset=0x036c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventExcitingPartyCloseUI();
  void EventExcitingPartyRule();
  void EventExcitingPartyShare();
  void EventExcitingPartyShareGet();
  void EventExcitingPartyViewBox();
  void EventFetchInfo();
  void EventRefreshOpenExcitingPartyTime();
  void EventSetInfo_Push();
  void UserConstructionScript();
};

class Abp_fade_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFadeHide();
  void EventFadeIn();
  void UserConstructionScript();
};

class Abp_global_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_IsAppleAudit;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_GlobalTips_ItemID;
  /* offset=0x02cc flags=0x0008000000000205 */ FString BP_String_ServerTime;
  /* offset=0x02d8 flags=0x0000001040000205 */ bool BP_HadPlayAnimation;
  /* offset=0x02d9 flags=0x0000001040000205 */ bool BP_IOS_CHECK;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_Global_Url;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_BA_REASON;
  /* offset=0x02ec flags=0x0000001040000205 */ bool BP_CHECK_MENU_OPEN_RESULT;
  /* offset=0x02f0 flags=0x0008000000000005 */ struct FBP_STRUCT_GlobalTips_Pos BP_STRUCT_GlobalTips_Pos;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 BP_ChatBan;
  /* offset=0x02fc flags=0x0000001040000205 */ bool BP_IS_EXTERNAL_CHANNEL;
  /* offset=0x0300 flags=0x0008001040000205 */ int32 BP_StartUpType;
  /* offset=0x0304 flags=0x0008001040000205 */ int32 BP_played_cg;
  /* offset=0x0308 flags=0x0008001040000205 */ int32 BP_BA_BUTTON_TYPE;
  /* offset=0x030c flags=0x0008001040000205 */ int32 BP_CHECK_MENU_OPEN_ID;
  /* offset=0x0310 flags=0x0008000000000005 */ struct FBP_STRUCT_GlobalTips_TimeInfo BP_STRUCT_GlobalTips_TimeInfo;
  /* offset=0x0320 flags=0x0008001040000205 */ int32 BP_Platform;
  /* offset=0x0324 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAndroidQuitGame();
  void EventChatBanInfo();
  void EventChatCheckBan();
  void EventCheckIfMenuOpen();
  void EventFetchInfo();
  void EventGlobalCloseItemTips();
  void EventGlobalShowItemTips_Push();
  void EventJumpUrl();
  void EventSendBAReport();
  void EventSetInfo_Push();
  void EventSetPlayedCG();
  void EventShowPlatIconTips();
  void EventShowPlatQQStartup();
  void EventShowPlatQQVip();
  void EventShowPlatWXStartup();
  void EventUpdateServerTime();
  void UserConstructionScript();
};

class Abp_gm_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_gmMsg;
  /* offset=0x02d0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventGmOpenPromotor();
  void EventGmSendShowTeamUpUI();
  void EventGmSend_Push();
  void EventGmShowChatEntrance();
  void UserConstructionScript();
};

class Abp_good_item_get_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_IsShareAwardGold;
  /* offset=0x02c8 flags=0x0008000000000005 */ struct FBP_STRUCT_GoodItemGet_ToShow BP_STRUCT_GoodItemGet_ToShow;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_HasShareNum;
  /* offset=0x02e0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_GoodItemGet_ToShow> BP_Array_GoodItemGet_ToShow;
  /* offset=0x02ec flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventSetInfo_Push();
  void EventShowGetPanel();
  void UserConstructionScript();
};

class Abp_guide_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_item_get_share_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ItemGetShare_ImagePath;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_ItemGetShare_ShowInfo BP_STRUCT_ItemGetShare_ShowInfo;
  /* offset=0x0314 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventItemShareClickSaveLocalBtn();
  void EventItemShareClickShareFriendBtn();
  void EventItemShareClickShareZoneBtn();
  void EventItemShareHide();
  void EventSetInfo_Push();
  void EventShowSharePanel();
  void UserConstructionScript();
};

class Abp_levelup_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_LevelUp_OldLevel;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_LevelUp_OldRank_RankName;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_LevelUp_OldRankLevel;
  /* offset=0x02d8 flags=0x0000001040000205 */ bool BP_LevelUp_PromoteToHigherRank;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_LevelUp_OldRank_RankBgPath;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_LevelUp_NewRankPoint;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 BP_LevelUp_RankImproveNum;
  /* offset=0x02f0 flags=0x0000001040000205 */ bool BP_LevelUp_ShowRankUp;
  /* offset=0x02f1 flags=0x0000001040000205 */ bool BP_IsShareAwardGold;
  /* offset=0x02f4 flags=0x0008000000000205 */ FString BP_LevelUp_NewRankName;
  /* offset=0x0300 flags=0x0008001040000205 */ int32 BP_LevelUp_NewRankLevel;
  /* offset=0x0304 flags=0x0008000000000205 */ FString BP_LevelUp_RankTypeName;
  /* offset=0x0310 flags=0x0008001040000205 */ int32 BP_LevelUp_NewRankMaxIntergral;
  /* offset=0x0314 flags=0x0008001040000205 */ int32 BP_LevelUp_NewRankMinIntergral;
  /* offset=0x0318 flags=0x0000001040000205 */ bool BP_LevelUp_ShowLevelUp;
  /* offset=0x031c flags=0x0008000000000205 */ FString BP_RankBgPath;
  /* offset=0x0328 flags=0x0008001040000205 */ int32 BP_LevelUp_OldRankMaxIntergral;
  /* offset=0x032c flags=0x0008001040000205 */ int32 BP_LevelUp_OldRankPoint;
  /* offset=0x0330 flags=0x0008001040000205 */ int32 BP_HasLevelupShareNum;
  /* offset=0x0334 flags=0x0008000000000205 */ FString BP_RankFgPath;
  /* offset=0x0340 flags=0x0008000000000205 */ FString BP_LevelUp_OldRankName;
  /* offset=0x034c flags=0x0008001040000205 */ int32 BP_LevelUp_OldRankMinIntergral;
  /* offset=0x0350 flags=0x0008000000000205 */ FString BP_LevelUp_OldRank_RankFgPath;
  /* offset=0x035c flags=0x0008001040000205 */ int32 BP_LevelUp_RankType;
  /* offset=0x0360 flags=0x0008001040000205 */ int32 BP_LevelUp_RankAnimation;
  /* offset=0x0364 flags=0x0008000000000205 */ FString BP_RankName;
  /* offset=0x0370 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventLevelUpShareLevel();
  void EventLevelUpShareRank();
  void UserConstructionScript();
};

class Abp_live_broadcast_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_Live_Broadcast_Url;
  /* offset=0x02d0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventGetUrl();
  void EventSetInfo_Push();
  void UserConstructionScript();
};

class Abp_loading_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_InitPercent;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_LoadingTo;
  /* offset=0x02cc flags=0x0008001040000205 */ float BP_Percent_f;
  /* offset=0x02d0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void UserConstructionScript();
};

class Abp_lobby_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_RoleInfoSavedChoosingZoneId;
  /* offset=0x02c8 flags=0x0000001040000205 */ bool BP_LobbyNetworkStatus;
  /* offset=0x02cc flags=0x0008000000000005 */ struct FBP_STRUCT_SpawnPlayerData BP_STRUCT_SpawnPlayerData;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 BP_Lobby_Role_Avatar_Frame;
  /* offset=0x02f4 flags=0x0000001040000205 */ bool DataMgrInit;
  /* offset=0x02f8 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SpawnPlayerData> BP_ARRAY_LobbyPlayerDataList;
  /* offset=0x0304 flags=0x0000001040000205 */ bool BP_COLLECT_EQUIPMENT_Open;
  /* offset=0x0308 flags=0x0008000000000205 */ FString BP_PlayerUid;
  /* offset=0x0314 flags=0x0008001040000205 */ int32 BP_PlayerQQVip;
  /* offset=0x0318 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ActivityBtnDisplay> BP_ARRAY_LobbyActivityBtnDisplayList;
  /* offset=0x0324 flags=0x0008000000000005 */ struct FBP_STRUCT_AvatarChange BP_STRUCT_AvatarChange;
  /* offset=0x0334 flags=0x0008001040000205 */ int32 BP_PlayerExp;
  /* offset=0x0338 flags=0x0008001040000205 */ int32 BP_PlayerGold;
  /* offset=0x033c flags=0x0008001040000205 */ int32 BP_LOBBY_SPAWNPOS;
  /* offset=0x0340 flags=0x0008000000000005 */ struct FBP_STRUCT_TransformUseList BP_STRUCT_TransformUseList;
  /* offset=0x0348 flags=0x0000001040000205 */ bool BP_CurrentRedPointStatus;
  /* offset=0x0349 flags=0x0000001040000205 */ bool BP_Exciting_Party_Open;
  /* offset=0x034c flags=0x0008001040000205 */ int32 BP_CurrentMenuId;
  /* offset=0x0350 flags=0x0000001040000205 */ bool BP_Lobby_MenuOpen;
  /* offset=0x0354 flags=0x0008001040000205 */ int32 BP_FriendApplyMessageCount;
  /* offset=0x0358 flags=0x0008000000000005 */ struct FBP_STRUCT_ActivityBtnDisplay BP_STRUCT_ActivityBtnDisplay;
  /* offset=0x0380 flags=0x0008001040000205 */ int32 BP_RankSavedChoosingZoneId;
  /* offset=0x0384 flags=0x0008000000000205 */ FString BP_PlayerIconUrl;
  /* offset=0x0390 flags=0x0000001040000205 */ bool EmulatorCheck_FirstinLobby;
  /* offset=0x0391 flags=0x0000001040000205 */ bool LobbyModeSwitched;
  /* offset=0x0394 flags=0x0008001040000205 */ int32 BP_PlayerLevel;
  /* offset=0x0398 flags=0x0000001040000205 */ bool BP_Free_Data_Open;
  /* offset=0x0399 flags=0x0000001040000205 */ bool BP_Lobby_OpenShoporWardrobe;
  /* offset=0x039c flags=0x0008001040000205 */ int32 BP_CurrentMaxExp;
  /* offset=0x03a0 flags=0x0000000000000205 */ TArray<int32> BP_ARRAY_Lobby_ActivityNotOpenList;
  /* offset=0x03ac flags=0x0008000000000205 */ FString BP_PlayerName;
  /* offset=0x03b8 flags=0x0000001040000205 */ bool BP_LevelChange;
  /* offset=0x03b9 flags=0x0000001040000205 */ bool BP_Lobby_IsActivityOpened;
  /* offset=0x03ba flags=0x0000001040000205 */ bool BP_Lobby_CanOpenUrl;
  /* offset=0x03bb flags=0x0000001040000205 */ bool BP_XinyueRedPointSvrOpen;
  /* offset=0x03bc flags=0x0008001040000205 */ int32 BP_LobbyNetworkDelay;
  /* offset=0x03c0 flags=0x0008001040000205 */ int32 BP_Lobby_PlayerMaxRankLevel;
  /* offset=0x03c4 flags=0x0008000000000005 */ struct FBP_STRUCT_TeamUpRingsChange BP_STRUCT_TeamUpRingsChange;
  /* offset=0x03d4 flags=0x0000001040000205 */ bool BP_Lobby_RankChange;
  /* offset=0x03d8 flags=0x0008001040000205 */ int32 BP_PlayerGender;
  /* offset=0x03dc flags=0x0008001040000205 */ int32 BP_LobbyPlayerNum;
  /* offset=0x03e0 flags=0x0008000000000005 */ struct FBP_STRUCT_ShopLimit BP_STRUCT_ShopLimit;
  /* offset=0x03f8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAvatarChange();
  void EventCanOpenUrl();
  void EventClickDailyShareBtn();
  void EventEnterConfig();
  void EventEnterFriendList();
  void EventEnterMail();
  void EventEnterRank();
  void EventEnterRoleInfo();
  void EventEnterRoom();
  void EventEnterSeason();
  void EventEnterShop();
  void EventEnterSigninSystem();
  void EventEnterTeamUp();
  void EventEnterWardrobe();
  void EventFetchInfo();
  void EventGetCollectEquipOpenState();
  void EventGetExcitingPartyOpenState();
  void EventGetFriendProfile();
  void EventGetShopLimitTitle();
  void EventHideScrollMsg();
  void EventInitActivityListComplete();
  void EventIsActivityOpened();
  void EventLeaveWardrobe();
  void EventLeaveWeekSignUp();
  void EventLobbyAndroidBack();
  void EventLobbyEnterAlliance();
  void EventLobbyHideShop();
  void EventLobbyLeaveChatWnd();
  void EventLobbyLeaveFriend();
  void EventLobbyLeaveGuidePanel();
  void EventLobbyLeaveItemGet();
  void EventLobbyLeaveMail();
  void EventLobbyLeaveRankList();
  void EventLobbyLeaveRoleInfo();
  void EventLobbyLeaveSetting();
  void EventLobbyLeaveTask();
  void EventLobbyLeaveWorldView();
  void EventOpenActivityGroupUI();
  void EventOpenActivityPanel();
  void EventOpenChatUI();
  void EventOpenCollectEquipment();
  void EventOpenCommunityInLobby();
  void EventOpenESportTV();
  void EventOpenFreeDataUrl();
  void EventOpenGMMenu();
  void EventOpenGetExcitingPartyUI();
  void EventOpenGuidePanel();
  void EventOpenHuati();
  void EventOpenMissionUI();
  void EventOpenQQVip();
  void EventOpenQQlibao();
  void EventOpenShopLimitUI();
  void EventOpenWorldView();
  void EventOpenXinyue();
  void EventRankSavedChoosingZoneId_Push();
  void EventRerollAllScrollMsg();
  void EventRoleInfoSavedChoosingZoneId_Push();
  void EventSetInfo_Push();
  void EventTeamUpRings();
  void EventTestLevelUp();
  void EventTestRedpoint();
  void EventTestRemovePlayer();
  void EventTestRemovePlayer2();
  void EventTestRemovePlayer3();
  void EventTestScrollMsg();
  void EventTestSpawnPlayer();
  void EventTestSpawnPlayer2();
  void EventTestSpawnPlayer3();
  void UserConstructionScript();
};

class Abp_lobby_friend_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Blacklist_Friend_Profile;
  /* offset=0x02d0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Apply_Friend_Profile;
  /* offset=0x02dc flags=0x0000001040000205 */ bool BP_FriendSystem_IsInnerFriendNotPlatFriend;
  /* offset=0x02e0 flags=0x0008000000000205 */ FString BP_FriendSystem_CheckFriendTypeUid;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_DELETE_FRIEND_BLACK_ID;
  /* offset=0x02f8 flags=0x0008000000000205 */ FString BP_Delete_Friend_ID;
  /* offset=0x0304 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Plat_Friend_Profile;
  /* offset=0x0310 flags=0x0008000000000205 */ FString BP_FriendSystem_Present_Coin_Friend_ID;
  /* offset=0x031c flags=0x0008001040000205 */ int32 BP_Verify_MaxWordCount;
  /* offset=0x0320 flags=0x0008000000000205 */ FString BP_Verify_DefaultWord;
  /* offset=0x032c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Inner_Friend_Profile;
  /* offset=0x0338 flags=0x0008000000000205 */ FString BP_Delete_Friend_Name;
  /* offset=0x0344 flags=0x0000001040000205 */ bool BP_Is_Show;
  /* offset=0x0348 flags=0x0008000000000205 */ FString BP_APPLY_TEAM_FRIEND_ID;
  /* offset=0x0354 flags=0x0008000000000205 */ FString BP_SearchName;
  /* offset=0x0360 flags=0x0008000000000205 */ FString BP_SelfOpenid;
  /* offset=0x036c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Search_Friend_Profile;
  /* offset=0x0378 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Recent_Teammate_Profile;
  /* offset=0x0384 flags=0x0008000000000205 */ FString BP_Add_Friend_ID;
  /* offset=0x0390 flags=0x0008000000000205 */ FString BP_RSPAdd_OP;
  /* offset=0x039c flags=0x0008001040000205 */ int32 BP_Friend_UpdatePlatIndex;
  /* offset=0x03a0 flags=0x0008001040000205 */ int32 BP_Friend_UpdateInnerIndex;
  /* offset=0x03a4 flags=0x0008000000000205 */ FString BP_FRIEND_PROFILE_ID;
  /* offset=0x03b0 flags=0x0008000000000005 */ struct FBP_STRUCT_FriendProfile BP_STRUCT_FriendProfile;
  /* offset=0x04d0 flags=0x0008000000000205 */ FString BP_ADD_FRIEND_BLACK_ID;
  /* offset=0x04dc flags=0x0008000000000205 */ FString BP_FRIEND_CHAT_ID;
  /* offset=0x04e8 flags=0x0008001040000205 */ int32 BP_XY_API_RedPoint;
  /* offset=0x04ec flags=0x0008000000000205 */ FString BP_XY_API_URL;
  /* offset=0x04f8 flags=0x0008000000000205 */ FString BP_Add_Friend_Verify;
  /* offset=0x0504 flags=0x0008000000000205 */ FString BP_DELETE_FRIEND_BLACK_NAME;
  /* offset=0x0510 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_FriendProfile> BP_ARRAY_Invite_Friend_Profile;
  /* offset=0x051c flags=0x0008001040000205 */ int32 BP_Friend_Platform;
  /* offset=0x0520 flags=0x0008000000000205 */ FString BP_RSPAdd_Friend_ID;
  /* offset=0x052c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventLobbyFriendAddBlack_Push();
  void EventLobbyFriendApplyEnterTeam_Push();
  void EventLobbyFriendApply_Push();
  void EventLobbyFriendBlackList_Push();
  void EventLobbyFriendChat_Push();
  void EventLobbyFriendCheckFriendInnerandPlat_Push();
  void EventLobbyFriendDeleteBlack_Push();
  void EventLobbyFriendDelete_Push();
  void EventLobbyFriendGetRecentTeammate_Push();
  void EventLobbyFriendInner_Push();
  void EventLobbyFriendInvitePlatformFriend_Push();
  void EventLobbyFriendOpenIdPlat_Push();
  void EventLobbyFriendOpenId_Push();
  void EventLobbyFriendProfile_Push();
  void EventLobbyFriendRespondApply_Push();
  void EventLobbyFriendSearchEmpty_Push();
  void EventLobbyFriendSearch_Push();
  void EventLobbyFriendUpdateInvite_Push();
  void EventLobbyPresentCoin_Push();
  void EventSetXYAPIHideRedPoint();
  void EventSetXYAPIShowRedPoint();
  void EventXYAPISetUrl();
  void UserConstructionScript();
};

class Abp_lobby_platform_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_lobby_reportbug_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_CANNOTENTERBATTLE;
  /* offset=0x02c8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventShowLobbyBugReportPanel();
  void EventShowLobbyBugReportSuccessMsg();
  void UserConstructionScript();
};

class Abp_login_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_InputOpenId;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_ServerInfo BP_STRUCT_ServerInfo;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 BP_SelectedShowServerInfo;
  /* offset=0x02f4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ServerInfo> BP_ARRAY_ServerList_Info;
  /* offset=0x0300 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventConnectToGate();
  void EventEnterLanguageSetting();
  void EventFetchInfo();
  void EventHideScrollView();
  void EventLogout();
  void EventOpenExampleUI();
  void EventShowCurrentSelect();
  void EventShowScrollView();
  void UserConstructionScript();
};

class Abp_macros_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHARE_RANK_ZORDER;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SEASON_ZORDER;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_ENUM_UI_ROOM_LIST_ZORDER;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_ENUM_UI_ALLIANCE_ZORDER;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_ACTIVITYBTNLIST;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_LEVEL_UP_ZORDER;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_ENUM_GENDER_MALE;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_BA_SLAP_SYSTEMGO;
  /* offset=0x02e4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_ROOM_WAITING_ZORDER;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHOPLIMIT_ZORDER;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 BP_ENUM_UI_ROLEINFO_ZORDER;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 BP_ENUM_SHOP_TYPE_CHEST;
  /* offset=0x02f4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SIGNIN_ZORDER;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 BP_ENUM_STARTUPTYPE_WXGAME;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 BP_ENUM_UI_COMMON_ITEMTIPS_ZORDER;
  /* offset=0x0300 flags=0x0008001040000205 */ int32 BP_PROFILE_MSG_TYPE_RANK;
  /* offset=0x0304 flags=0x0008001040000205 */ int32 BP_ENUM_LOGINLIMIT_TIME1;
  /* offset=0x0308 flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_FACE;
  /* offset=0x030c flags=0x0008001040000205 */ int32 BP_ENUM_UI_OPEN_BOX_ZORDER;
  /* offset=0x0310 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_WORLDVIEW;
  /* offset=0x0314 flags=0x0008001040000205 */ int32 BP_ENUM_INTL_ROLEINFO_REFRESH_TYPE_BASIC_ZONECHANGED;
  /* offset=0x0318 flags=0x0008001040000205 */ int32 BP_ENUM_PLAYFORM_TOURIST;
  /* offset=0x031c flags=0x0008001040000205 */ int32 BP_BA_LOBBY_NEWERGUIDE_PANEL;
  /* offset=0x0320 flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_TEAM;
  /* offset=0x0324 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHare_normal_cjhb_ZORDER;
  /* offset=0x0328 flags=0x0008001040000205 */ int32 BP_ENUM_UI_COMMON_ITEM_GET_ZORDER;
  /* offset=0x032c flags=0x0008001040000205 */ int32 BP_BA_SHARE_ITEM;
  /* offset=0x0330 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_FRIEND;
  /* offset=0x0334 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_WORLDVIEW;
  /* offset=0x0338 flags=0x0008001040000205 */ int32 BP_ENUM_UI_WARDROBE_ZORDER;
  /* offset=0x033c flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_SHOE;
  /* offset=0x0340 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_SEASON;
  /* offset=0x0344 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_SHARE;
  /* offset=0x0348 flags=0x0008001040000205 */ int32 BP_ENUM_UI_ACTIVITY_ZORDER;
  /* offset=0x034c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_TASK;
  /* offset=0x0350 flags=0x0008001040000205 */ int32 BP_ENUM_UI_Share_cjhb_ZORDER;
  /* offset=0x0354 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_START;
  /* offset=0x0358 flags=0x0008001040000205 */ int32 BP_ENUM_UI_COMMON_MESSAGEBOX_ZORDER;
  /* offset=0x035c flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHOP_ZORDER;
  /* offset=0x0360 flags=0x0008001040000205 */ int32 BP_ENUM_PLAYFORM_WX;
  /* offset=0x0364 flags=0x0008001040000205 */ int32 BP_ENUM_UI_CHAT_ENTRANCE_ZORDER;
  /* offset=0x0368 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_GAMEGROUP;
  /* offset=0x036c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_ROOM;
  /* offset=0x0370 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_HUATIQUAN;
  /* offset=0x0374 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_XINYUE;
  /* offset=0x0378 flags=0x0008001040000205 */ int32 BP_COMBAT_MSG_TYPE_ROLEINFO;
  /* offset=0x037c flags=0x0008001040000205 */ int32 BP_ENUM_GENDER_FEMALE;
  /* offset=0x0380 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_LIULIANG;
  /* offset=0x0384 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_WARDROBE_PANEL;
  /* offset=0x0388 flags=0x0008001040000205 */ int32 BP_ENUM_UI_Share_Game_Result_ZORDER;
  /* offset=0x038c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_LIVE;
  /* offset=0x0390 flags=0x0008001040000205 */ int32 BP_ENUM_SHOP_TYPE_AVATAR;
  /* offset=0x0394 flags=0x0008001040000205 */ int32 BP_ENUM_SHOP_SUB_TYPE_HEAD;
  /* offset=0x0398 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_LIULIANG;
  /* offset=0x039c flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x03a0 flags=0x0008001040000205 */ int32 BP_ENUM_LOGINLIMIT_COUNT1;
  /* offset=0x03a4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_TASK_ZORDER;
  /* offset=0x03a8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHARE_ITEM_ZORDER;
  /* offset=0x03ac flags=0x0008001040000205 */ int32 BP_ENUM_UI_RECRUIT_ZORDER;
  /* offset=0x03b0 flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_FRIEND_SEARCH;
  /* offset=0x03b4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_WORLDVIEW_PANEL;
  /* offset=0x03b8 flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_ROLE_INFO;
  /* offset=0x03bc flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQVIP;
  /* offset=0x03c0 flags=0x0008001040000205 */ int32 BP_ENUM_UI_COMMON_RIGHT_NOTIFY_ZORDER;
  /* offset=0x03c4 flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_BATTLE_RESULT;
  /* offset=0x03c8 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_LOBBY;
  /* offset=0x03cc flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_WARDROBE;
  /* offset=0x03d0 flags=0x0008001040000205 */ int32 BP_BA_SHARE_ROOMREFASH;
  /* offset=0x03d4 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_TASK;
  /* offset=0x03d8 flags=0x0008001040000205 */ int32 BP_BA_SLAP_URLGO;
  /* offset=0x03dc flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_HUATIQUAN;
  /* offset=0x03e0 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SCROLLMSG_ZORDER;
  /* offset=0x03e4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_NOTICE_ZORDER;
  /* offset=0x03e8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_FRIEND_ZORDER;
  /* offset=0x03ec flags=0x0008001040000205 */ int32 BP_ENUM_STARTUPTYPE_COMM;
  /* offset=0x03f0 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_TEAM;
  /* offset=0x03f4 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_ACTIVITY;
  /* offset=0x03f8 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_COMMUNITY;
  /* offset=0x03fc flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_PANT;
  /* offset=0x0400 flags=0x0008001040000205 */ int32 BP_BA_SHARE_WXGAMEGROUP;
  /* offset=0x0404 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_RANK;
  /* offset=0x0408 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_FRONTIER_AWARD;
  /* offset=0x040c flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_OPENSERVICE_CARNIVAL;
  /* offset=0x0410 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_INVITE_FRIEND;
  /* offset=0x0414 flags=0x0008000000000205 */ FString BP_ENUM_TEST;
  /* offset=0x0420 flags=0x0008001040000205 */ int32 BP_ENUM_PLAYFORM_HUATIQUAN;
  /* offset=0x0424 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_EXCITING_FEAST;
  /* offset=0x0428 flags=0x0008001040000205 */ int32 BP_ENUM_UI_BATTLE_MAIN_ZORDER;
  /* offset=0x042c flags=0x0008000000000205 */ FString NetErrorCode_NONE;
  /* offset=0x0438 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_SETTING;
  /* offset=0x043c flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_HEAD;
  /* offset=0x0440 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_QQTRIBE;
  /* offset=0x0444 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_ACTIVITY_CENTER;
  /* offset=0x0448 flags=0x0008001040000205 */ int32 BP_ENUM_UI_Share_PersonInfo;
  /* offset=0x044c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_CHAT;
  /* offset=0x0450 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_COMMUNITY;
  /* offset=0x0454 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_ALLIANCE;
  /* offset=0x0458 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_QQ_VIP;
  /* offset=0x045c flags=0x0008001040000205 */ int32 BP_BA_LOBBY_WX_START;
  /* offset=0x0460 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_LIVE;
  /* offset=0x0464 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_QQ_DIANJING;
  /* offset=0x0468 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x046c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_ESPORTS;
  /* offset=0x0470 flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_CHAT;
  /* offset=0x0474 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_XINYUE;
  /* offset=0x0478 flags=0x0008001040000205 */ int32 BP_ENUM_LOGINLIMIT_COUNT2;
  /* offset=0x047c flags=0x0008001040000205 */ int32 BP_ENUM_UI_AllRedPacket_ZORDER;
  /* offset=0x0480 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_START;
  /* offset=0x0484 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_WARDROBE;
  /* offset=0x0488 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_ESPORTS;
  /* offset=0x048c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_RANK;
  /* offset=0x0490 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_LIULIANG;
  /* offset=0x0494 flags=0x0008001040000205 */ int32 BP_ENUM_UI_RECONNECT_WAITING_ZORDER;
  /* offset=0x0498 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_LIBAO;
  /* offset=0x049c flags=0x0008001040000205 */ int32 BP_BA_LOBBY_RANK_PANEL;
  /* offset=0x04a0 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_ACTIVITY;
  /* offset=0x04a4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_SHOP_PANEL;
  /* offset=0x04a8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_Share_Day_ZORDER;
  /* offset=0x04ac flags=0x0008001040000205 */ int32 BP_ENUM_LOGINLIMIT_TIME2;
  /* offset=0x04b0 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_FRIEND_PANEL;
  /* offset=0x04b4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_MAIL_PANEL;
  /* offset=0x04b8 flags=0x0008001040000205 */ int32 BP_BA_SHARE_GAMEPROPAGANDAPANEL;
  /* offset=0x04bc flags=0x0008001040000205 */ int32 BP_BA_LOBBY_GUIDE_PANEL;
  /* offset=0x04c0 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_ALLIANCE_PANEL;
  /* offset=0x04c4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_TASK_PANEL;
  /* offset=0x04c8 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_SEASON_PANEL;
  /* offset=0x04cc flags=0x0008001040000205 */ int32 BP_BA_LOBBY_ROOM_PANEL;
  /* offset=0x04d0 flags=0x0008001040000205 */ int32 BP_ENUM_STARTUPTYPE_QQGAME;
  /* offset=0x04d4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_QQ_START;
  /* offset=0x04d8 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_WXGAMEGROUP;
  /* offset=0x04dc flags=0x0008001040000205 */ int32 BP_BA_LOBBY_CHAT_PANEL;
  /* offset=0x04e0 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_SETTING_PANEL;
  /* offset=0x04e4 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_GAMEGROUP;
  /* offset=0x04e8 flags=0x0008001040000205 */ int32 BP_ENUM_PLAYFORM_QQ;
  /* offset=0x04ec flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_SHOP;
  /* offset=0x04f0 flags=0x0008001040000205 */ int32 BP_BA_SHARE_MAINPANEL;
  /* offset=0x04f4 flags=0x0008001040000205 */ int32 BP_BA_SHARE_SHAREBTN;
  /* offset=0x04f8 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_TOURIST_LIVE;
  /* offset=0x04fc flags=0x0008001040000205 */ int32 BP_ENUM_UI_ResetRole;
  /* offset=0x0500 flags=0x0008001040000205 */ int32 BP_BA_SHARE_GAMEPROPAGANDA;
  /* offset=0x0504 flags=0x0008001040000205 */ int32 BP_ENUM_UI_NOTICEBOX_ZORDER;
  /* offset=0x0508 flags=0x0008001040000205 */ int32 BP_BA_SHARE_WXFRIENDCIRCLE;
  /* offset=0x050c flags=0x0008001040000205 */ int32 BP_BA_SHARE_QQSPACE;
  /* offset=0x0510 flags=0x0008001040000205 */ int32 BP_BA_SHARE_WXFRIEND;
  /* offset=0x0514 flags=0x0008001040000205 */ int32 BP_BA_SHARE_QQFRIEND;
  /* offset=0x0518 flags=0x0008001040000205 */ int32 BP_BA_SHARE_ITEMPANEL;
  /* offset=0x051c flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_COLLECT_EQUIPMENT;
  /* offset=0x0520 flags=0x0008001040000205 */ int32 BP_ENUM_UI_Share_Day_Fianly_ZORDER;
  /* offset=0x0524 flags=0x0008001040000205 */ int32 BP_BA_SHARE_GRADE;
  /* offset=0x0528 flags=0x0008001040000205 */ int32 BP_BA_SHARE_QQTRIBE;
  /* offset=0x052c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_HELP;
  /* offset=0x0530 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_MAIL;
  /* offset=0x0534 flags=0x0008001040000205 */ int32 BP_BA_SHARE_ROOMQRCODE;
  /* offset=0x0538 flags=0x0008001040000205 */ int32 BP_PROFILE_MSG_TYPE_FRIEND;
  /* offset=0x053c flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x0540 flags=0x0008001040000205 */ int32 BP_ENUM_UI_RANK_ZORDER;
  /* offset=0x0544 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x0548 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_WEEK_SIGNUP;
  /* offset=0x054c flags=0x0008001040000205 */ int32 BP_ENUM_ADD_FRIEND_FROM_ALLIANCE;
  /* offset=0x0550 flags=0x0008001040000205 */ int32 BP_ENUM_UI_SHAREAWARD_ZORDER;
  /* offset=0x0554 flags=0x0008001040000205 */ int32 BP_ENUM_UI_MAIL_ZORDER;
  /* offset=0x0558 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x055c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_XINYUE;
  /* offset=0x0560 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_QQ_LIVE;
  /* offset=0x0564 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_HUATIQUAN;
  /* offset=0x0568 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x056c flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x0570 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_WX_DIANJING;
  /* offset=0x0574 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x0578 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_EIGHT_DAY;
  /* offset=0x057c flags=0x0008001040000205 */ int32 BP_ENUM_SHOP_SUB_TYPE_FACE;
  /* offset=0x0580 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_PROMOTION;
  /* offset=0x0584 flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_HAIR;
  /* offset=0x0588 flags=0x0008001040000205 */ int32 BP_BA_NEWTEACHING_CLICK;
  /* offset=0x058c flags=0x0008001040000205 */ int32 BP_ENUM_UI_Alliance_Recruit;
  /* offset=0x0590 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_WX_COMMUNITY;
  /* offset=0x0594 flags=0x0008001040000205 */ int32 BP_ENUM_PLAYFORM_XINYUE;
  /* offset=0x0598 flags=0x0008001040000205 */ int32 BP_ENUM_INTL_ROLEINFO_REFRESH_TYPE_DEFAULT;
  /* offset=0x059c flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_TEACHING;
  /* offset=0x05a0 flags=0x0008001040000205 */ int32 BP_PROFILE_MSG_TYPE_ROLEINFO;
  /* offset=0x05a4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_UISetting_ZORDER;
  /* offset=0x05a8 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_FRIEND;
  /* offset=0x05ac flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_SHOP;
  /* offset=0x05b0 flags=0x0008001040000205 */ int32 BP_ENUM_AVATAR_CLOTH;
  /* offset=0x05b4 flags=0x0008001040000205 */ int32 BP_ENUM_MODULE_SHARE_AWARD;
  /* offset=0x05b8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_EIGHTDAY_ZORDER;
  /* offset=0x05bc flags=0x0008001040000205 */ int32 BP_BA_SHARE_BATTLEGRADEPAENL;
  /* offset=0x05c0 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_PLATFORM_GIFTCENTER;
  /* offset=0x05c4 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_MAIL;
  /* offset=0x05c8 flags=0x0008001040000205 */ int32 BP_COMBAT_MSG_TYPE_SEASON;
  /* offset=0x05cc flags=0x0008001040000205 */ int32 BP_PROFILE_MSG_TYPE_CHATROOM;
  /* offset=0x05d0 flags=0x0008001040000205 */ int32 BP_ENUM_LOBBY_MENU_SETTING;
  /* offset=0x05d4 flags=0x0008001040000205 */ int32 BP_ENUM_UI_CHAT_ZORDER;
  /* offset=0x05d8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_GOOD_ITEM_GET_ZORDER;
  /* offset=0x05dc flags=0x0008001040000205 */ int32 BP_ENUM_UI_LIVE_BROADCAST_ZORDER;
  /* offset=0x05e0 flags=0x0008001040000205 */ int32 BP_ENUM_UI_ACTIVITY_GROUP_ZORDER;
  /* offset=0x05e4 flags=0x0008001040000205 */ int32 BP_BA_LOBBY_FIVEDAY;
  /* offset=0x05e8 flags=0x0008001040000205 */ int32 BP_ENUM_UI_LOBBY_PLATFORM_ZORDER;
  /* offset=0x05ec flags=0x0008001040000205 */ int32 BP_ENUM_UI_PROMOTION_ZORDER;
  /* offset=0x05f0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Abp_mail_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 Mail_Notice_Unread_Count;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 Mail_UpdateOneMailItem;
  /* offset=0x02cc flags=0x0008000000000205 */ FString Mail_Filter_Type;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 Mail_Select_ID;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 Mail_Count;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 Mail_Friend_Unread_Count;
  /* offset=0x02e4 flags=0x0008001040000205 */ int32 Mail_Sys_Unread_Count;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 Mail_Max_Count;
  /* offset=0x02ec flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_MailInfo> BP_ARRAY_MailList;
  /* offset=0x02f8 flags=0x0008000000000205 */ FString BP_MailClickHead_UID;
  /* offset=0x0304 flags=0x0008001040000205 */ int32 Mail_ShowRecvAttachMailId;
  /* offset=0x0308 flags=0x0008000000000205 */ FString Mail_OpenUrl;
  /* offset=0x0314 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchMailInfo();
  void EventMailAddTestDatas();
  void EventMailChangeFilterType();
  void EventMailClose();
  void EventMailDelete();
  void EventMailDeleteAll();
  void EventMailRead();
  void EventMailReceiveAll();
  void EventMailReceiveAllNext();
  void EventMailReceiveAttach();
  void EventMailRequestList();
  void EventOnClickHead_Push();
  void UserConstructionScript();
};

class Abp_match_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_Estimate_time;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_PlayerStatus;
  /* offset=0x02cc flags=0x0000001040000205 */ bool BP_IsMatchNoticeShowed;
  /* offset=0x02cd flags=0x0000001040000205 */ bool BP_IsChooingZoneAccess;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_PassedTime;
  /* offset=0x02d4 flags=0x0000001040000205 */ bool BP_IsTeamLeader;
  /* offset=0x02d8 flags=0x0008000000000205 */ FString BP_MatchPopUI_CurLevel;
  /* offset=0x02e4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCancelMatch();
  void EventCancelReady();
  void EventFetchInfo();
  void EventIsChoosingZoneAccess_Push();
  void EventShowMatchFailedNotice();
  void EventStartMatch();
  void UserConstructionScript();
};

class Abp_moviecg_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventShowAuthorization();
  void EventShowMovieCG();
  void UserConstructionScript();
};

class Abp_newteaching_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_NewteachingUI_CurrentSelectIdx;
  /* offset=0x02c8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventNewteachingTitleBtnClick();
  void EventNewteaching_Push();
  void UserConstructionScript();
};

class Abp_notice_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_Notice_Type;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_Notice_Scene;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_Notice_Index;
  /* offset=0x02d8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventDoneNotice();
  void EventFetchInfo();
  void EventMaintenanceNotice();
  void EventSetInfo_Push();
  void EventShowCommonNotice();
  void EventShowNotice();
  void EventShowSlapNotice();
  void EventTryShowCommonNotice();
  void EventTryShowMaintenanceNotice();
  void EventTryShowSlapNotice();
  void UserConstructionScript();
};

class Abp_notice_intl_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_IMSDKNotice_Index;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_IMSDKNotice_Scene;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_IMSDKNotice_Type;
  /* offset=0x02d8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventDoneIMSDKNotice();
  void EventFetchInfo();
  void EventMaintenanceIMSDKNotice();
  void EventSetInfo_Push();
  void EventShowCommonIMSDKNotice();
  void EventShowIMSDKNotice();
  void EventShowSlapIMSDKNotice();
  void EventTryShowCommonIMSDKNotice();
  void EventTryShowMaintenanceIMSDKNotice();
  void EventTryShowSlapIMSDKNotice();
  void UserConstructionScript();
};

class Abp_noticebox_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_CommonNoticeBox_Title;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_CommonNoticeBox_BtnOKTxt;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_CommonNoticeBox_style;
  /* offset=0x02e0 flags=0x0008000000000205 */ FString BP_CommonNoticeBox_Msg;
  /* offset=0x02ec flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCommonNoticeBoxClickClose();
  void EventCommonNoticeBoxClickOK();
  void EventFetchInfo();
  void UserConstructionScript();
};

class Abp_open_box_panel_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_OpenBoxPanel_ItemData BP_STRUCT_OpenBoxPanel_ItemData;
  /* offset=0x02dc flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAfterHideOpenBox();
  void EventCheckOpenBox();
  void EventFetchInfo();
  void EventOpenBoxBuyAgain();
  void EventSetInfo_Push();
  void UserConstructionScript();
};

class Abp_popup_notice_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_NoticeMsg;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_MessageBoxButton BP_STRUCT_MessageBoxButton;
  /* offset=0x02e8 flags=0x0008000000000005 */ struct FBP_STRUCT_MessageBoxData BP_STRUCT_MessageBoxData;
  /* offset=0x030c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_MessageBoxData> BP_ARRAY_MessageBoxStack;
  /* offset=0x0318 flags=0x0000001040000205 */ bool popup_notice_inited;
  /* offset=0x031c flags=0x0008000000000205 */ FString BP_NoticeTitle;
  /* offset=0x0328 flags=0x0008000000000205 */ FString BP_PendingMessageBoxCallback;
  /* offset=0x0334 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCallPendingMessageBoxCallback_Push();
  void EventFetchInfo();
  void EventPopupNoticeShowBox_Push();
  void EventShowOpenSpeakerAtFirst_Push();
  void EventShrinkMessageBoxStack();
  void UserConstructionScript();
};

class Abp_promotion_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Promotion_Award_Info> BP_ARRAY_Promotion_Award_Infos;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_Promotion_Friend_Info BP_STRUCT_Promotion_Friend_Info;
  /* offset=0x02f8 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Promotion_Friend_Info> BP_ARRAY_Promotion_Register_Friend_Infos;
  /* offset=0x0304 flags=0x0008000000000205 */ FString BP_Promotion_Invite_Friend_OpenID;
  /* offset=0x0310 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Promotion_Friend_Info> BP_ARRAY_Promotion_Friend_Infos;
  /* offset=0x031c flags=0x0008000000000205 */ FString BP_Promotion_Help_Content;
  /* offset=0x0328 flags=0x0008001040000205 */ int32 BP_Promotion_Award_Index_Get;
  /* offset=0x032c flags=0x0008000000000205 */ FString BP_Promotion_Open_Time;
  /* offset=0x0338 flags=0x0008000000000005 */ struct FBP_STRUCT_Promotion_Award_Info BP_STRUCT_Promotion_Award_Info;
  /* offset=0x0358 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventPromotionCloseUI();
  void EventPromotionFriendInvite();
  void EventPromotionGetAward();
  void EventPromotionShare();
  void EventPromotionViewRegisterFriend();
  void EventSetInfo_Push();
  void UserConstructionScript();
};

class Abp_rank_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_RankInfoMe BP_STRUCT_RankInfoMe;
  /* offset=0x0338 flags=0x0008000000000205 */ FString BP_RankShowHelpContent;
  /* offset=0x0344 flags=0x0008000000000205 */ FString BP_RankSelectMemberType;
  /* offset=0x0350 flags=0x0000000000000205 */ TArray<int32> BP_ARRAY_RankZoneList;
  /* offset=0x035c flags=0x0008001040000205 */ int32 BP_RankUpdateIdx;
  /* offset=0x0360 flags=0x0008001040000205 */ int32 BP_RankScrollPos;
  /* offset=0x0364 flags=0x0008000000000205 */ FString BP_RankShowRoleUid;
  /* offset=0x0370 flags=0x0008000000000005 */ struct FBP_STRUCT_RankUpdateItemInfo BP_STRUCT_RankUpdateItemInfo;
  /* offset=0x03e4 flags=0x0008000000000205 */ FString BP_RankSelectType;
  /* offset=0x03f0 flags=0x0008000000000205 */ FString BP_RankRegionType;
  /* offset=0x03fc flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RankInfo> BP_ARRAY_RankList;
  /* offset=0x0408 flags=0x0008000000000005 */ struct FBP_STRUCT_RankInfo BP_STRUCT_RankInfo;
  /* offset=0x047c flags=0x0008001040000205 */ int32 BP_Back_ShowRankZoneId;
  /* offset=0x0480 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventQueryRank();
  void EventRankClose();
  void EventRankFetchInfo();
  void EventRankGetZoneList();
  void EventRankScrollPos();
  void EventRankShowHelp();
  void EventRankShowRole();
  void EventRank_Push();
  void EventTestRank();
  void UserConstructionScript();
};

class Abp_recruit_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString MySelfUID;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_ModelStr;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_ChatannelRoomID;
  /* offset=0x02e0 flags=0x0008000000000205 */ FString BP_ChannelName;
  /* offset=0x02ec flags=0x0000001040000205 */ bool IsFull;
  /* offset=0x02ed flags=0x0000001040000205 */ bool BP_ChannelRecruit;
  /* offset=0x02ee flags=0x0000001040000205 */ bool BP_IsUIShow;
  /* offset=0x02f0 flags=0x0008000000000205 */ FString BP_SendMessage;
  /* offset=0x02fc flags=0x0000001040000205 */ bool BP_FrientRecruit;
  /* offset=0x02fd flags=0x0000001040000205 */ bool BP_WorldRecruit;
  /* offset=0x0300 flags=0x0008000000000205 */ FString BP_ModelPLayCountStr;
  /* offset=0x030c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventHideUI();
  void EventRecruit_Push();
  void EventSendMessage();
  void UserConstructionScript();
};

class Abp_reportbug_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 Bug_Report_Info_PosZ;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 Bug_Report_Info_PosX;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 REPROTBUG_REASON_MAP_ERROR;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_VEHICLE_NOTSMOOTH;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_LOWFPS;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_RECONNECTION_ERROR;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 REPROTBUG_REASON_OTHER;
  /* offset=0x02e0 flags=0x0008000000000205 */ FString Bug_Report_Info_text;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 Bug_Report_Info_Reason;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 Bug_Report_Info_PosY;
  /* offset=0x02f4 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_BAD_NET;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_MINIMAP_ERROR;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 REPROTBUG_REASON_CHARACTER_NOTSMOOTH;
  /* offset=0x0300 flags=0x0008000000000205 */ FString Bug_Report_Info_DeviceName;
  /* offset=0x030c flags=0x0008001040000205 */ int32 REPROTBUG_REASON_ABNORMAL_ANIMATION;
  /* offset=0x0310 flags=0x0008001040000205 */ int32 Bug_Report_Info_Angle;
  /* offset=0x0314 flags=0x0008001040000205 */ int32 REPROTBUG_REASON_GAMENOTSMOOTH;
  /* offset=0x0318 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickSubmit();
  void EventClose();
  void EventRefreshUI();
  void EventShowSendSuccessMsg();
  void UserConstructionScript();
};

class Abp_roleinfo_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_RoleName;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_CombatUrl;
  /* offset=0x02dc flags=0x0000001040000205 */ bool BP_IsMaxLevel;
  /* offset=0x02dd flags=0x0000001040000205 */ bool BP_ShowAddFriend;
  /* offset=0x02e0 flags=0x0008000000000005 */ struct FBP_STRUCT_PersonalBasicInfo BP_STRUCT_PersonalBasicInfo;
  /* offset=0x0370 flags=0x0008000000000005 */ struct FBP_STRUCT_PersonalTotalRankInfo BP_STRUCT_PersonalTotalRankInfo;
  /* offset=0x037c flags=0x0008000000000205 */ FString BP_SelfID;
  /* offset=0x0388 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_CombatScoreInfo> BP_ARRAY_CombatScoreInfoList;
  /* offset=0x0394 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_CombatBattleInfo> BP_ARRAY_CombatBattleInfoList;
  /* offset=0x03a0 flags=0x0008000000000205 */ FString BP_RoleID;
  /* offset=0x03ac flags=0x0008001040000205 */ int32 BP_Back_ShowRoleInfoOfZoneId;
  /* offset=0x03b0 flags=0x0008000000000005 */ struct FBP_STRUCT_CombatSurviveInfo BP_STRUCT_CombatSurviveInfo;
  /* offset=0x03f8 flags=0x0000000000000205 */ TArray<int32> BP_ARRAY_ZoneList;
  /* offset=0x0404 flags=0x0000001040000205 */ bool BP_IsShareAwardGold;
  /* offset=0x0408 flags=0x0008000000000005 */ struct FBP_STRUCT_PersonalSegmentInfo BP_STRUCT_PersonalSegmentInfo;
  /* offset=0x0418 flags=0x0008000000000005 */ struct FBP_STRUCT_PersonalTotalScoreInfo BP_STRUCT_PersonalTotalScoreInfo;
  /* offset=0x0424 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_CombatTotalInfo> BP_ARRAY_CombatTotalInfoList;
  /* offset=0x0430 flags=0x0008000000000205 */ FString BP_Sign;
  /* offset=0x043c flags=0x0008001040000205 */ int32 BP_CombatModelType;
  /* offset=0x0440 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_CombatSurviveInfo> BP_ARRAY_CombatSurviveInfoList;
  /* offset=0x044c flags=0x0008000000000205 */ FString BP_SignHintText;
  /* offset=0x0458 flags=0x0008000000000005 */ struct FBP_STRUCT_CombatBattleInfo BP_STRUCT_CombatBattleInfo;
  /* offset=0x0494 flags=0x0008000000000005 */ struct FBP_STRUCT_CombatScoreInfo BP_STRUCT_CombatScoreInfo;
  /* offset=0x04b8 flags=0x0008001040000205 */ int32 BP_RolePlatform;
  /* offset=0x04bc flags=0x0008001040000205 */ int32 BP_ShareNum;
  /* offset=0x04c0 flags=0x0008000000000005 */ struct FBP_STRUCT_CombatTotalInfo BP_STRUCT_CombatTotalInfo;
  /* offset=0x0508 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAddFriend();
  void EventCopyID();
  void EventCopyName();
  void EventGetZoneList();
  void EventRankDetailBtnClicked();
  void EventRoleInfoAvatarClicked();
  void EventRoleInfoRelease();
  void EventRoleInfoSendSign();
  void EventRoleInfo_Push();
  void EventSetCombatModelType();
  void EventShareCombatBtnClicked();
  void UserConstructionScript();
};

class Abp_roleinfo_avatarframe_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 RoleInfoAvatarFrameCurUseId;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString RoleInfoAvatarFrameSelfUid;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString RoleInfoAvatarFrameSelfUrl;
  /* offset=0x02e0 flags=0x0008000000000005 */ struct FBP_STRUCT_RoleInfoAvatarFrame BP_STRUCT_RoleInfoAvatarFrame;
  /* offset=0x0320 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoleInfoAvatarFrame> BP_ARRAY_RoleInfoAvatarFrameList;
  /* offset=0x032c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventRoleInfoAvatarFrameFetchInfo();
  void EventRoleInfoAvatarFrameUIClose();
  void EventRoleInfoAvatarFrameUse();
  void UserConstructionScript();
};

class Abp_roleinfo_rankdetail_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoleRankDetailSingleInfo> BP_ARRAY_RoleRankDetailSingleList;
  /* offset=0x02d0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoleRankDetailTypeInfo> BP_ARRAY_RoleRankDetailTypeList;
  /* offset=0x02dc flags=0x0008000000000005 */ struct FBP_STRUCT_RoleRankDetailTypeInfo BP_STRUCT_RoleRankDetailTypeInfo;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 BP_ItemMax;
  /* offset=0x02f0 flags=0x0008000000000005 */ struct FBP_STRUCT_RoleRankDetailSingleInfo BP_STRUCT_RoleRankDetailSingleInfo;
  /* offset=0x030c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventRankDetailRelease();
  void UserConstructionScript();
};

class Abp_room_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_Room_IsAnchor;
  /* offset=0x02c8 flags=0x0008000000000005 */ struct FBP_STRUCT_GroupType BP_STRUCT_GroupType;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 BP_EnterRoom_Type;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_CreateRoom_Mode;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_SelectRoomID;
  /* offset=0x02e4 flags=0x0008000000000205 */ FString BP_EnterRoom_Passwd;
  /* offset=0x02f0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_GroupType> BP_ARRAY_GroupTypeList;
  /* offset=0x02fc flags=0x0008000000000005 */ struct FBP_STRUCT_RoomInfo BP_STRUCT_RoomInfo;
  /* offset=0x0354 flags=0x0008000000000205 */ FString BP_Room_SelfName;
  /* offset=0x0360 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoomInfo> BP_ARRAY_RoomList;
  /* offset=0x036c flags=0x0008000000000205 */ FString BP_CreateRoom_Name;
  /* offset=0x0378 flags=0x0008000000000205 */ FString BP_Room_ClientVersion;
  /* offset=0x0384 flags=0x0008000000000205 */ FString BP_CreateRoom_Passwd;
  /* offset=0x0390 flags=0x0008001040000205 */ int32 BP_CreateRoom_MapID;
  /* offset=0x0394 flags=0x0008000000000205 */ FString BP_EnterRoom_ID;
  /* offset=0x03a0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventAfterEnterRoomList();
  void EventAfterLeaveRoomList();
  void EventCannotCreateRoom();
  void EventCheckInputRoomID();
  void EventCloseRoomChatUI();
  void EventCreateRoom();
  void EventCreateRoomCheckNameEmpty();
  void EventCreateRoomCheckPSWEmpty();
  void EventEnterGamingRoomNotice();
  void EventEnterRoom();
  void EventFetchInfo();
  void EventOpenRoomChatUI();
  void EventRefreshGroupTypeList();
  void EventRequestJoinRoom();
  void EventRequestRoomList();
  void EventRoomRelease();
  void EventSetPSWOK();
  void EventUpdateGroupTypeList();
  void EventVersionNotMatched();
  void UserConstructionScript();
};

class Abp_room_waiting_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_KickedMemberPos;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_Room_ChangeName;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString BP_Room_QRIamgePath;
  /* offset=0x02e0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoomGroupType> BP_ARRAY_RoomGroupTypeList;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 BP_SelectedGroupType;
  /* offset=0x02f0 flags=0x0008000000000005 */ struct FBP_STRUCT_RoomWaitingInfo BP_STRUCT_RoomWaitingInfo;
  /* offset=0x0348 flags=0x0008001040000205 */ int32 BP_SelectNewPos;
  /* offset=0x034c flags=0x0008000000000205 */ FString BP_Room_SelfID;
  /* offset=0x0358 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_RoomMemberInfo> BP_ARRAY_RoomMemberList;
  /* offset=0x0364 flags=0x0008000000000205 */ FString BP_Room_SelectedRoleID;
  /* offset=0x0370 flags=0x0008001040000205 */ int32 BP_SelectedMapID;
  /* offset=0x0374 flags=0x0008001040000205 */ int32 BP_Room_SelfOldPos;
  /* offset=0x0378 flags=0x0008000000000205 */ FString BP_Room_Passwd;
  /* offset=0x0384 flags=0x0000001040000205 */ bool BP_Room_IsInRoom;
  /* offset=0x0388 flags=0x0008000000000005 */ struct FBP_STRUCT_RoomSelfInfo BP_STRUCT_RoomSelfInfo;
  /* offset=0x03d0 flags=0x0000001040000205 */ bool BP_Room_InitiativeLeave;
  /* offset=0x03d4 flags=0x0008000000000005 */ struct FBP_STRUCT_RoomGroupType BP_STRUCT_RoomGroupType;
  /* offset=0x03e4 flags=0x0000001040000205 */ bool BP_IsRoomOwner;
  /* offset=0x03e8 flags=0x0008000000000005 */ struct FBP_STRUCT_RoomMemberInfo BP_STRUCT_RoomMemberInfo;
  /* offset=0x0430 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventBtnDisableInGaming();
  void EventChangeMap();
  void EventChangeRoomName();
  void EventChangeRoomType();
  void EventCloseRoomWaitingChatUI();
  void EventCreateQRImage();
  void EventExitRoom();
  void EventFetchInfo();
  void EventKickRoleDisable();
  void EventOnlyRoomMasterCanClick();
  void EventOpenRoleInfo();
  void EventOpenRoomWaitingChatUI();
  void EventRequestChangeRoomPos();
  void EventRequestKickMember();
  void EventRoomWaitingRelease();
  void EventSaveSuccess();
  void EventStarGame();
  void EventWhetherDisbandRoom();
  void UserConstructionScript();
};

class Abp_scrollnotice_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ScrollMsg_CurrentRealMsg;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_ScrollMsgUrl;
  /* offset=0x02dc flags=0x0008000000000005 */ struct FBP_STRUCT_CurrentScrollNoticeMsgData BP_STRUCT_CurrentScrollNoticeMsgData;
  /* offset=0x02f0 flags=0x0000001040000205 */ bool BP_ScrollMsg_IsRolling;
  /* offset=0x02f4 flags=0x0008000000000005 */ struct FBP_STRUCT_ScrollNoticeMsgData BP_STRUCT_ScrollNoticeMsgData;
  /* offset=0x0318 flags=0x0008001040000205 */ int32 BP_ScrollMsg_CurrentRound;
  /* offset=0x031c flags=0x0000001040000205 */ bool BP_ScrollMsg_ShowEnd;
  /* offset=0x0320 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ScrollNoticeMsgData> BP_ARRAY_ScrollNoticeMsgData;
  /* offset=0x032c flags=0x0008001040000205 */ int32 BP_ScrollMsg_CurrentMsgId;
  /* offset=0x0330 flags=0x0000001040000205 */ bool BP_ScrollMsg_Cannotshow;
  /* offset=0x0334 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventOneMsgRollEnd();
  void EventShowNextMsg();
  void UserConstructionScript();
};

class Abp_season_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString SeasonInReward_Condition2_Txt1;
  /* offset=0x02d0 flags=0x0000001040000205 */ bool Season_HightLevel;
  /* offset=0x02d1 flags=0x0000001040000205 */ bool SeasonInReward_Condition2_Finish;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 SeasonEndReward_TakeState;
  /* offset=0x02d8 flags=0x0008000000000205 */ FString SeasonInReward_Condition1_Txt;
  /* offset=0x02e4 flags=0x0008000000000205 */ FString Season_SelectMode;
  /* offset=0x02f0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SeasonSegmentType> BP_ARRAY_SeasonSegmentTypeList;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 SeasonEndReward_SeasonID;
  /* offset=0x0300 flags=0x0008001040000205 */ int32 SeasonInReward_TakeState;
  /* offset=0x0304 flags=0x0008001040000205 */ int32 SeasonInReward_ItemID;
  /* offset=0x0308 flags=0x0000001040000205 */ bool SeasonInReward_Condition1_Finish;
  /* offset=0x030c flags=0x0008001040000205 */ int32 SeasonInReward_TakeId;
  /* offset=0x0310 flags=0x0008000000000205 */ FString Season_Name;
  /* offset=0x031c flags=0x0008000000000205 */ FString Season_Sum_Score_ProgressNum;
  /* offset=0x0328 flags=0x0008000000000205 */ FString SeasonEndReward_Txt;
  /* offset=0x0334 flags=0x0008000000000205 */ FString Season_Sum_Score;
  /* offset=0x0340 flags=0x0008000000000205 */ FString Season_Sum_Score_Progress;
  /* offset=0x034c flags=0x0008001040000205 */ int32 SeasonInReward_ItemTime;
  /* offset=0x0350 flags=0x0000001040000205 */ bool Season_Show_Score_ProgressNum;
  /* offset=0x0354 flags=0x0008000000000205 */ FString Season_RankNo;
  /* offset=0x0360 flags=0x0008000000000205 */ FString SeasonInReward_Condition2_Txt2;
  /* offset=0x036c flags=0x0008000000000205 */ FString Season_Time;
  /* offset=0x0378 flags=0x0008000000000205 */ FString Season_Segment_Name;
  /* offset=0x0384 flags=0x0008001040000205 */ int32 SeasonEndReward_ItemID;
  /* offset=0x0388 flags=0x0008001040000205 */ int32 Season_Segment_Level;
  /* offset=0x038c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventSeasonSelectMode();
  void EventSeasonTips();
  void EventSeasonUIClose();
  void EventTakeSeasonEndReward();
  void EventTakeSeasonInReward();
  void UserConstructionScript();
};

class Abp_setting_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_IsInLobby;
  /* offset=0x02c8 flags=0x0008000000000205 */ FString BP_UrlStr1;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString BP_UrlStr2;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_LoginChannel;
  /* offset=0x02e4 flags=0x0008000000000205 */ FString BP_UrlStr3;
  /* offset=0x02f0 flags=0x0000001040000205 */ bool BP_IsInGame;
  /* offset=0x02f4 flags=0x0008001040000205 */ int32 BP_Setting_IMSDKTipMsgBtnOKEvent;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 BP_CurSettingPage;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 BP_Setting_IMSDKNotifyEvent;
  /* offset=0x0300 flags=0x0000001040000205 */ bool BP_CanShowVideoSetting;
  /* offset=0x0304 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickSwitchButton();
  void EventFetchInfo();
  void EventHelpshiftClearRedPoints();
  void EventHelpshiftSetRedPoints();
  void EventHelpshiftShowConversation();
  void EventHideWaitingUI();
  void EventLogOutForSettingLanguage();
  void EventOpenKefuUrl();
  void EventSendLanguageSettingToServer();
  void EventSettingCannotSetHigherFps_Push();
  void EventSettingCannotSetHigherQuality_Push();
  void EventSettingConfirmModifyArtQuality_Push();
  void EventSettingNotSupportHDR();
  void EventSettingNoticeHighestArtClosed();
  void EventSettingPanelAskAlreadyBindFB();
  void EventSettingPanelAskBindAccountMsgBox();
  void EventSettingPanelHideConnectingUI();
  void EventSettingPanelRegistIMSDKEvents();
  void EventSettingPanelShowConnectingUI();
  void EventSettingPanelShowTipMsgBindFBFail();
  void EventSettingPanelShowTipMsgBindFBSuccess();
  void EventSettingPanelUnRegistIMSDKEvents();
  void EventSettingShowConfirmModifyFps();
  void EventSettingShowConfirmModifyHDR();
  void EventShowBackToLobbyNotice();
  void EventShowLogOutNoticce();
  void EventShowLogOutNoticceForSettingLanguage();
  void EventShowMyRecordVideos();
  void EventShowWaitingUI();
  void EventTurnonManualRecord();
  void EventTurnonMomentRecord();
  void UserConstructionScript();
};

class Abp_setting_language_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_IsInLoginPanel;
  /* offset=0x02c8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventHideUI();
  void UserConstructionScript();
};

class Abp_share_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_ShareRoleData BP_STRUCT_ShareRoleData;
  /* offset=0x02f0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickQQFrientBtn();
  void EventClickQQZoneBtn();
  void EventClickWXFrientBtn();
  void EventClickWXZoneBtn();
  void EventGetRoleData();
  void EventSaveLocalFail();
  void EventSaveLocalSuccess();
  void EventShareFetchInfo();
  void EventShareToFriend();
  void EventShare_Push();
  void EventStructShare();
  void UserConstructionScript();
};

class Abp_share_award_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_AwardName2;
  /* offset=0x02d0 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ShareAwardInfo> BP_ARRAY_ShareAwardInfoList;
  /* offset=0x02dc flags=0x0008001040000205 */ int32 BP_AwardNum1;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_CurShareNum;
  /* offset=0x02e4 flags=0x0008001040000205 */ int32 BP_AwardItem1;
  /* offset=0x02e8 flags=0x0008001040000205 */ int32 BP_AwardItem2;
  /* offset=0x02ec flags=0x0008001040000205 */ int32 BP_AwardNum2;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 BP_GetAwardID;
  /* offset=0x02f4 flags=0x0008000000000005 */ struct FBP_STRUCT_ShareAwardInfo BP_STRUCT_ShareAwardInfo;
  /* offset=0x0328 flags=0x0000001040000205 */ bool BP_IsTodayShareDone;
  /* offset=0x032c flags=0x0008000000000205 */ FString BP_AwardName1;
  /* offset=0x0338 flags=0x0008001040000205 */ int32 BP_SelAwardIndex;
  /* offset=0x033c flags=0x0008001040000205 */ int32 BP_GetAwardIndex;
  /* offset=0x0340 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventShareAwardGetOnAward_Push();
  void EventShareAwardSelAward_Push();
  void EventShareAwardSelPanelHide_Push();
  void EventShareAwardShare_Push();
  void EventShareAwardUIHide_Push();
  void UserConstructionScript();
};

class Abp_share_cjhb_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_CJHBRemainNum;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_CJHBRoomId;
  /* offset=0x02dc flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickShareCJBtn();
  void EventHideCJUI();
  void EventShareCJFinalyFetchInfo();
  void EventShareCJFinaly_Push();
  void UserConstructionScript();
};

class Abp_share_day_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000001040000205 */ bool BP_ShareDayIsShow;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_ShareDayNum;
  /* offset=0x02cc flags=0x0000001040000205 */ bool BP_ShareFirst;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_ShareDayGold;
  /* offset=0x02d4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickShareBtn();
  void EventHideUI();
  void EventShareDayFetchInfo();
  void EventShareDay_Push();
  void UserConstructionScript();
};

class Abp_share_dayfinaly_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ShareDayFinalyNick;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_ShareDayFinalySologan;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_ShareDayFinalyUrl;
  /* offset=0x02e8 flags=0x0008000000000205 */ FString BP_ShareDayFinalyPath;
  /* offset=0x02f4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventClickBtnSave();
  void EventDayQQFrientBtn();
  void EventDayQQZoneBtn();
  void EventDayWXFrientBtn();
  void EventDayWXZoneBtn();
  void EventShareDayFinalyFetchInfo();
  void EventShareDayFinaly_Push();
  void UserConstructionScript();
};

class Abp_share_exciting_party_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ShareExcitingPartyPath;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_ShareExcitingPartyInfo BP_STRUCT_ShareExcitingPartyInfo;
  /* offset=0x02e0 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventExcitingPartyHideUI();
  void EventExcitingPartyQQFriendBtn();
  void EventExcitingPartyQQZoneBtn();
  void EventExcitingPartyWXFriendBtn();
  void EventExcitingPartyWXZoneBtn();
  void EventShareExcitingPartyFetchInfo();
  void EventShareExcitingParty_Push();
  void UserConstructionScript();
};

class Abp_share_levelup_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_ShareLevelUp_ImagePath;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_ShareLevelUp_ShareInfo BP_STRUCT_ShareLevelUp_ShareInfo;
  /* offset=0x02f4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventSetInfo_Push();
  void EventShareLevelUpClickShareFriendBtn();
  void EventShareLevelUpClickShareZoneBtn();
  void EventShareLevelUpHide();
  void UserConstructionScript();
};

class Abp_share_normal_cjhb_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_CJHB_TOTAL_MONEY;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_CJHB_REDPACKTYPE;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_CJHB_REDPACKMONEY;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_CJHB_LEFT_MONEY;
  /* offset=0x02d4 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventBtnCJHongbaoShared();
  void UserConstructionScript();
};

class Abp_share_person_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_SharePersonInfo BP_STRUCT_SharePersonInfo;
  /* offset=0x0340 flags=0x0008000000000205 */ FString BP_SharePersonPath;
  /* offset=0x034c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventHideUI();
  void EventPersonQQFrientBtn();
  void EventPersonQQZoneBtn();
  void EventPersonWXFrientBtn();
  void EventPersonWXZoneBtn();
  void EventSharePersonFetchInfo();
  void EventSharePerson_Push();
  void UserConstructionScript();
};

class Abp_share_rank_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_ShareRank_ShareInfo BP_STRUCT_ShareRank_ShareInfo;
  /* offset=0x02ec flags=0x0008000000000205 */ FString BP_ShareRank_ImagePath;
  /* offset=0x02f8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventItemShareClickSaveLocalBtn();
  void EventSetInfo_Push();
  void EventShareRankClickShareFriendBtn();
  void EventShareRankClickShareZoneBtn();
  void EventShareRankHide();
  void UserConstructionScript();
};

class Abp_share_result_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_PlayerCount;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_KillNum;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_PlayerRank;
  /* offset=0x02d0 flags=0x0008000000000205 */ FString BP_PlayerIcon;
  /* offset=0x02dc flags=0x0008000000000205 */ FString BP_PlayerName;
  /* offset=0x02e8 flags=0x0008000000000205 */ FString BP_ShareImagePath;
  /* offset=0x02f4 flags=0x0008001040000205 */ int32 BP_LoginChannel;
  /* offset=0x02f8 flags=0x0008001040000205 */ int32 BP_SHARE_RESULT_TYPE;
  /* offset=0x02fc flags=0x0008000000000205 */ FString BP_ModeKillInfo;
  /* offset=0x0308 flags=0x0008001040000205 */ int32 BP_TeamNum;
  /* offset=0x030c flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventShareResultPanelClosed();
  void EventShareResultVariable_Push();
  void EventShareResult_BtnCaptureScreen();
  void EventShareResult_BtnSave();
  void EventShareResult_BtnShareFriend();
  void EventShareResult_BtnShareGameZone();
  void EventShareResult_BtnShareQQFriend();
  void EventShareResult_BtnShareQQTribe();
  void EventShareResult_BtnShareQQZone();
  void EventShareResult_BtnShareTimeLine();
  void EventShareResult_ShowUI_Push();
  void UserConstructionScript();
};

class Abp_shop_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_SelectSubType;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_SHOP_GOLD;
  /* offset=0x02cc flags=0x0000001040000205 */ bool BP_SHOP_ISINITING;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_Shop_ItemInfo BP_STRUCT_Shop_ItemInfo;
  /* offset=0x030c flags=0x0008001040000205 */ int32 BP_SHOP_Look_Shop_Item_ID;
  /* offset=0x0310 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Shop_ItemInfo> BP_ARRAY_Shop_ItemList;
  /* offset=0x031c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_Shop_DropInfo> BP_ARRAY_Look_DropList;
  /* offset=0x0328 flags=0x0008001040000205 */ int32 BP_SHOP_PutOff_Avatar_Index;
  /* offset=0x032c flags=0x0008001040000205 */ int32 BP_SHOP_Buy_Shop_Item_ID;
  /* offset=0x0330 flags=0x0008001040000205 */ int32 BP_SelectType;
  /* offset=0x0334 flags=0x0008001040000205 */ int32 BP_SHOP_Avatar_Item_Index;
  /* offset=0x0338 flags=0x0008000000000005 */ struct FBP_STRUCT_Shop_DropInfo BP_STRUCT_Shop_DropInfo;
  /* offset=0x0348 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventLookItem();
  void EventRequestBuyItem();
  void EventSetInfo_Push();
  void EventShopChangeAvatar();
  void EventShopHide();
  void EventShowHelpTip();
  void UserConstructionScript();
};

class Abp_shoplimit_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ShopLimitInfo> BP_ARRAY_ShopLimitList;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_ShopLimitBuyId;
  /* offset=0x02d4 flags=0x0008000000000005 */ struct FBP_STRUCT_ShopLimitInfo BP_STRUCT_ShopLimitInfo;
  /* offset=0x0330 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventShopLimitBuy_Push();
  void EventShopLimitInitData();
  void EventShopLimitShowUI();
  void UserConstructionScript();
};

class Abp_signin_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000205 */ FString BP_SignInUITimeRange;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_SignInBtnNum;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 BP_SignInTotalDays;
  /* offset=0x02d8 flags=0x0008000000000005 */ struct FBP_STRUCT_SignInUIInfo BP_STRUCT_SignInUIInfo;
  /* offset=0x0324 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_SignInUIInfo> BP_ARRAY_SignInUIList;
  /* offset=0x0330 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventGetAwardBtnClick();
  void EventRelease();
  void UserConstructionScript();
};

class Abp_task_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_TaskCategory> BP_ARRAY_TaskInfos;
  /* offset=0x02d0 flags=0x0008000000000005 */ struct FBP_STRUCT_ActiveAwardItem BP_STRUCT_ActiveAwardItem;
  /* offset=0x02e8 flags=0x0008000000000005 */ struct FBP_STRUCT_DropItem BP_STRUCT_DropItem;
  /* offset=0x02f4 flags=0x0008001040000205 */ int32 BP_CurrentOperateAwardId;
  /* offset=0x02f8 flags=0x0008000000000005 */ struct FBP_STRUCT_TaskInfo BP_STRUCT_TaskInfo;
  /* offset=0x0318 flags=0x0008000000000005 */ struct FBP_STRUCT_ActiveAwardInfo BP_STRUCT_ActiveAwardInfo;
  /* offset=0x032c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ActiveAwardInfo> BP_ARRAY_ActiveAwardInfos;
  /* offset=0x0338 flags=0x0000001040000205 */ bool BP_AwardRedDot;
  /* offset=0x033c flags=0x0008001040000205 */ int32 BP_RefreshAwardTimeLast;
  /* offset=0x0340 flags=0x0008001040000205 */ int32 BP_CurrentOperateTaskId;
  /* offset=0x0344 flags=0x0008001040000205 */ int32 BP_RefreshTaskTimeLast;
  /* offset=0x0348 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_DropItem> BP_ARRAY_CurrentDropList;
  /* offset=0x0354 flags=0x0008001040000205 */ int32 BP_TaskActiveNum;
  /* offset=0x0358 flags=0x0008000000000005 */ struct FBP_STRUCT_TaskCategory BP_STRUCT_TaskCategory;
  /* offset=0x0374 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventTaskClickAwarded_Push();
  void EventTaskFinishTask_Push();
  void EventTaskGetReward_Push();
  void EventTaskGetTaskReward_Push();
  void EventTaskGoTo_Push();
  void EventTaskHideUI();
  void EventTaskShowRewardDetailPopup_Push();
  void EventTaskShowUI();
  void EventTestAddProgress_Push();
  void UserConstructionScript();
};

class Abp_teamup_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 TeamUp_CrtTeam_Count;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 TeamUp_Team_Type;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 TeamUp_Count_Down;
  /* offset=0x02d0 flags=0x0000001040000205 */ bool TeamUp_Click_Switch_Camera;
  /* offset=0x02d4 flags=0x0008001040000205 */ int32 TeamUpTeamTypeNameKeyId;
  /* offset=0x02d8 flags=0x0008001040000205 */ int32 TeamUp_Click_Switch_Camera_Time;
  /* offset=0x02dc flags=0x0000001040000205 */ bool TeamUp_IS_LOCK_DOUBLE;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 TeamUp_Fill;
  /* offset=0x02e4 flags=0x0000001040000205 */ bool TeamUp_Auto_Refuse;
  /* offset=0x02e8 flags=0x0008000000000205 */ FString TeamUp_Click_Player_ID;
  /* offset=0x02f4 flags=0x0008000000000205 */ FString BP_SvrBackChoosedZoneId;
  /* offset=0x0300 flags=0x0008000000000205 */ FString TEAMUP_CHS_NAME_NONE;
  /* offset=0x030c flags=0x0008000000000205 */ FString TeamUp_Quick_Msg_Content;
  /* offset=0x0318 flags=0x0000001040000205 */ bool TeamUp_IS_LOCK_QUAD;
  /* offset=0x031c flags=0x0008001040000205 */ int32 TEAMUP_TEAM_TYPE_DOUBLE;
  /* offset=0x0320 flags=0x0008000000000205 */ FString TEAMUP_CHS_NAME_DOUBLE;
  /* offset=0x032c flags=0x0008001040000205 */ int32 TeamUp_Will_Change_Fill;
  /* offset=0x0330 flags=0x0000001040000205 */ bool TeamUp_Click_Player_IS_FRIEND;
  /* offset=0x0331 flags=0x0000001040000205 */ bool TeamUp_AutoMatch;
  /* offset=0x0334 flags=0x0008000000000005 */ struct FBP_STRUCT_ChooseZoneInfo BP_STRUCT_ChooseZoneInfo;
  /* offset=0x0350 flags=0x0000001040000205 */ bool TeamUP_Shield_Lock_Double;
  /* offset=0x0351 flags=0x0000001040000205 */ bool Teamup_Show_NewteachingGuide;
  /* offset=0x0354 flags=0x0008000000000005 */ struct FBP_STRUCT_TeamUpMenuInfo BP_STRUCT_TeamUpMenuInfo;
  /* offset=0x038c flags=0x0008000000000205 */ FString TEAMUP_CHS_NAME_QUAD;
  /* offset=0x0398 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_TeamUpMenuInfo> BP_ARRAY_TeamUpMenuInfoList;
  /* offset=0x03a4 flags=0x0000001040000205 */ bool TeamUp_IS_LOCK_SOLO;
  /* offset=0x03a8 flags=0x0008000000000205 */ FString BP_SvrBackChooseZoneResult;
  /* offset=0x03b4 flags=0x0008000000000205 */ FString TeamUp_Quick_Msg_GID;
  /* offset=0x03c0 flags=0x0008000000000205 */ FString TEAMUP_APPLY_TIP;
  /* offset=0x03cc flags=0x0008000000000205 */ FString TEAMUP_INVITE_TIP;
  /* offset=0x03d8 flags=0x0008000000000205 */ FString TeamUp_CrtTeam_ID;
  /* offset=0x03e4 flags=0x0000001040000205 */ bool TeamUP_Shield_Lock_Quad;
  /* offset=0x03e8 flags=0x0008000000000205 */ FString TeamUp_Applyer_Name;
  /* offset=0x03f4 flags=0x0008001040000205 */ int32 TeamUp_Change_Team_Type;
  /* offset=0x03f8 flags=0x0000001040000205 */ bool TeamUp_Is_Matching;
  /* offset=0x03fc flags=0x0008001040000205 */ int32 TEAMUP_TEAM_TYPE_QUAD;
  /* offset=0x0400 flags=0x0008000000000205 */ FString TeamUp_Host_ID;
  /* offset=0x040c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_ChooseZoneInfo> BP_ARRAY_ChooseZoneList;
  /* offset=0x0418 flags=0x0008001040000205 */ int32 TEAMUP_TEAM_TYPE_SOLO;
  /* offset=0x041c flags=0x0008000000000205 */ FString TeamUp_Team_Type_Name;
  /* offset=0x0428 flags=0x0008000000000205 */ FString TEAMUP_INVITE_TIMEOUT_TIP;
  /* offset=0x0434 flags=0x0008000000000205 */ FString TEAMUP_APPLY_TIMEOUT_TIP;
  /* offset=0x0440 flags=0x0008000000000205 */ FString TEAMUP_CHS_NAME_SOLO;
  /* offset=0x044c flags=0x0000001040000205 */ bool TeamUP_Shield_Lock_Solo;
  /* offset=0x0450 flags=0x0008001040000205 */ int32 TeamUp_Invite_Apply_Type;
  /* offset=0x0454 flags=0x0008000000000205 */ FString TeamUp_Click_Player_Name;
  /* offset=0x0460 flags=0x0008000000000205 */ FString TeamUp_My_User_ID;
  /* offset=0x046c flags=0x0008000000000205 */ FString BP_Back_ChooseZoneId;
  /* offset=0x0478 flags=0x0008000000000205 */ FString TeamUp_Inviter_Name;
  /* offset=0x0484 flags=0x0000001040000205 */ bool TeamUp_IsSelfHost;
  /* offset=0x0488 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventFetchTeamUpInfo();
  void EventGetCurChoosedZoneId();
  void EventGetTeamUpTeamTypeNameKeyId();
  void EventQueryMatchZoneList();
  void EventSelectZone_Push();
  void EventSetHasGuideNewteaching();
  void EventShowTopTip();
  void EventTeamUpAddFriend();
  void EventTeamUpApplyForbid();
  void EventTeamUpApplyPermit();
  void EventTeamUpChangeLeader();
  void EventTeamUpChangeTeamType();
  void EventTeamUpClickAutoMatchBtn();
  void EventTeamUpClickCreateRoomBtn();
  void EventTeamUpClickExpand();
  void EventTeamUpClickKick();
  void EventTeamUpClickPlayerInfo();
  void EventTeamUpClickQuit();
  void EventTeamUpClickTrainingBtn();
  void EventTeamUpFailOnMatching();
  void EventTeamUpInviteApplyPermit();
  void EventTeamUpInviteApplyRefuse();
  void EventTeamUpLeaveTeam();
  void EventTeamUpNoHostRight();
  void EventTeamUpNoRightForMatching();
  void EventTeamUpUI_Push();
  void EventTeamUpUpdateClickPlayerInfo();
  void UserConstructionScript();
};

class Abp_teamup_friend_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_InviteFriendProfile BP_STRUCT_InviteFriendProfile;
  /* offset=0x0358 flags=0x0008001040000205 */ int32 BP_MyPlyerCount;
  /* offset=0x035c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_InviteFriendProfile> BP_ARRAY_Teamuup_Friend_Profile;
  /* offset=0x0368 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_InviteFriendProfile> BP_ARRAY_CarTeam_Friend;
  /* offset=0x0374 flags=0x0000001040000205 */ bool BP_TeamUPFriendIsShow;
  /* offset=0x0378 flags=0x0008000000000205 */ FString BP_InviteFriendName;
  /* offset=0x0384 flags=0x0008001040000205 */ int32 BP_ReservationState;
  /* offset=0x0388 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_InviteFriendProfile> BP_ARRAY_Recent_Friend;
  /* offset=0x0394 flags=0x0008000000000205 */ FString BP_FriendHeadClickGid;
  /* offset=0x03a0 flags=0x0008000000000205 */ FString BP_InviteFriendID;
  /* offset=0x03ac flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventCheckReservationState();
  void EventClickAddFriendBtn();
  void EventClickHeadBtn();
  void EventClickInviteFriendBtn();
  void EventClickJoinBtn();
  void EventClickOfflineShare();
  void EventClickPlatformInvite();
  void EventClickPlatformInviteWXMiniApp();
  void EventClickReserveFriend();
  void EventFetchTeamupFriendInfo();
  void EventSetInfo_Push();
  void EventShowListCallBack();
  void EventSwitchCarTeam();
  void EventSwitchFriend();
  void EventSwitchRecent();
  void UserConstructionScript();
};

class Abp_versionupdate_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008000000000005 */ struct FBP_STRUCT_VersionUpdateInfo BP_STRUCT_VersionUpdateInfo;
  /* offset=0x0310 flags=0x0008000000000205 */ FString BP_CurStage;
  /* offset=0x031c flags=0x0000001040000205 */ bool BP_IsExamin;
  /* offset=0x0320 flags=0x0008001040000205 */ int32 BP_CurPercent;
  /* offset=0x0324 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventNoConnectionStartUpdate_Push();
  void EventNoWifiNotifyAndroidAppUpdate_Push();
  void EventNoWifiNotifyIOSAppUpdate_Push();
  void EventWifiNotifyAndroidAppUpdate_Push();
  void EventWifiNotifyIOSAppUpdate_Push();
  void EventWindowsAppUpdate();
  void UserConstructionScript();
};

class Abp_wardrobe_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_CurPageTabType;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_ChangePageTabType;
  /* offset=0x02cc flags=0x0008001040000205 */ int32 BP_LastTabType;
  /* offset=0x02d0 flags=0x0008001040000205 */ int32 BP_LastPageType;
  /* offset=0x02d4 flags=0x0008000000000205 */ FString BP_String_Wardrobe_RemainTime;
  /* offset=0x02e0 flags=0x0008001040000205 */ int32 BP_TabRedPointMask;
  /* offset=0x02e4 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_WardrobeItemInfo> BP_ARRAY_Wardrobe_SourceBookItemList;
  /* offset=0x02f0 flags=0x0008001040000205 */ int32 BP_Wardrobe_BG_resID;
  /* offset=0x02f4 flags=0x0008000000000005 */ struct FBP_STRUCT_WardrobeItemInfo BP_STRUCT_WardrobeItemInfo;
  /* offset=0x0320 flags=0x0008001040000205 */ int32 BP_WARDROBE_Jump_Item_resID;
  /* offset=0x0324 flags=0x0000001040000205 */ bool BP_IsShowUseButton;
  /* offset=0x0328 flags=0x0008001040000205 */ int32 BP_PageRedPointMask;
  /* offset=0x032c flags=0x0008000000000205 */ FString BP_Sell_id;
  /* offset=0x0338 flags=0x0008001040000205 */ int32 BP_ChangeTabIcon;
  /* offset=0x033c flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_WardrobeItemInfo> BP_ARRAY_WardrobeItemList;
  /* offset=0x0348 flags=0x0008000000000005 */ struct FBP_STRUCT_WardrobeClickedItemData BP_STRUCT_WardrobeClickedItemData;
  /* offset=0x0378 flags=0x0008001040000205 */ int32 BP_ChangeTabType;
  /* offset=0x037c flags=0x0008001040000205 */ int32 BP_WardrobeGold;
  /* offset=0x0380 flags=0x0000001040000205 */ bool BP_Wardrobe_BG_showPutOn;
  /* offset=0x0384 flags=0x0008001040000205 */ int32 BP_CurTabType;
  /* offset=0x0388 flags=0x0008000000000005 */ struct FBP_STRUCT_WardrobeChangedItemData BP_STRUCT_WardrobeChangedItemData;
  /* offset=0x03b8 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventChangeWardrodbeTab();
  void EventHideWardrodbe();
  void EventWardrobeClickItem();
  void EventWardrobeClickJump();
  void EventWardrobeSell();
  void EventWardrobeUseItem();
  void UserConstructionScript();
};

class Abp_week_signup_C: public ALuaClassObj {
  /* offset=0x02c0 flags=0x0008009040080204 */ UScriptContextComponent* Generated_ScriptContext;
  /* offset=0x02c4 flags=0x0008001040000205 */ int32 BP_Week_SignUp_QQVip;
  /* offset=0x02c8 flags=0x0008001040000205 */ int32 BP_CurrentSignUpDayInWeek;
  /* offset=0x02cc flags=0x0008000000000005 */ struct FBP_STRUCT_WeekSignUpUI_Info BP_STRUCT_WeekSignUpUI_Info;
  /* offset=0x02fc flags=0x0008001040000205 */ int32 BP_Week_SignUp_Platform;
  /* offset=0x0300 flags=0x0000000000000205 */ TArray<struct FBP_STRUCT_WeekSignUpUI_Info> BP_ARRAY_Week_SignUp_Info;
  /* offset=0x030c flags=0x0008000000000205 */ FString BP_Week_SignUp_TimeString;
  /* offset=0x0318 flags=0x0008001040000205 */ int32 BP_Week_SignUp_Startup;
  /* offset=0x031c flags=0x0008001040000205 */ int32 BP_Request_SignUp_day;
  /* offset=0x0320 flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void EventFetchInfo();
  void EventWeekSignPlatform_FetchInfo();
  void EventWeekSignUpHide();
  void EventWeekSignUpInit();
  void EventWeekSignUpReq();
  void EventWeekSignUpReq_Push();
  void UserConstructionScript();
};

class UiTOPPrefs: public USaveGame {
  /* offset=0x001c flags=0x0018001040020201 */ bool bForceLogin;
  /* offset=0x001d flags=0x0018001040020201 */ bool bFirstLoginGuestAfterBindFB;
};

class Ainjection_C: public AActor {
  /* offset=0x02a8 flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x02ac flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

class Apills_C: public AActor {
  /* offset=0x02a8 flags=0x0008001440000204 */ UStaticMeshComponent* StaticMesh;
  /* offset=0x02ac flags=0x0008001440000204 */ USceneComponent* DefaultSceneRoot;

  void UserConstructionScript();
};

